/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/challenge_service.proto

var public_challenge_service_pb = require("../public/challenge_service_pb");
var common_gateway_base_pb = require("../common/gateway_base_pb");
var common_challenge_pb = require("../common/challenge_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var ChallengeService = (function () {
  function ChallengeService() {}
  ChallengeService.serviceName = "titanium.ChallengeService";
  return ChallengeService;
}());

ChallengeService.ChallengeFormMeta = {
  methodName: "ChallengeFormMeta",
  service: ChallengeService,
  requestStream: false,
  responseStream: false,
  requestType: common_challenge_pb.ChallengeFormMetaRequest,
  responseType: common_challenge_pb.ChallengeFormMetaResponse
};

ChallengeService.ChallengeCreate = {
  methodName: "ChallengeCreate",
  service: ChallengeService,
  requestStream: false,
  responseStream: false,
  requestType: common_challenge_pb.ChallengeCreateRequest,
  responseType: common_challenge_pb.ChallengeCreateResponse
};

ChallengeService.ChallengeFreezeStatus = {
  methodName: "ChallengeFreezeStatus",
  service: ChallengeService,
  requestStream: false,
  responseStream: false,
  requestType: common_challenge_pb.ChallengeFreezeStatusRequest,
  responseType: common_gateway_base_pb.StatusResponse
};

ChallengeService.GetChallengeDetails = {
  methodName: "GetChallengeDetails",
  service: ChallengeService,
  requestStream: false,
  responseStream: false,
  requestType: common_challenge_pb.GetChallengeDetailsRequest,
  responseType: common_challenge_pb.GetChallengeDetailsResponse
};

ChallengeService.GetChallengeAttachmentUploadUrl = {
  methodName: "GetChallengeAttachmentUploadUrl",
  service: ChallengeService,
  requestStream: false,
  responseStream: false,
  requestType: common_challenge_pb.GetAttachmentUploadUrlRequest,
  responseType: common_challenge_pb.GetAttachmentUploadUrlResponse
};

exports.ChallengeService = ChallengeService;

function ChallengeServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

ChallengeServiceClient.prototype.challengeFormMeta = function challengeFormMeta(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ChallengeService.ChallengeFormMeta, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ChallengeServiceClient.prototype.challengeCreate = function challengeCreate(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ChallengeService.ChallengeCreate, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ChallengeServiceClient.prototype.challengeFreezeStatus = function challengeFreezeStatus(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ChallengeService.ChallengeFreezeStatus, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ChallengeServiceClient.prototype.getChallengeDetails = function getChallengeDetails(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ChallengeService.GetChallengeDetails, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ChallengeServiceClient.prototype.getChallengeAttachmentUploadUrl = function getChallengeAttachmentUploadUrl(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ChallengeService.GetChallengeAttachmentUploadUrl, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.ChallengeServiceClient = ChallengeServiceClient;

