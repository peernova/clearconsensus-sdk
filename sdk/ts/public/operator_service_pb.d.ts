/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/operator_service.proto

import * as jspb from "google-protobuf";
import * as google_api_annotations_pb from "../google/api/annotations_pb";
import * as google_protobuf_empty_pb from "google-protobuf/google/protobuf/empty_pb";
import * as common_gateway_base_pb from "../common/gateway_base_pb";
import * as common_assets_pb from "../common/assets_pb";
import * as common_data_pb from "../common/data_pb";
import * as common_outliers_pb from "../common/outliers_pb";
import * as common_supported_fields_pb from "../common/supported_fields_pb";

export class AddAssetRequest extends jspb.Message {
  getAsset(): string;
  setAsset(value: string): void;

  getInstrumentType(): string;
  setInstrumentType(value: string): void;

  getService(): string;
  setService(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AddAssetRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AddAssetRequest): AddAssetRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AddAssetRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AddAssetRequest;
  static deserializeBinaryFromReader(message: AddAssetRequest, reader: jspb.BinaryReader): AddAssetRequest;
}

export namespace AddAssetRequest {
  export type AsObject = {
    asset: string,
    instrumentType: string,
    service: string,
  }
}

export class SupportedFieldsValues extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getField(): string;
  setField(value: string): void;

  clearValuesList(): void;
  getValuesList(): Array<string>;
  setValuesList(value: Array<string>): void;
  addValues(value: string, index?: number): string;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SupportedFieldsValues.AsObject;
  static toObject(includeInstance: boolean, msg: SupportedFieldsValues): SupportedFieldsValues.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SupportedFieldsValues, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SupportedFieldsValues;
  static deserializeBinaryFromReader(message: SupportedFieldsValues, reader: jspb.BinaryReader): SupportedFieldsValues;
}

export namespace SupportedFieldsValues {
  export type AsObject = {
    assetId: string,
    field: string,
    valuesList: Array<string>,
    traceName: string,
  }
}

export class OperatorOutliersRequest extends jspb.Message {
  getDate(): string;
  setDate(value: string): void;

  getFilter(): string;
  setFilter(value: string): void;

  hasOrderby(): boolean;
  clearOrderby(): void;
  getOrderby(): common_gateway_base_pb.OrderBy | undefined;
  setOrderby(value?: common_gateway_base_pb.OrderBy): void;

  hasLimit(): boolean;
  clearLimit(): void;
  getLimit(): common_gateway_base_pb.Limit | undefined;
  setLimit(value?: common_gateway_base_pb.Limit): void;

  getOffset(): number;
  setOffset(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OperatorOutliersRequest.AsObject;
  static toObject(includeInstance: boolean, msg: OperatorOutliersRequest): OperatorOutliersRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OperatorOutliersRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OperatorOutliersRequest;
  static deserializeBinaryFromReader(message: OperatorOutliersRequest, reader: jspb.BinaryReader): OperatorOutliersRequest;
}

export namespace OperatorOutliersRequest {
  export type AsObject = {
    date: string,
    filter: string,
    orderby?: common_gateway_base_pb.OrderBy.AsObject,
    limit?: common_gateway_base_pb.Limit.AsObject,
    offset: number,
  }
}

export class OperatorOutliersResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): OperatorOutliersResponseData | undefined;
  setData(value?: OperatorOutliersResponseData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): OperatorOutliersResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OperatorOutliersResponse.AsObject;
  static toObject(includeInstance: boolean, msg: OperatorOutliersResponse): OperatorOutliersResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OperatorOutliersResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OperatorOutliersResponse;
  static deserializeBinaryFromReader(message: OperatorOutliersResponse, reader: jspb.BinaryReader): OperatorOutliersResponse;
}

export namespace OperatorOutliersResponse {
  export type AsObject = {
    data?: OperatorOutliersResponseData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class OperatorOutliersResponseData extends jspb.Message {
  clearColumnsList(): void;
  getColumnsList(): Array<common_gateway_base_pb.ColumnInfo>;
  setColumnsList(value: Array<common_gateway_base_pb.ColumnInfo>): void;
  addColumns(value?: common_gateway_base_pb.ColumnInfo, index?: number): common_gateway_base_pb.ColumnInfo;

  clearRowsList(): void;
  getRowsList(): Array<common_gateway_base_pb.ValuesRow>;
  setRowsList(value: Array<common_gateway_base_pb.ValuesRow>): void;
  addRows(value?: common_gateway_base_pb.ValuesRow, index?: number): common_gateway_base_pb.ValuesRow;

  getTotalRows(): number;
  setTotalRows(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OperatorOutliersResponseData.AsObject;
  static toObject(includeInstance: boolean, msg: OperatorOutliersResponseData): OperatorOutliersResponseData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OperatorOutliersResponseData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OperatorOutliersResponseData;
  static deserializeBinaryFromReader(message: OperatorOutliersResponseData, reader: jspb.BinaryReader): OperatorOutliersResponseData;
}

export namespace OperatorOutliersResponseData {
  export type AsObject = {
    columnsList: Array<common_gateway_base_pb.ColumnInfo.AsObject>,
    rowsList: Array<common_gateway_base_pb.ValuesRow.AsObject>,
    totalRows: number,
  }
}

export class ClientName extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  getDisplayName(): string;
  setDisplayName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ClientName.AsObject;
  static toObject(includeInstance: boolean, msg: ClientName): ClientName.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ClientName, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ClientName;
  static deserializeBinaryFromReader(message: ClientName, reader: jspb.BinaryReader): ClientName;
}

export namespace ClientName {
  export type AsObject = {
    name: string,
    displayName: string,
  }
}

export class ListClientsResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): ListClientsResponseData | undefined;
  setData(value?: ListClientsResponseData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): ListClientsResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListClientsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListClientsResponse): ListClientsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListClientsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListClientsResponse;
  static deserializeBinaryFromReader(message: ListClientsResponse, reader: jspb.BinaryReader): ListClientsResponse;
}

export namespace ListClientsResponse {
  export type AsObject = {
    data?: ListClientsResponseData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class ListClientsResponseData extends jspb.Message {
  clearClientsList(): void;
  getClientsList(): Array<ClientName>;
  setClientsList(value: Array<ClientName>): void;
  addClients(value?: ClientName, index?: number): ClientName;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListClientsResponseData.AsObject;
  static toObject(includeInstance: boolean, msg: ListClientsResponseData): ListClientsResponseData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListClientsResponseData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListClientsResponseData;
  static deserializeBinaryFromReader(message: ListClientsResponseData, reader: jspb.BinaryReader): ListClientsResponseData;
}

export namespace ListClientsResponseData {
  export type AsObject = {
    clientsList: Array<ClientName.AsObject>,
  }
}

export class EvpStatusesRequest extends jspb.Message {
  hasSlicerequestdata(): boolean;
  clearSlicerequestdata(): void;
  getSlicerequestdata(): SliceRequestData | undefined;
  setSlicerequestdata(value?: SliceRequestData): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EvpStatusesRequest.AsObject;
  static toObject(includeInstance: boolean, msg: EvpStatusesRequest): EvpStatusesRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EvpStatusesRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EvpStatusesRequest;
  static deserializeBinaryFromReader(message: EvpStatusesRequest, reader: jspb.BinaryReader): EvpStatusesRequest;
}

export namespace EvpStatusesRequest {
  export type AsObject = {
    slicerequestdata?: SliceRequestData.AsObject,
  }
}

export class SliceRequestData extends jspb.Message {
  getOffset(): number;
  setOffset(value: number): void;

  getLimit(): number;
  setLimit(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SliceRequestData.AsObject;
  static toObject(includeInstance: boolean, msg: SliceRequestData): SliceRequestData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SliceRequestData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SliceRequestData;
  static deserializeBinaryFromReader(message: SliceRequestData, reader: jspb.BinaryReader): SliceRequestData;
}

export namespace SliceRequestData {
  export type AsObject = {
    offset: number,
    limit: number,
  }
}

export class EvpStatusesResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): EvpStatusesResponseData | undefined;
  setData(value?: EvpStatusesResponseData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): EvpStatusesResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EvpStatusesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: EvpStatusesResponse): EvpStatusesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EvpStatusesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EvpStatusesResponse;
  static deserializeBinaryFromReader(message: EvpStatusesResponse, reader: jspb.BinaryReader): EvpStatusesResponse;
}

export namespace EvpStatusesResponse {
  export type AsObject = {
    data?: EvpStatusesResponseData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class EvpStatusesResponseData extends jspb.Message {
  hasEvpstatuses(): boolean;
  clearEvpstatuses(): void;
  getEvpstatuses(): EvpStatuses | undefined;
  setEvpstatuses(value?: EvpStatuses): void;

  hasSlice(): boolean;
  clearSlice(): void;
  getSlice(): Slice | undefined;
  setSlice(value?: Slice): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EvpStatusesResponseData.AsObject;
  static toObject(includeInstance: boolean, msg: EvpStatusesResponseData): EvpStatusesResponseData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EvpStatusesResponseData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EvpStatusesResponseData;
  static deserializeBinaryFromReader(message: EvpStatusesResponseData, reader: jspb.BinaryReader): EvpStatusesResponseData;
}

export namespace EvpStatusesResponseData {
  export type AsObject = {
    evpstatuses?: EvpStatuses.AsObject,
    slice?: Slice.AsObject,
  }
}

export class EvpStatuses extends jspb.Message {
  clearEvpstatusesList(): void;
  getEvpstatusesList(): Array<EvpStatus>;
  setEvpstatusesList(value: Array<EvpStatus>): void;
  addEvpstatuses(value?: EvpStatus, index?: number): EvpStatus;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EvpStatuses.AsObject;
  static toObject(includeInstance: boolean, msg: EvpStatuses): EvpStatuses.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EvpStatuses, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EvpStatuses;
  static deserializeBinaryFromReader(message: EvpStatuses, reader: jspb.BinaryReader): EvpStatuses;
}

export namespace EvpStatuses {
  export type AsObject = {
    evpstatusesList: Array<EvpStatus.AsObject>,
  }
}

export class Slice extends jspb.Message {
  getTotal(): number;
  setTotal(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Slice.AsObject;
  static toObject(includeInstance: boolean, msg: Slice): Slice.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Slice, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Slice;
  static deserializeBinaryFromReader(message: Slice, reader: jspb.BinaryReader): Slice;
}

export namespace Slice {
  export type AsObject = {
    total: number,
  }
}

export class EvpStatus extends jspb.Message {
  getAsset(): string;
  setAsset(value: string): void;

  getInstrumenttype(): string;
  setInstrumenttype(value: string): void;

  getDate(): string;
  setDate(value: string): void;

  getSnaptime(): string;
  setSnaptime(value: string): void;

  getStatus(): string;
  setStatus(value: string): void;

  getDealer(): string;
  setDealer(value: string): void;

  getUserEmail(): string;
  setUserEmail(value: string): void;

  getAdded(): string;
  setAdded(value: string): void;

  getS3path(): string;
  setS3path(value: string): void;

  getLogpath(): string;
  setLogpath(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EvpStatus.AsObject;
  static toObject(includeInstance: boolean, msg: EvpStatus): EvpStatus.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EvpStatus, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EvpStatus;
  static deserializeBinaryFromReader(message: EvpStatus, reader: jspb.BinaryReader): EvpStatus;
}

export namespace EvpStatus {
  export type AsObject = {
    asset: string,
    instrumenttype: string,
    date: string,
    snaptime: string,
    status: string,
    dealer: string,
    userEmail: string,
    added: string,
    s3path: string,
    logpath: string,
  }
}

export class UploadEVPRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getDate(): string;
  setDate(value: string): void;

  getFileName(): string;
  setFileName(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UploadEVPRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UploadEVPRequest): UploadEVPRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UploadEVPRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UploadEVPRequest;
  static deserializeBinaryFromReader(message: UploadEVPRequest, reader: jspb.BinaryReader): UploadEVPRequest;
}

export namespace UploadEVPRequest {
  export type AsObject = {
    assetId: string,
    date: string,
    fileName: string,
    traceName: string,
  }
}

export class UploadDTCCRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getDate(): string;
  setDate(value: string): void;

  getFileName(): string;
  setFileName(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UploadDTCCRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UploadDTCCRequest): UploadDTCCRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UploadDTCCRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UploadDTCCRequest;
  static deserializeBinaryFromReader(message: UploadDTCCRequest, reader: jspb.BinaryReader): UploadDTCCRequest;
}

export namespace UploadDTCCRequest {
  export type AsObject = {
    assetId: string,
    date: string,
    fileName: string,
    traceName: string,
  }
}

