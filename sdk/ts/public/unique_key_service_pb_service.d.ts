/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/unique_key_service.proto

import * as public_unique_key_service_pb from "../public/unique_key_service_pb";
import * as common_gateway_base_pb from "../common/gateway_base_pb";
import * as common_unique_key_pb from "../common/unique_key_pb";
import {grpc} from "@improbable-eng/grpc-web";

type UniqueKeyServiceAddUniqueKey = {
  readonly methodName: string;
  readonly service: typeof UniqueKeyService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_unique_key_pb.UniqueKeyDefinition;
  readonly responseType: typeof common_gateway_base_pb.AcknowledgeResponse;
};

type UniqueKeyServiceGetUniqueKey = {
  readonly methodName: string;
  readonly service: typeof UniqueKeyService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_gateway_base_pb.GetDefinition;
  readonly responseType: typeof common_unique_key_pb.UniqueKeyDefinitionResponse;
};

type UniqueKeyServiceListUniqueKeys = {
  readonly methodName: string;
  readonly service: typeof UniqueKeyService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_gateway_base_pb.ListRequest;
  readonly responseType: typeof common_unique_key_pb.ListUniqueKeysResponse;
};

type UniqueKeyServiceListUniqueKeyVersions = {
  readonly methodName: string;
  readonly service: typeof UniqueKeyService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_gateway_base_pb.GetDefinition;
  readonly responseType: typeof common_gateway_base_pb.ListVersionResponse;
};

type UniqueKeyServiceGetUniqueKeyVersion = {
  readonly methodName: string;
  readonly service: typeof UniqueKeyService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_gateway_base_pb.VersionRequest;
  readonly responseType: typeof common_unique_key_pb.UniqueKeyDefinitionResponse;
};

type UniqueKeyServiceEnableUniqueKey = {
  readonly methodName: string;
  readonly service: typeof UniqueKeyService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_gateway_base_pb.EnableDisableRequest;
  readonly responseType: typeof common_gateway_base_pb.AcknowledgeResponse;
};

type UniqueKeyServiceDisableUniqueKey = {
  readonly methodName: string;
  readonly service: typeof UniqueKeyService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_gateway_base_pb.EnableDisableRequest;
  readonly responseType: typeof common_gateway_base_pb.AcknowledgeResponse;
};

export class UniqueKeyService {
  static readonly serviceName: string;
  static readonly AddUniqueKey: UniqueKeyServiceAddUniqueKey;
  static readonly GetUniqueKey: UniqueKeyServiceGetUniqueKey;
  static readonly ListUniqueKeys: UniqueKeyServiceListUniqueKeys;
  static readonly ListUniqueKeyVersions: UniqueKeyServiceListUniqueKeyVersions;
  static readonly GetUniqueKeyVersion: UniqueKeyServiceGetUniqueKeyVersion;
  static readonly EnableUniqueKey: UniqueKeyServiceEnableUniqueKey;
  static readonly DisableUniqueKey: UniqueKeyServiceDisableUniqueKey;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class UniqueKeyServiceClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  addUniqueKey(
    requestMessage: common_unique_key_pb.UniqueKeyDefinition,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.AcknowledgeResponse|null) => void
  ): UnaryResponse;
  addUniqueKey(
    requestMessage: common_unique_key_pb.UniqueKeyDefinition,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.AcknowledgeResponse|null) => void
  ): UnaryResponse;
  getUniqueKey(
    requestMessage: common_gateway_base_pb.GetDefinition,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_unique_key_pb.UniqueKeyDefinitionResponse|null) => void
  ): UnaryResponse;
  getUniqueKey(
    requestMessage: common_gateway_base_pb.GetDefinition,
    callback: (error: ServiceError|null, responseMessage: common_unique_key_pb.UniqueKeyDefinitionResponse|null) => void
  ): UnaryResponse;
  listUniqueKeys(
    requestMessage: common_gateway_base_pb.ListRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_unique_key_pb.ListUniqueKeysResponse|null) => void
  ): UnaryResponse;
  listUniqueKeys(
    requestMessage: common_gateway_base_pb.ListRequest,
    callback: (error: ServiceError|null, responseMessage: common_unique_key_pb.ListUniqueKeysResponse|null) => void
  ): UnaryResponse;
  listUniqueKeyVersions(
    requestMessage: common_gateway_base_pb.GetDefinition,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.ListVersionResponse|null) => void
  ): UnaryResponse;
  listUniqueKeyVersions(
    requestMessage: common_gateway_base_pb.GetDefinition,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.ListVersionResponse|null) => void
  ): UnaryResponse;
  getUniqueKeyVersion(
    requestMessage: common_gateway_base_pb.VersionRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_unique_key_pb.UniqueKeyDefinitionResponse|null) => void
  ): UnaryResponse;
  getUniqueKeyVersion(
    requestMessage: common_gateway_base_pb.VersionRequest,
    callback: (error: ServiceError|null, responseMessage: common_unique_key_pb.UniqueKeyDefinitionResponse|null) => void
  ): UnaryResponse;
  enableUniqueKey(
    requestMessage: common_gateway_base_pb.EnableDisableRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.AcknowledgeResponse|null) => void
  ): UnaryResponse;
  enableUniqueKey(
    requestMessage: common_gateway_base_pb.EnableDisableRequest,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.AcknowledgeResponse|null) => void
  ): UnaryResponse;
  disableUniqueKey(
    requestMessage: common_gateway_base_pb.EnableDisableRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.AcknowledgeResponse|null) => void
  ): UnaryResponse;
  disableUniqueKey(
    requestMessage: common_gateway_base_pb.EnableDisableRequest,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.AcknowledgeResponse|null) => void
  ): UnaryResponse;
}

