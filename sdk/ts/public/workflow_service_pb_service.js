/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/workflow_service.proto

var public_workflow_service_pb = require("../public/workflow_service_pb");
var common_gateway_base_pb = require("../common/gateway_base_pb");
var common_workflow_pb = require("../common/workflow_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var WorkflowService = (function () {
  function WorkflowService() {}
  WorkflowService.serviceName = "titanium.WorkflowService";
  return WorkflowService;
}());

WorkflowService.RunWorkflow = {
  methodName: "RunWorkflow",
  service: WorkflowService,
  requestStream: false,
  responseStream: false,
  requestType: common_workflow_pb.RunWorkflowRequest,
  responseType: common_workflow_pb.RunWorkflowResponse
};

WorkflowService.ReprocessWorkflow = {
  methodName: "ReprocessWorkflow",
  service: WorkflowService,
  requestStream: false,
  responseStream: false,
  requestType: common_workflow_pb.ReprocessWorkflowRequest,
  responseType: common_workflow_pb.RunWorkflowResponse
};

WorkflowService.AddWorkflow = {
  methodName: "AddWorkflow",
  service: WorkflowService,
  requestStream: false,
  responseStream: false,
  requestType: common_workflow_pb.AddWorkflowDefinitionRequest,
  responseType: common_gateway_base_pb.AcknowledgeResponse
};

WorkflowService.GetWorkflow = {
  methodName: "GetWorkflow",
  service: WorkflowService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.GetDefinition,
  responseType: common_workflow_pb.WorkflowDefinitionResponse
};

WorkflowService.ListWorkflows = {
  methodName: "ListWorkflows",
  service: WorkflowService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.ListRequest,
  responseType: common_workflow_pb.WorkflowList
};

WorkflowService.EnableWorkflow = {
  methodName: "EnableWorkflow",
  service: WorkflowService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.EnableDisableRequest,
  responseType: common_gateway_base_pb.AcknowledgeResponse
};

WorkflowService.DisableWorkflow = {
  methodName: "DisableWorkflow",
  service: WorkflowService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.EnableDisableRequest,
  responseType: common_gateway_base_pb.AcknowledgeResponse
};

WorkflowService.ListWorkflowActions = {
  methodName: "ListWorkflowActions",
  service: WorkflowService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.ListRequest,
  responseType: common_workflow_pb.WorkflowList
};

WorkflowService.GetWorkflowAction = {
  methodName: "GetWorkflowAction",
  service: WorkflowService,
  requestStream: false,
  responseStream: false,
  requestType: common_workflow_pb.GetActionRequest,
  responseType: common_workflow_pb.GetWorkflowActionResponse
};

exports.WorkflowService = WorkflowService;

function WorkflowServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

WorkflowServiceClient.prototype.runWorkflow = function runWorkflow(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(WorkflowService.RunWorkflow, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WorkflowServiceClient.prototype.reprocessWorkflow = function reprocessWorkflow(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(WorkflowService.ReprocessWorkflow, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WorkflowServiceClient.prototype.addWorkflow = function addWorkflow(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(WorkflowService.AddWorkflow, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WorkflowServiceClient.prototype.getWorkflow = function getWorkflow(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(WorkflowService.GetWorkflow, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WorkflowServiceClient.prototype.listWorkflows = function listWorkflows(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(WorkflowService.ListWorkflows, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WorkflowServiceClient.prototype.enableWorkflow = function enableWorkflow(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(WorkflowService.EnableWorkflow, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WorkflowServiceClient.prototype.disableWorkflow = function disableWorkflow(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(WorkflowService.DisableWorkflow, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WorkflowServiceClient.prototype.listWorkflowActions = function listWorkflowActions(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(WorkflowService.ListWorkflowActions, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WorkflowServiceClient.prototype.getWorkflowAction = function getWorkflowAction(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(WorkflowService.GetWorkflowAction, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.WorkflowServiceClient = WorkflowServiceClient;

