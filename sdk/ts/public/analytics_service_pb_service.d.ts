/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/analytics_service.proto

import * as public_analytics_service_pb from "../public/analytics_service_pb";
import * as google_protobuf_empty_pb from "google-protobuf/google/protobuf/empty_pb";
import * as common_analytics_pb from "../common/analytics_pb";
import {grpc} from "@improbable-eng/grpc-web";

type AnalyticsControllerFindDataQualityErrors = {
  readonly methodName: string;
  readonly service: typeof AnalyticsController;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_analytics_pb.GenericChartMetadataDataQuality;
  readonly responseType: typeof common_analytics_pb.GenericChartMetadataDataQualityResponse;
};

type AnalyticsControllerGetAllDataQualityErrors = {
  readonly methodName: string;
  readonly service: typeof AnalyticsController;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof google_protobuf_empty_pb.Empty;
  readonly responseType: typeof common_analytics_pb.GenericChartMetadataDataQualityResponse;
};

type AnalyticsControllerFindConsensusAnalytics = {
  readonly methodName: string;
  readonly service: typeof AnalyticsController;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_analytics_pb.GenericChartMetadataDataQuality;
  readonly responseType: typeof common_analytics_pb.GenericChartMetadataDataQualityResponse;
};

type AnalyticsControllerGetAllConsensusAnalytics = {
  readonly methodName: string;
  readonly service: typeof AnalyticsController;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof google_protobuf_empty_pb.Empty;
  readonly responseType: typeof common_analytics_pb.GenericChartMetadataDataQualityResponse;
};

type AnalyticsControllerGetPredefinedFilter = {
  readonly methodName: string;
  readonly service: typeof AnalyticsController;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_analytics_pb.GetPredefinedFiltersRequest;
  readonly responseType: typeof common_analytics_pb.GetPredefinedFiltersResponse;
};

type AnalyticsControllerGetHistogram = {
  readonly methodName: string;
  readonly service: typeof AnalyticsController;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_analytics_pb.HistogramRequest;
  readonly responseType: typeof common_analytics_pb.HistogramResponse;
};

export class AnalyticsController {
  static readonly serviceName: string;
  static readonly FindDataQualityErrors: AnalyticsControllerFindDataQualityErrors;
  static readonly GetAllDataQualityErrors: AnalyticsControllerGetAllDataQualityErrors;
  static readonly FindConsensusAnalytics: AnalyticsControllerFindConsensusAnalytics;
  static readonly GetAllConsensusAnalytics: AnalyticsControllerGetAllConsensusAnalytics;
  static readonly GetPredefinedFilter: AnalyticsControllerGetPredefinedFilter;
  static readonly GetHistogram: AnalyticsControllerGetHistogram;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class AnalyticsControllerClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  findDataQualityErrors(
    requestMessage: common_analytics_pb.GenericChartMetadataDataQuality,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_analytics_pb.GenericChartMetadataDataQualityResponse|null) => void
  ): UnaryResponse;
  findDataQualityErrors(
    requestMessage: common_analytics_pb.GenericChartMetadataDataQuality,
    callback: (error: ServiceError|null, responseMessage: common_analytics_pb.GenericChartMetadataDataQualityResponse|null) => void
  ): UnaryResponse;
  getAllDataQualityErrors(
    requestMessage: google_protobuf_empty_pb.Empty,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_analytics_pb.GenericChartMetadataDataQualityResponse|null) => void
  ): UnaryResponse;
  getAllDataQualityErrors(
    requestMessage: google_protobuf_empty_pb.Empty,
    callback: (error: ServiceError|null, responseMessage: common_analytics_pb.GenericChartMetadataDataQualityResponse|null) => void
  ): UnaryResponse;
  findConsensusAnalytics(
    requestMessage: common_analytics_pb.GenericChartMetadataDataQuality,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_analytics_pb.GenericChartMetadataDataQualityResponse|null) => void
  ): UnaryResponse;
  findConsensusAnalytics(
    requestMessage: common_analytics_pb.GenericChartMetadataDataQuality,
    callback: (error: ServiceError|null, responseMessage: common_analytics_pb.GenericChartMetadataDataQualityResponse|null) => void
  ): UnaryResponse;
  getAllConsensusAnalytics(
    requestMessage: google_protobuf_empty_pb.Empty,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_analytics_pb.GenericChartMetadataDataQualityResponse|null) => void
  ): UnaryResponse;
  getAllConsensusAnalytics(
    requestMessage: google_protobuf_empty_pb.Empty,
    callback: (error: ServiceError|null, responseMessage: common_analytics_pb.GenericChartMetadataDataQualityResponse|null) => void
  ): UnaryResponse;
  getPredefinedFilter(
    requestMessage: common_analytics_pb.GetPredefinedFiltersRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_analytics_pb.GetPredefinedFiltersResponse|null) => void
  ): UnaryResponse;
  getPredefinedFilter(
    requestMessage: common_analytics_pb.GetPredefinedFiltersRequest,
    callback: (error: ServiceError|null, responseMessage: common_analytics_pb.GetPredefinedFiltersResponse|null) => void
  ): UnaryResponse;
  getHistogram(
    requestMessage: common_analytics_pb.HistogramRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_analytics_pb.HistogramResponse|null) => void
  ): UnaryResponse;
  getHistogram(
    requestMessage: common_analytics_pb.HistogramRequest,
    callback: (error: ServiceError|null, responseMessage: common_analytics_pb.HistogramResponse|null) => void
  ): UnaryResponse;
}

