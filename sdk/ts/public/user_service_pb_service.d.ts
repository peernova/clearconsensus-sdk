/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/user_service.proto

import * as public_user_service_pb from "../public/user_service_pb";
import * as common_user_controller_pb from "../common/user_controller_pb";
import {grpc} from "@improbable-eng/grpc-web";

type UserServiceGetUser = {
  readonly methodName: string;
  readonly service: typeof UserService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_user_controller_pb.GetUserRequest;
  readonly responseType: typeof common_user_controller_pb.UserResponse;
};

type UserServiceGetUserPermissions = {
  readonly methodName: string;
  readonly service: typeof UserService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_user_controller_pb.GetUserPermissionsRequest;
  readonly responseType: typeof common_user_controller_pb.UserPermissionsResponse;
};

type UserServiceGetUserNotifications = {
  readonly methodName: string;
  readonly service: typeof UserService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_user_controller_pb.GetUserNotificationRequest;
  readonly responseType: typeof common_user_controller_pb.UserNotificationsResponse;
};

type UserServiceGetUserNotificationsByMarket = {
  readonly methodName: string;
  readonly service: typeof UserService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_user_controller_pb.GetUserNotificationByMarketRequest;
  readonly responseType: typeof common_user_controller_pb.UserNotificationsResponse;
};

type UserServiceUpdateUserNotification = {
  readonly methodName: string;
  readonly service: typeof UserService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_user_controller_pb.UserNotificationRequest;
  readonly responseType: typeof common_user_controller_pb.UserNotificationResponse;
};

type UserServiceAddUserNotification = {
  readonly methodName: string;
  readonly service: typeof UserService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_user_controller_pb.UserNotificationRequest;
  readonly responseType: typeof common_user_controller_pb.UserNotificationResponse;
};

type UserServiceDeleteUserNotification = {
  readonly methodName: string;
  readonly service: typeof UserService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_user_controller_pb.UserNotificationRequest;
  readonly responseType: typeof common_user_controller_pb.UserNotificationResponse;
};

type UserServiceAddUser = {
  readonly methodName: string;
  readonly service: typeof UserService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_user_controller_pb.UserRequest;
  readonly responseType: typeof common_user_controller_pb.UserResponse;
};

type UserServiceUpdateUser = {
  readonly methodName: string;
  readonly service: typeof UserService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_user_controller_pb.UserRequest;
  readonly responseType: typeof common_user_controller_pb.UserResponse;
};

type UserServiceDeleteUser = {
  readonly methodName: string;
  readonly service: typeof UserService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_user_controller_pb.UserRequest;
  readonly responseType: typeof common_user_controller_pb.UserResponse;
};

export class UserService {
  static readonly serviceName: string;
  static readonly GetUser: UserServiceGetUser;
  static readonly GetUserPermissions: UserServiceGetUserPermissions;
  static readonly GetUserNotifications: UserServiceGetUserNotifications;
  static readonly GetUserNotificationsByMarket: UserServiceGetUserNotificationsByMarket;
  static readonly UpdateUserNotification: UserServiceUpdateUserNotification;
  static readonly AddUserNotification: UserServiceAddUserNotification;
  static readonly DeleteUserNotification: UserServiceDeleteUserNotification;
  static readonly AddUser: UserServiceAddUser;
  static readonly UpdateUser: UserServiceUpdateUser;
  static readonly DeleteUser: UserServiceDeleteUser;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class UserServiceClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  getUser(
    requestMessage: common_user_controller_pb.GetUserRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_user_controller_pb.UserResponse|null) => void
  ): UnaryResponse;
  getUser(
    requestMessage: common_user_controller_pb.GetUserRequest,
    callback: (error: ServiceError|null, responseMessage: common_user_controller_pb.UserResponse|null) => void
  ): UnaryResponse;
  getUserPermissions(
    requestMessage: common_user_controller_pb.GetUserPermissionsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_user_controller_pb.UserPermissionsResponse|null) => void
  ): UnaryResponse;
  getUserPermissions(
    requestMessage: common_user_controller_pb.GetUserPermissionsRequest,
    callback: (error: ServiceError|null, responseMessage: common_user_controller_pb.UserPermissionsResponse|null) => void
  ): UnaryResponse;
  getUserNotifications(
    requestMessage: common_user_controller_pb.GetUserNotificationRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_user_controller_pb.UserNotificationsResponse|null) => void
  ): UnaryResponse;
  getUserNotifications(
    requestMessage: common_user_controller_pb.GetUserNotificationRequest,
    callback: (error: ServiceError|null, responseMessage: common_user_controller_pb.UserNotificationsResponse|null) => void
  ): UnaryResponse;
  getUserNotificationsByMarket(
    requestMessage: common_user_controller_pb.GetUserNotificationByMarketRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_user_controller_pb.UserNotificationsResponse|null) => void
  ): UnaryResponse;
  getUserNotificationsByMarket(
    requestMessage: common_user_controller_pb.GetUserNotificationByMarketRequest,
    callback: (error: ServiceError|null, responseMessage: common_user_controller_pb.UserNotificationsResponse|null) => void
  ): UnaryResponse;
  updateUserNotification(
    requestMessage: common_user_controller_pb.UserNotificationRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_user_controller_pb.UserNotificationResponse|null) => void
  ): UnaryResponse;
  updateUserNotification(
    requestMessage: common_user_controller_pb.UserNotificationRequest,
    callback: (error: ServiceError|null, responseMessage: common_user_controller_pb.UserNotificationResponse|null) => void
  ): UnaryResponse;
  addUserNotification(
    requestMessage: common_user_controller_pb.UserNotificationRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_user_controller_pb.UserNotificationResponse|null) => void
  ): UnaryResponse;
  addUserNotification(
    requestMessage: common_user_controller_pb.UserNotificationRequest,
    callback: (error: ServiceError|null, responseMessage: common_user_controller_pb.UserNotificationResponse|null) => void
  ): UnaryResponse;
  deleteUserNotification(
    requestMessage: common_user_controller_pb.UserNotificationRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_user_controller_pb.UserNotificationResponse|null) => void
  ): UnaryResponse;
  deleteUserNotification(
    requestMessage: common_user_controller_pb.UserNotificationRequest,
    callback: (error: ServiceError|null, responseMessage: common_user_controller_pb.UserNotificationResponse|null) => void
  ): UnaryResponse;
  addUser(
    requestMessage: common_user_controller_pb.UserRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_user_controller_pb.UserResponse|null) => void
  ): UnaryResponse;
  addUser(
    requestMessage: common_user_controller_pb.UserRequest,
    callback: (error: ServiceError|null, responseMessage: common_user_controller_pb.UserResponse|null) => void
  ): UnaryResponse;
  updateUser(
    requestMessage: common_user_controller_pb.UserRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_user_controller_pb.UserResponse|null) => void
  ): UnaryResponse;
  updateUser(
    requestMessage: common_user_controller_pb.UserRequest,
    callback: (error: ServiceError|null, responseMessage: common_user_controller_pb.UserResponse|null) => void
  ): UnaryResponse;
  deleteUser(
    requestMessage: common_user_controller_pb.UserRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_user_controller_pb.UserResponse|null) => void
  ): UnaryResponse;
  deleteUser(
    requestMessage: common_user_controller_pb.UserRequest,
    callback: (error: ServiceError|null, responseMessage: common_user_controller_pb.UserResponse|null) => void
  ): UnaryResponse;
}

