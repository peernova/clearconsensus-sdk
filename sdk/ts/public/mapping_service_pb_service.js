/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/mapping_service.proto

var public_mapping_service_pb = require("../public/mapping_service_pb");
var common_gateway_base_pb = require("../common/gateway_base_pb");
var common_mapper_pb = require("../common/mapper_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var MappingService = (function () {
  function MappingService() {}
  MappingService.serviceName = "titanium.MappingService";
  return MappingService;
}());

MappingService.AddMappingRule = {
  methodName: "AddMappingRule",
  service: MappingService,
  requestStream: false,
  responseStream: false,
  requestType: common_mapper_pb.MappingRuleDefinition,
  responseType: common_mapper_pb.DescriptorPairBasedAcknowledgeResponse
};

MappingService.GetMappingRule = {
  methodName: "GetMappingRule",
  service: MappingService,
  requestStream: false,
  responseStream: false,
  requestType: common_mapper_pb.DescriptorPairBasedGetDefinition,
  responseType: common_mapper_pb.MappingRuleResponse
};

MappingService.EnableMappingRule = {
  methodName: "EnableMappingRule",
  service: MappingService,
  requestStream: false,
  responseStream: false,
  requestType: common_mapper_pb.DescriptorPairBasedGetDefinition,
  responseType: common_mapper_pb.DescriptorPairBasedAcknowledgeResponse
};

MappingService.DisableMappingRule = {
  methodName: "DisableMappingRule",
  service: MappingService,
  requestStream: false,
  responseStream: false,
  requestType: common_mapper_pb.DescriptorPairBasedGetDefinition,
  responseType: common_mapper_pb.DescriptorPairBasedAcknowledgeResponse
};

MappingService.ListMappingRules = {
  methodName: "ListMappingRules",
  service: MappingService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.ListRequest,
  responseType: common_mapper_pb.MappingRuleList
};

MappingService.ListMappingRuleVersions = {
  methodName: "ListMappingRuleVersions",
  service: MappingService,
  requestStream: false,
  responseStream: false,
  requestType: common_mapper_pb.DescriptorPairBasedGetDefinition,
  responseType: common_gateway_base_pb.ListVersionResponse
};

MappingService.GetMappingRuleVersion = {
  methodName: "GetMappingRuleVersion",
  service: MappingService,
  requestStream: false,
  responseStream: false,
  requestType: common_mapper_pb.DescriptorPairBasedVersionRequest,
  responseType: common_mapper_pb.MappingRuleResponse
};

exports.MappingService = MappingService;

function MappingServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

MappingServiceClient.prototype.addMappingRule = function addMappingRule(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(MappingService.AddMappingRule, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

MappingServiceClient.prototype.getMappingRule = function getMappingRule(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(MappingService.GetMappingRule, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

MappingServiceClient.prototype.enableMappingRule = function enableMappingRule(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(MappingService.EnableMappingRule, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

MappingServiceClient.prototype.disableMappingRule = function disableMappingRule(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(MappingService.DisableMappingRule, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

MappingServiceClient.prototype.listMappingRules = function listMappingRules(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(MappingService.ListMappingRules, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

MappingServiceClient.prototype.listMappingRuleVersions = function listMappingRuleVersions(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(MappingService.ListMappingRuleVersions, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

MappingServiceClient.prototype.getMappingRuleVersion = function getMappingRuleVersion(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(MappingService.GetMappingRuleVersion, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.MappingServiceClient = MappingServiceClient;

