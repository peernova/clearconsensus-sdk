/* eslint-disable */
/*Generated by GenDocu.com*/
// package: com.peernova.titanium.casbin.management.grpc.service
// file: public/usermanagement_policy_service.proto

var public_usermanagement_policy_service_pb = require("../public/usermanagement_policy_service_pb");
var common_usermanagement_policy_pb = require("../common/usermanagement_policy_pb");
var common_usermanagement_fe_specific_pb = require("../common/usermanagement_fe_specific_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var PolicyService = (function () {
  function PolicyService() {}
  PolicyService.serviceName = "com.peernova.titanium.casbin.management.grpc.service.PolicyService";
  return PolicyService;
}());

PolicyService.create = {
  methodName: "create",
  service: PolicyService,
  requestStream: false,
  responseStream: false,
  requestType: common_usermanagement_policy_pb.Policies,
  responseType: common_usermanagement_fe_specific_pb.OperationSuccess
};

PolicyService.getPolicies = {
  methodName: "getPolicies",
  service: PolicyService,
  requestStream: false,
  responseStream: false,
  requestType: common_usermanagement_policy_pb.PolicyType,
  responseType: common_usermanagement_policy_pb.PoliciesResponse
};

PolicyService.removePolicy = {
  methodName: "removePolicy",
  service: PolicyService,
  requestStream: false,
  responseStream: false,
  requestType: common_usermanagement_policy_pb.PolicyDto,
  responseType: common_usermanagement_fe_specific_pb.OperationSuccess
};

PolicyService.checkPolicy = {
  methodName: "checkPolicy",
  service: PolicyService,
  requestStream: false,
  responseStream: false,
  requestType: common_usermanagement_policy_pb.PolicyDto,
  responseType: common_usermanagement_fe_specific_pb.OperationSuccess
};

PolicyService.getAssets = {
  methodName: "getAssets",
  service: PolicyService,
  requestStream: false,
  responseStream: false,
  requestType: common_usermanagement_policy_pb.UsernamePermissionRequest,
  responseType: common_usermanagement_policy_pb.PoliciesListResponse
};

PolicyService.getApis = {
  methodName: "getApis",
  service: PolicyService,
  requestStream: false,
  responseStream: false,
  requestType: common_usermanagement_policy_pb.UsernamePermissionRequest,
  responseType: common_usermanagement_policy_pb.PoliciesListResponse
};

PolicyService.getAddons = {
  methodName: "getAddons",
  service: PolicyService,
  requestStream: false,
  responseStream: false,
  requestType: common_usermanagement_policy_pb.UsernamePermissionRequest,
  responseType: common_usermanagement_policy_pb.PoliciesListResponse
};

exports.PolicyService = PolicyService;

function PolicyServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

PolicyServiceClient.prototype.create = function create(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(PolicyService.create, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

PolicyServiceClient.prototype.getPolicies = function getPolicies(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(PolicyService.getPolicies, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

PolicyServiceClient.prototype.removePolicy = function removePolicy(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(PolicyService.removePolicy, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

PolicyServiceClient.prototype.checkPolicy = function checkPolicy(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(PolicyService.checkPolicy, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

PolicyServiceClient.prototype.getAssets = function getAssets(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(PolicyService.getAssets, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

PolicyServiceClient.prototype.getApis = function getApis(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(PolicyService.getApis, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

PolicyServiceClient.prototype.getAddons = function getAddons(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(PolicyService.getAddons, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.PolicyServiceClient = PolicyServiceClient;

