/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/data_service.proto

import * as public_data_service_pb from "../public/data_service_pb";
import * as common_gateway_base_pb from "../common/gateway_base_pb";
import * as common_data_pb from "../common/data_pb";
import {grpc} from "@improbable-eng/grpc-web";

type DataServiceSubmitted = {
  readonly methodName: string;
  readonly service: typeof DataService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_data_pb.SubmittedRequest;
  readonly responseType: typeof common_data_pb.SubmittedResponse;
};

type DataServiceExport = {
  readonly methodName: string;
  readonly service: typeof DataService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_data_pb.ExportRequest;
  readonly responseType: typeof common_data_pb.ExportResponse;
};

type DataServiceUploadURL = {
  readonly methodName: string;
  readonly service: typeof DataService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_data_pb.UploadURLRequest;
  readonly responseType: typeof common_gateway_base_pb.UploadURLResponse;
};

type DataServiceAuthorizeUpload = {
  readonly methodName: string;
  readonly service: typeof DataService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_data_pb.UploadURLRequest;
  readonly responseType: typeof common_data_pb.UploadAuthorizationResponse;
};

type DataServiceNotifyUpload = {
  readonly methodName: string;
  readonly service: typeof DataService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_data_pb.UploadNotifyRequest;
  readonly responseType: typeof common_gateway_base_pb.MessageResponse;
};

export class DataService {
  static readonly serviceName: string;
  static readonly Submitted: DataServiceSubmitted;
  static readonly Export: DataServiceExport;
  static readonly UploadURL: DataServiceUploadURL;
  static readonly AuthorizeUpload: DataServiceAuthorizeUpload;
  static readonly NotifyUpload: DataServiceNotifyUpload;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class DataServiceClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  submitted(
    requestMessage: common_data_pb.SubmittedRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_data_pb.SubmittedResponse|null) => void
  ): UnaryResponse;
  submitted(
    requestMessage: common_data_pb.SubmittedRequest,
    callback: (error: ServiceError|null, responseMessage: common_data_pb.SubmittedResponse|null) => void
  ): UnaryResponse;
  export(
    requestMessage: common_data_pb.ExportRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_data_pb.ExportResponse|null) => void
  ): UnaryResponse;
  export(
    requestMessage: common_data_pb.ExportRequest,
    callback: (error: ServiceError|null, responseMessage: common_data_pb.ExportResponse|null) => void
  ): UnaryResponse;
  uploadURL(
    requestMessage: common_data_pb.UploadURLRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.UploadURLResponse|null) => void
  ): UnaryResponse;
  uploadURL(
    requestMessage: common_data_pb.UploadURLRequest,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.UploadURLResponse|null) => void
  ): UnaryResponse;
  authorizeUpload(
    requestMessage: common_data_pb.UploadURLRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_data_pb.UploadAuthorizationResponse|null) => void
  ): UnaryResponse;
  authorizeUpload(
    requestMessage: common_data_pb.UploadURLRequest,
    callback: (error: ServiceError|null, responseMessage: common_data_pb.UploadAuthorizationResponse|null) => void
  ): UnaryResponse;
  notifyUpload(
    requestMessage: common_data_pb.UploadNotifyRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.MessageResponse|null) => void
  ): UnaryResponse;
  notifyUpload(
    requestMessage: common_data_pb.UploadNotifyRequest,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.MessageResponse|null) => void
  ): UnaryResponse;
}

