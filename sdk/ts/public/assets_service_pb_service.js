/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/assets_service.proto

var public_assets_service_pb = require("../public/assets_service_pb");
var google_protobuf_empty_pb = require("google-protobuf/google/protobuf/empty_pb");
var common_assets_pb = require("../common/assets_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var AssetsService = (function () {
  function AssetsService() {}
  AssetsService.serviceName = "titanium.AssetsService";
  return AssetsService;
}());

AssetsService.RecentAssets = {
  methodName: "RecentAssets",
  service: AssetsService,
  requestStream: false,
  responseStream: false,
  requestType: common_assets_pb.RecentAssetsRequest,
  responseType: common_assets_pb.RecentAssetsResponse
};

AssetsService.AssetsList = {
  methodName: "AssetsList",
  service: AssetsService,
  requestStream: false,
  responseStream: false,
  requestType: common_assets_pb.AssetsListRequest,
  responseType: common_assets_pb.AssetsListResponse
};

AssetsService.Assets = {
  methodName: "Assets",
  service: AssetsService,
  requestStream: false,
  responseStream: false,
  requestType: common_assets_pb.AssetsRequest,
  responseType: common_assets_pb.AssetsResponse
};

AssetsService.SupportedAssets = {
  methodName: "SupportedAssets",
  service: AssetsService,
  requestStream: false,
  responseStream: false,
  requestType: google_protobuf_empty_pb.Empty,
  responseType: common_assets_pb.AssetsListResponse
};

exports.AssetsService = AssetsService;

function AssetsServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

AssetsServiceClient.prototype.recentAssets = function recentAssets(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(AssetsService.RecentAssets, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

AssetsServiceClient.prototype.assetsList = function assetsList(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(AssetsService.AssetsList, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

AssetsServiceClient.prototype.assets = function assets(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(AssetsService.Assets, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

AssetsServiceClient.prototype.supportedAssets = function supportedAssets(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(AssetsService.SupportedAssets, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.AssetsServiceClient = AssetsServiceClient;

