/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/workflow_service.proto

import * as public_workflow_service_pb from "../public/workflow_service_pb";
import * as common_gateway_base_pb from "../common/gateway_base_pb";
import * as common_workflow_pb from "../common/workflow_pb";
import {grpc} from "@improbable-eng/grpc-web";

type WorkflowServiceRunWorkflow = {
  readonly methodName: string;
  readonly service: typeof WorkflowService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_workflow_pb.RunWorkflowRequest;
  readonly responseType: typeof common_workflow_pb.RunWorkflowResponse;
};

type WorkflowServiceReprocessWorkflow = {
  readonly methodName: string;
  readonly service: typeof WorkflowService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_workflow_pb.ReprocessWorkflowRequest;
  readonly responseType: typeof common_workflow_pb.RunWorkflowResponse;
};

type WorkflowServiceAddWorkflow = {
  readonly methodName: string;
  readonly service: typeof WorkflowService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_workflow_pb.AddWorkflowDefinitionRequest;
  readonly responseType: typeof common_gateway_base_pb.AcknowledgeResponse;
};

type WorkflowServiceGetWorkflow = {
  readonly methodName: string;
  readonly service: typeof WorkflowService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_gateway_base_pb.GetDefinition;
  readonly responseType: typeof common_workflow_pb.WorkflowDefinitionResponse;
};

type WorkflowServiceListWorkflows = {
  readonly methodName: string;
  readonly service: typeof WorkflowService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_gateway_base_pb.ListRequest;
  readonly responseType: typeof common_workflow_pb.WorkflowList;
};

type WorkflowServiceEnableWorkflow = {
  readonly methodName: string;
  readonly service: typeof WorkflowService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_gateway_base_pb.EnableDisableRequest;
  readonly responseType: typeof common_gateway_base_pb.AcknowledgeResponse;
};

type WorkflowServiceDisableWorkflow = {
  readonly methodName: string;
  readonly service: typeof WorkflowService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_gateway_base_pb.EnableDisableRequest;
  readonly responseType: typeof common_gateway_base_pb.AcknowledgeResponse;
};

type WorkflowServiceListWorkflowActions = {
  readonly methodName: string;
  readonly service: typeof WorkflowService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_gateway_base_pb.ListRequest;
  readonly responseType: typeof common_workflow_pb.WorkflowList;
};

type WorkflowServiceGetWorkflowAction = {
  readonly methodName: string;
  readonly service: typeof WorkflowService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_workflow_pb.GetActionRequest;
  readonly responseType: typeof common_workflow_pb.GetWorkflowActionResponse;
};

export class WorkflowService {
  static readonly serviceName: string;
  static readonly RunWorkflow: WorkflowServiceRunWorkflow;
  static readonly ReprocessWorkflow: WorkflowServiceReprocessWorkflow;
  static readonly AddWorkflow: WorkflowServiceAddWorkflow;
  static readonly GetWorkflow: WorkflowServiceGetWorkflow;
  static readonly ListWorkflows: WorkflowServiceListWorkflows;
  static readonly EnableWorkflow: WorkflowServiceEnableWorkflow;
  static readonly DisableWorkflow: WorkflowServiceDisableWorkflow;
  static readonly ListWorkflowActions: WorkflowServiceListWorkflowActions;
  static readonly GetWorkflowAction: WorkflowServiceGetWorkflowAction;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class WorkflowServiceClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  runWorkflow(
    requestMessage: common_workflow_pb.RunWorkflowRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_workflow_pb.RunWorkflowResponse|null) => void
  ): UnaryResponse;
  runWorkflow(
    requestMessage: common_workflow_pb.RunWorkflowRequest,
    callback: (error: ServiceError|null, responseMessage: common_workflow_pb.RunWorkflowResponse|null) => void
  ): UnaryResponse;
  reprocessWorkflow(
    requestMessage: common_workflow_pb.ReprocessWorkflowRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_workflow_pb.RunWorkflowResponse|null) => void
  ): UnaryResponse;
  reprocessWorkflow(
    requestMessage: common_workflow_pb.ReprocessWorkflowRequest,
    callback: (error: ServiceError|null, responseMessage: common_workflow_pb.RunWorkflowResponse|null) => void
  ): UnaryResponse;
  addWorkflow(
    requestMessage: common_workflow_pb.AddWorkflowDefinitionRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.AcknowledgeResponse|null) => void
  ): UnaryResponse;
  addWorkflow(
    requestMessage: common_workflow_pb.AddWorkflowDefinitionRequest,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.AcknowledgeResponse|null) => void
  ): UnaryResponse;
  getWorkflow(
    requestMessage: common_gateway_base_pb.GetDefinition,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_workflow_pb.WorkflowDefinitionResponse|null) => void
  ): UnaryResponse;
  getWorkflow(
    requestMessage: common_gateway_base_pb.GetDefinition,
    callback: (error: ServiceError|null, responseMessage: common_workflow_pb.WorkflowDefinitionResponse|null) => void
  ): UnaryResponse;
  listWorkflows(
    requestMessage: common_gateway_base_pb.ListRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_workflow_pb.WorkflowList|null) => void
  ): UnaryResponse;
  listWorkflows(
    requestMessage: common_gateway_base_pb.ListRequest,
    callback: (error: ServiceError|null, responseMessage: common_workflow_pb.WorkflowList|null) => void
  ): UnaryResponse;
  enableWorkflow(
    requestMessage: common_gateway_base_pb.EnableDisableRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.AcknowledgeResponse|null) => void
  ): UnaryResponse;
  enableWorkflow(
    requestMessage: common_gateway_base_pb.EnableDisableRequest,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.AcknowledgeResponse|null) => void
  ): UnaryResponse;
  disableWorkflow(
    requestMessage: common_gateway_base_pb.EnableDisableRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.AcknowledgeResponse|null) => void
  ): UnaryResponse;
  disableWorkflow(
    requestMessage: common_gateway_base_pb.EnableDisableRequest,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.AcknowledgeResponse|null) => void
  ): UnaryResponse;
  listWorkflowActions(
    requestMessage: common_gateway_base_pb.ListRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_workflow_pb.WorkflowList|null) => void
  ): UnaryResponse;
  listWorkflowActions(
    requestMessage: common_gateway_base_pb.ListRequest,
    callback: (error: ServiceError|null, responseMessage: common_workflow_pb.WorkflowList|null) => void
  ): UnaryResponse;
  getWorkflowAction(
    requestMessage: common_workflow_pb.GetActionRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_workflow_pb.GetWorkflowActionResponse|null) => void
  ): UnaryResponse;
  getWorkflowAction(
    requestMessage: common_workflow_pb.GetActionRequest,
    callback: (error: ServiceError|null, responseMessage: common_workflow_pb.GetWorkflowActionResponse|null) => void
  ): UnaryResponse;
}

