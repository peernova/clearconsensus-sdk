/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/unique_key_service.proto

var public_unique_key_service_pb = require("../public/unique_key_service_pb");
var common_gateway_base_pb = require("../common/gateway_base_pb");
var common_unique_key_pb = require("../common/unique_key_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var UniqueKeyService = (function () {
  function UniqueKeyService() {}
  UniqueKeyService.serviceName = "titanium.UniqueKeyService";
  return UniqueKeyService;
}());

UniqueKeyService.AddUniqueKey = {
  methodName: "AddUniqueKey",
  service: UniqueKeyService,
  requestStream: false,
  responseStream: false,
  requestType: common_unique_key_pb.UniqueKeyDefinition,
  responseType: common_gateway_base_pb.AcknowledgeResponse
};

UniqueKeyService.GetUniqueKey = {
  methodName: "GetUniqueKey",
  service: UniqueKeyService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.GetDefinition,
  responseType: common_unique_key_pb.UniqueKeyDefinitionResponse
};

UniqueKeyService.ListUniqueKeys = {
  methodName: "ListUniqueKeys",
  service: UniqueKeyService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.ListRequest,
  responseType: common_unique_key_pb.ListUniqueKeysResponse
};

UniqueKeyService.ListUniqueKeyVersions = {
  methodName: "ListUniqueKeyVersions",
  service: UniqueKeyService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.GetDefinition,
  responseType: common_gateway_base_pb.ListVersionResponse
};

UniqueKeyService.GetUniqueKeyVersion = {
  methodName: "GetUniqueKeyVersion",
  service: UniqueKeyService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.VersionRequest,
  responseType: common_unique_key_pb.UniqueKeyDefinitionResponse
};

exports.UniqueKeyService = UniqueKeyService;

function UniqueKeyServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

UniqueKeyServiceClient.prototype.addUniqueKey = function addUniqueKey(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UniqueKeyService.AddUniqueKey, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UniqueKeyServiceClient.prototype.getUniqueKey = function getUniqueKey(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UniqueKeyService.GetUniqueKey, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UniqueKeyServiceClient.prototype.listUniqueKeys = function listUniqueKeys(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UniqueKeyService.ListUniqueKeys, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UniqueKeyServiceClient.prototype.listUniqueKeyVersions = function listUniqueKeyVersions(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UniqueKeyService.ListUniqueKeyVersions, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

UniqueKeyServiceClient.prototype.getUniqueKeyVersion = function getUniqueKeyVersion(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(UniqueKeyService.GetUniqueKeyVersion, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.UniqueKeyServiceClient = UniqueKeyServiceClient;

