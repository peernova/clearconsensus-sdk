/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/custom_function_service.proto

var public_custom_function_service_pb = require("../public/custom_function_service_pb");
var common_gateway_base_pb = require("../common/gateway_base_pb");
var common_custom_function_pb = require("../common/custom_function_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var CustomFunctionService = (function () {
  function CustomFunctionService() {}
  CustomFunctionService.serviceName = "titanium.CustomFunctionService";
  return CustomFunctionService;
}());

CustomFunctionService.AddCustomFunction = {
  methodName: "AddCustomFunction",
  service: CustomFunctionService,
  requestStream: false,
  responseStream: false,
  requestType: common_custom_function_pb.CustomFunction,
  responseType: common_gateway_base_pb.AcknowledgeResponse
};

CustomFunctionService.GetCustomFunction = {
  methodName: "GetCustomFunction",
  service: CustomFunctionService,
  requestStream: false,
  responseStream: false,
  requestType: common_custom_function_pb.CustomFunctionGetDefinition,
  responseType: common_custom_function_pb.CustomFunctionDefinitionResponse
};

CustomFunctionService.ListCustomFunctions = {
  methodName: "ListCustomFunctions",
  service: CustomFunctionService,
  requestStream: false,
  responseStream: false,
  requestType: common_custom_function_pb.ListCustomFunctionRequest,
  responseType: common_custom_function_pb.ListCustomFunctionResponse
};

CustomFunctionService.ListCustomFunctionVersions = {
  methodName: "ListCustomFunctionVersions",
  service: CustomFunctionService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.GetDefinition,
  responseType: common_gateway_base_pb.ListVersionResponse
};

exports.CustomFunctionService = CustomFunctionService;

function CustomFunctionServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

CustomFunctionServiceClient.prototype.addCustomFunction = function addCustomFunction(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(CustomFunctionService.AddCustomFunction, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

CustomFunctionServiceClient.prototype.getCustomFunction = function getCustomFunction(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(CustomFunctionService.GetCustomFunction, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

CustomFunctionServiceClient.prototype.listCustomFunctions = function listCustomFunctions(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(CustomFunctionService.ListCustomFunctions, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

CustomFunctionServiceClient.prototype.listCustomFunctionVersions = function listCustomFunctionVersions(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(CustomFunctionService.ListCustomFunctionVersions, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.CustomFunctionServiceClient = CustomFunctionServiceClient;

