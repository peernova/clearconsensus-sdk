/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/chart_service.proto

import * as jspb from "google-protobuf";
import * as google_api_annotations_pb from "../google/api/annotations_pb";
import * as google_protobuf_struct_pb from "google-protobuf/google/protobuf/struct_pb";
import * as common_gateway_base_pb from "../common/gateway_base_pb";

export class GetChartDataRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getChartId(): string;
  setChartId(value: string): void;

  getSliceId(): string;
  setSliceId(value: string): void;

  hasParameters(): boolean;
  clearParameters(): void;
  getParameters(): google_protobuf_struct_pb.Struct | undefined;
  setParameters(value?: google_protobuf_struct_pb.Struct): void;

  hasFilterPack(): boolean;
  clearFilterPack(): void;
  getFilterPack(): common_gateway_base_pb.FilterPack | undefined;
  setFilterPack(value?: common_gateway_base_pb.FilterPack): void;

  getInvalidateCache(): boolean;
  setInvalidateCache(value: boolean): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetChartDataRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetChartDataRequest): GetChartDataRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetChartDataRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetChartDataRequest;
  static deserializeBinaryFromReader(message: GetChartDataRequest, reader: jspb.BinaryReader): GetChartDataRequest;
}

export namespace GetChartDataRequest {
  export type AsObject = {
    assetId: string,
    chartId: string,
    sliceId: string,
    parameters?: google_protobuf_struct_pb.Struct.AsObject,
    filterPack?: common_gateway_base_pb.FilterPack.AsObject,
    invalidateCache: boolean,
    traceName: string,
  }
}

export class GetChartDataResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): ChartDataResponse | undefined;
  setData(value?: ChartDataResponse): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): GetChartDataResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetChartDataResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetChartDataResponse): GetChartDataResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetChartDataResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetChartDataResponse;
  static deserializeBinaryFromReader(message: GetChartDataResponse, reader: jspb.BinaryReader): GetChartDataResponse;
}

export namespace GetChartDataResponse {
  export type AsObject = {
    data?: ChartDataResponse.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class ChartDataResponse extends jspb.Message {
  getChartType(): string;
  setChartType(value: string): void;

  getChartId(): string;
  setChartId(value: string): void;

  clearSeriesList(): void;
  getSeriesList(): Array<Series>;
  setSeriesList(value: Array<Series>): void;
  addSeries(value?: Series, index?: number): Series;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChartDataResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ChartDataResponse): ChartDataResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ChartDataResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChartDataResponse;
  static deserializeBinaryFromReader(message: ChartDataResponse, reader: jspb.BinaryReader): ChartDataResponse;
}

export namespace ChartDataResponse {
  export type AsObject = {
    chartType: string,
    chartId: string,
    seriesList: Array<Series.AsObject>,
  }
}

export class Series extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  getContentType(): string;
  setContentType(value: string): void;

  hasMetadata(): boolean;
  clearMetadata(): void;
  getMetadata(): Metadata | undefined;
  setMetadata(value?: Metadata): void;

  clearDataList(): void;
  getDataList(): Array<google_protobuf_struct_pb.Struct>;
  setDataList(value: Array<google_protobuf_struct_pb.Struct>): void;
  addData(value?: google_protobuf_struct_pb.Struct, index?: number): google_protobuf_struct_pb.Struct;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Series.AsObject;
  static toObject(includeInstance: boolean, msg: Series): Series.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Series, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Series;
  static deserializeBinaryFromReader(message: Series, reader: jspb.BinaryReader): Series;
}

export namespace Series {
  export type AsObject = {
    name: string,
    contentType: string,
    metadata?: Metadata.AsObject,
    dataList: Array<google_protobuf_struct_pb.Struct.AsObject>,
  }
}

export class Metadata extends jspb.Message {
  clearColumnNamesList(): void;
  getColumnNamesList(): Array<string>;
  setColumnNamesList(value: Array<string>): void;
  addColumnNames(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Metadata.AsObject;
  static toObject(includeInstance: boolean, msg: Metadata): Metadata.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Metadata, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Metadata;
  static deserializeBinaryFromReader(message: Metadata, reader: jspb.BinaryReader): Metadata;
}

export namespace Metadata {
  export type AsObject = {
    columnNamesList: Array<string>,
  }
}

export class Table extends jspb.Message {
  clearColumnsList(): void;
  getColumnsList(): Array<Table.Column>;
  setColumnsList(value: Array<Table.Column>): void;
  addColumns(value?: Table.Column, index?: number): Table.Column;

  clearRowsList(): void;
  getRowsList(): Array<Table.Row>;
  setRowsList(value: Array<Table.Row>): void;
  addRows(value?: Table.Row, index?: number): Table.Row;

  getTotalRows(): number;
  setTotalRows(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Table.AsObject;
  static toObject(includeInstance: boolean, msg: Table): Table.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Table, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Table;
  static deserializeBinaryFromReader(message: Table, reader: jspb.BinaryReader): Table;
}

export namespace Table {
  export type AsObject = {
    columnsList: Array<Table.Column.AsObject>,
    rowsList: Array<Table.Row.AsObject>,
    totalRows: number,
  }

  export class Column extends jspb.Message {
    getColumnName(): string;
    setColumnName(value: string): void;

    getRawColumnName(): string;
    setRawColumnName(value: string): void;

    getColumnType(): string;
    setColumnType(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Column.AsObject;
    static toObject(includeInstance: boolean, msg: Column): Column.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Column, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Column;
    static deserializeBinaryFromReader(message: Column, reader: jspb.BinaryReader): Column;
  }

  export namespace Column {
    export type AsObject = {
      columnName: string,
      rawColumnName: string,
      columnType: string,
    }
  }

  export class Row extends jspb.Message {
    clearValuesList(): void;
    getValuesList(): Array<google_protobuf_struct_pb.Value>;
    setValuesList(value: Array<google_protobuf_struct_pb.Value>): void;
    addValues(value?: google_protobuf_struct_pb.Value, index?: number): google_protobuf_struct_pb.Value;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Row.AsObject;
    static toObject(includeInstance: boolean, msg: Row): Row.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Row, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Row;
    static deserializeBinaryFromReader(message: Row, reader: jspb.BinaryReader): Row;
  }

  export namespace Row {
    export type AsObject = {
      valuesList: Array<google_protobuf_struct_pb.Value.AsObject>,
    }
  }
}

export class GetTableResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): Table | undefined;
  setData(value?: Table): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): GetTableResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetTableResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetTableResponse): GetTableResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetTableResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetTableResponse;
  static deserializeBinaryFromReader(message: GetTableResponse, reader: jspb.BinaryReader): GetTableResponse;
}

export namespace GetTableResponse {
  export type AsObject = {
    data?: Table.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

