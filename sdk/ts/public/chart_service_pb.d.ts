/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/chart_service.proto

import * as jspb from "google-protobuf";
import * as google_api_annotations_pb from "../google/api/annotations_pb";
import * as google_protobuf_struct_pb from "google-protobuf/google/protobuf/struct_pb";
import * as common_gateway_base_pb from "../common/gateway_base_pb";

export class GetChartDataRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getChartId(): string;
  setChartId(value: string): void;

  getSliceId(): string;
  setSliceId(value: string): void;

  hasParameters(): boolean;
  clearParameters(): void;
  getParameters(): google_protobuf_struct_pb.Struct | undefined;
  setParameters(value?: google_protobuf_struct_pb.Struct): void;

  hasFilterPack(): boolean;
  clearFilterPack(): void;
  getFilterPack(): common_gateway_base_pb.FilterPack | undefined;
  setFilterPack(value?: common_gateway_base_pb.FilterPack): void;

  getInvalidateCache(): boolean;
  setInvalidateCache(value: boolean): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetChartDataRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetChartDataRequest): GetChartDataRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetChartDataRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetChartDataRequest;
  static deserializeBinaryFromReader(message: GetChartDataRequest, reader: jspb.BinaryReader): GetChartDataRequest;
}

export namespace GetChartDataRequest {
  export type AsObject = {
    assetId: string,
    chartId: string,
    sliceId: string,
    parameters?: google_protobuf_struct_pb.Struct.AsObject,
    filterPack?: common_gateway_base_pb.FilterPack.AsObject,
    invalidateCache: boolean,
    traceName: string,
  }
}

export class GetChartDataResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): ChartDataResponse | undefined;
  setData(value?: ChartDataResponse): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): GetChartDataResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetChartDataResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetChartDataResponse): GetChartDataResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetChartDataResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetChartDataResponse;
  static deserializeBinaryFromReader(message: GetChartDataResponse, reader: jspb.BinaryReader): GetChartDataResponse;
}

export namespace GetChartDataResponse {
  export type AsObject = {
    data?: ChartDataResponse.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class ChartDataResponse extends jspb.Message {
  getChartType(): string;
  setChartType(value: string): void;

  getChartId(): string;
  setChartId(value: string): void;

  clearSeriesList(): void;
  getSeriesList(): Array<Series>;
  setSeriesList(value: Array<Series>): void;
  addSeries(value?: Series, index?: number): Series;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChartDataResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ChartDataResponse): ChartDataResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ChartDataResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChartDataResponse;
  static deserializeBinaryFromReader(message: ChartDataResponse, reader: jspb.BinaryReader): ChartDataResponse;
}

export namespace ChartDataResponse {
  export type AsObject = {
    chartType: string,
    chartId: string,
    seriesList: Array<Series.AsObject>,
  }
}

export class Series extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  getContentType(): string;
  setContentType(value: string): void;

  hasMetadata(): boolean;
  clearMetadata(): void;
  getMetadata(): Metadata | undefined;
  setMetadata(value?: Metadata): void;

  clearDataList(): void;
  getDataList(): Array<google_protobuf_struct_pb.Struct>;
  setDataList(value: Array<google_protobuf_struct_pb.Struct>): void;
  addData(value?: google_protobuf_struct_pb.Struct, index?: number): google_protobuf_struct_pb.Struct;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Series.AsObject;
  static toObject(includeInstance: boolean, msg: Series): Series.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Series, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Series;
  static deserializeBinaryFromReader(message: Series, reader: jspb.BinaryReader): Series;
}

export namespace Series {
  export type AsObject = {
    name: string,
    contentType: string,
    metadata?: Metadata.AsObject,
    dataList: Array<google_protobuf_struct_pb.Struct.AsObject>,
  }
}

export class Metadata extends jspb.Message {
  clearColumnNamesList(): void;
  getColumnNamesList(): Array<string>;
  setColumnNamesList(value: Array<string>): void;
  addColumnNames(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Metadata.AsObject;
  static toObject(includeInstance: boolean, msg: Metadata): Metadata.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Metadata, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Metadata;
  static deserializeBinaryFromReader(message: Metadata, reader: jspb.BinaryReader): Metadata;
}

export namespace Metadata {
  export type AsObject = {
    columnNamesList: Array<string>,
  }
}

