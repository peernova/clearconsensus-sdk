/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/dq_errors_service.proto

import * as public_dq_errors_service_pb from "../public/dq_errors_service_pb";
import * as common_dq_errors_pb from "../common/dq_errors_pb";
import {grpc} from "@improbable-eng/grpc-web";

type DataQualityServiceGetDataQualityErrors = {
  readonly methodName: string;
  readonly service: typeof DataQualityService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_dq_errors_pb.GetDataQualityErrorsRequest;
  readonly responseType: typeof common_dq_errors_pb.GetDataQualityErrorsResponse;
};

type DataQualityServiceDQErrors = {
  readonly methodName: string;
  readonly service: typeof DataQualityService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_dq_errors_pb.DQErrorsRequest;
  readonly responseType: typeof common_dq_errors_pb.DQErrorsResponse;
};

export class DataQualityService {
  static readonly serviceName: string;
  static readonly GetDataQualityErrors: DataQualityServiceGetDataQualityErrors;
  static readonly DQErrors: DataQualityServiceDQErrors;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class DataQualityServiceClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  getDataQualityErrors(
    requestMessage: common_dq_errors_pb.GetDataQualityErrorsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_dq_errors_pb.GetDataQualityErrorsResponse|null) => void
  ): UnaryResponse;
  getDataQualityErrors(
    requestMessage: common_dq_errors_pb.GetDataQualityErrorsRequest,
    callback: (error: ServiceError|null, responseMessage: common_dq_errors_pb.GetDataQualityErrorsResponse|null) => void
  ): UnaryResponse;
  dQErrors(
    requestMessage: common_dq_errors_pb.DQErrorsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_dq_errors_pb.DQErrorsResponse|null) => void
  ): UnaryResponse;
  dQErrors(
    requestMessage: common_dq_errors_pb.DQErrorsRequest,
    callback: (error: ServiceError|null, responseMessage: common_dq_errors_pb.DQErrorsResponse|null) => void
  ): UnaryResponse;
}

