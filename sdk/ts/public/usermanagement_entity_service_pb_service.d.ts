/* eslint-disable */
/*Generated by GenDocu.com*/
// package: com.peernova.titanium.casbin.management.grpc.service
// file: public/usermanagement_entity_service.proto

import * as public_usermanagement_entity_service_pb from "../public/usermanagement_entity_service_pb";
import * as common_usermanagement_entity_pb from "../common/usermanagement_entity_pb";
import * as common_usermanagement_fe_specific_pb from "../common/usermanagement_fe_specific_pb";
import {grpc} from "@improbable-eng/grpc-web";

type EntityServicecreate = {
  readonly methodName: string;
  readonly service: typeof EntityService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_usermanagement_entity_pb.EntityDto;
  readonly responseType: typeof common_usermanagement_entity_pb.EntityResponse;
};

type EntityServiceupdate = {
  readonly methodName: string;
  readonly service: typeof EntityService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_usermanagement_entity_pb.EntityDto;
  readonly responseType: typeof common_usermanagement_entity_pb.EntityResponse;
};

type EntityServicegetById = {
  readonly methodName: string;
  readonly service: typeof EntityService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_usermanagement_entity_pb.EntityId;
  readonly responseType: typeof common_usermanagement_entity_pb.EntityResponse;
};

type EntityServicegetAllEnabledOnly = {
  readonly methodName: string;
  readonly service: typeof EntityService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_usermanagement_fe_specific_pb.NoParameters;
  readonly responseType: typeof common_usermanagement_entity_pb.EntitiesResponse;
};

type EntityServicefind = {
  readonly methodName: string;
  readonly service: typeof EntityService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_usermanagement_fe_specific_pb.SearchCriteria;
  readonly responseType: typeof common_usermanagement_fe_specific_pb.TableResponse;
};

export class EntityService {
  static readonly serviceName: string;
  static readonly create: EntityServicecreate;
  static readonly update: EntityServiceupdate;
  static readonly getById: EntityServicegetById;
  static readonly getAllEnabledOnly: EntityServicegetAllEnabledOnly;
  static readonly find: EntityServicefind;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class EntityServiceClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  create(
    requestMessage: common_usermanagement_entity_pb.EntityDto,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_usermanagement_entity_pb.EntityResponse|null) => void
  ): UnaryResponse;
  create(
    requestMessage: common_usermanagement_entity_pb.EntityDto,
    callback: (error: ServiceError|null, responseMessage: common_usermanagement_entity_pb.EntityResponse|null) => void
  ): UnaryResponse;
  update(
    requestMessage: common_usermanagement_entity_pb.EntityDto,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_usermanagement_entity_pb.EntityResponse|null) => void
  ): UnaryResponse;
  update(
    requestMessage: common_usermanagement_entity_pb.EntityDto,
    callback: (error: ServiceError|null, responseMessage: common_usermanagement_entity_pb.EntityResponse|null) => void
  ): UnaryResponse;
  getById(
    requestMessage: common_usermanagement_entity_pb.EntityId,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_usermanagement_entity_pb.EntityResponse|null) => void
  ): UnaryResponse;
  getById(
    requestMessage: common_usermanagement_entity_pb.EntityId,
    callback: (error: ServiceError|null, responseMessage: common_usermanagement_entity_pb.EntityResponse|null) => void
  ): UnaryResponse;
  getAllEnabledOnly(
    requestMessage: common_usermanagement_fe_specific_pb.NoParameters,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_usermanagement_entity_pb.EntitiesResponse|null) => void
  ): UnaryResponse;
  getAllEnabledOnly(
    requestMessage: common_usermanagement_fe_specific_pb.NoParameters,
    callback: (error: ServiceError|null, responseMessage: common_usermanagement_entity_pb.EntitiesResponse|null) => void
  ): UnaryResponse;
  find(
    requestMessage: common_usermanagement_fe_specific_pb.SearchCriteria,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_usermanagement_fe_specific_pb.TableResponse|null) => void
  ): UnaryResponse;
  find(
    requestMessage: common_usermanagement_fe_specific_pb.SearchCriteria,
    callback: (error: ServiceError|null, responseMessage: common_usermanagement_fe_specific_pb.TableResponse|null) => void
  ): UnaryResponse;
}

