/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/file_service.proto

import * as public_file_service_pb from "../public/file_service_pb";
import * as google_protobuf_empty_pb from "google-protobuf/google/protobuf/empty_pb";
import * as common_gateway_base_pb from "../common/gateway_base_pb";
import * as common_file_service_pb from "../common/file_service_pb";
import {grpc} from "@improbable-eng/grpc-web";

type FileServiceGetFilePreview = {
  readonly methodName: string;
  readonly service: typeof FileService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_file_service_pb.FileIdentifier;
  readonly responseType: typeof common_file_service_pb.FilePreview;
};

type FileServiceListFiles = {
  readonly methodName: string;
  readonly service: typeof FileService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_gateway_base_pb.ListRequest;
  readonly responseType: typeof common_file_service_pb.FileList;
};

type FileServiceSetFileDelimiter = {
  readonly methodName: string;
  readonly service: typeof FileService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_file_service_pb.SetFileDelimiterRequest;
  readonly responseType: typeof google_protobuf_empty_pb.Empty;
};

type FileServiceGetFileDelimiter = {
  readonly methodName: string;
  readonly service: typeof FileService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_file_service_pb.FileIdentifier;
  readonly responseType: typeof common_file_service_pb.FileDelimiterSetting;
};

type FileServiceSetFileDescriptor = {
  readonly methodName: string;
  readonly service: typeof FileService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_file_service_pb.SetFileDescriptorRequest;
  readonly responseType: typeof google_protobuf_empty_pb.Empty;
};

type FileServiceGetFileDescriptor = {
  readonly methodName: string;
  readonly service: typeof FileService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_file_service_pb.FileIdentifier;
  readonly responseType: typeof common_file_service_pb.FileDescriptorSetting;
};

type FileServiceFileSubmission = {
  readonly methodName: string;
  readonly service: typeof FileService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_file_service_pb.FileSubmissionRequest;
  readonly responseType: typeof common_gateway_base_pb.MessageResponse;
};

type FileServiceFileHistory = {
  readonly methodName: string;
  readonly service: typeof FileService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_file_service_pb.FileHistoryRequest;
  readonly responseType: typeof common_file_service_pb.FileHistoryResponse;
};

type FileServiceGetFileExportUrl = {
  readonly methodName: string;
  readonly service: typeof FileService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_file_service_pb.GetFileExportUrlRequest;
  readonly responseType: typeof common_file_service_pb.GetFileExportUrlResponse;
};

export class FileService {
  static readonly serviceName: string;
  static readonly GetFilePreview: FileServiceGetFilePreview;
  static readonly ListFiles: FileServiceListFiles;
  static readonly SetFileDelimiter: FileServiceSetFileDelimiter;
  static readonly GetFileDelimiter: FileServiceGetFileDelimiter;
  static readonly SetFileDescriptor: FileServiceSetFileDescriptor;
  static readonly GetFileDescriptor: FileServiceGetFileDescriptor;
  static readonly FileSubmission: FileServiceFileSubmission;
  static readonly FileHistory: FileServiceFileHistory;
  static readonly GetFileExportUrl: FileServiceGetFileExportUrl;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class FileServiceClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  getFilePreview(
    requestMessage: common_file_service_pb.FileIdentifier,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_file_service_pb.FilePreview|null) => void
  ): UnaryResponse;
  getFilePreview(
    requestMessage: common_file_service_pb.FileIdentifier,
    callback: (error: ServiceError|null, responseMessage: common_file_service_pb.FilePreview|null) => void
  ): UnaryResponse;
  listFiles(
    requestMessage: common_gateway_base_pb.ListRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_file_service_pb.FileList|null) => void
  ): UnaryResponse;
  listFiles(
    requestMessage: common_gateway_base_pb.ListRequest,
    callback: (error: ServiceError|null, responseMessage: common_file_service_pb.FileList|null) => void
  ): UnaryResponse;
  setFileDelimiter(
    requestMessage: common_file_service_pb.SetFileDelimiterRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: google_protobuf_empty_pb.Empty|null) => void
  ): UnaryResponse;
  setFileDelimiter(
    requestMessage: common_file_service_pb.SetFileDelimiterRequest,
    callback: (error: ServiceError|null, responseMessage: google_protobuf_empty_pb.Empty|null) => void
  ): UnaryResponse;
  getFileDelimiter(
    requestMessage: common_file_service_pb.FileIdentifier,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_file_service_pb.FileDelimiterSetting|null) => void
  ): UnaryResponse;
  getFileDelimiter(
    requestMessage: common_file_service_pb.FileIdentifier,
    callback: (error: ServiceError|null, responseMessage: common_file_service_pb.FileDelimiterSetting|null) => void
  ): UnaryResponse;
  setFileDescriptor(
    requestMessage: common_file_service_pb.SetFileDescriptorRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: google_protobuf_empty_pb.Empty|null) => void
  ): UnaryResponse;
  setFileDescriptor(
    requestMessage: common_file_service_pb.SetFileDescriptorRequest,
    callback: (error: ServiceError|null, responseMessage: google_protobuf_empty_pb.Empty|null) => void
  ): UnaryResponse;
  getFileDescriptor(
    requestMessage: common_file_service_pb.FileIdentifier,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_file_service_pb.FileDescriptorSetting|null) => void
  ): UnaryResponse;
  getFileDescriptor(
    requestMessage: common_file_service_pb.FileIdentifier,
    callback: (error: ServiceError|null, responseMessage: common_file_service_pb.FileDescriptorSetting|null) => void
  ): UnaryResponse;
  fileSubmission(
    requestMessage: common_file_service_pb.FileSubmissionRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.MessageResponse|null) => void
  ): UnaryResponse;
  fileSubmission(
    requestMessage: common_file_service_pb.FileSubmissionRequest,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.MessageResponse|null) => void
  ): UnaryResponse;
  fileHistory(
    requestMessage: common_file_service_pb.FileHistoryRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_file_service_pb.FileHistoryResponse|null) => void
  ): UnaryResponse;
  fileHistory(
    requestMessage: common_file_service_pb.FileHistoryRequest,
    callback: (error: ServiceError|null, responseMessage: common_file_service_pb.FileHistoryResponse|null) => void
  ): UnaryResponse;
  getFileExportUrl(
    requestMessage: common_file_service_pb.GetFileExportUrlRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_file_service_pb.GetFileExportUrlResponse|null) => void
  ): UnaryResponse;
  getFileExportUrl(
    requestMessage: common_file_service_pb.GetFileExportUrlRequest,
    callback: (error: ServiceError|null, responseMessage: common_file_service_pb.GetFileExportUrlResponse|null) => void
  ): UnaryResponse;
}

