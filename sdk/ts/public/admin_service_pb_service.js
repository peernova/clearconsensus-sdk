/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/admin_service.proto

var public_admin_service_pb = require("../public/admin_service_pb");
var common_gateway_base_pb = require("../common/gateway_base_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var AdminService = (function () {
  function AdminService() {}
  AdminService.serviceName = "titanium.AdminService";
  return AdminService;
}());

AdminService.OnBoard = {
  methodName: "OnBoard",
  service: AdminService,
  requestStream: false,
  responseStream: false,
  requestType: public_admin_service_pb.OnBoardRequest,
  responseType: common_gateway_base_pb.MessageResponse
};

AdminService.RunCalculator = {
  methodName: "RunCalculator",
  service: AdminService,
  requestStream: false,
  responseStream: false,
  requestType: public_admin_service_pb.RunCalculatorRequest,
  responseType: common_gateway_base_pb.MessageResponse
};

AdminService.UploadEvaluatedPrice = {
  methodName: "UploadEvaluatedPrice",
  service: AdminService,
  requestStream: false,
  responseStream: false,
  requestType: public_admin_service_pb.UploadEvaluatedPriceRequest,
  responseType: common_gateway_base_pb.MessageResponse
};

AdminService.RunConsensus = {
  methodName: "RunConsensus",
  service: AdminService,
  requestStream: false,
  responseStream: false,
  requestType: public_admin_service_pb.RunConsensusRequest,
  responseType: common_gateway_base_pb.MessageResponse
};

exports.AdminService = AdminService;

function AdminServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

AdminServiceClient.prototype.onBoard = function onBoard(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(AdminService.OnBoard, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

AdminServiceClient.prototype.runCalculator = function runCalculator(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(AdminService.RunCalculator, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

AdminServiceClient.prototype.uploadEvaluatedPrice = function uploadEvaluatedPrice(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(AdminService.UploadEvaluatedPrice, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

AdminServiceClient.prototype.runConsensus = function runConsensus(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(AdminService.RunConsensus, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.AdminServiceClient = AdminServiceClient;

