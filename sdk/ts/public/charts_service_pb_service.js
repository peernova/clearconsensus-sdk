/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/charts_service.proto

var public_charts_service_pb = require("../public/charts_service_pb");
var common_charts_pb = require("../common/charts_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var ChartsService = (function () {
  function ChartsService() {}
  ChartsService.serviceName = "titanium.ChartsService";
  return ChartsService;
}());

ChartsService.Charts = {
  methodName: "Charts",
  service: ChartsService,
  requestStream: false,
  responseStream: false,
  requestType: common_charts_pb.ChartsRequest,
  responseType: common_charts_pb.ChartsResponse
};

ChartsService.ChartsCurrencies = {
  methodName: "ChartsCurrencies",
  service: ChartsService,
  requestStream: false,
  responseStream: false,
  requestType: common_charts_pb.ChartsCurrenciesRequest,
  responseType: common_charts_pb.ChartsCurrenciesResponse
};

exports.ChartsService = ChartsService;

function ChartsServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

ChartsServiceClient.prototype.charts = function charts(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ChartsService.Charts, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ChartsServiceClient.prototype.chartsCurrencies = function chartsCurrencies(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ChartsService.ChartsCurrencies, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.ChartsServiceClient = ChartsServiceClient;

