/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/scope_service.proto

var public_scope_service_pb = require("../public/scope_service_pb");
var google_protobuf_empty_pb = require("google-protobuf/google/protobuf/empty_pb");
var common_gateway_base_pb = require("../common/gateway_base_pb");
var common_scope_pb = require("../common/scope_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var ScopeService = (function () {
  function ScopeService() {}
  ScopeService.serviceName = "titanium.ScopeService";
  return ScopeService;
}());

ScopeService.AddScope = {
  methodName: "AddScope",
  service: ScopeService,
  requestStream: false,
  responseStream: false,
  requestType: common_scope_pb.ScopeIdentifier,
  responseType: common_gateway_base_pb.AcknowledgeResponse
};

ScopeService.ExistScope = {
  methodName: "ExistScope",
  service: ScopeService,
  requestStream: false,
  responseStream: false,
  requestType: common_scope_pb.ScopeIdentifier,
  responseType: common_scope_pb.ScopeExistResponse
};

ScopeService.ListScope = {
  methodName: "ListScope",
  service: ScopeService,
  requestStream: false,
  responseStream: false,
  requestType: google_protobuf_empty_pb.Empty,
  responseType: common_scope_pb.ScopeListResponse
};

exports.ScopeService = ScopeService;

function ScopeServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

ScopeServiceClient.prototype.addScope = function addScope(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ScopeService.AddScope, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ScopeServiceClient.prototype.existScope = function existScope(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ScopeService.ExistScope, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ScopeServiceClient.prototype.listScope = function listScope(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ScopeService.ListScope, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.ScopeServiceClient = ScopeServiceClient;

