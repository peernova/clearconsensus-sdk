/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/metadata_entity_service.proto

var public_metadata_entity_service_pb = require("../public/metadata_entity_service_pb");
var common_gateway_base_pb = require("../common/gateway_base_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var MetadataEntityService = (function () {
  function MetadataEntityService() {}
  MetadataEntityService.serviceName = "titanium.MetadataEntityService";
  return MetadataEntityService;
}());

MetadataEntityService.AddEntity = {
  methodName: "AddEntity",
  service: MetadataEntityService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.EntityDefinition,
  responseType: common_gateway_base_pb.AcknowledgeResponse
};

MetadataEntityService.GetEntity = {
  methodName: "GetEntity",
  service: MetadataEntityService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.EntityIdentifier,
  responseType: common_gateway_base_pb.EntityDefinition
};

MetadataEntityService.EnableEntity = {
  methodName: "EnableEntity",
  service: MetadataEntityService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.EntityIdentifier,
  responseType: common_gateway_base_pb.AcknowledgeResponse
};

MetadataEntityService.DisableEntity = {
  methodName: "DisableEntity",
  service: MetadataEntityService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.EntityIdentifier,
  responseType: common_gateway_base_pb.AcknowledgeResponse
};

exports.MetadataEntityService = MetadataEntityService;

function MetadataEntityServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

MetadataEntityServiceClient.prototype.addEntity = function addEntity(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(MetadataEntityService.AddEntity, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

MetadataEntityServiceClient.prototype.getEntity = function getEntity(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(MetadataEntityService.GetEntity, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

MetadataEntityServiceClient.prototype.enableEntity = function enableEntity(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(MetadataEntityService.EnableEntity, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

MetadataEntityServiceClient.prototype.disableEntity = function disableEntity(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(MetadataEntityService.DisableEntity, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.MetadataEntityServiceClient = MetadataEntityServiceClient;

