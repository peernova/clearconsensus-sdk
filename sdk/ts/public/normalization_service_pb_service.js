/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/normalization_service.proto

var public_normalization_service_pb = require("../public/normalization_service_pb");
var common_gateway_base_pb = require("../common/gateway_base_pb");
var common_normalization_pb = require("../common/normalization_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var NormalizationService = (function () {
  function NormalizationService() {}
  NormalizationService.serviceName = "titanium.NormalizationService";
  return NormalizationService;
}());

NormalizationService.AddNormalizationRule = {
  methodName: "AddNormalizationRule",
  service: NormalizationService,
  requestStream: false,
  responseStream: false,
  requestType: common_normalization_pb.NormalizationRuleDefinition,
  responseType: common_gateway_base_pb.AcknowledgeResponse
};

NormalizationService.GetNormalizationRule = {
  methodName: "GetNormalizationRule",
  service: NormalizationService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.GetDefinition,
  responseType: common_normalization_pb.NormalizationRuleResponse
};

NormalizationService.EnableNormalizationRule = {
  methodName: "EnableNormalizationRule",
  service: NormalizationService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.GetDefinition,
  responseType: common_gateway_base_pb.AcknowledgeResponse
};

NormalizationService.DisableNormalizationRule = {
  methodName: "DisableNormalizationRule",
  service: NormalizationService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.GetDefinition,
  responseType: common_gateway_base_pb.AcknowledgeResponse
};

NormalizationService.ListNormalizationRules = {
  methodName: "ListNormalizationRules",
  service: NormalizationService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.ListRequest,
  responseType: common_gateway_base_pb.ListRuleResponse
};

NormalizationService.ListNormalizationRuleVersions = {
  methodName: "ListNormalizationRuleVersions",
  service: NormalizationService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.GetDefinition,
  responseType: common_gateway_base_pb.ListVersionResponse
};

NormalizationService.GetNormalizationRuleVersion = {
  methodName: "GetNormalizationRuleVersion",
  service: NormalizationService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.VersionRequest,
  responseType: common_normalization_pb.NormalizationRuleResponse
};

exports.NormalizationService = NormalizationService;

function NormalizationServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

NormalizationServiceClient.prototype.addNormalizationRule = function addNormalizationRule(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(NormalizationService.AddNormalizationRule, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

NormalizationServiceClient.prototype.getNormalizationRule = function getNormalizationRule(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(NormalizationService.GetNormalizationRule, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

NormalizationServiceClient.prototype.enableNormalizationRule = function enableNormalizationRule(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(NormalizationService.EnableNormalizationRule, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

NormalizationServiceClient.prototype.disableNormalizationRule = function disableNormalizationRule(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(NormalizationService.DisableNormalizationRule, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

NormalizationServiceClient.prototype.listNormalizationRules = function listNormalizationRules(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(NormalizationService.ListNormalizationRules, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

NormalizationServiceClient.prototype.listNormalizationRuleVersions = function listNormalizationRuleVersions(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(NormalizationService.ListNormalizationRuleVersions, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

NormalizationServiceClient.prototype.getNormalizationRuleVersion = function getNormalizationRuleVersion(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(NormalizationService.GetNormalizationRuleVersion, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.NormalizationServiceClient = NormalizationServiceClient;

