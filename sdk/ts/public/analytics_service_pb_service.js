/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/analytics_service.proto

var public_analytics_service_pb = require("../public/analytics_service_pb");
var google_protobuf_empty_pb = require("google-protobuf/google/protobuf/empty_pb");
var common_analytics_pb = require("../common/analytics_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var AnalyticsController = (function () {
  function AnalyticsController() {}
  AnalyticsController.serviceName = "titanium.AnalyticsController";
  return AnalyticsController;
}());

AnalyticsController.FindDataQualityErrors = {
  methodName: "FindDataQualityErrors",
  service: AnalyticsController,
  requestStream: false,
  responseStream: false,
  requestType: common_analytics_pb.GenericChartMetadataDataQuality,
  responseType: common_analytics_pb.GenericChartMetadataDataQualityResponse
};

AnalyticsController.GetAllDataQualityErrors = {
  methodName: "GetAllDataQualityErrors",
  service: AnalyticsController,
  requestStream: false,
  responseStream: false,
  requestType: google_protobuf_empty_pb.Empty,
  responseType: common_analytics_pb.GenericChartMetadataDataQualityResponse
};

AnalyticsController.FindConsensusAnalytics = {
  methodName: "FindConsensusAnalytics",
  service: AnalyticsController,
  requestStream: false,
  responseStream: false,
  requestType: common_analytics_pb.GenericChartMetadataDataQuality,
  responseType: common_analytics_pb.GenericChartMetadataDataQualityResponse
};

AnalyticsController.GetAllConsensusAnalytics = {
  methodName: "GetAllConsensusAnalytics",
  service: AnalyticsController,
  requestStream: false,
  responseStream: false,
  requestType: google_protobuf_empty_pb.Empty,
  responseType: common_analytics_pb.GenericChartMetadataDataQualityResponse
};

AnalyticsController.GetPredefinedFilter = {
  methodName: "GetPredefinedFilter",
  service: AnalyticsController,
  requestStream: false,
  responseStream: false,
  requestType: common_analytics_pb.GetPredefinedFiltersRequest,
  responseType: common_analytics_pb.GetPredefinedFiltersResponse
};

AnalyticsController.GetHistogram = {
  methodName: "GetHistogram",
  service: AnalyticsController,
  requestStream: false,
  responseStream: false,
  requestType: common_analytics_pb.HistogramRequest,
  responseType: common_analytics_pb.HistogramResponse
};

exports.AnalyticsController = AnalyticsController;

function AnalyticsControllerClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

AnalyticsControllerClient.prototype.findDataQualityErrors = function findDataQualityErrors(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(AnalyticsController.FindDataQualityErrors, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

AnalyticsControllerClient.prototype.getAllDataQualityErrors = function getAllDataQualityErrors(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(AnalyticsController.GetAllDataQualityErrors, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

AnalyticsControllerClient.prototype.findConsensusAnalytics = function findConsensusAnalytics(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(AnalyticsController.FindConsensusAnalytics, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

AnalyticsControllerClient.prototype.getAllConsensusAnalytics = function getAllConsensusAnalytics(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(AnalyticsController.GetAllConsensusAnalytics, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

AnalyticsControllerClient.prototype.getPredefinedFilter = function getPredefinedFilter(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(AnalyticsController.GetPredefinedFilter, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

AnalyticsControllerClient.prototype.getHistogram = function getHistogram(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(AnalyticsController.GetHistogram, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.AnalyticsControllerClient = AnalyticsControllerClient;

