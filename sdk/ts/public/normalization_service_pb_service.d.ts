/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/normalization_service.proto

import * as public_normalization_service_pb from "../public/normalization_service_pb";
import * as common_gateway_base_pb from "../common/gateway_base_pb";
import * as common_normalization_pb from "../common/normalization_pb";
import {grpc} from "@improbable-eng/grpc-web";

type NormalizationServiceAddNormalizationRule = {
  readonly methodName: string;
  readonly service: typeof NormalizationService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_normalization_pb.NormalizationRuleDefinition;
  readonly responseType: typeof common_gateway_base_pb.AcknowledgeResponse;
};

type NormalizationServiceGetNormalizationRule = {
  readonly methodName: string;
  readonly service: typeof NormalizationService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_gateway_base_pb.GetDefinition;
  readonly responseType: typeof common_normalization_pb.NormalizationRuleResponse;
};

type NormalizationServiceEnableNormalizationRule = {
  readonly methodName: string;
  readonly service: typeof NormalizationService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_gateway_base_pb.GetDefinition;
  readonly responseType: typeof common_gateway_base_pb.AcknowledgeResponse;
};

type NormalizationServiceDisableNormalizationRule = {
  readonly methodName: string;
  readonly service: typeof NormalizationService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_gateway_base_pb.GetDefinition;
  readonly responseType: typeof common_gateway_base_pb.AcknowledgeResponse;
};

type NormalizationServiceListNormalizationRules = {
  readonly methodName: string;
  readonly service: typeof NormalizationService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_gateway_base_pb.ListRequest;
  readonly responseType: typeof common_gateway_base_pb.ListRuleResponse;
};

type NormalizationServiceListNormalizationRuleVersions = {
  readonly methodName: string;
  readonly service: typeof NormalizationService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_gateway_base_pb.GetDefinition;
  readonly responseType: typeof common_gateway_base_pb.ListVersionResponse;
};

type NormalizationServiceGetNormalizationRuleVersion = {
  readonly methodName: string;
  readonly service: typeof NormalizationService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_gateway_base_pb.VersionRequest;
  readonly responseType: typeof common_normalization_pb.NormalizationRuleResponse;
};

export class NormalizationService {
  static readonly serviceName: string;
  static readonly AddNormalizationRule: NormalizationServiceAddNormalizationRule;
  static readonly GetNormalizationRule: NormalizationServiceGetNormalizationRule;
  static readonly EnableNormalizationRule: NormalizationServiceEnableNormalizationRule;
  static readonly DisableNormalizationRule: NormalizationServiceDisableNormalizationRule;
  static readonly ListNormalizationRules: NormalizationServiceListNormalizationRules;
  static readonly ListNormalizationRuleVersions: NormalizationServiceListNormalizationRuleVersions;
  static readonly GetNormalizationRuleVersion: NormalizationServiceGetNormalizationRuleVersion;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class NormalizationServiceClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  addNormalizationRule(
    requestMessage: common_normalization_pb.NormalizationRuleDefinition,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.AcknowledgeResponse|null) => void
  ): UnaryResponse;
  addNormalizationRule(
    requestMessage: common_normalization_pb.NormalizationRuleDefinition,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.AcknowledgeResponse|null) => void
  ): UnaryResponse;
  getNormalizationRule(
    requestMessage: common_gateway_base_pb.GetDefinition,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_normalization_pb.NormalizationRuleResponse|null) => void
  ): UnaryResponse;
  getNormalizationRule(
    requestMessage: common_gateway_base_pb.GetDefinition,
    callback: (error: ServiceError|null, responseMessage: common_normalization_pb.NormalizationRuleResponse|null) => void
  ): UnaryResponse;
  enableNormalizationRule(
    requestMessage: common_gateway_base_pb.GetDefinition,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.AcknowledgeResponse|null) => void
  ): UnaryResponse;
  enableNormalizationRule(
    requestMessage: common_gateway_base_pb.GetDefinition,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.AcknowledgeResponse|null) => void
  ): UnaryResponse;
  disableNormalizationRule(
    requestMessage: common_gateway_base_pb.GetDefinition,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.AcknowledgeResponse|null) => void
  ): UnaryResponse;
  disableNormalizationRule(
    requestMessage: common_gateway_base_pb.GetDefinition,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.AcknowledgeResponse|null) => void
  ): UnaryResponse;
  listNormalizationRules(
    requestMessage: common_gateway_base_pb.ListRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.ListRuleResponse|null) => void
  ): UnaryResponse;
  listNormalizationRules(
    requestMessage: common_gateway_base_pb.ListRequest,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.ListRuleResponse|null) => void
  ): UnaryResponse;
  listNormalizationRuleVersions(
    requestMessage: common_gateway_base_pb.GetDefinition,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.ListVersionResponse|null) => void
  ): UnaryResponse;
  listNormalizationRuleVersions(
    requestMessage: common_gateway_base_pb.GetDefinition,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.ListVersionResponse|null) => void
  ): UnaryResponse;
  getNormalizationRuleVersion(
    requestMessage: common_gateway_base_pb.VersionRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_normalization_pb.NormalizationRuleResponse|null) => void
  ): UnaryResponse;
  getNormalizationRuleVersion(
    requestMessage: common_gateway_base_pb.VersionRequest,
    callback: (error: ServiceError|null, responseMessage: common_normalization_pb.NormalizationRuleResponse|null) => void
  ): UnaryResponse;
}

