/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/mapping_service.proto

import * as public_mapping_service_pb from "../public/mapping_service_pb";
import * as common_gateway_base_pb from "../common/gateway_base_pb";
import * as common_mapper_pb from "../common/mapper_pb";
import {grpc} from "@improbable-eng/grpc-web";

type MappingServiceAddMappingRule = {
  readonly methodName: string;
  readonly service: typeof MappingService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_mapper_pb.MappingRuleDefinition;
  readonly responseType: typeof common_mapper_pb.DescriptorPairBasedAcknowledgeResponse;
};

type MappingServiceGetMappingRule = {
  readonly methodName: string;
  readonly service: typeof MappingService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_mapper_pb.DescriptorPairBasedGetDefinition;
  readonly responseType: typeof common_mapper_pb.MappingRuleResponse;
};

type MappingServiceEnableMappingRule = {
  readonly methodName: string;
  readonly service: typeof MappingService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_mapper_pb.DescriptorPairBasedGetDefinition;
  readonly responseType: typeof common_mapper_pb.DescriptorPairBasedAcknowledgeResponse;
};

type MappingServiceDisableMappingRule = {
  readonly methodName: string;
  readonly service: typeof MappingService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_mapper_pb.DescriptorPairBasedGetDefinition;
  readonly responseType: typeof common_mapper_pb.DescriptorPairBasedAcknowledgeResponse;
};

type MappingServiceListMappingRules = {
  readonly methodName: string;
  readonly service: typeof MappingService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_gateway_base_pb.ListRequest;
  readonly responseType: typeof common_mapper_pb.MappingRuleList;
};

type MappingServiceListMappingRuleVersions = {
  readonly methodName: string;
  readonly service: typeof MappingService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_mapper_pb.DescriptorPairBasedGetDefinition;
  readonly responseType: typeof common_gateway_base_pb.ListVersionResponse;
};

type MappingServiceGetMappingRuleVersion = {
  readonly methodName: string;
  readonly service: typeof MappingService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_mapper_pb.DescriptorPairBasedVersionRequest;
  readonly responseType: typeof common_mapper_pb.MappingRuleResponse;
};

export class MappingService {
  static readonly serviceName: string;
  static readonly AddMappingRule: MappingServiceAddMappingRule;
  static readonly GetMappingRule: MappingServiceGetMappingRule;
  static readonly EnableMappingRule: MappingServiceEnableMappingRule;
  static readonly DisableMappingRule: MappingServiceDisableMappingRule;
  static readonly ListMappingRules: MappingServiceListMappingRules;
  static readonly ListMappingRuleVersions: MappingServiceListMappingRuleVersions;
  static readonly GetMappingRuleVersion: MappingServiceGetMappingRuleVersion;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class MappingServiceClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  addMappingRule(
    requestMessage: common_mapper_pb.MappingRuleDefinition,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_mapper_pb.DescriptorPairBasedAcknowledgeResponse|null) => void
  ): UnaryResponse;
  addMappingRule(
    requestMessage: common_mapper_pb.MappingRuleDefinition,
    callback: (error: ServiceError|null, responseMessage: common_mapper_pb.DescriptorPairBasedAcknowledgeResponse|null) => void
  ): UnaryResponse;
  getMappingRule(
    requestMessage: common_mapper_pb.DescriptorPairBasedGetDefinition,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_mapper_pb.MappingRuleResponse|null) => void
  ): UnaryResponse;
  getMappingRule(
    requestMessage: common_mapper_pb.DescriptorPairBasedGetDefinition,
    callback: (error: ServiceError|null, responseMessage: common_mapper_pb.MappingRuleResponse|null) => void
  ): UnaryResponse;
  enableMappingRule(
    requestMessage: common_mapper_pb.DescriptorPairBasedGetDefinition,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_mapper_pb.DescriptorPairBasedAcknowledgeResponse|null) => void
  ): UnaryResponse;
  enableMappingRule(
    requestMessage: common_mapper_pb.DescriptorPairBasedGetDefinition,
    callback: (error: ServiceError|null, responseMessage: common_mapper_pb.DescriptorPairBasedAcknowledgeResponse|null) => void
  ): UnaryResponse;
  disableMappingRule(
    requestMessage: common_mapper_pb.DescriptorPairBasedGetDefinition,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_mapper_pb.DescriptorPairBasedAcknowledgeResponse|null) => void
  ): UnaryResponse;
  disableMappingRule(
    requestMessage: common_mapper_pb.DescriptorPairBasedGetDefinition,
    callback: (error: ServiceError|null, responseMessage: common_mapper_pb.DescriptorPairBasedAcknowledgeResponse|null) => void
  ): UnaryResponse;
  listMappingRules(
    requestMessage: common_gateway_base_pb.ListRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_mapper_pb.MappingRuleList|null) => void
  ): UnaryResponse;
  listMappingRules(
    requestMessage: common_gateway_base_pb.ListRequest,
    callback: (error: ServiceError|null, responseMessage: common_mapper_pb.MappingRuleList|null) => void
  ): UnaryResponse;
  listMappingRuleVersions(
    requestMessage: common_mapper_pb.DescriptorPairBasedGetDefinition,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.ListVersionResponse|null) => void
  ): UnaryResponse;
  listMappingRuleVersions(
    requestMessage: common_mapper_pb.DescriptorPairBasedGetDefinition,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.ListVersionResponse|null) => void
  ): UnaryResponse;
  getMappingRuleVersion(
    requestMessage: common_mapper_pb.DescriptorPairBasedVersionRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_mapper_pb.MappingRuleResponse|null) => void
  ): UnaryResponse;
  getMappingRuleVersion(
    requestMessage: common_mapper_pb.DescriptorPairBasedVersionRequest,
    callback: (error: ServiceError|null, responseMessage: common_mapper_pb.MappingRuleResponse|null) => void
  ): UnaryResponse;
}

