/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/consensus_service.proto

import * as public_consensus_service_pb from "../public/consensus_service_pb";
import * as common_gateway_base_pb from "../common/gateway_base_pb";
import * as common_consensus_pb from "../common/consensus_pb";
import {grpc} from "@improbable-eng/grpc-web";

type ConsensusServiceConsensusTimestamps = {
  readonly methodName: string;
  readonly service: typeof ConsensusService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_consensus_pb.ConsensusTimestampsRequest;
  readonly responseType: typeof common_consensus_pb.ConsensusTimestampsResponse;
};

type ConsensusServiceConsensus = {
  readonly methodName: string;
  readonly service: typeof ConsensusService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_consensus_pb.ConsensusRequest;
  readonly responseType: typeof common_consensus_pb.ConsensusResponse;
};

type ConsensusServiceEvaluatedPrice = {
  readonly methodName: string;
  readonly service: typeof ConsensusService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_consensus_pb.EVPRequest;
  readonly responseType: typeof common_consensus_pb.EVPResponse;
};

type ConsensusServiceConsensusOutliers = {
  readonly methodName: string;
  readonly service: typeof ConsensusService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_gateway_base_pb.OutliersListRequest;
  readonly responseType: typeof common_gateway_base_pb.ConsensusActiveResponse;
};

type ConsensusServiceGetConsensusRuns = {
  readonly methodName: string;
  readonly service: typeof ConsensusService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_consensus_pb.GetConsensusRunsRequest;
  readonly responseType: typeof common_consensus_pb.GetConsensusRunsResponse;
};

type ConsensusServiceConsensusResultSetValues = {
  readonly methodName: string;
  readonly service: typeof ConsensusService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_consensus_pb.ConsensusResultSetValuesRequest;
  readonly responseType: typeof common_consensus_pb.ConsensusResultSetValuesResponse;
};

type ConsensusServiceConsensusExplorerInstrumentDetails = {
  readonly methodName: string;
  readonly service: typeof ConsensusService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_consensus_pb.ConsensusExplorerRequest;
  readonly responseType: typeof common_consensus_pb.ConsensusExplorerInstrumentDetailsResponse;
};

type ConsensusServiceConsensusExplorerTable = {
  readonly methodName: string;
  readonly service: typeof ConsensusService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_consensus_pb.ConsensusExplorerRequest;
  readonly responseType: typeof common_consensus_pb.ConsensusExplorerTableResponse;
};

type ConsensusServiceConsensusExplorerRanges = {
  readonly methodName: string;
  readonly service: typeof ConsensusService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_consensus_pb.ConsensusExplorerRequest;
  readonly responseType: typeof common_consensus_pb.ConsensusExplorerRangeResponse;
};

type ConsensusServiceConsensusActive = {
  readonly methodName: string;
  readonly service: typeof ConsensusService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_consensus_pb.ConsensusActiveRequest;
  readonly responseType: typeof common_gateway_base_pb.ConsensusActiveResponse;
};

type ConsensusServiceConsensusToPublish = {
  readonly methodName: string;
  readonly service: typeof ConsensusService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_consensus_pb.ConsensusToPublishRequest;
  readonly responseType: typeof common_consensus_pb.ConsensusToPublishResponse;
};

type ConsensusServiceConsensusPublish = {
  readonly methodName: string;
  readonly service: typeof ConsensusService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_consensus_pb.ConsensusPublishRequest;
  readonly responseType: typeof common_gateway_base_pb.MessageResponse;
};

type ConsensusServiceConsensusHistory = {
  readonly methodName: string;
  readonly service: typeof ConsensusService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_consensus_pb.ConsensusHistoryRequest;
  readonly responseType: typeof common_consensus_pb.ConsensusHistoryResponse;
};

type ConsensusServiceConsensusDecision = {
  readonly methodName: string;
  readonly service: typeof ConsensusService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof common_consensus_pb.ConsensusDecisionRequest;
  readonly responseType: typeof common_gateway_base_pb.MessageResponse;
};

export class ConsensusService {
  static readonly serviceName: string;
  static readonly ConsensusTimestamps: ConsensusServiceConsensusTimestamps;
  static readonly Consensus: ConsensusServiceConsensus;
  static readonly EvaluatedPrice: ConsensusServiceEvaluatedPrice;
  static readonly ConsensusOutliers: ConsensusServiceConsensusOutliers;
  static readonly GetConsensusRuns: ConsensusServiceGetConsensusRuns;
  static readonly ConsensusResultSetValues: ConsensusServiceConsensusResultSetValues;
  static readonly ConsensusExplorerInstrumentDetails: ConsensusServiceConsensusExplorerInstrumentDetails;
  static readonly ConsensusExplorerTable: ConsensusServiceConsensusExplorerTable;
  static readonly ConsensusExplorerRanges: ConsensusServiceConsensusExplorerRanges;
  static readonly ConsensusActive: ConsensusServiceConsensusActive;
  static readonly ConsensusToPublish: ConsensusServiceConsensusToPublish;
  static readonly ConsensusPublish: ConsensusServiceConsensusPublish;
  static readonly ConsensusHistory: ConsensusServiceConsensusHistory;
  static readonly ConsensusDecision: ConsensusServiceConsensusDecision;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class ConsensusServiceClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  consensusTimestamps(
    requestMessage: common_consensus_pb.ConsensusTimestampsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_consensus_pb.ConsensusTimestampsResponse|null) => void
  ): UnaryResponse;
  consensusTimestamps(
    requestMessage: common_consensus_pb.ConsensusTimestampsRequest,
    callback: (error: ServiceError|null, responseMessage: common_consensus_pb.ConsensusTimestampsResponse|null) => void
  ): UnaryResponse;
  consensus(
    requestMessage: common_consensus_pb.ConsensusRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_consensus_pb.ConsensusResponse|null) => void
  ): UnaryResponse;
  consensus(
    requestMessage: common_consensus_pb.ConsensusRequest,
    callback: (error: ServiceError|null, responseMessage: common_consensus_pb.ConsensusResponse|null) => void
  ): UnaryResponse;
  evaluatedPrice(
    requestMessage: common_consensus_pb.EVPRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_consensus_pb.EVPResponse|null) => void
  ): UnaryResponse;
  evaluatedPrice(
    requestMessage: common_consensus_pb.EVPRequest,
    callback: (error: ServiceError|null, responseMessage: common_consensus_pb.EVPResponse|null) => void
  ): UnaryResponse;
  consensusOutliers(
    requestMessage: common_gateway_base_pb.OutliersListRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.ConsensusActiveResponse|null) => void
  ): UnaryResponse;
  consensusOutliers(
    requestMessage: common_gateway_base_pb.OutliersListRequest,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.ConsensusActiveResponse|null) => void
  ): UnaryResponse;
  getConsensusRuns(
    requestMessage: common_consensus_pb.GetConsensusRunsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_consensus_pb.GetConsensusRunsResponse|null) => void
  ): UnaryResponse;
  getConsensusRuns(
    requestMessage: common_consensus_pb.GetConsensusRunsRequest,
    callback: (error: ServiceError|null, responseMessage: common_consensus_pb.GetConsensusRunsResponse|null) => void
  ): UnaryResponse;
  consensusResultSetValues(
    requestMessage: common_consensus_pb.ConsensusResultSetValuesRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_consensus_pb.ConsensusResultSetValuesResponse|null) => void
  ): UnaryResponse;
  consensusResultSetValues(
    requestMessage: common_consensus_pb.ConsensusResultSetValuesRequest,
    callback: (error: ServiceError|null, responseMessage: common_consensus_pb.ConsensusResultSetValuesResponse|null) => void
  ): UnaryResponse;
  consensusExplorerInstrumentDetails(
    requestMessage: common_consensus_pb.ConsensusExplorerRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_consensus_pb.ConsensusExplorerInstrumentDetailsResponse|null) => void
  ): UnaryResponse;
  consensusExplorerInstrumentDetails(
    requestMessage: common_consensus_pb.ConsensusExplorerRequest,
    callback: (error: ServiceError|null, responseMessage: common_consensus_pb.ConsensusExplorerInstrumentDetailsResponse|null) => void
  ): UnaryResponse;
  consensusExplorerTable(
    requestMessage: common_consensus_pb.ConsensusExplorerRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_consensus_pb.ConsensusExplorerTableResponse|null) => void
  ): UnaryResponse;
  consensusExplorerTable(
    requestMessage: common_consensus_pb.ConsensusExplorerRequest,
    callback: (error: ServiceError|null, responseMessage: common_consensus_pb.ConsensusExplorerTableResponse|null) => void
  ): UnaryResponse;
  consensusExplorerRanges(
    requestMessage: common_consensus_pb.ConsensusExplorerRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_consensus_pb.ConsensusExplorerRangeResponse|null) => void
  ): UnaryResponse;
  consensusExplorerRanges(
    requestMessage: common_consensus_pb.ConsensusExplorerRequest,
    callback: (error: ServiceError|null, responseMessage: common_consensus_pb.ConsensusExplorerRangeResponse|null) => void
  ): UnaryResponse;
  consensusActive(
    requestMessage: common_consensus_pb.ConsensusActiveRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.ConsensusActiveResponse|null) => void
  ): UnaryResponse;
  consensusActive(
    requestMessage: common_consensus_pb.ConsensusActiveRequest,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.ConsensusActiveResponse|null) => void
  ): UnaryResponse;
  consensusToPublish(
    requestMessage: common_consensus_pb.ConsensusToPublishRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_consensus_pb.ConsensusToPublishResponse|null) => void
  ): UnaryResponse;
  consensusToPublish(
    requestMessage: common_consensus_pb.ConsensusToPublishRequest,
    callback: (error: ServiceError|null, responseMessage: common_consensus_pb.ConsensusToPublishResponse|null) => void
  ): UnaryResponse;
  consensusPublish(
    requestMessage: common_consensus_pb.ConsensusPublishRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.MessageResponse|null) => void
  ): UnaryResponse;
  consensusPublish(
    requestMessage: common_consensus_pb.ConsensusPublishRequest,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.MessageResponse|null) => void
  ): UnaryResponse;
  consensusHistory(
    requestMessage: common_consensus_pb.ConsensusHistoryRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_consensus_pb.ConsensusHistoryResponse|null) => void
  ): UnaryResponse;
  consensusHistory(
    requestMessage: common_consensus_pb.ConsensusHistoryRequest,
    callback: (error: ServiceError|null, responseMessage: common_consensus_pb.ConsensusHistoryResponse|null) => void
  ): UnaryResponse;
  consensusDecision(
    requestMessage: common_consensus_pb.ConsensusDecisionRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.MessageResponse|null) => void
  ): UnaryResponse;
  consensusDecision(
    requestMessage: common_consensus_pb.ConsensusDecisionRequest,
    callback: (error: ServiceError|null, responseMessage: common_gateway_base_pb.MessageResponse|null) => void
  ): UnaryResponse;
}

