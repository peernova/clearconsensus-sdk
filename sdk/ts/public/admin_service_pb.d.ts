/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/admin_service.proto

import * as jspb from "google-protobuf";
import * as google_api_annotations_pb from "../google/api/annotations_pb";
import * as common_gateway_base_pb from "../common/gateway_base_pb";
import * as common_assets_pb from "../common/assets_pb";

export class RunConsensusRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  clearClientsList(): void;
  getClientsList(): Array<string>;
  setClientsList(value: Array<string>): void;
  addClients(value: string, index?: number): string;

  clearDatesList(): void;
  getDatesList(): Array<string>;
  setDatesList(value: Array<string>): void;
  addDates(value: string, index?: number): string;

  getDescription(): string;
  setDescription(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RunConsensusRequest.AsObject;
  static toObject(includeInstance: boolean, msg: RunConsensusRequest): RunConsensusRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RunConsensusRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RunConsensusRequest;
  static deserializeBinaryFromReader(message: RunConsensusRequest, reader: jspb.BinaryReader): RunConsensusRequest;
}

export namespace RunConsensusRequest {
  export type AsObject = {
    assetId: string,
    clientsList: Array<string>,
    datesList: Array<string>,
    description: string,
    traceName: string,
  }
}

export class OnBoardRequest extends jspb.Message {
  getUsername(): string;
  setUsername(value: string): void;

  getPassword(): string;
  setPassword(value: string): void;

  getClient(): string;
  setClient(value: string): void;

  getPublicKey(): string;
  setPublicKey(value: string): void;

  hasAuthorized(): boolean;
  clearAuthorized(): void;
  getAuthorized(): common_assets_pb.AssetsList | undefined;
  setAuthorized(value?: common_assets_pb.AssetsList): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OnBoardRequest.AsObject;
  static toObject(includeInstance: boolean, msg: OnBoardRequest): OnBoardRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OnBoardRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OnBoardRequest;
  static deserializeBinaryFromReader(message: OnBoardRequest, reader: jspb.BinaryReader): OnBoardRequest;
}

export namespace OnBoardRequest {
  export type AsObject = {
    username: string,
    password: string,
    client: string,
    publicKey: string,
    authorized?: common_assets_pb.AssetsList.AsObject,
  }
}

export class RunCalculatorRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  clearClientsList(): void;
  getClientsList(): Array<string>;
  setClientsList(value: Array<string>): void;
  addClients(value: string, index?: number): string;

  clearDatesList(): void;
  getDatesList(): Array<string>;
  setDatesList(value: Array<string>): void;
  addDates(value: string, index?: number): string;

  getConsensusRunReason(): string;
  setConsensusRunReason(value: string): void;

  getDescription(): string;
  setDescription(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RunCalculatorRequest.AsObject;
  static toObject(includeInstance: boolean, msg: RunCalculatorRequest): RunCalculatorRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RunCalculatorRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RunCalculatorRequest;
  static deserializeBinaryFromReader(message: RunCalculatorRequest, reader: jspb.BinaryReader): RunCalculatorRequest;
}

export namespace RunCalculatorRequest {
  export type AsObject = {
    assetId: string,
    clientsList: Array<string>,
    datesList: Array<string>,
    consensusRunReason: string,
    description: string,
    traceName: string,
  }
}

export class UploadEvaluatedPriceRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getDate(): string;
  setDate(value: string): void;

  getFileName(): string;
  setFileName(value: string): void;

  getFile(): string;
  setFile(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UploadEvaluatedPriceRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UploadEvaluatedPriceRequest): UploadEvaluatedPriceRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UploadEvaluatedPriceRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UploadEvaluatedPriceRequest;
  static deserializeBinaryFromReader(message: UploadEvaluatedPriceRequest, reader: jspb.BinaryReader): UploadEvaluatedPriceRequest;
}

export namespace UploadEvaluatedPriceRequest {
  export type AsObject = {
    assetId: string,
    date: string,
    fileName: string,
    file: string,
    traceName: string,
  }
}

