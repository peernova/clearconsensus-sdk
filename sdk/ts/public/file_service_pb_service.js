/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/file_service.proto

var public_file_service_pb = require("../public/file_service_pb");
var google_protobuf_empty_pb = require("google-protobuf/google/protobuf/empty_pb");
var common_gateway_base_pb = require("../common/gateway_base_pb");
var common_file_pb = require("../common/file_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var FileService = (function () {
  function FileService() {}
  FileService.serviceName = "titanium.FileService";
  return FileService;
}());

FileService.GetFilePreview = {
  methodName: "GetFilePreview",
  service: FileService,
  requestStream: false,
  responseStream: false,
  requestType: common_file_pb.FileIdentifier,
  responseType: common_file_pb.FilePreview
};

FileService.ListFiles = {
  methodName: "ListFiles",
  service: FileService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.ListRequest,
  responseType: common_file_pb.FileList
};

FileService.SetFileDelimiter = {
  methodName: "SetFileDelimiter",
  service: FileService,
  requestStream: false,
  responseStream: false,
  requestType: common_file_pb.SetFileDelimiterRequest,
  responseType: google_protobuf_empty_pb.Empty
};

FileService.GetFileDelimiter = {
  methodName: "GetFileDelimiter",
  service: FileService,
  requestStream: false,
  responseStream: false,
  requestType: common_file_pb.FileIdentifier,
  responseType: common_file_pb.FileDelimiterSetting
};

FileService.SetFileDescriptor = {
  methodName: "SetFileDescriptor",
  service: FileService,
  requestStream: false,
  responseStream: false,
  requestType: common_file_pb.SetFileDescriptorRequest,
  responseType: google_protobuf_empty_pb.Empty
};

FileService.GetFileDescriptor = {
  methodName: "GetFileDescriptor",
  service: FileService,
  requestStream: false,
  responseStream: false,
  requestType: common_file_pb.FileIdentifier,
  responseType: common_file_pb.FileDescriptorSetting
};

FileService.FileSubmission = {
  methodName: "FileSubmission",
  service: FileService,
  requestStream: false,
  responseStream: false,
  requestType: common_file_pb.FileSubmissionRequest,
  responseType: common_gateway_base_pb.MessageResponse
};

FileService.FileHistory = {
  methodName: "FileHistory",
  service: FileService,
  requestStream: false,
  responseStream: false,
  requestType: common_file_pb.FileHistoryRequest,
  responseType: common_file_pb.FileHistoryResponse
};

FileService.GetFileExportUrl = {
  methodName: "GetFileExportUrl",
  service: FileService,
  requestStream: false,
  responseStream: false,
  requestType: common_file_pb.GetFileExportUrlRequest,
  responseType: common_file_pb.GetFileExportUrlResponse
};

exports.FileService = FileService;

function FileServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

FileServiceClient.prototype.getFilePreview = function getFilePreview(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(FileService.GetFilePreview, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

FileServiceClient.prototype.listFiles = function listFiles(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(FileService.ListFiles, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

FileServiceClient.prototype.setFileDelimiter = function setFileDelimiter(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(FileService.SetFileDelimiter, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

FileServiceClient.prototype.getFileDelimiter = function getFileDelimiter(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(FileService.GetFileDelimiter, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

FileServiceClient.prototype.setFileDescriptor = function setFileDescriptor(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(FileService.SetFileDescriptor, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

FileServiceClient.prototype.getFileDescriptor = function getFileDescriptor(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(FileService.GetFileDescriptor, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

FileServiceClient.prototype.fileSubmission = function fileSubmission(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(FileService.FileSubmission, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

FileServiceClient.prototype.fileHistory = function fileHistory(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(FileService.FileHistory, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

FileServiceClient.prototype.getFileExportUrl = function getFileExportUrl(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(FileService.GetFileExportUrl, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.FileServiceClient = FileServiceClient;

