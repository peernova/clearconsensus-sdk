/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: public/validation_service.proto

var public_validation_service_pb = require("../public/validation_service_pb");
var common_gateway_base_pb = require("../common/gateway_base_pb");
var common_validation_pb = require("../common/validation_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var ValidatorService = (function () {
  function ValidatorService() {}
  ValidatorService.serviceName = "titanium.ValidatorService";
  return ValidatorService;
}());

ValidatorService.AddValidationRule = {
  methodName: "AddValidationRule",
  service: ValidatorService,
  requestStream: false,
  responseStream: false,
  requestType: common_validation_pb.ValidationRuleDefinition,
  responseType: common_gateway_base_pb.AcknowledgeResponse
};

ValidatorService.GetValidationRule = {
  methodName: "GetValidationRule",
  service: ValidatorService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.GetDefinition,
  responseType: common_validation_pb.GetValidationRuleResponse
};

ValidatorService.DisableValidationRule = {
  methodName: "DisableValidationRule",
  service: ValidatorService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.GetDefinition,
  responseType: common_gateway_base_pb.AcknowledgeResponse
};

ValidatorService.EnableValidationRule = {
  methodName: "EnableValidationRule",
  service: ValidatorService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.GetDefinition,
  responseType: common_gateway_base_pb.AcknowledgeResponse
};

ValidatorService.ListValidationRules = {
  methodName: "ListValidationRules",
  service: ValidatorService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.ListRequest,
  responseType: common_gateway_base_pb.ListRuleResponse
};

ValidatorService.ListValidationRuleVersions = {
  methodName: "ListValidationRuleVersions",
  service: ValidatorService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.GetDefinition,
  responseType: common_gateway_base_pb.ListVersionResponse
};

ValidatorService.GetValidationRuleVersion = {
  methodName: "GetValidationRuleVersion",
  service: ValidatorService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.VersionRequest,
  responseType: common_validation_pb.GetValidationRuleResponse
};

ValidatorService.GetGeneratedValidationRule = {
  methodName: "GetGeneratedValidationRule",
  service: ValidatorService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.GetDefinition,
  responseType: common_validation_pb.GetGeneratedValidationRuleResponse
};

ValidatorService.ListGeneratedValidationRuleVersions = {
  methodName: "ListGeneratedValidationRuleVersions",
  service: ValidatorService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.GetDefinition,
  responseType: common_gateway_base_pb.ListVersionResponse
};

ValidatorService.GetGeneratedValidationRuleVersion = {
  methodName: "GetGeneratedValidationRuleVersion",
  service: ValidatorService,
  requestStream: false,
  responseStream: false,
  requestType: common_gateway_base_pb.VersionRequest,
  responseType: common_validation_pb.GetGeneratedValidationRuleResponse
};

ValidatorService.RdlCheck = {
  methodName: "RdlCheck",
  service: ValidatorService,
  requestStream: false,
  responseStream: false,
  requestType: common_validation_pb.RdlCheckRequest,
  responseType: common_gateway_base_pb.MessageResponse
};

exports.ValidatorService = ValidatorService;

function ValidatorServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

ValidatorServiceClient.prototype.addValidationRule = function addValidationRule(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ValidatorService.AddValidationRule, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ValidatorServiceClient.prototype.getValidationRule = function getValidationRule(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ValidatorService.GetValidationRule, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ValidatorServiceClient.prototype.disableValidationRule = function disableValidationRule(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ValidatorService.DisableValidationRule, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ValidatorServiceClient.prototype.enableValidationRule = function enableValidationRule(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ValidatorService.EnableValidationRule, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ValidatorServiceClient.prototype.listValidationRules = function listValidationRules(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ValidatorService.ListValidationRules, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ValidatorServiceClient.prototype.listValidationRuleVersions = function listValidationRuleVersions(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ValidatorService.ListValidationRuleVersions, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ValidatorServiceClient.prototype.getValidationRuleVersion = function getValidationRuleVersion(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ValidatorService.GetValidationRuleVersion, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ValidatorServiceClient.prototype.getGeneratedValidationRule = function getGeneratedValidationRule(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ValidatorService.GetGeneratedValidationRule, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ValidatorServiceClient.prototype.listGeneratedValidationRuleVersions = function listGeneratedValidationRuleVersions(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ValidatorService.ListGeneratedValidationRuleVersions, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ValidatorServiceClient.prototype.getGeneratedValidationRuleVersion = function getGeneratedValidationRuleVersion(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ValidatorService.GetGeneratedValidationRuleVersion, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ValidatorServiceClient.prototype.rdlCheck = function rdlCheck(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(ValidatorService.RdlCheck, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.ValidatorServiceClient = ValidatorServiceClient;

