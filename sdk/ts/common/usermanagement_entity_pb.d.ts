/* eslint-disable */
/*Generated by GenDocu.com*/
// package: com.peernova.titanium.casbin.management.grpc.proto
// file: common/usermanagement_entity.proto

import * as jspb from "google-protobuf";
import * as common_usermanagement_error_pb from "../common/usermanagement_error_pb";
import * as common_usermanagement_fe_specific_pb from "../common/usermanagement_fe_specific_pb";

export class EntityDto extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getExternalId(): string;
  setExternalId(value: string): void;

  getName(): string;
  setName(value: string): void;

  getEnabled(): boolean;
  setEnabled(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EntityDto.AsObject;
  static toObject(includeInstance: boolean, msg: EntityDto): EntityDto.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EntityDto, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EntityDto;
  static deserializeBinaryFromReader(message: EntityDto, reader: jspb.BinaryReader): EntityDto;
}

export namespace EntityDto {
  export type AsObject = {
    id: string,
    externalId: string,
    name: string,
    enabled: boolean,
  }
}

export class EntityId extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EntityId.AsObject;
  static toObject(includeInstance: boolean, msg: EntityId): EntityId.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EntityId, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EntityId;
  static deserializeBinaryFromReader(message: EntityId, reader: jspb.BinaryReader): EntityId;
}

export namespace EntityId {
  export type AsObject = {
    id: string,
  }
}

export class EntityResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): EntityDto | undefined;
  setData(value?: EntityDto): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_usermanagement_error_pb.Error | undefined;
  setError(value?: common_usermanagement_error_pb.Error): void;

  getResponseCase(): EntityResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EntityResponse.AsObject;
  static toObject(includeInstance: boolean, msg: EntityResponse): EntityResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EntityResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EntityResponse;
  static deserializeBinaryFromReader(message: EntityResponse, reader: jspb.BinaryReader): EntityResponse;
}

export namespace EntityResponse {
  export type AsObject = {
    data?: EntityDto.AsObject,
    error?: common_usermanagement_error_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class EntitiesDto extends jspb.Message {
  clearEntitiesList(): void;
  getEntitiesList(): Array<EntityDto>;
  setEntitiesList(value: Array<EntityDto>): void;
  addEntities(value?: EntityDto, index?: number): EntityDto;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EntitiesDto.AsObject;
  static toObject(includeInstance: boolean, msg: EntitiesDto): EntitiesDto.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EntitiesDto, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EntitiesDto;
  static deserializeBinaryFromReader(message: EntitiesDto, reader: jspb.BinaryReader): EntitiesDto;
}

export namespace EntitiesDto {
  export type AsObject = {
    entitiesList: Array<EntityDto.AsObject>,
  }
}

export class EntitiesResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): EntitiesDto | undefined;
  setData(value?: EntitiesDto): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_usermanagement_error_pb.Error | undefined;
  setError(value?: common_usermanagement_error_pb.Error): void;

  getResponseCase(): EntitiesResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EntitiesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: EntitiesResponse): EntitiesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EntitiesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EntitiesResponse;
  static deserializeBinaryFromReader(message: EntitiesResponse, reader: jspb.BinaryReader): EntitiesResponse;
}

export namespace EntitiesResponse {
  export type AsObject = {
    data?: EntitiesDto.AsObject,
    error?: common_usermanagement_error_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class EntitiesTable extends jspb.Message {
  getTotalRows(): number;
  setTotalRows(value: number): void;

  clearColumnsList(): void;
  getColumnsList(): Array<common_usermanagement_fe_specific_pb.ColumnDefinition>;
  setColumnsList(value: Array<common_usermanagement_fe_specific_pb.ColumnDefinition>): void;
  addColumns(value?: common_usermanagement_fe_specific_pb.ColumnDefinition, index?: number): common_usermanagement_fe_specific_pb.ColumnDefinition;

  clearRowsList(): void;
  getRowsList(): Array<EntityDto>;
  setRowsList(value: Array<EntityDto>): void;
  addRows(value?: EntityDto, index?: number): EntityDto;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EntitiesTable.AsObject;
  static toObject(includeInstance: boolean, msg: EntitiesTable): EntitiesTable.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EntitiesTable, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EntitiesTable;
  static deserializeBinaryFromReader(message: EntitiesTable, reader: jspb.BinaryReader): EntitiesTable;
}

export namespace EntitiesTable {
  export type AsObject = {
    totalRows: number,
    columnsList: Array<common_usermanagement_fe_specific_pb.ColumnDefinition.AsObject>,
    rowsList: Array<EntityDto.AsObject>,
  }
}

export class EntitiesTableResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): EntitiesTable | undefined;
  setData(value?: EntitiesTable): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_usermanagement_error_pb.Error | undefined;
  setError(value?: common_usermanagement_error_pb.Error): void;

  getResponseCase(): EntitiesTableResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EntitiesTableResponse.AsObject;
  static toObject(includeInstance: boolean, msg: EntitiesTableResponse): EntitiesTableResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EntitiesTableResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EntitiesTableResponse;
  static deserializeBinaryFromReader(message: EntitiesTableResponse, reader: jspb.BinaryReader): EntitiesTableResponse;
}

export namespace EntitiesTableResponse {
  export type AsObject = {
    data?: EntitiesTable.AsObject,
    error?: common_usermanagement_error_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

