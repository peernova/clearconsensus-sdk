/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: common/popup.proto

import * as jspb from "google-protobuf";
import * as google_protobuf_struct_pb from "google-protobuf/google/protobuf/struct_pb";
import * as common_gateway_base_pb from "../common/gateway_base_pb";

export class PopUpViewRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getSubmittedDate(): string;
  setSubmittedDate(value: string): void;

  getConsensusRunTimestamp(): string;
  setConsensusRunTimestamp(value: string): void;

  hasSubmittedId(): boolean;
  clearSubmittedId(): void;
  getSubmittedId(): string;
  setSubmittedId(value: string): void;

  hasConsensusId(): boolean;
  clearConsensusId(): void;
  getConsensusId(): string;
  setConsensusId(value: string): void;

  hasEvaluatedPriceId(): boolean;
  clearEvaluatedPriceId(): void;
  getEvaluatedPriceId(): string;
  setEvaluatedPriceId(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  getIdCase(): PopUpViewRequest.IdCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PopUpViewRequest.AsObject;
  static toObject(includeInstance: boolean, msg: PopUpViewRequest): PopUpViewRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PopUpViewRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PopUpViewRequest;
  static deserializeBinaryFromReader(message: PopUpViewRequest, reader: jspb.BinaryReader): PopUpViewRequest;
}

export namespace PopUpViewRequest {
  export type AsObject = {
    assetId: string,
    submittedDate: string,
    consensusRunTimestamp: string,
    submittedId: string,
    consensusId: string,
    evaluatedPriceId: string,
    traceName: string,
  }

  export enum IdCase {
    ID_NOT_SET = 0,
    SUBMITTED_ID = 4,
    CONSENSUS_ID = 5,
    EVALUATED_PRICE_ID = 6,
  }
}

export class PopUpViewResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): PopUpViewResponseData | undefined;
  setData(value?: PopUpViewResponseData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): PopUpViewResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PopUpViewResponse.AsObject;
  static toObject(includeInstance: boolean, msg: PopUpViewResponse): PopUpViewResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PopUpViewResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PopUpViewResponse;
  static deserializeBinaryFromReader(message: PopUpViewResponse, reader: jspb.BinaryReader): PopUpViewResponse;
}

export namespace PopUpViewResponse {
  export type AsObject = {
    data?: PopUpViewResponseData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class PopUpViewResponseData extends jspb.Message {
  hasSubmission(): boolean;
  clearSubmission(): void;
  getSubmission(): ViewRow | undefined;
  setSubmission(value?: ViewRow): void;

  hasConsensus(): boolean;
  clearConsensus(): void;
  getConsensus(): ViewRow | undefined;
  setConsensus(value?: ViewRow): void;

  hasEvaluatedprice(): boolean;
  clearEvaluatedprice(): void;
  getEvaluatedprice(): ViewRow | undefined;
  setEvaluatedprice(value?: ViewRow): void;

  hasValidationerrors(): boolean;
  clearValidationerrors(): void;
  getValidationerrors(): string;
  setValidationerrors(value: string): void;

  hasOutlier(): boolean;
  clearOutlier(): void;
  getOutlier(): string;
  setOutlier(value: string): void;

  hasBenchmark(): boolean;
  clearBenchmark(): void;
  getBenchmark(): string;
  setBenchmark(value: string): void;

  hasConsensusdetails(): boolean;
  clearConsensusdetails(): void;
  getConsensusdetails(): common_gateway_base_pb.ConsensusDetail | undefined;
  setConsensusdetails(value?: common_gateway_base_pb.ConsensusDetail): void;

  getRangesChart(): string;
  setRangesChart(value: string): void;

  hasDataqualityerrors(): boolean;
  clearDataqualityerrors(): void;
  getDataqualityerrors(): common_gateway_base_pb.DataQualityErrors | undefined;
  setDataqualityerrors(value?: common_gateway_base_pb.DataQualityErrors): void;

  clearGroupingKeysList(): void;
  getGroupingKeysList(): Array<common_gateway_base_pb.StringKeyVal>;
  setGroupingKeysList(value: Array<common_gateway_base_pb.StringKeyVal>): void;
  addGroupingKeys(value?: common_gateway_base_pb.StringKeyVal, index?: number): common_gateway_base_pb.StringKeyVal;

  getMetadataCase(): PopUpViewResponseData.MetadataCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PopUpViewResponseData.AsObject;
  static toObject(includeInstance: boolean, msg: PopUpViewResponseData): PopUpViewResponseData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PopUpViewResponseData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PopUpViewResponseData;
  static deserializeBinaryFromReader(message: PopUpViewResponseData, reader: jspb.BinaryReader): PopUpViewResponseData;
}

export namespace PopUpViewResponseData {
  export type AsObject = {
    submission?: ViewRow.AsObject,
    consensus?: ViewRow.AsObject,
    evaluatedprice?: ViewRow.AsObject,
    validationerrors: string,
    outlier: string,
    benchmark: string,
    consensusdetails?: common_gateway_base_pb.ConsensusDetail.AsObject,
    rangesChart: string,
    dataqualityerrors?: common_gateway_base_pb.DataQualityErrors.AsObject,
    groupingKeysList: Array<common_gateway_base_pb.StringKeyVal.AsObject>,
  }

  export enum MetadataCase {
    METADATA_NOT_SET = 0,
    VALIDATIONERRORS = 4,
    OUTLIER = 5,
    BENCHMARK = 6,
  }
}

export class ViewRow extends jspb.Message {
  clearColumnsList(): void;
  getColumnsList(): Array<common_gateway_base_pb.ColumnInfo>;
  setColumnsList(value: Array<common_gateway_base_pb.ColumnInfo>): void;
  addColumns(value?: common_gateway_base_pb.ColumnInfo, index?: number): common_gateway_base_pb.ColumnInfo;

  clearValuesList(): void;
  getValuesList(): Array<google_protobuf_struct_pb.Value>;
  setValuesList(value: Array<google_protobuf_struct_pb.Value>): void;
  addValues(value?: google_protobuf_struct_pb.Value, index?: number): google_protobuf_struct_pb.Value;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ViewRow.AsObject;
  static toObject(includeInstance: boolean, msg: ViewRow): ViewRow.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ViewRow, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ViewRow;
  static deserializeBinaryFromReader(message: ViewRow, reader: jspb.BinaryReader): ViewRow;
}

export namespace ViewRow {
  export type AsObject = {
    columnsList: Array<common_gateway_base_pb.ColumnInfo.AsObject>,
    valuesList: Array<google_protobuf_struct_pb.Value.AsObject>,
  }
}

