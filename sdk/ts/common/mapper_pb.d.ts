/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: common/mapper.proto

import * as jspb from "google-protobuf";
import * as common_gateway_base_pb from "../common/gateway_base_pb";

export class DescriptorPairBasedGetDefinition extends jspb.Message {
  hasIdentifier(): boolean;
  clearIdentifier(): void;
  getIdentifier(): common_gateway_base_pb.Identifier | undefined;
  setIdentifier(value?: common_gateway_base_pb.Identifier): void;

  getScope(): string;
  setScope(value: string): void;

  getSrcDescriptor(): string;
  setSrcDescriptor(value: string): void;

  getDestDescriptor(): string;
  setDestDescriptor(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DescriptorPairBasedGetDefinition.AsObject;
  static toObject(includeInstance: boolean, msg: DescriptorPairBasedGetDefinition): DescriptorPairBasedGetDefinition.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DescriptorPairBasedGetDefinition, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DescriptorPairBasedGetDefinition;
  static deserializeBinaryFromReader(message: DescriptorPairBasedGetDefinition, reader: jspb.BinaryReader): DescriptorPairBasedGetDefinition;
}

export namespace DescriptorPairBasedGetDefinition {
  export type AsObject = {
    identifier?: common_gateway_base_pb.Identifier.AsObject,
    scope: string,
    srcDescriptor: string,
    destDescriptor: string,
  }
}

export class DescriptorPairBasedAcknowledgeResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): DescriptorPairBasedIdentifier | undefined;
  setData(value?: DescriptorPairBasedIdentifier): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): DescriptorPairBasedAcknowledgeResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DescriptorPairBasedAcknowledgeResponse.AsObject;
  static toObject(includeInstance: boolean, msg: DescriptorPairBasedAcknowledgeResponse): DescriptorPairBasedAcknowledgeResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DescriptorPairBasedAcknowledgeResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DescriptorPairBasedAcknowledgeResponse;
  static deserializeBinaryFromReader(message: DescriptorPairBasedAcknowledgeResponse, reader: jspb.BinaryReader): DescriptorPairBasedAcknowledgeResponse;
}

export namespace DescriptorPairBasedAcknowledgeResponse {
  export type AsObject = {
    data?: DescriptorPairBasedIdentifier.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class MappingRuleDefinition extends jspb.Message {
  getUid(): string;
  setUid(value: string): void;

  getSrcDescriptor(): string;
  setSrcDescriptor(value: string): void;

  getDestDescriptor(): string;
  setDestDescriptor(value: string): void;

  clearTransformationsList(): void;
  getTransformationsList(): Array<common_gateway_base_pb.Transformation>;
  setTransformationsList(value: Array<common_gateway_base_pb.Transformation>): void;
  addTransformations(value?: common_gateway_base_pb.Transformation, index?: number): common_gateway_base_pb.Transformation;

  getScope(): string;
  setScope(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MappingRuleDefinition.AsObject;
  static toObject(includeInstance: boolean, msg: MappingRuleDefinition): MappingRuleDefinition.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MappingRuleDefinition, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MappingRuleDefinition;
  static deserializeBinaryFromReader(message: MappingRuleDefinition, reader: jspb.BinaryReader): MappingRuleDefinition;
}

export namespace MappingRuleDefinition {
  export type AsObject = {
    uid: string,
    srcDescriptor: string,
    destDescriptor: string,
    transformationsList: Array<common_gateway_base_pb.Transformation.AsObject>,
    scope: string,
  }
}

export class MappingRuleResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): MappingRuleDefinition | undefined;
  setData(value?: MappingRuleDefinition): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): MappingRuleResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MappingRuleResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MappingRuleResponse): MappingRuleResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MappingRuleResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MappingRuleResponse;
  static deserializeBinaryFromReader(message: MappingRuleResponse, reader: jspb.BinaryReader): MappingRuleResponse;
}

export namespace MappingRuleResponse {
  export type AsObject = {
    data?: MappingRuleDefinition.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class DescriptorPairBasedIdentifier extends jspb.Message {
  getUid(): string;
  setUid(value: string): void;

  getSrcDescriptor(): string;
  setSrcDescriptor(value: string): void;

  getDestDescriptor(): string;
  setDestDescriptor(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DescriptorPairBasedIdentifier.AsObject;
  static toObject(includeInstance: boolean, msg: DescriptorPairBasedIdentifier): DescriptorPairBasedIdentifier.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DescriptorPairBasedIdentifier, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DescriptorPairBasedIdentifier;
  static deserializeBinaryFromReader(message: DescriptorPairBasedIdentifier, reader: jspb.BinaryReader): DescriptorPairBasedIdentifier;
}

export namespace DescriptorPairBasedIdentifier {
  export type AsObject = {
    uid: string,
    srcDescriptor: string,
    destDescriptor: string,
  }
}

export class DescriptorPairBasedResultsList extends jspb.Message {
  clearResultsList(): void;
  getResultsList(): Array<DescriptorPairBasedIdentifier>;
  setResultsList(value: Array<DescriptorPairBasedIdentifier>): void;
  addResults(value?: DescriptorPairBasedIdentifier, index?: number): DescriptorPairBasedIdentifier;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DescriptorPairBasedResultsList.AsObject;
  static toObject(includeInstance: boolean, msg: DescriptorPairBasedResultsList): DescriptorPairBasedResultsList.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DescriptorPairBasedResultsList, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DescriptorPairBasedResultsList;
  static deserializeBinaryFromReader(message: DescriptorPairBasedResultsList, reader: jspb.BinaryReader): DescriptorPairBasedResultsList;
}

export namespace DescriptorPairBasedResultsList {
  export type AsObject = {
    resultsList: Array<DescriptorPairBasedIdentifier.AsObject>,
  }
}

export class MappingRuleList extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): DescriptorPairBasedResultsList | undefined;
  setData(value?: DescriptorPairBasedResultsList): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): MappingRuleList.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MappingRuleList.AsObject;
  static toObject(includeInstance: boolean, msg: MappingRuleList): MappingRuleList.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MappingRuleList, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MappingRuleList;
  static deserializeBinaryFromReader(message: MappingRuleList, reader: jspb.BinaryReader): MappingRuleList;
}

export namespace MappingRuleList {
  export type AsObject = {
    data?: DescriptorPairBasedResultsList.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class DescriptorPairBasedVersionRequest extends jspb.Message {
  getSrcDescriptor(): string;
  setSrcDescriptor(value: string): void;

  getDestDescriptor(): string;
  setDestDescriptor(value: string): void;

  getVersionId(): string;
  setVersionId(value: string): void;

  getScope(): string;
  setScope(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DescriptorPairBasedVersionRequest.AsObject;
  static toObject(includeInstance: boolean, msg: DescriptorPairBasedVersionRequest): DescriptorPairBasedVersionRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DescriptorPairBasedVersionRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DescriptorPairBasedVersionRequest;
  static deserializeBinaryFromReader(message: DescriptorPairBasedVersionRequest, reader: jspb.BinaryReader): DescriptorPairBasedVersionRequest;
}

export namespace DescriptorPairBasedVersionRequest {
  export type AsObject = {
    srcDescriptor: string,
    destDescriptor: string,
    versionId: string,
    scope: string,
  }
}

