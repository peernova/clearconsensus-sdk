/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: common/lookup_table.proto

import * as jspb from "google-protobuf";
import * as google_protobuf_struct_pb from "google-protobuf/google/protobuf/struct_pb";
import * as common_gateway_base_pb from "../common/gateway_base_pb";

export class AddLookupTableRequest extends jspb.Message {
  getScope(): string;
  setScope(value: string): void;

  hasLookuptable(): boolean;
  clearLookuptable(): void;
  getLookuptable(): LookupTableDefinition | undefined;
  setLookuptable(value?: LookupTableDefinition): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AddLookupTableRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AddLookupTableRequest): AddLookupTableRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AddLookupTableRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AddLookupTableRequest;
  static deserializeBinaryFromReader(message: AddLookupTableRequest, reader: jspb.BinaryReader): AddLookupTableRequest;
}

export namespace AddLookupTableRequest {
  export type AsObject = {
    scope: string,
    lookuptable?: LookupTableDefinition.AsObject,
  }
}

export class GetLookupTableResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): LookupTableDefinition | undefined;
  setData(value?: LookupTableDefinition): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): GetLookupTableResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetLookupTableResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetLookupTableResponse): GetLookupTableResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetLookupTableResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetLookupTableResponse;
  static deserializeBinaryFromReader(message: GetLookupTableResponse, reader: jspb.BinaryReader): GetLookupTableResponse;
}

export namespace GetLookupTableResponse {
  export type AsObject = {
    data?: LookupTableDefinition.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class LookupTableListItem extends jspb.Message {
  hasIdentifier(): boolean;
  clearIdentifier(): void;
  getIdentifier(): common_gateway_base_pb.Identifier | undefined;
  setIdentifier(value?: common_gateway_base_pb.Identifier): void;

  getType(): LutTypeMap[keyof LutTypeMap];
  setType(value: LutTypeMap[keyof LutTypeMap]): void;

  getValueField(): string;
  setValueField(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): LookupTableListItem.AsObject;
  static toObject(includeInstance: boolean, msg: LookupTableListItem): LookupTableListItem.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: LookupTableListItem, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): LookupTableListItem;
  static deserializeBinaryFromReader(message: LookupTableListItem, reader: jspb.BinaryReader): LookupTableListItem;
}

export namespace LookupTableListItem {
  export type AsObject = {
    identifier?: common_gateway_base_pb.Identifier.AsObject,
    type: LutTypeMap[keyof LutTypeMap],
    valueField: string,
  }
}

export class LookupTableList extends jspb.Message {
  clearResultsList(): void;
  getResultsList(): Array<LookupTableListItem>;
  setResultsList(value: Array<LookupTableListItem>): void;
  addResults(value?: LookupTableListItem, index?: number): LookupTableListItem;

  getTotalrecords(): number;
  setTotalrecords(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): LookupTableList.AsObject;
  static toObject(includeInstance: boolean, msg: LookupTableList): LookupTableList.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: LookupTableList, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): LookupTableList;
  static deserializeBinaryFromReader(message: LookupTableList, reader: jspb.BinaryReader): LookupTableList;
}

export namespace LookupTableList {
  export type AsObject = {
    resultsList: Array<LookupTableListItem.AsObject>,
    totalrecords: number,
  }
}

export class ListLookupTableResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): LookupTableList | undefined;
  setData(value?: LookupTableList): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): ListLookupTableResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListLookupTableResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListLookupTableResponse): ListLookupTableResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListLookupTableResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListLookupTableResponse;
  static deserializeBinaryFromReader(message: ListLookupTableResponse, reader: jspb.BinaryReader): ListLookupTableResponse;
}

export namespace ListLookupTableResponse {
  export type AsObject = {
    data?: LookupTableList.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class LookupTableDefinition extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  getType(): LutTypeMap[keyof LutTypeMap];
  setType(value: LutTypeMap[keyof LutTypeMap]): void;

  clearFieldsList(): void;
  getFieldsList(): Array<LutField>;
  setFieldsList(value: Array<LutField>): void;
  addFields(value?: LutField, index?: number): LutField;

  clearRowsList(): void;
  getRowsList(): Array<LutEntry>;
  setRowsList(value: Array<LutEntry>): void;
  addRows(value?: LutEntry, index?: number): LutEntry;

  getTotalrecords(): number;
  setTotalrecords(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): LookupTableDefinition.AsObject;
  static toObject(includeInstance: boolean, msg: LookupTableDefinition): LookupTableDefinition.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: LookupTableDefinition, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): LookupTableDefinition;
  static deserializeBinaryFromReader(message: LookupTableDefinition, reader: jspb.BinaryReader): LookupTableDefinition;
}

export namespace LookupTableDefinition {
  export type AsObject = {
    name: string,
    type: LutTypeMap[keyof LutTypeMap],
    fieldsList: Array<LutField.AsObject>,
    rowsList: Array<LutEntry.AsObject>,
    totalrecords: number,
  }
}

export class LutField extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  getType(): LutTypeMap[keyof LutTypeMap];
  setType(value: LutTypeMap[keyof LutTypeMap]): void;

  getKey(): boolean;
  setKey(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): LutField.AsObject;
  static toObject(includeInstance: boolean, msg: LutField): LutField.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: LutField, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): LutField;
  static deserializeBinaryFromReader(message: LutField, reader: jspb.BinaryReader): LutField;
}

export namespace LutField {
  export type AsObject = {
    name: string,
    type: LutTypeMap[keyof LutTypeMap],
    key: boolean,
  }
}

export class LutEntry extends jspb.Message {
  hasValues(): boolean;
  clearValues(): void;
  getValues(): google_protobuf_struct_pb.ListValue | undefined;
  setValues(value?: google_protobuf_struct_pb.ListValue): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): LutEntry.AsObject;
  static toObject(includeInstance: boolean, msg: LutEntry): LutEntry.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: LutEntry, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): LutEntry;
  static deserializeBinaryFromReader(message: LutEntry, reader: jspb.BinaryReader): LutEntry;
}

export namespace LutEntry {
  export type AsObject = {
    values?: google_protobuf_struct_pb.ListValue.AsObject,
  }
}

export interface LutTypeMap {
  BOOLEAN: 0;
  STRING: 1;
  NUMERIC: 2;
  TIMESTAMP: 3;
}

export const LutType: LutTypeMap;

