/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: common/charts.proto

import * as jspb from "google-protobuf";
import * as common_gateway_base_pb from "../common/gateway_base_pb";

export class ChartsRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getUnderlying(): string;
  setUnderlying(value: string): void;

  getSubmittedDate(): string;
  setSubmittedDate(value: string): void;

  getClient(): string;
  setClient(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChartsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ChartsRequest): ChartsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ChartsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChartsRequest;
  static deserializeBinaryFromReader(message: ChartsRequest, reader: jspb.BinaryReader): ChartsRequest;
}

export namespace ChartsRequest {
  export type AsObject = {
    assetId: string,
    underlying: string,
    submittedDate: string,
    client: string,
    traceName: string,
  }
}

export class ChartsResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): ChartsResponseData | undefined;
  setData(value?: ChartsResponseData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): ChartsResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChartsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ChartsResponse): ChartsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ChartsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChartsResponse;
  static deserializeBinaryFromReader(message: ChartsResponse, reader: jspb.BinaryReader): ChartsResponse;
}

export namespace ChartsResponse {
  export type AsObject = {
    data?: ChartsResponseData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class ChartsResponseData extends jspb.Message {
  clearOutliersList(): void;
  getOutliersList(): Array<common_gateway_base_pb.OutlierMetadata>;
  setOutliersList(value: Array<common_gateway_base_pb.OutlierMetadata>): void;
  addOutliers(value?: common_gateway_base_pb.OutlierMetadata, index?: number): common_gateway_base_pb.OutlierMetadata;

  clearBenchmarkList(): void;
  getBenchmarkList(): Array<common_gateway_base_pb.BenchmarkMetadata>;
  setBenchmarkList(value: Array<common_gateway_base_pb.BenchmarkMetadata>): void;
  addBenchmark(value?: common_gateway_base_pb.BenchmarkMetadata, index?: number): common_gateway_base_pb.BenchmarkMetadata;

  clearChartsourcesList(): void;
  getChartsourcesList(): Array<ChartSource>;
  setChartsourcesList(value: Array<ChartSource>): void;
  addChartsources(value?: ChartSource, index?: number): ChartSource;

  clearTenorsList(): void;
  getTenorsList(): Array<string>;
  setTenorsList(value: Array<string>): void;
  addTenors(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChartsResponseData.AsObject;
  static toObject(includeInstance: boolean, msg: ChartsResponseData): ChartsResponseData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ChartsResponseData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChartsResponseData;
  static deserializeBinaryFromReader(message: ChartsResponseData, reader: jspb.BinaryReader): ChartsResponseData;
}

export namespace ChartsResponseData {
  export type AsObject = {
    outliersList: Array<common_gateway_base_pb.OutlierMetadata.AsObject>,
    benchmarkList: Array<common_gateway_base_pb.BenchmarkMetadata.AsObject>,
    chartsourcesList: Array<ChartSource.AsObject>,
    tenorsList: Array<string>,
  }
}

export class ChartSource extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  clearChartsList(): void;
  getChartsList(): Array<Chart>;
  setChartsList(value: Array<Chart>): void;
  addCharts(value?: Chart, index?: number): Chart;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChartSource.AsObject;
  static toObject(includeInstance: boolean, msg: ChartSource): ChartSource.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ChartSource, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChartSource;
  static deserializeBinaryFromReader(message: ChartSource, reader: jspb.BinaryReader): ChartSource;
}

export namespace ChartSource {
  export type AsObject = {
    name: string,
    chartsList: Array<Chart.AsObject>,
  }
}

export class Chart extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  clearPointsList(): void;
  getPointsList(): Array<ChartPoint>;
  setPointsList(value: Array<ChartPoint>): void;
  addPoints(value?: ChartPoint, index?: number): ChartPoint;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Chart.AsObject;
  static toObject(includeInstance: boolean, msg: Chart): Chart.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Chart, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Chart;
  static deserializeBinaryFromReader(message: Chart, reader: jspb.BinaryReader): Chart;
}

export namespace Chart {
  export type AsObject = {
    name: string,
    pointsList: Array<ChartPoint.AsObject>,
  }
}

export class ChartPoint extends jspb.Message {
  getTenor(): string;
  setTenor(value: string): void;

  getValue(): number;
  setValue(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChartPoint.AsObject;
  static toObject(includeInstance: boolean, msg: ChartPoint): ChartPoint.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ChartPoint, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChartPoint;
  static deserializeBinaryFromReader(message: ChartPoint, reader: jspb.BinaryReader): ChartPoint;
}

export namespace ChartPoint {
  export type AsObject = {
    tenor: string,
    value: number,
  }
}

export class ChartsCurrenciesRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getSubmittedDate(): string;
  setSubmittedDate(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChartsCurrenciesRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ChartsCurrenciesRequest): ChartsCurrenciesRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ChartsCurrenciesRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChartsCurrenciesRequest;
  static deserializeBinaryFromReader(message: ChartsCurrenciesRequest, reader: jspb.BinaryReader): ChartsCurrenciesRequest;
}

export namespace ChartsCurrenciesRequest {
  export type AsObject = {
    assetId: string,
    submittedDate: string,
    traceName: string,
  }
}

export class ChartsCurrenciesResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): ChartsCurrenciesResponseData | undefined;
  setData(value?: ChartsCurrenciesResponseData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): ChartsCurrenciesResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChartsCurrenciesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ChartsCurrenciesResponse): ChartsCurrenciesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ChartsCurrenciesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChartsCurrenciesResponse;
  static deserializeBinaryFromReader(message: ChartsCurrenciesResponse, reader: jspb.BinaryReader): ChartsCurrenciesResponse;
}

export namespace ChartsCurrenciesResponse {
  export type AsObject = {
    data?: ChartsCurrenciesResponseData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class ChartsCurrenciesResponseData extends jspb.Message {
  clearCurrencypairsList(): void;
  getCurrencypairsList(): Array<string>;
  setCurrencypairsList(value: Array<string>): void;
  addCurrencypairs(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChartsCurrenciesResponseData.AsObject;
  static toObject(includeInstance: boolean, msg: ChartsCurrenciesResponseData): ChartsCurrenciesResponseData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ChartsCurrenciesResponseData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChartsCurrenciesResponseData;
  static deserializeBinaryFromReader(message: ChartsCurrenciesResponseData, reader: jspb.BinaryReader): ChartsCurrenciesResponseData;
}

export namespace ChartsCurrenciesResponseData {
  export type AsObject = {
    currencypairsList: Array<string>,
  }
}

