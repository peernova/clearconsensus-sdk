/* eslint-disable */
/*Generated by GenDocu.com*/
// package: com.peernova.titanium.casbin.management.grpc.proto
// file: common/usermanagement_policy.proto

import * as jspb from "google-protobuf";
import * as google_protobuf_descriptor_pb from "google-protobuf/google/protobuf/descriptor_pb";
import * as common_usermanagement_error_pb from "../common/usermanagement_error_pb";

export class PolicyDto extends jspb.Message {
  getType(): string;
  setType(value: string): void;

  getUsername(): string;
  setUsername(value: string): void;

  getAsset(): string;
  setAsset(value: string): void;

  getAssetpermission(): string;
  setAssetpermission(value: string): void;

  getApi(): string;
  setApi(value: string): void;

  getApipermission(): string;
  setApipermission(value: string): void;

  getAddon(): string;
  setAddon(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PolicyDto.AsObject;
  static toObject(includeInstance: boolean, msg: PolicyDto): PolicyDto.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PolicyDto, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PolicyDto;
  static deserializeBinaryFromReader(message: PolicyDto, reader: jspb.BinaryReader): PolicyDto;
}

export namespace PolicyDto {
  export type AsObject = {
    type: string,
    username: string,
    asset: string,
    assetpermission: string,
    api: string,
    apipermission: string,
    addon: string,
  }
}

export class Policies extends jspb.Message {
  clearPolicydtoList(): void;
  getPolicydtoList(): Array<PolicyDto>;
  setPolicydtoList(value: Array<PolicyDto>): void;
  addPolicydto(value?: PolicyDto, index?: number): PolicyDto;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Policies.AsObject;
  static toObject(includeInstance: boolean, msg: Policies): Policies.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Policies, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Policies;
  static deserializeBinaryFromReader(message: Policies, reader: jspb.BinaryReader): Policies;
}

export namespace Policies {
  export type AsObject = {
    policydtoList: Array<PolicyDto.AsObject>,
  }
}

export class PoliciesResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): Policies | undefined;
  setData(value?: Policies): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_usermanagement_error_pb.Error | undefined;
  setError(value?: common_usermanagement_error_pb.Error): void;

  getResponseCase(): PoliciesResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PoliciesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: PoliciesResponse): PoliciesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PoliciesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PoliciesResponse;
  static deserializeBinaryFromReader(message: PoliciesResponse, reader: jspb.BinaryReader): PoliciesResponse;
}

export namespace PoliciesResponse {
  export type AsObject = {
    data?: Policies.AsObject,
    error?: common_usermanagement_error_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class PolicyType extends jspb.Message {
  getType(): string;
  setType(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PolicyType.AsObject;
  static toObject(includeInstance: boolean, msg: PolicyType): PolicyType.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PolicyType, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PolicyType;
  static deserializeBinaryFromReader(message: PolicyType, reader: jspb.BinaryReader): PolicyType;
}

export namespace PolicyType {
  export type AsObject = {
    type: string,
  }
}

export class UsernamePermissionRequest extends jspb.Message {
  getUsername(): string;
  setUsername(value: string): void;

  getPermission(): string;
  setPermission(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UsernamePermissionRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UsernamePermissionRequest): UsernamePermissionRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UsernamePermissionRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UsernamePermissionRequest;
  static deserializeBinaryFromReader(message: UsernamePermissionRequest, reader: jspb.BinaryReader): UsernamePermissionRequest;
}

export namespace UsernamePermissionRequest {
  export type AsObject = {
    username: string,
    permission: string,
  }
}

export class PoliciesList extends jspb.Message {
  clearPoliciesList(): void;
  getPoliciesList(): Array<string>;
  setPoliciesList(value: Array<string>): void;
  addPolicies(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PoliciesList.AsObject;
  static toObject(includeInstance: boolean, msg: PoliciesList): PoliciesList.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PoliciesList, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PoliciesList;
  static deserializeBinaryFromReader(message: PoliciesList, reader: jspb.BinaryReader): PoliciesList;
}

export namespace PoliciesList {
  export type AsObject = {
    policiesList: Array<string>,
  }
}

export class PoliciesListResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): PoliciesList | undefined;
  setData(value?: PoliciesList): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_usermanagement_error_pb.Error | undefined;
  setError(value?: common_usermanagement_error_pb.Error): void;

  getResponseCase(): PoliciesListResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PoliciesListResponse.AsObject;
  static toObject(includeInstance: boolean, msg: PoliciesListResponse): PoliciesListResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PoliciesListResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PoliciesListResponse;
  static deserializeBinaryFromReader(message: PoliciesListResponse, reader: jspb.BinaryReader): PoliciesListResponse;
}

export namespace PoliciesListResponse {
  export type AsObject = {
    data?: PoliciesList.AsObject,
    error?: common_usermanagement_error_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

