/* eslint-disable */
/*Generated by GenDocu.com*/
// package: com.peernova.titanium.casbin.management.grpc.proto
// file: common/usermanagement_fe_specific.proto

import * as jspb from "google-protobuf";
import * as common_usermanagement_error_pb from "../common/usermanagement_error_pb";
import * as google_protobuf_any_pb from "google-protobuf/google/protobuf/any_pb";

export class Table extends jspb.Message {
  getTotalrows(): number;
  setTotalrows(value: number): void;

  clearColumnsList(): void;
  getColumnsList(): Array<Table.Column>;
  setColumnsList(value: Array<Table.Column>): void;
  addColumns(value?: Table.Column, index?: number): Table.Column;

  clearRowsList(): void;
  getRowsList(): Array<Table.Row>;
  setRowsList(value: Array<Table.Row>): void;
  addRows(value?: Table.Row, index?: number): Table.Row;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Table.AsObject;
  static toObject(includeInstance: boolean, msg: Table): Table.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Table, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Table;
  static deserializeBinaryFromReader(message: Table, reader: jspb.BinaryReader): Table;
}

export namespace Table {
  export type AsObject = {
    totalrows: number,
    columnsList: Array<Table.Column.AsObject>,
    rowsList: Array<Table.Row.AsObject>,
  }

  export class Column extends jspb.Message {
    getColumndbtype(): string;
    setColumndbtype(value: string): void;

    getColumnname(): string;
    setColumnname(value: string): void;

    getColumntype(): string;
    setColumntype(value: string): void;

    getRawcolumnname(): string;
    setRawcolumnname(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Column.AsObject;
    static toObject(includeInstance: boolean, msg: Column): Column.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Column, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Column;
    static deserializeBinaryFromReader(message: Column, reader: jspb.BinaryReader): Column;
  }

  export namespace Column {
    export type AsObject = {
      columndbtype: string,
      columnname: string,
      columntype: string,
      rawcolumnname: string,
    }
  }

  export class Row extends jspb.Message {
    clearValuesList(): void;
    getValuesList(): Array<string>;
    setValuesList(value: Array<string>): void;
    addValues(value: string, index?: number): string;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Row.AsObject;
    static toObject(includeInstance: boolean, msg: Row): Row.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Row, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Row;
    static deserializeBinaryFromReader(message: Row, reader: jspb.BinaryReader): Row;
  }

  export namespace Row {
    export type AsObject = {
      valuesList: Array<string>,
    }
  }
}

export class SearchCriteria extends jspb.Message {
  hasLimit(): boolean;
  clearLimit(): void;
  getLimit(): SearchCriteria.Limit | undefined;
  setLimit(value?: SearchCriteria.Limit): void;

  getOffset(): number;
  setOffset(value: number): void;

  hasOrderby(): boolean;
  clearOrderby(): void;
  getOrderby(): SearchCriteria.OrderBy | undefined;
  setOrderby(value?: SearchCriteria.OrderBy): void;

  getFilter(): string;
  setFilter(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SearchCriteria.AsObject;
  static toObject(includeInstance: boolean, msg: SearchCriteria): SearchCriteria.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SearchCriteria, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SearchCriteria;
  static deserializeBinaryFromReader(message: SearchCriteria, reader: jspb.BinaryReader): SearchCriteria;
}

export namespace SearchCriteria {
  export type AsObject = {
    limit?: SearchCriteria.Limit.AsObject,
    offset: number,
    orderby?: SearchCriteria.OrderBy.AsObject,
    filter: string,
  }

  export class Limit extends jspb.Message {
    getValue(): number;
    setValue(value: number): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Limit.AsObject;
    static toObject(includeInstance: boolean, msg: Limit): Limit.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Limit, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Limit;
    static deserializeBinaryFromReader(message: Limit, reader: jspb.BinaryReader): Limit;
  }

  export namespace Limit {
    export type AsObject = {
      value: number,
    }
  }

  export class OrderBy extends jspb.Message {
    getColumn(): string;
    setColumn(value: string): void;

    getOrder(): string;
    setOrder(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): OrderBy.AsObject;
    static toObject(includeInstance: boolean, msg: OrderBy): OrderBy.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: OrderBy, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): OrderBy;
    static deserializeBinaryFromReader(message: OrderBy, reader: jspb.BinaryReader): OrderBy;
  }

  export namespace OrderBy {
    export type AsObject = {
      column: string,
      order: string,
    }
  }
}

export class ServiceResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): google_protobuf_any_pb.Any | undefined;
  setData(value?: google_protobuf_any_pb.Any): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_usermanagement_error_pb.Error | undefined;
  setError(value?: common_usermanagement_error_pb.Error): void;

  getResponseCase(): ServiceResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ServiceResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ServiceResponse): ServiceResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ServiceResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ServiceResponse;
  static deserializeBinaryFromReader(message: ServiceResponse, reader: jspb.BinaryReader): ServiceResponse;
}

export namespace ServiceResponse {
  export type AsObject = {
    data?: google_protobuf_any_pb.Any.AsObject,
    error?: common_usermanagement_error_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

