/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: common/udf.proto

import * as jspb from "google-protobuf";
import * as google_api_annotations_pb from "../google/api/annotations_pb";
import * as common_gateway_base_pb from "../common/gateway_base_pb";

export class UdfItem extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  getType(): UdfFieldTypeMap[keyof UdfFieldTypeMap];
  setType(value: UdfFieldTypeMap[keyof UdfFieldTypeMap]): void;

  getLastModified(): string;
  setLastModified(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UdfItem.AsObject;
  static toObject(includeInstance: boolean, msg: UdfItem): UdfItem.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UdfItem, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UdfItem;
  static deserializeBinaryFromReader(message: UdfItem, reader: jspb.BinaryReader): UdfItem;
}

export namespace UdfItem {
  export type AsObject = {
    name: string,
    type: UdfFieldTypeMap[keyof UdfFieldTypeMap],
    lastModified: string,
  }
}

export class UdfList extends jspb.Message {
  clearResultsList(): void;
  getResultsList(): Array<UdfItem>;
  setResultsList(value: Array<UdfItem>): void;
  addResults(value?: UdfItem, index?: number): UdfItem;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UdfList.AsObject;
  static toObject(includeInstance: boolean, msg: UdfList): UdfList.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UdfList, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UdfList;
  static deserializeBinaryFromReader(message: UdfList, reader: jspb.BinaryReader): UdfList;
}

export namespace UdfList {
  export type AsObject = {
    resultsList: Array<UdfItem.AsObject>,
  }
}

export class ListUdfResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): UdfList | undefined;
  setData(value?: UdfList): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): ListUdfResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListUdfResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListUdfResponse): ListUdfResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListUdfResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListUdfResponse;
  static deserializeBinaryFromReader(message: ListUdfResponse, reader: jspb.BinaryReader): ListUdfResponse;
}

export namespace ListUdfResponse {
  export type AsObject = {
    data?: UdfList.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class UdfNameRequest extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  getScope(): string;
  setScope(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UdfNameRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UdfNameRequest): UdfNameRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UdfNameRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UdfNameRequest;
  static deserializeBinaryFromReader(message: UdfNameRequest, reader: jspb.BinaryReader): UdfNameRequest;
}

export namespace UdfNameRequest {
  export type AsObject = {
    name: string,
    scope: string,
  }
}

export class UdfMetadata extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  getOutput(): UdfFieldTypeMap[keyof UdfFieldTypeMap];
  setOutput(value: UdfFieldTypeMap[keyof UdfFieldTypeMap]): void;

  clearArgsList(): void;
  getArgsList(): Array<UdfFieldTypeMap[keyof UdfFieldTypeMap]>;
  setArgsList(value: Array<UdfFieldTypeMap[keyof UdfFieldTypeMap]>): void;
  addArgs(value: UdfFieldTypeMap[keyof UdfFieldTypeMap], index?: number): UdfFieldTypeMap[keyof UdfFieldTypeMap];

  clearColumnTypesList(): void;
  getColumnTypesList(): Array<UdfFieldTypeMap[keyof UdfFieldTypeMap]>;
  setColumnTypesList(value: Array<UdfFieldTypeMap[keyof UdfFieldTypeMap]>): void;
  addColumnTypes(value: UdfFieldTypeMap[keyof UdfFieldTypeMap], index?: number): UdfFieldTypeMap[keyof UdfFieldTypeMap];

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UdfMetadata.AsObject;
  static toObject(includeInstance: boolean, msg: UdfMetadata): UdfMetadata.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UdfMetadata, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UdfMetadata;
  static deserializeBinaryFromReader(message: UdfMetadata, reader: jspb.BinaryReader): UdfMetadata;
}

export namespace UdfMetadata {
  export type AsObject = {
    name: string,
    output: UdfFieldTypeMap[keyof UdfFieldTypeMap],
    argsList: Array<UdfFieldTypeMap[keyof UdfFieldTypeMap]>,
    columnTypesList: Array<UdfFieldTypeMap[keyof UdfFieldTypeMap]>,
  }
}

export class GetUdfResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): UdfMetadata | undefined;
  setData(value?: UdfMetadata): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): GetUdfResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetUdfResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetUdfResponse): GetUdfResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetUdfResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetUdfResponse;
  static deserializeBinaryFromReader(message: GetUdfResponse, reader: jspb.BinaryReader): GetUdfResponse;
}

export namespace GetUdfResponse {
  export type AsObject = {
    data?: UdfMetadata.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export interface UdfFieldTypeMap {
  UDF_STRING: 0;
  UDF_BOOLEAN: 1;
  BIGDECIMAL: 2;
  UDF_TIMESTAMP: 3;
  LONG: 4;
  LIST: 5;
  FLOAT: 6;
  DOUBLE: 7;
  INTEGER: 8;
  LOOKUPTABLE: 9;
  RULEERROR: 10;
  DATASET: 11;
}

export const UdfFieldType: UdfFieldTypeMap;

