/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: common/assets.proto

import * as jspb from "google-protobuf";
import * as common_gateway_base_pb from "../common/gateway_base_pb";

export class RecentAssetsRequest extends jspb.Message {
  hasLimit(): boolean;
  clearLimit(): void;
  getLimit(): common_gateway_base_pb.Limit | undefined;
  setLimit(value?: common_gateway_base_pb.Limit): void;

  getOffset(): number;
  setOffset(value: number): void;

  hasOrderby(): boolean;
  clearOrderby(): void;
  getOrderby(): common_gateway_base_pb.OrderBy | undefined;
  setOrderby(value?: common_gateway_base_pb.OrderBy): void;

  getFilter(): string;
  setFilter(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RecentAssetsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: RecentAssetsRequest): RecentAssetsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RecentAssetsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RecentAssetsRequest;
  static deserializeBinaryFromReader(message: RecentAssetsRequest, reader: jspb.BinaryReader): RecentAssetsRequest;
}

export namespace RecentAssetsRequest {
  export type AsObject = {
    limit?: common_gateway_base_pb.Limit.AsObject,
    offset: number,
    orderby?: common_gateway_base_pb.OrderBy.AsObject,
    filter: string,
  }
}

export class RecentAssetsResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): RecentAssetsResponseData | undefined;
  setData(value?: RecentAssetsResponseData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): RecentAssetsResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RecentAssetsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: RecentAssetsResponse): RecentAssetsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RecentAssetsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RecentAssetsResponse;
  static deserializeBinaryFromReader(message: RecentAssetsResponse, reader: jspb.BinaryReader): RecentAssetsResponse;
}

export namespace RecentAssetsResponse {
  export type AsObject = {
    data?: RecentAssetsResponseData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class RecentAssetsResponseData extends jspb.Message {
  clearColumnsList(): void;
  getColumnsList(): Array<common_gateway_base_pb.ColumnInfo>;
  setColumnsList(value: Array<common_gateway_base_pb.ColumnInfo>): void;
  addColumns(value?: common_gateway_base_pb.ColumnInfo, index?: number): common_gateway_base_pb.ColumnInfo;

  clearRowsList(): void;
  getRowsList(): Array<RecentAssetsRow>;
  setRowsList(value: Array<RecentAssetsRow>): void;
  addRows(value?: RecentAssetsRow, index?: number): RecentAssetsRow;

  getTotalRows(): number;
  setTotalRows(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RecentAssetsResponseData.AsObject;
  static toObject(includeInstance: boolean, msg: RecentAssetsResponseData): RecentAssetsResponseData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RecentAssetsResponseData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RecentAssetsResponseData;
  static deserializeBinaryFromReader(message: RecentAssetsResponseData, reader: jspb.BinaryReader): RecentAssetsResponseData;
}

export namespace RecentAssetsResponseData {
  export type AsObject = {
    columnsList: Array<common_gateway_base_pb.ColumnInfo.AsObject>,
    rowsList: Array<RecentAssetsRow.AsObject>,
    totalRows: number,
  }
}

export class RecentAssetsRow extends jspb.Message {
  clearValuesList(): void;
  getValuesList(): Array<string>;
  setValuesList(value: Array<string>): void;
  addValues(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RecentAssetsRow.AsObject;
  static toObject(includeInstance: boolean, msg: RecentAssetsRow): RecentAssetsRow.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RecentAssetsRow, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RecentAssetsRow;
  static deserializeBinaryFromReader(message: RecentAssetsRow, reader: jspb.BinaryReader): RecentAssetsRow;
}

export namespace RecentAssetsRow {
  export type AsObject = {
    valuesList: Array<string>,
  }
}

export class AssetsListRequest extends jspb.Message {
  getSnapTime(): string;
  setSnapTime(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AssetsListRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AssetsListRequest): AssetsListRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AssetsListRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AssetsListRequest;
  static deserializeBinaryFromReader(message: AssetsListRequest, reader: jspb.BinaryReader): AssetsListRequest;
}

export namespace AssetsListRequest {
  export type AsObject = {
    snapTime: string,
  }
}

export class AssetsListResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): AssetsList | undefined;
  setData(value?: AssetsList): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): AssetsListResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AssetsListResponse.AsObject;
  static toObject(includeInstance: boolean, msg: AssetsListResponse): AssetsListResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AssetsListResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AssetsListResponse;
  static deserializeBinaryFromReader(message: AssetsListResponse, reader: jspb.BinaryReader): AssetsListResponse;
}

export namespace AssetsListResponse {
  export type AsObject = {
    data?: AssetsList.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class AssetsList extends jspb.Message {
  clearAssetsList(): void;
  getAssetsList(): Array<Asset>;
  setAssetsList(value: Array<Asset>): void;
  addAssets(value?: Asset, index?: number): Asset;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AssetsList.AsObject;
  static toObject(includeInstance: boolean, msg: AssetsList): AssetsList.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AssetsList, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AssetsList;
  static deserializeBinaryFromReader(message: AssetsList, reader: jspb.BinaryReader): AssetsList;
}

export namespace AssetsList {
  export type AsObject = {
    assetsList: Array<Asset.AsObject>,
  }
}

export class Asset extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  clearServicesList(): void;
  getServicesList(): Array<Service>;
  setServicesList(value: Array<Service>): void;
  addServices(value?: Service, index?: number): Service;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Asset.AsObject;
  static toObject(includeInstance: boolean, msg: Asset): Asset.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Asset, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Asset;
  static deserializeBinaryFromReader(message: Asset, reader: jspb.BinaryReader): Asset;
}

export namespace Asset {
  export type AsObject = {
    name: string,
    servicesList: Array<Service.AsObject>,
  }
}

export class Service extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  clearSubAssetsList(): void;
  getSubAssetsList(): Array<SubAsset>;
  setSubAssetsList(value: Array<SubAsset>): void;
  addSubAssets(value?: SubAsset, index?: number): SubAsset;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Service.AsObject;
  static toObject(includeInstance: boolean, msg: Service): Service.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Service, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Service;
  static deserializeBinaryFromReader(message: Service, reader: jspb.BinaryReader): Service;
}

export namespace Service {
  export type AsObject = {
    name: string,
    subAssetsList: Array<SubAsset.AsObject>,
  }
}

export class SubAsset extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  getId(): string;
  setId(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubAsset.AsObject;
  static toObject(includeInstance: boolean, msg: SubAsset): SubAsset.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubAsset, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubAsset;
  static deserializeBinaryFromReader(message: SubAsset, reader: jspb.BinaryReader): SubAsset;
}

export namespace SubAsset {
  export type AsObject = {
    name: string,
    id: string,
    traceName: string,
  }
}

export class AssetsRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  hasOrderby(): boolean;
  clearOrderby(): void;
  getOrderby(): common_gateway_base_pb.OrderBy | undefined;
  setOrderby(value?: common_gateway_base_pb.OrderBy): void;

  hasLimit(): boolean;
  clearLimit(): void;
  getLimit(): common_gateway_base_pb.Limit | undefined;
  setLimit(value?: common_gateway_base_pb.Limit): void;

  getOffset(): number;
  setOffset(value: number): void;

  getFilter(): string;
  setFilter(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AssetsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AssetsRequest): AssetsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AssetsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AssetsRequest;
  static deserializeBinaryFromReader(message: AssetsRequest, reader: jspb.BinaryReader): AssetsRequest;
}

export namespace AssetsRequest {
  export type AsObject = {
    assetId: string,
    orderby?: common_gateway_base_pb.OrderBy.AsObject,
    limit?: common_gateway_base_pb.Limit.AsObject,
    offset: number,
    filter: string,
    traceName: string,
  }
}

export class AssetsResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): common_gateway_base_pb.ResponseData | undefined;
  setData(value?: common_gateway_base_pb.ResponseData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): AssetsResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AssetsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: AssetsResponse): AssetsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AssetsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AssetsResponse;
  static deserializeBinaryFromReader(message: AssetsResponse, reader: jspb.BinaryReader): AssetsResponse;
}

export namespace AssetsResponse {
  export type AsObject = {
    data?: common_gateway_base_pb.ResponseData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class AssetsResponseData extends jspb.Message {
  clearColumnsList(): void;
  getColumnsList(): Array<common_gateway_base_pb.ColumnInfo>;
  setColumnsList(value: Array<common_gateway_base_pb.ColumnInfo>): void;
  addColumns(value?: common_gateway_base_pb.ColumnInfo, index?: number): common_gateway_base_pb.ColumnInfo;

  clearRowsList(): void;
  getRowsList(): Array<AssetsRow>;
  setRowsList(value: Array<AssetsRow>): void;
  addRows(value?: AssetsRow, index?: number): AssetsRow;

  getTotalRows(): number;
  setTotalRows(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AssetsResponseData.AsObject;
  static toObject(includeInstance: boolean, msg: AssetsResponseData): AssetsResponseData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AssetsResponseData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AssetsResponseData;
  static deserializeBinaryFromReader(message: AssetsResponseData, reader: jspb.BinaryReader): AssetsResponseData;
}

export namespace AssetsResponseData {
  export type AsObject = {
    columnsList: Array<common_gateway_base_pb.ColumnInfo.AsObject>,
    rowsList: Array<AssetsRow.AsObject>,
    totalRows: number,
  }
}

export class AssetsRow extends jspb.Message {
  clearValuesList(): void;
  getValuesList(): Array<string>;
  setValuesList(value: Array<string>): void;
  addValues(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AssetsRow.AsObject;
  static toObject(includeInstance: boolean, msg: AssetsRow): AssetsRow.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AssetsRow, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AssetsRow;
  static deserializeBinaryFromReader(message: AssetsRow, reader: jspb.BinaryReader): AssetsRow;
}

export namespace AssetsRow {
  export type AsObject = {
    valuesList: Array<string>,
  }
}

