/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: common/data.proto

import * as jspb from "google-protobuf";
import * as google_protobuf_struct_pb from "google-protobuf/google/protobuf/struct_pb";
import * as common_gateway_base_pb from "../common/gateway_base_pb";

export class UploadAuthorizationResponse extends jspb.Message {
  getIsValid(): boolean;
  setIsValid(value: boolean): void;

  getUuid(): string;
  setUuid(value: string): void;

  getTargetPath(): string;
  setTargetPath(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UploadAuthorizationResponse.AsObject;
  static toObject(includeInstance: boolean, msg: UploadAuthorizationResponse): UploadAuthorizationResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UploadAuthorizationResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UploadAuthorizationResponse;
  static deserializeBinaryFromReader(message: UploadAuthorizationResponse, reader: jspb.BinaryReader): UploadAuthorizationResponse;
}

export namespace UploadAuthorizationResponse {
  export type AsObject = {
    isValid: boolean,
    uuid: string,
    targetPath: string,
  }
}

export class UploadNotifyRequest extends jspb.Message {
  getUuid(): string;
  setUuid(value: string): void;

  getCurrentPath(): string;
  setCurrentPath(value: string): void;

  getTargetPath(): string;
  setTargetPath(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UploadNotifyRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UploadNotifyRequest): UploadNotifyRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UploadNotifyRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UploadNotifyRequest;
  static deserializeBinaryFromReader(message: UploadNotifyRequest, reader: jspb.BinaryReader): UploadNotifyRequest;
}

export namespace UploadNotifyRequest {
  export type AsObject = {
    uuid: string,
    currentPath: string,
    targetPath: string,
  }
}

export class SubmittedRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getSubmittedDate(): string;
  setSubmittedDate(value: string): void;

  getConsensusRunTimestamp(): string;
  setConsensusRunTimestamp(value: string): void;

  getFilter(): string;
  setFilter(value: string): void;

  clearFiltersList(): void;
  getFiltersList(): Array<common_gateway_base_pb.Filter>;
  setFiltersList(value: Array<common_gateway_base_pb.Filter>): void;
  addFilters(value?: common_gateway_base_pb.Filter, index?: number): common_gateway_base_pb.Filter;

  hasFilterPack(): boolean;
  clearFilterPack(): void;
  getFilterPack(): common_gateway_base_pb.FilterPack | undefined;
  setFilterPack(value?: common_gateway_base_pb.FilterPack): void;

  hasOrderby(): boolean;
  clearOrderby(): void;
  getOrderby(): common_gateway_base_pb.OrderBy | undefined;
  setOrderby(value?: common_gateway_base_pb.OrderBy): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): common_gateway_base_pb.Page | undefined;
  setPage(value?: common_gateway_base_pb.Page): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubmittedRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SubmittedRequest): SubmittedRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubmittedRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubmittedRequest;
  static deserializeBinaryFromReader(message: SubmittedRequest, reader: jspb.BinaryReader): SubmittedRequest;
}

export namespace SubmittedRequest {
  export type AsObject = {
    assetId: string,
    submittedDate: string,
    consensusRunTimestamp: string,
    filter: string,
    filtersList: Array<common_gateway_base_pb.Filter.AsObject>,
    filterPack?: common_gateway_base_pb.FilterPack.AsObject,
    orderby?: common_gateway_base_pb.OrderBy.AsObject,
    traceName: string,
    page?: common_gateway_base_pb.Page.AsObject,
  }
}

export class SubmittedResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): SubmittedResponseData | undefined;
  setData(value?: SubmittedResponseData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): SubmittedResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubmittedResponse.AsObject;
  static toObject(includeInstance: boolean, msg: SubmittedResponse): SubmittedResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubmittedResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubmittedResponse;
  static deserializeBinaryFromReader(message: SubmittedResponse, reader: jspb.BinaryReader): SubmittedResponse;
}

export namespace SubmittedResponse {
  export type AsObject = {
    data?: SubmittedResponseData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class SubmittedResponseData extends jspb.Message {
  clearColumnsList(): void;
  getColumnsList(): Array<common_gateway_base_pb.ColumnInfo>;
  setColumnsList(value: Array<common_gateway_base_pb.ColumnInfo>): void;
  addColumns(value?: common_gateway_base_pb.ColumnInfo, index?: number): common_gateway_base_pb.ColumnInfo;

  clearRowsList(): void;
  getRowsList(): Array<SubmittedRow>;
  setRowsList(value: Array<SubmittedRow>): void;
  addRows(value?: SubmittedRow, index?: number): SubmittedRow;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): common_gateway_base_pb.Page | undefined;
  setPage(value?: common_gateway_base_pb.Page): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubmittedResponseData.AsObject;
  static toObject(includeInstance: boolean, msg: SubmittedResponseData): SubmittedResponseData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubmittedResponseData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubmittedResponseData;
  static deserializeBinaryFromReader(message: SubmittedResponseData, reader: jspb.BinaryReader): SubmittedResponseData;
}

export namespace SubmittedResponseData {
  export type AsObject = {
    columnsList: Array<common_gateway_base_pb.ColumnInfo.AsObject>,
    rowsList: Array<SubmittedRow.AsObject>,
    page?: common_gateway_base_pb.Page.AsObject,
  }
}

export class SubmittedRow extends jspb.Message {
  clearValuesList(): void;
  getValuesList(): Array<google_protobuf_struct_pb.Value>;
  setValuesList(value: Array<google_protobuf_struct_pb.Value>): void;
  addValues(value?: google_protobuf_struct_pb.Value, index?: number): google_protobuf_struct_pb.Value;

  hasValidationErrorCount(): boolean;
  clearValidationErrorCount(): void;
  getValidationErrorCount(): number;
  setValidationErrorCount(value: number): void;

  hasOutlier(): boolean;
  clearOutlier(): void;
  getOutlier(): string;
  setOutlier(value: string): void;

  hasBenchmark(): boolean;
  clearBenchmark(): void;
  getBenchmark(): string;
  setBenchmark(value: string): void;

  getMetadataCase(): SubmittedRow.MetadataCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubmittedRow.AsObject;
  static toObject(includeInstance: boolean, msg: SubmittedRow): SubmittedRow.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubmittedRow, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubmittedRow;
  static deserializeBinaryFromReader(message: SubmittedRow, reader: jspb.BinaryReader): SubmittedRow;
}

export namespace SubmittedRow {
  export type AsObject = {
    valuesList: Array<google_protobuf_struct_pb.Value.AsObject>,
    validationErrorCount: number,
    outlier: string,
    benchmark: string,
  }

  export enum MetadataCase {
    METADATA_NOT_SET = 0,
    VALIDATION_ERROR_COUNT = 2,
    OUTLIER = 3,
    BENCHMARK = 4,
  }
}

export class ExportRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getSubmissionDate(): string;
  setSubmissionDate(value: string): void;

  getConsensusRunTimestamp(): string;
  setConsensusRunTimestamp(value: string): void;

  getIncludeHeader(): boolean;
  setIncludeHeader(value: boolean): void;

  hasFilterPack(): boolean;
  clearFilterPack(): void;
  getFilterPack(): common_gateway_base_pb.FilterPack | undefined;
  setFilterPack(value?: common_gateway_base_pb.FilterPack): void;

  clearFiltersList(): void;
  getFiltersList(): Array<common_gateway_base_pb.Filter>;
  setFiltersList(value: Array<common_gateway_base_pb.Filter>): void;
  addFilters(value?: common_gateway_base_pb.Filter, index?: number): common_gateway_base_pb.Filter;

  hasOrderby(): boolean;
  clearOrderby(): void;
  getOrderby(): common_gateway_base_pb.OrderBy | undefined;
  setOrderby(value?: common_gateway_base_pb.OrderBy): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ExportRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ExportRequest): ExportRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ExportRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ExportRequest;
  static deserializeBinaryFromReader(message: ExportRequest, reader: jspb.BinaryReader): ExportRequest;
}

export namespace ExportRequest {
  export type AsObject = {
    assetId: string,
    submissionDate: string,
    consensusRunTimestamp: string,
    includeHeader: boolean,
    filterPack?: common_gateway_base_pb.FilterPack.AsObject,
    filtersList: Array<common_gateway_base_pb.Filter.AsObject>,
    orderby?: common_gateway_base_pb.OrderBy.AsObject,
    traceName: string,
  }
}

export class ExportReportRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getConsensusRunTimestamp(): string;
  setConsensusRunTimestamp(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ExportReportRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ExportReportRequest): ExportReportRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ExportReportRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ExportReportRequest;
  static deserializeBinaryFromReader(message: ExportReportRequest, reader: jspb.BinaryReader): ExportReportRequest;
}

export namespace ExportReportRequest {
  export type AsObject = {
    assetId: string,
    consensusRunTimestamp: string,
    traceName: string,
  }
}

export class ExportResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): ExportPresignedUrlResponseResponseData | undefined;
  setData(value?: ExportPresignedUrlResponseResponseData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): ExportResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ExportResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ExportResponse): ExportResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ExportResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ExportResponse;
  static deserializeBinaryFromReader(message: ExportResponse, reader: jspb.BinaryReader): ExportResponse;
}

export namespace ExportResponse {
  export type AsObject = {
    data?: ExportPresignedUrlResponseResponseData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class ExportPresignedUrlResponseResponseData extends jspb.Message {
  getGetrequesturl(): string;
  setGetrequesturl(value: string): void;

  getFileName(): string;
  setFileName(value: string): void;

  getCompression(): string;
  setCompression(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ExportPresignedUrlResponseResponseData.AsObject;
  static toObject(includeInstance: boolean, msg: ExportPresignedUrlResponseResponseData): ExportPresignedUrlResponseResponseData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ExportPresignedUrlResponseResponseData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ExportPresignedUrlResponseResponseData;
  static deserializeBinaryFromReader(message: ExportPresignedUrlResponseResponseData, reader: jspb.BinaryReader): ExportPresignedUrlResponseResponseData;
}

export namespace ExportPresignedUrlResponseResponseData {
  export type AsObject = {
    getrequesturl: string,
    fileName: string,
    compression: string,
  }
}

export class ExportResponseData extends jspb.Message {
  getHeader(): string;
  setHeader(value: string): void;

  getCompression(): string;
  setCompression(value: string): void;

  getData(): string;
  setData(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ExportResponseData.AsObject;
  static toObject(includeInstance: boolean, msg: ExportResponseData): ExportResponseData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ExportResponseData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ExportResponseData;
  static deserializeBinaryFromReader(message: ExportResponseData, reader: jspb.BinaryReader): ExportResponseData;
}

export namespace ExportResponseData {
  export type AsObject = {
    header: string,
    compression: string,
    data: string,
  }
}

export class UploadURLRequest extends jspb.Message {
  getDate(): string;
  setDate(value: string): void;

  getAssetId(): string;
  setAssetId(value: string): void;

  getFileName(): string;
  setFileName(value: string): void;

  getClient(): string;
  setClient(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  getDescriptorName(): string;
  setDescriptorName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UploadURLRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UploadURLRequest): UploadURLRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UploadURLRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UploadURLRequest;
  static deserializeBinaryFromReader(message: UploadURLRequest, reader: jspb.BinaryReader): UploadURLRequest;
}

export namespace UploadURLRequest {
  export type AsObject = {
    date: string,
    assetId: string,
    fileName: string,
    client: string,
    traceName: string,
    descriptorName: string,
  }
}

