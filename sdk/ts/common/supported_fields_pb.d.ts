/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: common/supported_fields.proto

import * as jspb from "google-protobuf";
import * as common_gateway_base_pb from "../common/gateway_base_pb";

export class GetSupportedFields extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  hasLimit(): boolean;
  clearLimit(): void;
  getLimit(): common_gateway_base_pb.Limit | undefined;
  setLimit(value?: common_gateway_base_pb.Limit): void;

  getOffset(): number;
  setOffset(value: number): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetSupportedFields.AsObject;
  static toObject(includeInstance: boolean, msg: GetSupportedFields): GetSupportedFields.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetSupportedFields, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetSupportedFields;
  static deserializeBinaryFromReader(message: GetSupportedFields, reader: jspb.BinaryReader): GetSupportedFields;
}

export namespace GetSupportedFields {
  export type AsObject = {
    assetId: string,
    limit?: common_gateway_base_pb.Limit.AsObject,
    offset: number,
    traceName: string,
  }
}

export class GetSupportedFieldsResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): common_gateway_base_pb.Fields | undefined;
  setData(value?: common_gateway_base_pb.Fields): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): GetSupportedFieldsResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetSupportedFieldsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetSupportedFieldsResponse): GetSupportedFieldsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetSupportedFieldsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetSupportedFieldsResponse;
  static deserializeBinaryFromReader(message: GetSupportedFieldsResponse, reader: jspb.BinaryReader): GetSupportedFieldsResponse;
}

export namespace GetSupportedFieldsResponse {
  export type AsObject = {
    data?: common_gateway_base_pb.Fields.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class SupportedField extends jspb.Message {
  getAsset(): string;
  setAsset(value: string): void;

  getInstrumentType(): string;
  setInstrumentType(value: string): void;

  getService(): string;
  setService(value: string): void;

  getSubmittedDate(): string;
  setSubmittedDate(value: string): void;

  getField(): string;
  setField(value: string): void;

  getMatchPattern(): string;
  setMatchPattern(value: string): void;

  getFilter(): string;
  setFilter(value: string): void;

  hasLimit(): boolean;
  clearLimit(): void;
  getLimit(): common_gateway_base_pb.Limit | undefined;
  setLimit(value?: common_gateway_base_pb.Limit): void;

  getOffset(): number;
  setOffset(value: number): void;

  getAssetId(): string;
  setAssetId(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SupportedField.AsObject;
  static toObject(includeInstance: boolean, msg: SupportedField): SupportedField.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SupportedField, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SupportedField;
  static deserializeBinaryFromReader(message: SupportedField, reader: jspb.BinaryReader): SupportedField;
}

export namespace SupportedField {
  export type AsObject = {
    asset: string,
    instrumentType: string,
    service: string,
    submittedDate: string,
    field: string,
    matchPattern: string,
    filter: string,
    limit?: common_gateway_base_pb.Limit.AsObject,
    offset: number,
    assetId: string,
    traceName: string,
  }
}

export class GetFieldValuesResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): common_gateway_base_pb.Values | undefined;
  setData(value?: common_gateway_base_pb.Values): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): GetFieldValuesResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetFieldValuesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetFieldValuesResponse): GetFieldValuesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetFieldValuesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetFieldValuesResponse;
  static deserializeBinaryFromReader(message: GetFieldValuesResponse, reader: jspb.BinaryReader): GetFieldValuesResponse;
}

export namespace GetFieldValuesResponse {
  export type AsObject = {
    data?: common_gateway_base_pb.Values.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

