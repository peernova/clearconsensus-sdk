/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: common/dq_errors.proto

import * as jspb from "google-protobuf";
import * as common_gateway_base_pb from "../common/gateway_base_pb";
import * as google_protobuf_struct_pb from "google-protobuf/google/protobuf/struct_pb";

export class GetDataQualityErrorsRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  hasSubmissionId(): boolean;
  clearSubmissionId(): void;
  getSubmissionId(): string;
  setSubmissionId(value: string): void;

  hasConsensusId(): boolean;
  clearConsensusId(): void;
  getConsensusId(): string;
  setConsensusId(value: string): void;

  hasEvaluatedPriceId(): boolean;
  clearEvaluatedPriceId(): void;
  getEvaluatedPriceId(): string;
  setEvaluatedPriceId(value: string): void;

  getSubmittedDate(): string;
  setSubmittedDate(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  getIdCase(): GetDataQualityErrorsRequest.IdCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetDataQualityErrorsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetDataQualityErrorsRequest): GetDataQualityErrorsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetDataQualityErrorsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetDataQualityErrorsRequest;
  static deserializeBinaryFromReader(message: GetDataQualityErrorsRequest, reader: jspb.BinaryReader): GetDataQualityErrorsRequest;
}

export namespace GetDataQualityErrorsRequest {
  export type AsObject = {
    assetId: string,
    submissionId: string,
    consensusId: string,
    evaluatedPriceId: string,
    submittedDate: string,
    traceName: string,
  }

  export enum IdCase {
    ID_NOT_SET = 0,
    SUBMISSION_ID = 2,
    CONSENSUS_ID = 3,
    EVALUATED_PRICE_ID = 4,
  }
}

export class GetDataQualityErrorsResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): DataQualityErrorsResponse | undefined;
  setData(value?: DataQualityErrorsResponse): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): GetDataQualityErrorsResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetDataQualityErrorsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetDataQualityErrorsResponse): GetDataQualityErrorsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetDataQualityErrorsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetDataQualityErrorsResponse;
  static deserializeBinaryFromReader(message: GetDataQualityErrorsResponse, reader: jspb.BinaryReader): GetDataQualityErrorsResponse;
}

export namespace GetDataQualityErrorsResponse {
  export type AsObject = {
    data?: DataQualityErrorsResponse.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class DataQualityErrorsResponse extends jspb.Message {
  hasDataQualityErrors(): boolean;
  clearDataQualityErrors(): void;
  getDataQualityErrors(): SeverityToDataQuality | undefined;
  setDataQualityErrors(value?: SeverityToDataQuality): void;

  clearSubmittedDataList(): void;
  getSubmittedDataList(): Array<SubmittedData>;
  setSubmittedDataList(value: Array<SubmittedData>): void;
  addSubmittedData(value?: SubmittedData, index?: number): SubmittedData;

  getTotalRows(): number;
  setTotalRows(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DataQualityErrorsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: DataQualityErrorsResponse): DataQualityErrorsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DataQualityErrorsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DataQualityErrorsResponse;
  static deserializeBinaryFromReader(message: DataQualityErrorsResponse, reader: jspb.BinaryReader): DataQualityErrorsResponse;
}

export namespace DataQualityErrorsResponse {
  export type AsObject = {
    dataQualityErrors?: SeverityToDataQuality.AsObject,
    submittedDataList: Array<SubmittedData.AsObject>,
    totalRows: number,
  }
}

export class SeverityToDataQuality extends jspb.Message {
  clearHighList(): void;
  getHighList(): Array<DQError>;
  setHighList(value: Array<DQError>): void;
  addHigh(value?: DQError, index?: number): DQError;

  clearMediumList(): void;
  getMediumList(): Array<DQError>;
  setMediumList(value: Array<DQError>): void;
  addMedium(value?: DQError, index?: number): DQError;

  clearLowList(): void;
  getLowList(): Array<DQError>;
  setLowList(value: Array<DQError>): void;
  addLow(value?: DQError, index?: number): DQError;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SeverityToDataQuality.AsObject;
  static toObject(includeInstance: boolean, msg: SeverityToDataQuality): SeverityToDataQuality.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SeverityToDataQuality, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SeverityToDataQuality;
  static deserializeBinaryFromReader(message: SeverityToDataQuality, reader: jspb.BinaryReader): SeverityToDataQuality;
}

export namespace SeverityToDataQuality {
  export type AsObject = {
    highList: Array<DQError.AsObject>,
    mediumList: Array<DQError.AsObject>,
    lowList: Array<DQError.AsObject>,
  }
}

export class DQError extends jspb.Message {
  getRulesetName(): string;
  setRulesetName(value: string): void;

  getCriteriaName(): string;
  setCriteriaName(value: string): void;

  getRuleName(): string;
  setRuleName(value: string): void;

  getSeverity(): SeverityMap[keyof SeverityMap];
  setSeverity(value: SeverityMap[keyof SeverityMap]): void;

  getErrorMessage(): string;
  setErrorMessage(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DQError.AsObject;
  static toObject(includeInstance: boolean, msg: DQError): DQError.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DQError, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DQError;
  static deserializeBinaryFromReader(message: DQError, reader: jspb.BinaryReader): DQError;
}

export namespace DQError {
  export type AsObject = {
    rulesetName: string,
    criteriaName: string,
    ruleName: string,
    severity: SeverityMap[keyof SeverityMap],
    errorMessage: string,
  }
}

export class DQErrorsRequest extends jspb.Message {
  getSubmittedDate(): string;
  setSubmittedDate(value: string): void;

  getSubmittedId(): string;
  setSubmittedId(value: string): void;

  getAssetId(): string;
  setAssetId(value: string): void;

  getFilter(): string;
  setFilter(value: string): void;

  hasFilterPack(): boolean;
  clearFilterPack(): void;
  getFilterPack(): common_gateway_base_pb.FilterPack | undefined;
  setFilterPack(value?: common_gateway_base_pb.FilterPack): void;

  hasOrderby(): boolean;
  clearOrderby(): void;
  getOrderby(): common_gateway_base_pb.OrderBy | undefined;
  setOrderby(value?: common_gateway_base_pb.OrderBy): void;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): common_gateway_base_pb.Page | undefined;
  setPage(value?: common_gateway_base_pb.Page): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DQErrorsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: DQErrorsRequest): DQErrorsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DQErrorsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DQErrorsRequest;
  static deserializeBinaryFromReader(message: DQErrorsRequest, reader: jspb.BinaryReader): DQErrorsRequest;
}

export namespace DQErrorsRequest {
  export type AsObject = {
    submittedDate: string,
    submittedId: string,
    assetId: string,
    filter: string,
    filterPack?: common_gateway_base_pb.FilterPack.AsObject,
    orderby?: common_gateway_base_pb.OrderBy.AsObject,
    page?: common_gateway_base_pb.Page.AsObject,
    traceName: string,
  }
}

export class SubmittedData extends jspb.Message {
  getKey(): string;
  setKey(value: string): void;

  hasValues(): boolean;
  clearValues(): void;
  getValues(): google_protobuf_struct_pb.Value | undefined;
  setValues(value?: google_protobuf_struct_pb.Value): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubmittedData.AsObject;
  static toObject(includeInstance: boolean, msg: SubmittedData): SubmittedData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubmittedData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubmittedData;
  static deserializeBinaryFromReader(message: SubmittedData, reader: jspb.BinaryReader): SubmittedData;
}

export namespace SubmittedData {
  export type AsObject = {
    key: string,
    values?: google_protobuf_struct_pb.Value.AsObject,
  }
}

export class DQErrorsResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): common_gateway_base_pb.ResponseData | undefined;
  setData(value?: common_gateway_base_pb.ResponseData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): DQErrorsResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DQErrorsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: DQErrorsResponse): DQErrorsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DQErrorsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DQErrorsResponse;
  static deserializeBinaryFromReader(message: DQErrorsResponse, reader: jspb.BinaryReader): DQErrorsResponse;
}

export namespace DQErrorsResponse {
  export type AsObject = {
    data?: common_gateway_base_pb.ResponseData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export interface SeverityMap {
  UNDEFINED_SEVERITY: 0;
  HIGH: 1;
  MEDIUM: 2;
  LOW: 3;
}

export const Severity: SeverityMap;

