/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: common/unique_key.proto

import * as jspb from "google-protobuf";
import * as common_gateway_base_pb from "../common/gateway_base_pb";

export class UniqueKeyDefinition extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  getScope(): string;
  setScope(value: string): void;

  clearUniqueKeyList(): void;
  getUniqueKeyList(): Array<string>;
  setUniqueKeyList(value: Array<string>): void;
  addUniqueKey(value: string, index?: number): string;

  clearOrderByList(): void;
  getOrderByList(): Array<string>;
  setOrderByList(value: Array<string>): void;
  addOrderBy(value: string, index?: number): string;

  getOrder(): common_gateway_base_pb.OrderMap[keyof common_gateway_base_pb.OrderMap];
  setOrder(value: common_gateway_base_pb.OrderMap[keyof common_gateway_base_pb.OrderMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UniqueKeyDefinition.AsObject;
  static toObject(includeInstance: boolean, msg: UniqueKeyDefinition): UniqueKeyDefinition.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UniqueKeyDefinition, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UniqueKeyDefinition;
  static deserializeBinaryFromReader(message: UniqueKeyDefinition, reader: jspb.BinaryReader): UniqueKeyDefinition;
}

export namespace UniqueKeyDefinition {
  export type AsObject = {
    name: string,
    scope: string,
    uniqueKeyList: Array<string>,
    orderByList: Array<string>,
    order: common_gateway_base_pb.OrderMap[keyof common_gateway_base_pb.OrderMap],
  }
}

export class UniqueKeyDefinitionResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): UniqueKeyDefinition | undefined;
  setData(value?: UniqueKeyDefinition): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): UniqueKeyDefinitionResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UniqueKeyDefinitionResponse.AsObject;
  static toObject(includeInstance: boolean, msg: UniqueKeyDefinitionResponse): UniqueKeyDefinitionResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UniqueKeyDefinitionResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UniqueKeyDefinitionResponse;
  static deserializeBinaryFromReader(message: UniqueKeyDefinitionResponse, reader: jspb.BinaryReader): UniqueKeyDefinitionResponse;
}

export namespace UniqueKeyDefinitionResponse {
  export type AsObject = {
    data?: UniqueKeyDefinition.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class UniqueKeyList extends jspb.Message {
  clearResultsList(): void;
  getResultsList(): Array<UniqueKeyDefinition>;
  setResultsList(value: Array<UniqueKeyDefinition>): void;
  addResults(value?: UniqueKeyDefinition, index?: number): UniqueKeyDefinition;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UniqueKeyList.AsObject;
  static toObject(includeInstance: boolean, msg: UniqueKeyList): UniqueKeyList.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UniqueKeyList, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UniqueKeyList;
  static deserializeBinaryFromReader(message: UniqueKeyList, reader: jspb.BinaryReader): UniqueKeyList;
}

export namespace UniqueKeyList {
  export type AsObject = {
    resultsList: Array<UniqueKeyDefinition.AsObject>,
  }
}

export class ListUniqueKeysResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): UniqueKeyList | undefined;
  setData(value?: UniqueKeyList): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): ListUniqueKeysResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListUniqueKeysResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListUniqueKeysResponse): ListUniqueKeysResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListUniqueKeysResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListUniqueKeysResponse;
  static deserializeBinaryFromReader(message: ListUniqueKeysResponse, reader: jspb.BinaryReader): ListUniqueKeysResponse;
}

export namespace ListUniqueKeysResponse {
  export type AsObject = {
    data?: UniqueKeyList.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

