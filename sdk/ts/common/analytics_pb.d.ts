/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: common/analytics.proto

import * as jspb from "google-protobuf";
import * as common_gateway_base_pb from "../common/gateway_base_pb";

export class GetPredefinedFiltersRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  getSubmittedDate(): string;
  setSubmittedDate(value: string): void;

  getConsensusRunTimestamp(): string;
  setConsensusRunTimestamp(value: string): void;

  getFiltersType(): Predefined_Filters_TypeMap[keyof Predefined_Filters_TypeMap];
  setFiltersType(value: Predefined_Filters_TypeMap[keyof Predefined_Filters_TypeMap]): void;

  clearFiltersList(): void;
  getFiltersList(): Array<common_gateway_base_pb.Filter>;
  setFiltersList(value: Array<common_gateway_base_pb.Filter>): void;
  addFilters(value?: common_gateway_base_pb.Filter, index?: number): common_gateway_base_pb.Filter;

  hasFilterPack(): boolean;
  clearFilterPack(): void;
  getFilterPack(): common_gateway_base_pb.FilterPack | undefined;
  setFilterPack(value?: common_gateway_base_pb.FilterPack): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetPredefinedFiltersRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetPredefinedFiltersRequest): GetPredefinedFiltersRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetPredefinedFiltersRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetPredefinedFiltersRequest;
  static deserializeBinaryFromReader(message: GetPredefinedFiltersRequest, reader: jspb.BinaryReader): GetPredefinedFiltersRequest;
}

export namespace GetPredefinedFiltersRequest {
  export type AsObject = {
    assetId: string,
    traceName: string,
    submittedDate: string,
    consensusRunTimestamp: string,
    filtersType: Predefined_Filters_TypeMap[keyof Predefined_Filters_TypeMap],
    filtersList: Array<common_gateway_base_pb.Filter.AsObject>,
    filterPack?: common_gateway_base_pb.FilterPack.AsObject,
  }
}

export class GetPredefinedFiltersResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): PredefinedFilters | undefined;
  setData(value?: PredefinedFilters): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): GetPredefinedFiltersResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetPredefinedFiltersResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetPredefinedFiltersResponse): GetPredefinedFiltersResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetPredefinedFiltersResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetPredefinedFiltersResponse;
  static deserializeBinaryFromReader(message: GetPredefinedFiltersResponse, reader: jspb.BinaryReader): GetPredefinedFiltersResponse;
}

export namespace GetPredefinedFiltersResponse {
  export type AsObject = {
    data?: PredefinedFilters.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class PredefinedFilters extends jspb.Message {
  clearFiltersList(): void;
  getFiltersList(): Array<common_gateway_base_pb.PredefinedFilter>;
  setFiltersList(value: Array<common_gateway_base_pb.PredefinedFilter>): void;
  addFilters(value?: common_gateway_base_pb.PredefinedFilter, index?: number): common_gateway_base_pb.PredefinedFilter;

  clearSpecificAssetFiltersList(): void;
  getSpecificAssetFiltersList(): Array<common_gateway_base_pb.PredefinedFilter>;
  setSpecificAssetFiltersList(value: Array<common_gateway_base_pb.PredefinedFilter>): void;
  addSpecificAssetFilters(value?: common_gateway_base_pb.PredefinedFilter, index?: number): common_gateway_base_pb.PredefinedFilter;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PredefinedFilters.AsObject;
  static toObject(includeInstance: boolean, msg: PredefinedFilters): PredefinedFilters.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PredefinedFilters, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PredefinedFilters;
  static deserializeBinaryFromReader(message: PredefinedFilters, reader: jspb.BinaryReader): PredefinedFilters;
}

export namespace PredefinedFilters {
  export type AsObject = {
    filtersList: Array<common_gateway_base_pb.PredefinedFilter.AsObject>,
    specificAssetFiltersList: Array<common_gateway_base_pb.PredefinedFilter.AsObject>,
  }
}

export class HistogramRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getSubmittedId(): string;
  setSubmittedId(value: string): void;

  getSubmittedDate(): string;
  setSubmittedDate(value: string): void;

  getConsensusRunTimestamp(): string;
  setConsensusRunTimestamp(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): HistogramRequest.AsObject;
  static toObject(includeInstance: boolean, msg: HistogramRequest): HistogramRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: HistogramRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): HistogramRequest;
  static deserializeBinaryFromReader(message: HistogramRequest, reader: jspb.BinaryReader): HistogramRequest;
}

export namespace HistogramRequest {
  export type AsObject = {
    assetId: string,
    submittedId: string,
    submittedDate: string,
    consensusRunTimestamp: string,
    traceName: string,
  }
}

export class HistogramResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): HistogramData | undefined;
  setData(value?: HistogramData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): HistogramResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): HistogramResponse.AsObject;
  static toObject(includeInstance: boolean, msg: HistogramResponse): HistogramResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: HistogramResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): HistogramResponse;
  static deserializeBinaryFromReader(message: HistogramResponse, reader: jspb.BinaryReader): HistogramResponse;
}

export namespace HistogramResponse {
  export type AsObject = {
    data?: HistogramData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class HistogramData extends jspb.Message {
  hasSubmissionhistogram(): boolean;
  clearSubmissionhistogram(): void;
  getSubmissionhistogram(): SubmissionHistogram | undefined;
  setSubmissionhistogram(value?: SubmissionHistogram): void;

  hasConsensushistogram(): boolean;
  clearConsensushistogram(): void;
  getConsensushistogram(): ConsensusHistogram | undefined;
  setConsensushistogram(value?: ConsensusHistogram): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): HistogramData.AsObject;
  static toObject(includeInstance: boolean, msg: HistogramData): HistogramData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: HistogramData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): HistogramData;
  static deserializeBinaryFromReader(message: HistogramData, reader: jspb.BinaryReader): HistogramData;
}

export namespace HistogramData {
  export type AsObject = {
    submissionhistogram?: SubmissionHistogram.AsObject,
    consensushistogram?: ConsensusHistogram.AsObject,
  }
}

export class SubmissionHistogram extends jspb.Message {
  hasHighSeverity(): boolean;
  clearHighSeverity(): void;
  getHighSeverity(): common_gateway_base_pb.PredefinedFilter | undefined;
  setHighSeverity(value?: common_gateway_base_pb.PredefinedFilter): void;

  hasMediumSeverity(): boolean;
  clearMediumSeverity(): void;
  getMediumSeverity(): common_gateway_base_pb.PredefinedFilter | undefined;
  setMediumSeverity(value?: common_gateway_base_pb.PredefinedFilter): void;

  hasLowSeverity(): boolean;
  clearLowSeverity(): void;
  getLowSeverity(): common_gateway_base_pb.PredefinedFilter | undefined;
  setLowSeverity(value?: common_gateway_base_pb.PredefinedFilter): void;

  hasValid(): boolean;
  clearValid(): void;
  getValid(): common_gateway_base_pb.PredefinedFilter | undefined;
  setValid(value?: common_gateway_base_pb.PredefinedFilter): void;

  getTotalrows(): number;
  setTotalrows(value: number): void;

  getTotalinvalidrows(): number;
  setTotalinvalidrows(value: number): void;

  getTotalparseerrors(): number;
  setTotalparseerrors(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubmissionHistogram.AsObject;
  static toObject(includeInstance: boolean, msg: SubmissionHistogram): SubmissionHistogram.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubmissionHistogram, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubmissionHistogram;
  static deserializeBinaryFromReader(message: SubmissionHistogram, reader: jspb.BinaryReader): SubmissionHistogram;
}

export namespace SubmissionHistogram {
  export type AsObject = {
    highSeverity?: common_gateway_base_pb.PredefinedFilter.AsObject,
    mediumSeverity?: common_gateway_base_pb.PredefinedFilter.AsObject,
    lowSeverity?: common_gateway_base_pb.PredefinedFilter.AsObject,
    valid?: common_gateway_base_pb.PredefinedFilter.AsObject,
    totalrows: number,
    totalinvalidrows: number,
    totalparseerrors: number,
  }
}

export class ConsensusHistogram extends jspb.Message {
  hasNonoutliers(): boolean;
  clearNonoutliers(): void;
  getNonoutliers(): common_gateway_base_pb.PredefinedFilter | undefined;
  setNonoutliers(value?: common_gateway_base_pb.PredefinedFilter): void;

  hasOutliers(): boolean;
  clearOutliers(): void;
  getOutliers(): common_gateway_base_pb.PredefinedFilter | undefined;
  setOutliers(value?: common_gateway_base_pb.PredefinedFilter): void;

  hasNoconsensus(): boolean;
  clearNoconsensus(): void;
  getNoconsensus(): common_gateway_base_pb.PredefinedFilter | undefined;
  setNoconsensus(value?: common_gateway_base_pb.PredefinedFilter): void;

  hasHighseverity(): boolean;
  clearHighseverity(): void;
  getHighseverity(): common_gateway_base_pb.PredefinedFilter | undefined;
  setHighseverity(value?: common_gateway_base_pb.PredefinedFilter): void;

  getRows(): number;
  setRows(value: number): void;

  getTotalparseerrors(): number;
  setTotalparseerrors(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusHistogram.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusHistogram): ConsensusHistogram.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusHistogram, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusHistogram;
  static deserializeBinaryFromReader(message: ConsensusHistogram, reader: jspb.BinaryReader): ConsensusHistogram;
}

export namespace ConsensusHistogram {
  export type AsObject = {
    nonoutliers?: common_gateway_base_pb.PredefinedFilter.AsObject,
    outliers?: common_gateway_base_pb.PredefinedFilter.AsObject,
    noconsensus?: common_gateway_base_pb.PredefinedFilter.AsObject,
    highseverity?: common_gateway_base_pb.PredefinedFilter.AsObject,
    rows: number,
    totalparseerrors: number,
  }
}

export class GenericChartMetadataDataQualityResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): common_gateway_base_pb.GenericChartResponse | undefined;
  setData(value?: common_gateway_base_pb.GenericChartResponse): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): GenericChartMetadataDataQualityResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GenericChartMetadataDataQualityResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GenericChartMetadataDataQualityResponse): GenericChartMetadataDataQualityResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GenericChartMetadataDataQualityResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GenericChartMetadataDataQualityResponse;
  static deserializeBinaryFromReader(message: GenericChartMetadataDataQualityResponse, reader: jspb.BinaryReader): GenericChartMetadataDataQualityResponse;
}

export namespace GenericChartMetadataDataQualityResponse {
  export type AsObject = {
    data?: common_gateway_base_pb.GenericChartResponse.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class GenericChartMetadataConsensus extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  hasId(): boolean;
  clearId(): void;
  getId(): string;
  setId(value: string): void;

  hasDateRangeFilter(): boolean;
  clearDateRangeFilter(): void;
  getDateRangeFilter(): string;
  setDateRangeFilter(value: string): void;

  hasChartMetadata(): boolean;
  clearChartMetadata(): void;
  getChartMetadata(): GenericChartMetadata | undefined;
  setChartMetadata(value?: GenericChartMetadata): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  getConsensusCase(): GenericChartMetadataConsensus.ConsensusCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GenericChartMetadataConsensus.AsObject;
  static toObject(includeInstance: boolean, msg: GenericChartMetadataConsensus): GenericChartMetadataConsensus.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GenericChartMetadataConsensus, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GenericChartMetadataConsensus;
  static deserializeBinaryFromReader(message: GenericChartMetadataConsensus, reader: jspb.BinaryReader): GenericChartMetadataConsensus;
}

export namespace GenericChartMetadataConsensus {
  export type AsObject = {
    assetId: string,
    id: string,
    dateRangeFilter: string,
    chartMetadata?: GenericChartMetadata.AsObject,
    traceName: string,
  }

  export enum ConsensusCase {
    CONSENSUS_NOT_SET = 0,
    ID = 2,
    DATE_RANGE_FILTER = 3,
  }
}

export class GenericChartMetadataConsensusResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): common_gateway_base_pb.GenericChartResponse | undefined;
  setData(value?: common_gateway_base_pb.GenericChartResponse): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): GenericChartMetadataConsensusResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GenericChartMetadataConsensusResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GenericChartMetadataConsensusResponse): GenericChartMetadataConsensusResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GenericChartMetadataConsensusResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GenericChartMetadataConsensusResponse;
  static deserializeBinaryFromReader(message: GenericChartMetadataConsensusResponse, reader: jspb.BinaryReader): GenericChartMetadataConsensusResponse;
}

export namespace GenericChartMetadataConsensusResponse {
  export type AsObject = {
    data?: common_gateway_base_pb.GenericChartResponse.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class GenericChartMetadata extends jspb.Message {
  clearMetricsList(): void;
  getMetricsList(): Array<common_gateway_base_pb.NameAliasPair>;
  setMetricsList(value: Array<common_gateway_base_pb.NameAliasPair>): void;
  addMetrics(value?: common_gateway_base_pb.NameAliasPair, index?: number): common_gateway_base_pb.NameAliasPair;

  getFilter(): string;
  setFilter(value: string): void;

  clearGroupByList(): void;
  getGroupByList(): Array<common_gateway_base_pb.NameAliasPair>;
  setGroupByList(value: Array<common_gateway_base_pb.NameAliasPair>): void;
  addGroupBy(value?: common_gateway_base_pb.NameAliasPair, index?: number): common_gateway_base_pb.NameAliasPair;

  getSortBy(): string;
  setSortBy(value: string): void;

  getRowLimit(): number;
  setRowLimit(value: number): void;

  getSeriesLimit(): number;
  setSeriesLimit(value: number): void;

  clearSelectFieldsList(): void;
  getSelectFieldsList(): Array<common_gateway_base_pb.NameAliasPair>;
  setSelectFieldsList(value: Array<common_gateway_base_pb.NameAliasPair>): void;
  addSelectFields(value?: common_gateway_base_pb.NameAliasPair, index?: number): common_gateway_base_pb.NameAliasPair;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GenericChartMetadata.AsObject;
  static toObject(includeInstance: boolean, msg: GenericChartMetadata): GenericChartMetadata.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GenericChartMetadata, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GenericChartMetadata;
  static deserializeBinaryFromReader(message: GenericChartMetadata, reader: jspb.BinaryReader): GenericChartMetadata;
}

export namespace GenericChartMetadata {
  export type AsObject = {
    metricsList: Array<common_gateway_base_pb.NameAliasPair.AsObject>,
    filter: string,
    groupByList: Array<common_gateway_base_pb.NameAliasPair.AsObject>,
    sortBy: string,
    rowLimit: number,
    seriesLimit: number,
    selectFieldsList: Array<common_gateway_base_pb.NameAliasPair.AsObject>,
  }
}

export class GenericChartMetadataDataQuality extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getClient(): string;
  setClient(value: string): void;

  hasId(): boolean;
  clearId(): void;
  getId(): string;
  setId(value: string): void;

  hasDateRangeFilter(): boolean;
  clearDateRangeFilter(): void;
  getDateRangeFilter(): string;
  setDateRangeFilter(value: string): void;

  hasChartMetadata(): boolean;
  clearChartMetadata(): void;
  getChartMetadata(): GenericChartMetadata | undefined;
  setChartMetadata(value?: GenericChartMetadata): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  getSubmissionCase(): GenericChartMetadataDataQuality.SubmissionCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GenericChartMetadataDataQuality.AsObject;
  static toObject(includeInstance: boolean, msg: GenericChartMetadataDataQuality): GenericChartMetadataDataQuality.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GenericChartMetadataDataQuality, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GenericChartMetadataDataQuality;
  static deserializeBinaryFromReader(message: GenericChartMetadataDataQuality, reader: jspb.BinaryReader): GenericChartMetadataDataQuality;
}

export namespace GenericChartMetadataDataQuality {
  export type AsObject = {
    assetId: string,
    client: string,
    id: string,
    dateRangeFilter: string,
    chartMetadata?: GenericChartMetadata.AsObject,
    traceName: string,
  }

  export enum SubmissionCase {
    SUBMISSION_NOT_SET = 0,
    ID = 3,
    DATE_RANGE_FILTER = 4,
  }
}

export interface Predefined_Filters_TypeMap {
  SUBMITTED_TAB: 0;
  CONSENSUS_TAB: 1;
}

export const Predefined_Filters_Type: Predefined_Filters_TypeMap;

