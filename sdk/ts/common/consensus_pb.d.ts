/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: common/consensus.proto

import * as jspb from "google-protobuf";
import * as common_gateway_base_pb from "../common/gateway_base_pb";

export class ConsensusActiveRequest extends jspb.Message {
  getFilter(): string;
  setFilter(value: string): void;

  hasOrderby(): boolean;
  clearOrderby(): void;
  getOrderby(): common_gateway_base_pb.OrderBy | undefined;
  setOrderby(value?: common_gateway_base_pb.OrderBy): void;

  hasLimit(): boolean;
  clearLimit(): void;
  getLimit(): common_gateway_base_pb.Limit | undefined;
  setLimit(value?: common_gateway_base_pb.Limit): void;

  getOffset(): number;
  setOffset(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusActiveRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusActiveRequest): ConsensusActiveRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusActiveRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusActiveRequest;
  static deserializeBinaryFromReader(message: ConsensusActiveRequest, reader: jspb.BinaryReader): ConsensusActiveRequest;
}

export namespace ConsensusActiveRequest {
  export type AsObject = {
    filter: string,
    orderby?: common_gateway_base_pb.OrderBy.AsObject,
    limit?: common_gateway_base_pb.Limit.AsObject,
    offset: number,
  }
}

export class ConsensusToPublishRequest extends jspb.Message {
  getFilter(): string;
  setFilter(value: string): void;

  hasOrderby(): boolean;
  clearOrderby(): void;
  getOrderby(): common_gateway_base_pb.OrderBy | undefined;
  setOrderby(value?: common_gateway_base_pb.OrderBy): void;

  hasLimit(): boolean;
  clearLimit(): void;
  getLimit(): common_gateway_base_pb.Limit | undefined;
  setLimit(value?: common_gateway_base_pb.Limit): void;

  getOffset(): number;
  setOffset(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusToPublishRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusToPublishRequest): ConsensusToPublishRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusToPublishRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusToPublishRequest;
  static deserializeBinaryFromReader(message: ConsensusToPublishRequest, reader: jspb.BinaryReader): ConsensusToPublishRequest;
}

export namespace ConsensusToPublishRequest {
  export type AsObject = {
    filter: string,
    orderby?: common_gateway_base_pb.OrderBy.AsObject,
    limit?: common_gateway_base_pb.Limit.AsObject,
    offset: number,
  }
}

export class ConsensusToPublishResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): ConsensusToPublishResponseData | undefined;
  setData(value?: ConsensusToPublishResponseData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): ConsensusToPublishResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusToPublishResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusToPublishResponse): ConsensusToPublishResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusToPublishResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusToPublishResponse;
  static deserializeBinaryFromReader(message: ConsensusToPublishResponse, reader: jspb.BinaryReader): ConsensusToPublishResponse;
}

export namespace ConsensusToPublishResponse {
  export type AsObject = {
    data?: ConsensusToPublishResponseData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class ConsensusToPublishResponseData extends jspb.Message {
  clearColumnsList(): void;
  getColumnsList(): Array<common_gateway_base_pb.ColumnInfo>;
  setColumnsList(value: Array<common_gateway_base_pb.ColumnInfo>): void;
  addColumns(value?: common_gateway_base_pb.ColumnInfo, index?: number): common_gateway_base_pb.ColumnInfo;

  clearRowsList(): void;
  getRowsList(): Array<common_gateway_base_pb.ValuesRow>;
  setRowsList(value: Array<common_gateway_base_pb.ValuesRow>): void;
  addRows(value?: common_gateway_base_pb.ValuesRow, index?: number): common_gateway_base_pb.ValuesRow;

  getTotalRows(): number;
  setTotalRows(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusToPublishResponseData.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusToPublishResponseData): ConsensusToPublishResponseData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusToPublishResponseData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusToPublishResponseData;
  static deserializeBinaryFromReader(message: ConsensusToPublishResponseData, reader: jspb.BinaryReader): ConsensusToPublishResponseData;
}

export namespace ConsensusToPublishResponseData {
  export type AsObject = {
    columnsList: Array<common_gateway_base_pb.ColumnInfo.AsObject>,
    rowsList: Array<common_gateway_base_pb.ValuesRow.AsObject>,
    totalRows: number,
  }
}

export class ConsensusPublishRequest extends jspb.Message {
  getConsensusTrackingId(): string;
  setConsensusTrackingId(value: string): void;

  getAssetId(): string;
  setAssetId(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusPublishRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusPublishRequest): ConsensusPublishRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusPublishRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusPublishRequest;
  static deserializeBinaryFromReader(message: ConsensusPublishRequest, reader: jspb.BinaryReader): ConsensusPublishRequest;
}

export namespace ConsensusPublishRequest {
  export type AsObject = {
    consensusTrackingId: string,
    assetId: string,
    traceName: string,
  }
}

export class ConsensusHistoryRequest extends jspb.Message {
  getFilter(): string;
  setFilter(value: string): void;

  hasOrderby(): boolean;
  clearOrderby(): void;
  getOrderby(): common_gateway_base_pb.OrderBy | undefined;
  setOrderby(value?: common_gateway_base_pb.OrderBy): void;

  hasLimit(): boolean;
  clearLimit(): void;
  getLimit(): common_gateway_base_pb.Limit | undefined;
  setLimit(value?: common_gateway_base_pb.Limit): void;

  getOffset(): number;
  setOffset(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusHistoryRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusHistoryRequest): ConsensusHistoryRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusHistoryRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusHistoryRequest;
  static deserializeBinaryFromReader(message: ConsensusHistoryRequest, reader: jspb.BinaryReader): ConsensusHistoryRequest;
}

export namespace ConsensusHistoryRequest {
  export type AsObject = {
    filter: string,
    orderby?: common_gateway_base_pb.OrderBy.AsObject,
    limit?: common_gateway_base_pb.Limit.AsObject,
    offset: number,
  }
}

export class ConsensusHistoryResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): ConsensusHistoryResponseData | undefined;
  setData(value?: ConsensusHistoryResponseData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): ConsensusHistoryResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusHistoryResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusHistoryResponse): ConsensusHistoryResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusHistoryResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusHistoryResponse;
  static deserializeBinaryFromReader(message: ConsensusHistoryResponse, reader: jspb.BinaryReader): ConsensusHistoryResponse;
}

export namespace ConsensusHistoryResponse {
  export type AsObject = {
    data?: ConsensusHistoryResponseData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class ConsensusHistoryResponseData extends jspb.Message {
  clearColumnsList(): void;
  getColumnsList(): Array<common_gateway_base_pb.ColumnInfo>;
  setColumnsList(value: Array<common_gateway_base_pb.ColumnInfo>): void;
  addColumns(value?: common_gateway_base_pb.ColumnInfo, index?: number): common_gateway_base_pb.ColumnInfo;

  clearRowsList(): void;
  getRowsList(): Array<common_gateway_base_pb.ValuesRow>;
  setRowsList(value: Array<common_gateway_base_pb.ValuesRow>): void;
  addRows(value?: common_gateway_base_pb.ValuesRow, index?: number): common_gateway_base_pb.ValuesRow;

  getTotalRows(): number;
  setTotalRows(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusHistoryResponseData.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusHistoryResponseData): ConsensusHistoryResponseData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusHistoryResponseData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusHistoryResponseData;
  static deserializeBinaryFromReader(message: ConsensusHistoryResponseData, reader: jspb.BinaryReader): ConsensusHistoryResponseData;
}

export namespace ConsensusHistoryResponseData {
  export type AsObject = {
    columnsList: Array<common_gateway_base_pb.ColumnInfo.AsObject>,
    rowsList: Array<common_gateway_base_pb.ValuesRow.AsObject>,
    totalRows: number,
  }
}

export class ConsensusDecisionRequest extends jspb.Message {
  getConsensusTrackingId(): string;
  setConsensusTrackingId(value: string): void;

  getDecision(): common_gateway_base_pb.DecisionMap[keyof common_gateway_base_pb.DecisionMap];
  setDecision(value: common_gateway_base_pb.DecisionMap[keyof common_gateway_base_pb.DecisionMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusDecisionRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusDecisionRequest): ConsensusDecisionRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusDecisionRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusDecisionRequest;
  static deserializeBinaryFromReader(message: ConsensusDecisionRequest, reader: jspb.BinaryReader): ConsensusDecisionRequest;
}

export namespace ConsensusDecisionRequest {
  export type AsObject = {
    consensusTrackingId: string,
    decision: common_gateway_base_pb.DecisionMap[keyof common_gateway_base_pb.DecisionMap],
  }
}

export class ConsensusTimestampsRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusTimestampsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusTimestampsRequest): ConsensusTimestampsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusTimestampsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusTimestampsRequest;
  static deserializeBinaryFromReader(message: ConsensusTimestampsRequest, reader: jspb.BinaryReader): ConsensusTimestampsRequest;
}

export namespace ConsensusTimestampsRequest {
  export type AsObject = {
    assetId: string,
    traceName: string,
  }
}

export class ConsensusTimestampsResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): ConsensusTimestampsResponseData | undefined;
  setData(value?: ConsensusTimestampsResponseData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): ConsensusTimestampsResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusTimestampsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusTimestampsResponse): ConsensusTimestampsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusTimestampsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusTimestampsResponse;
  static deserializeBinaryFromReader(message: ConsensusTimestampsResponse, reader: jspb.BinaryReader): ConsensusTimestampsResponse;
}

export namespace ConsensusTimestampsResponse {
  export type AsObject = {
    data?: ConsensusTimestampsResponseData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class ConsensusTimestampsResponseData extends jspb.Message {
  clearTimestampsList(): void;
  getTimestampsList(): Array<ConsensusTimestampMeta>;
  setTimestampsList(value: Array<ConsensusTimestampMeta>): void;
  addTimestamps(value?: ConsensusTimestampMeta, index?: number): ConsensusTimestampMeta;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusTimestampsResponseData.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusTimestampsResponseData): ConsensusTimestampsResponseData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusTimestampsResponseData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusTimestampsResponseData;
  static deserializeBinaryFromReader(message: ConsensusTimestampsResponseData, reader: jspb.BinaryReader): ConsensusTimestampsResponseData;
}

export namespace ConsensusTimestampsResponseData {
  export type AsObject = {
    timestampsList: Array<ConsensusTimestampMeta.AsObject>,
  }
}

export class ConsensusTimestampMeta extends jspb.Message {
  getConsensusRunTimestamp(): string;
  setConsensusRunTimestamp(value: string): void;

  clearSubmittedDatesList(): void;
  getSubmittedDatesList(): Array<string>;
  setSubmittedDatesList(value: Array<string>): void;
  addSubmittedDates(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusTimestampMeta.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusTimestampMeta): ConsensusTimestampMeta.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusTimestampMeta, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusTimestampMeta;
  static deserializeBinaryFromReader(message: ConsensusTimestampMeta, reader: jspb.BinaryReader): ConsensusTimestampMeta;
}

export namespace ConsensusTimestampMeta {
  export type AsObject = {
    consensusRunTimestamp: string,
    submittedDatesList: Array<string>,
  }
}

export class ConsensusRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getSubmittedDate(): string;
  setSubmittedDate(value: string): void;

  getConsensusRunTimestamp(): string;
  setConsensusRunTimestamp(value: string): void;

  getFilter(): string;
  setFilter(value: string): void;

  hasOrderby(): boolean;
  clearOrderby(): void;
  getOrderby(): common_gateway_base_pb.OrderBy | undefined;
  setOrderby(value?: common_gateway_base_pb.OrderBy): void;

  hasLimit(): boolean;
  clearLimit(): void;
  getLimit(): common_gateway_base_pb.Limit | undefined;
  setLimit(value?: common_gateway_base_pb.Limit): void;

  getOffset(): number;
  setOffset(value: number): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusRequest): ConsensusRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusRequest;
  static deserializeBinaryFromReader(message: ConsensusRequest, reader: jspb.BinaryReader): ConsensusRequest;
}

export namespace ConsensusRequest {
  export type AsObject = {
    assetId: string,
    submittedDate: string,
    consensusRunTimestamp: string,
    filter: string,
    orderby?: common_gateway_base_pb.OrderBy.AsObject,
    limit?: common_gateway_base_pb.Limit.AsObject,
    offset: number,
    traceName: string,
  }
}

export class ConsensusResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): ConsensusResponseData | undefined;
  setData(value?: ConsensusResponseData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): ConsensusResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusResponse): ConsensusResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusResponse;
  static deserializeBinaryFromReader(message: ConsensusResponse, reader: jspb.BinaryReader): ConsensusResponse;
}

export namespace ConsensusResponse {
  export type AsObject = {
    data?: ConsensusResponseData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class ConsensusResponseData extends jspb.Message {
  clearColumnsList(): void;
  getColumnsList(): Array<common_gateway_base_pb.ColumnInfo>;
  setColumnsList(value: Array<common_gateway_base_pb.ColumnInfo>): void;
  addColumns(value?: common_gateway_base_pb.ColumnInfo, index?: number): common_gateway_base_pb.ColumnInfo;

  clearRowsList(): void;
  getRowsList(): Array<common_gateway_base_pb.ValuesRow>;
  setRowsList(value: Array<common_gateway_base_pb.ValuesRow>): void;
  addRows(value?: common_gateway_base_pb.ValuesRow, index?: number): common_gateway_base_pb.ValuesRow;

  getTotalRows(): number;
  setTotalRows(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusResponseData.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusResponseData): ConsensusResponseData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusResponseData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusResponseData;
  static deserializeBinaryFromReader(message: ConsensusResponseData, reader: jspb.BinaryReader): ConsensusResponseData;
}

export namespace ConsensusResponseData {
  export type AsObject = {
    columnsList: Array<common_gateway_base_pb.ColumnInfo.AsObject>,
    rowsList: Array<common_gateway_base_pb.ValuesRow.AsObject>,
    totalRows: number,
  }
}

export class GetConsensusRunsRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  getSnapDateFrom(): string;
  setSnapDateFrom(value: string): void;

  getSnapDateTo(): string;
  setSnapDateTo(value: string): void;

  getParticipant(): string;
  setParticipant(value: string): void;

  getShowArchived(): boolean;
  setShowArchived(value: boolean): void;

  hasFilterPack(): boolean;
  clearFilterPack(): void;
  getFilterPack(): common_gateway_base_pb.FilterPack | undefined;
  setFilterPack(value?: common_gateway_base_pb.FilterPack): void;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): common_gateway_base_pb.Page | undefined;
  setPage(value?: common_gateway_base_pb.Page): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetConsensusRunsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetConsensusRunsRequest): GetConsensusRunsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetConsensusRunsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetConsensusRunsRequest;
  static deserializeBinaryFromReader(message: GetConsensusRunsRequest, reader: jspb.BinaryReader): GetConsensusRunsRequest;
}

export namespace GetConsensusRunsRequest {
  export type AsObject = {
    assetId: string,
    traceName: string,
    snapDateFrom: string,
    snapDateTo: string,
    participant: string,
    showArchived: boolean,
    filterPack?: common_gateway_base_pb.FilterPack.AsObject,
    page?: common_gateway_base_pb.Page.AsObject,
  }
}

export class GetConsensusRunsResponse extends jspb.Message {
  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  hasData(): boolean;
  clearData(): void;
  getData(): GetConsensusRunsData | undefined;
  setData(value?: GetConsensusRunsData): void;

  getResponseCase(): GetConsensusRunsResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetConsensusRunsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetConsensusRunsResponse): GetConsensusRunsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetConsensusRunsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetConsensusRunsResponse;
  static deserializeBinaryFromReader(message: GetConsensusRunsResponse, reader: jspb.BinaryReader): GetConsensusRunsResponse;
}

export namespace GetConsensusRunsResponse {
  export type AsObject = {
    error?: common_gateway_base_pb.Error.AsObject,
    data?: GetConsensusRunsData.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    ERROR = 1,
    DATA = 2,
  }
}

export class GetConsensusRunsData extends jspb.Message {
  clearColumnsList(): void;
  getColumnsList(): Array<common_gateway_base_pb.ColumnInfo>;
  setColumnsList(value: Array<common_gateway_base_pb.ColumnInfo>): void;
  addColumns(value?: common_gateway_base_pb.ColumnInfo, index?: number): common_gateway_base_pb.ColumnInfo;

  clearRowsList(): void;
  getRowsList(): Array<common_gateway_base_pb.ValuesRow>;
  setRowsList(value: Array<common_gateway_base_pb.ValuesRow>): void;
  addRows(value?: common_gateway_base_pb.ValuesRow, index?: number): common_gateway_base_pb.ValuesRow;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): common_gateway_base_pb.Page | undefined;
  setPage(value?: common_gateway_base_pb.Page): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetConsensusRunsData.AsObject;
  static toObject(includeInstance: boolean, msg: GetConsensusRunsData): GetConsensusRunsData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetConsensusRunsData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetConsensusRunsData;
  static deserializeBinaryFromReader(message: GetConsensusRunsData, reader: jspb.BinaryReader): GetConsensusRunsData;
}

export namespace GetConsensusRunsData {
  export type AsObject = {
    columnsList: Array<common_gateway_base_pb.ColumnInfo.AsObject>,
    rowsList: Array<common_gateway_base_pb.ValuesRow.AsObject>,
    page?: common_gateway_base_pb.Page.AsObject,
  }
}

export class ConsensusResultSet extends jspb.Message {
  getConsensusRunId(): string;
  setConsensusRunId(value: string): void;

  getConsensusResultSetId(): string;
  setConsensusResultSetId(value: string): void;

  getSubmissionTimestamp(): string;
  setSubmissionTimestamp(value: string): void;

  getConsensusRunStatus(): string;
  setConsensusRunStatus(value: string): void;

  getCohortName(): string;
  setCohortName(value: string): void;

  getDataContent(): string;
  setDataContent(value: string): void;

  getConsensusRunTimestamp(): string;
  setConsensusRunTimestamp(value: string): void;

  clearParticipantsList(): void;
  getParticipantsList(): Array<string>;
  setParticipantsList(value: Array<string>): void;
  addParticipants(value: string, index?: number): string;

  getParticipant(): string;
  setParticipant(value: string): void;

  getStatus(): string;
  setStatus(value: string): void;

  getConsensusNotes(): string;
  setConsensusNotes(value: string): void;

  getConsensusResultSetLabel(): string;
  setConsensusResultSetLabel(value: string): void;

  getRunBy(): string;
  setRunBy(value: string): void;

  getJobId(): string;
  setJobId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusResultSet.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusResultSet): ConsensusResultSet.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusResultSet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusResultSet;
  static deserializeBinaryFromReader(message: ConsensusResultSet, reader: jspb.BinaryReader): ConsensusResultSet;
}

export namespace ConsensusResultSet {
  export type AsObject = {
    consensusRunId: string,
    consensusResultSetId: string,
    submissionTimestamp: string,
    consensusRunStatus: string,
    cohortName: string,
    dataContent: string,
    consensusRunTimestamp: string,
    participantsList: Array<string>,
    participant: string,
    status: string,
    consensusNotes: string,
    consensusResultSetLabel: string,
    runBy: string,
    jobId: string,
  }
}

export class ConsensusResultSetValuesRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  getSubmittedId(): string;
  setSubmittedId(value: string): void;

  getSubmittedDate(): string;
  setSubmittedDate(value: string): void;

  getConsensusResultSetId(): string;
  setConsensusResultSetId(value: string): void;

  getConsensusRunTimestamp(): string;
  setConsensusRunTimestamp(value: string): void;

  getClient(): string;
  setClient(value: string): void;

  getFilter(): string;
  setFilter(value: string): void;

  hasFilterPack(): boolean;
  clearFilterPack(): void;
  getFilterPack(): common_gateway_base_pb.FilterPack | undefined;
  setFilterPack(value?: common_gateway_base_pb.FilterPack): void;

  hasOrderby(): boolean;
  clearOrderby(): void;
  getOrderby(): common_gateway_base_pb.OrderBy | undefined;
  setOrderby(value?: common_gateway_base_pb.OrderBy): void;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): common_gateway_base_pb.Page | undefined;
  setPage(value?: common_gateway_base_pb.Page): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusResultSetValuesRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusResultSetValuesRequest): ConsensusResultSetValuesRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusResultSetValuesRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusResultSetValuesRequest;
  static deserializeBinaryFromReader(message: ConsensusResultSetValuesRequest, reader: jspb.BinaryReader): ConsensusResultSetValuesRequest;
}

export namespace ConsensusResultSetValuesRequest {
  export type AsObject = {
    assetId: string,
    traceName: string,
    submittedId: string,
    submittedDate: string,
    consensusResultSetId: string,
    consensusRunTimestamp: string,
    client: string,
    filter: string,
    filterPack?: common_gateway_base_pb.FilterPack.AsObject,
    orderby?: common_gateway_base_pb.OrderBy.AsObject,
    page?: common_gateway_base_pb.Page.AsObject,
  }
}

export class ConsensusResultSetValuesResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): ConsensusResultSetValues | undefined;
  setData(value?: ConsensusResultSetValues): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): ConsensusResultSetValuesResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusResultSetValuesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusResultSetValuesResponse): ConsensusResultSetValuesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusResultSetValuesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusResultSetValuesResponse;
  static deserializeBinaryFromReader(message: ConsensusResultSetValuesResponse, reader: jspb.BinaryReader): ConsensusResultSetValuesResponse;
}

export namespace ConsensusResultSetValuesResponse {
  export type AsObject = {
    data?: ConsensusResultSetValues.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class ConsensusResultSetValues extends jspb.Message {
  clearColumnsList(): void;
  getColumnsList(): Array<common_gateway_base_pb.ColumnInfo>;
  setColumnsList(value: Array<common_gateway_base_pb.ColumnInfo>): void;
  addColumns(value?: common_gateway_base_pb.ColumnInfo, index?: number): common_gateway_base_pb.ColumnInfo;

  clearRowsList(): void;
  getRowsList(): Array<common_gateway_base_pb.ValuesRow>;
  setRowsList(value: Array<common_gateway_base_pb.ValuesRow>): void;
  addRows(value?: common_gateway_base_pb.ValuesRow, index?: number): common_gateway_base_pb.ValuesRow;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): common_gateway_base_pb.Page | undefined;
  setPage(value?: common_gateway_base_pb.Page): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusResultSetValues.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusResultSetValues): ConsensusResultSetValues.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusResultSetValues, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusResultSetValues;
  static deserializeBinaryFromReader(message: ConsensusResultSetValues, reader: jspb.BinaryReader): ConsensusResultSetValues;
}

export namespace ConsensusResultSetValues {
  export type AsObject = {
    columnsList: Array<common_gateway_base_pb.ColumnInfo.AsObject>,
    rowsList: Array<common_gateway_base_pb.ValuesRow.AsObject>,
    page?: common_gateway_base_pb.Page.AsObject,
  }
}

