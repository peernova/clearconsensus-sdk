/* eslint-disable */
/*Generated by GenDocu.com*/
// package: titanium
// file: common/consensus.proto

import * as jspb from "google-protobuf";
import * as common_gateway_base_pb from "../common/gateway_base_pb";
import * as google_protobuf_struct_pb from "google-protobuf/google/protobuf/struct_pb";

export class ConsensusActiveRequest extends jspb.Message {
  getFilter(): string;
  setFilter(value: string): void;

  hasOrderby(): boolean;
  clearOrderby(): void;
  getOrderby(): common_gateway_base_pb.OrderBy | undefined;
  setOrderby(value?: common_gateway_base_pb.OrderBy): void;

  hasLimit(): boolean;
  clearLimit(): void;
  getLimit(): common_gateway_base_pb.Limit | undefined;
  setLimit(value?: common_gateway_base_pb.Limit): void;

  getOffset(): number;
  setOffset(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusActiveRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusActiveRequest): ConsensusActiveRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusActiveRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusActiveRequest;
  static deserializeBinaryFromReader(message: ConsensusActiveRequest, reader: jspb.BinaryReader): ConsensusActiveRequest;
}

export namespace ConsensusActiveRequest {
  export type AsObject = {
    filter: string,
    orderby?: common_gateway_base_pb.OrderBy.AsObject,
    limit?: common_gateway_base_pb.Limit.AsObject,
    offset: number,
  }
}

export class ConsensusToPublishRequest extends jspb.Message {
  getFilter(): string;
  setFilter(value: string): void;

  hasOrderby(): boolean;
  clearOrderby(): void;
  getOrderby(): common_gateway_base_pb.OrderBy | undefined;
  setOrderby(value?: common_gateway_base_pb.OrderBy): void;

  hasLimit(): boolean;
  clearLimit(): void;
  getLimit(): common_gateway_base_pb.Limit | undefined;
  setLimit(value?: common_gateway_base_pb.Limit): void;

  getOffset(): number;
  setOffset(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusToPublishRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusToPublishRequest): ConsensusToPublishRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusToPublishRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusToPublishRequest;
  static deserializeBinaryFromReader(message: ConsensusToPublishRequest, reader: jspb.BinaryReader): ConsensusToPublishRequest;
}

export namespace ConsensusToPublishRequest {
  export type AsObject = {
    filter: string,
    orderby?: common_gateway_base_pb.OrderBy.AsObject,
    limit?: common_gateway_base_pb.Limit.AsObject,
    offset: number,
  }
}

export class ConsensusToPublishResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): ConsensusToPublishResponseData | undefined;
  setData(value?: ConsensusToPublishResponseData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): ConsensusToPublishResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusToPublishResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusToPublishResponse): ConsensusToPublishResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusToPublishResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusToPublishResponse;
  static deserializeBinaryFromReader(message: ConsensusToPublishResponse, reader: jspb.BinaryReader): ConsensusToPublishResponse;
}

export namespace ConsensusToPublishResponse {
  export type AsObject = {
    data?: ConsensusToPublishResponseData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class ConsensusToPublishResponseData extends jspb.Message {
  clearColumnsList(): void;
  getColumnsList(): Array<common_gateway_base_pb.ColumnInfo>;
  setColumnsList(value: Array<common_gateway_base_pb.ColumnInfo>): void;
  addColumns(value?: common_gateway_base_pb.ColumnInfo, index?: number): common_gateway_base_pb.ColumnInfo;

  clearRowsList(): void;
  getRowsList(): Array<common_gateway_base_pb.ValuesRow>;
  setRowsList(value: Array<common_gateway_base_pb.ValuesRow>): void;
  addRows(value?: common_gateway_base_pb.ValuesRow, index?: number): common_gateway_base_pb.ValuesRow;

  getTotalRows(): number;
  setTotalRows(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusToPublishResponseData.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusToPublishResponseData): ConsensusToPublishResponseData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusToPublishResponseData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusToPublishResponseData;
  static deserializeBinaryFromReader(message: ConsensusToPublishResponseData, reader: jspb.BinaryReader): ConsensusToPublishResponseData;
}

export namespace ConsensusToPublishResponseData {
  export type AsObject = {
    columnsList: Array<common_gateway_base_pb.ColumnInfo.AsObject>,
    rowsList: Array<common_gateway_base_pb.ValuesRow.AsObject>,
    totalRows: number,
  }
}

export class ConsensusPublishRequest extends jspb.Message {
  getConsensusTrackingId(): string;
  setConsensusTrackingId(value: string): void;

  getAssetId(): string;
  setAssetId(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusPublishRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusPublishRequest): ConsensusPublishRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusPublishRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusPublishRequest;
  static deserializeBinaryFromReader(message: ConsensusPublishRequest, reader: jspb.BinaryReader): ConsensusPublishRequest;
}

export namespace ConsensusPublishRequest {
  export type AsObject = {
    consensusTrackingId: string,
    assetId: string,
    traceName: string,
  }
}

export class ConsensusHistoryRequest extends jspb.Message {
  getFilter(): string;
  setFilter(value: string): void;

  hasOrderby(): boolean;
  clearOrderby(): void;
  getOrderby(): common_gateway_base_pb.OrderBy | undefined;
  setOrderby(value?: common_gateway_base_pb.OrderBy): void;

  hasLimit(): boolean;
  clearLimit(): void;
  getLimit(): common_gateway_base_pb.Limit | undefined;
  setLimit(value?: common_gateway_base_pb.Limit): void;

  getOffset(): number;
  setOffset(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusHistoryRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusHistoryRequest): ConsensusHistoryRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusHistoryRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusHistoryRequest;
  static deserializeBinaryFromReader(message: ConsensusHistoryRequest, reader: jspb.BinaryReader): ConsensusHistoryRequest;
}

export namespace ConsensusHistoryRequest {
  export type AsObject = {
    filter: string,
    orderby?: common_gateway_base_pb.OrderBy.AsObject,
    limit?: common_gateway_base_pb.Limit.AsObject,
    offset: number,
  }
}

export class ConsensusHistoryResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): ConsensusHistoryResponseData | undefined;
  setData(value?: ConsensusHistoryResponseData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): ConsensusHistoryResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusHistoryResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusHistoryResponse): ConsensusHistoryResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusHistoryResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusHistoryResponse;
  static deserializeBinaryFromReader(message: ConsensusHistoryResponse, reader: jspb.BinaryReader): ConsensusHistoryResponse;
}

export namespace ConsensusHistoryResponse {
  export type AsObject = {
    data?: ConsensusHistoryResponseData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class ConsensusHistoryResponseData extends jspb.Message {
  clearColumnsList(): void;
  getColumnsList(): Array<common_gateway_base_pb.ColumnInfo>;
  setColumnsList(value: Array<common_gateway_base_pb.ColumnInfo>): void;
  addColumns(value?: common_gateway_base_pb.ColumnInfo, index?: number): common_gateway_base_pb.ColumnInfo;

  clearRowsList(): void;
  getRowsList(): Array<common_gateway_base_pb.ValuesRow>;
  setRowsList(value: Array<common_gateway_base_pb.ValuesRow>): void;
  addRows(value?: common_gateway_base_pb.ValuesRow, index?: number): common_gateway_base_pb.ValuesRow;

  getTotalRows(): number;
  setTotalRows(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusHistoryResponseData.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusHistoryResponseData): ConsensusHistoryResponseData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusHistoryResponseData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusHistoryResponseData;
  static deserializeBinaryFromReader(message: ConsensusHistoryResponseData, reader: jspb.BinaryReader): ConsensusHistoryResponseData;
}

export namespace ConsensusHistoryResponseData {
  export type AsObject = {
    columnsList: Array<common_gateway_base_pb.ColumnInfo.AsObject>,
    rowsList: Array<common_gateway_base_pb.ValuesRow.AsObject>,
    totalRows: number,
  }
}

export class ConsensusDecisionRequest extends jspb.Message {
  getConsensusTrackingId(): string;
  setConsensusTrackingId(value: string): void;

  getDecision(): common_gateway_base_pb.DecisionMap[keyof common_gateway_base_pb.DecisionMap];
  setDecision(value: common_gateway_base_pb.DecisionMap[keyof common_gateway_base_pb.DecisionMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusDecisionRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusDecisionRequest): ConsensusDecisionRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusDecisionRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusDecisionRequest;
  static deserializeBinaryFromReader(message: ConsensusDecisionRequest, reader: jspb.BinaryReader): ConsensusDecisionRequest;
}

export namespace ConsensusDecisionRequest {
  export type AsObject = {
    consensusTrackingId: string,
    decision: common_gateway_base_pb.DecisionMap[keyof common_gateway_base_pb.DecisionMap],
  }
}

export class ConsensusTimestampsRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusTimestampsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusTimestampsRequest): ConsensusTimestampsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusTimestampsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusTimestampsRequest;
  static deserializeBinaryFromReader(message: ConsensusTimestampsRequest, reader: jspb.BinaryReader): ConsensusTimestampsRequest;
}

export namespace ConsensusTimestampsRequest {
  export type AsObject = {
    assetId: string,
    traceName: string,
  }
}

export class ConsensusTimestampsResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): ConsensusTimestampsResponseData | undefined;
  setData(value?: ConsensusTimestampsResponseData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): ConsensusTimestampsResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusTimestampsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusTimestampsResponse): ConsensusTimestampsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusTimestampsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusTimestampsResponse;
  static deserializeBinaryFromReader(message: ConsensusTimestampsResponse, reader: jspb.BinaryReader): ConsensusTimestampsResponse;
}

export namespace ConsensusTimestampsResponse {
  export type AsObject = {
    data?: ConsensusTimestampsResponseData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class ConsensusTimestampsResponseData extends jspb.Message {
  clearTimestampsList(): void;
  getTimestampsList(): Array<ConsensusTimestampMeta>;
  setTimestampsList(value: Array<ConsensusTimestampMeta>): void;
  addTimestamps(value?: ConsensusTimestampMeta, index?: number): ConsensusTimestampMeta;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusTimestampsResponseData.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusTimestampsResponseData): ConsensusTimestampsResponseData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusTimestampsResponseData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusTimestampsResponseData;
  static deserializeBinaryFromReader(message: ConsensusTimestampsResponseData, reader: jspb.BinaryReader): ConsensusTimestampsResponseData;
}

export namespace ConsensusTimestampsResponseData {
  export type AsObject = {
    timestampsList: Array<ConsensusTimestampMeta.AsObject>,
  }
}

export class ConsensusTimestampMeta extends jspb.Message {
  getConsensusRunTimestamp(): string;
  setConsensusRunTimestamp(value: string): void;

  clearSubmittedDatesList(): void;
  getSubmittedDatesList(): Array<string>;
  setSubmittedDatesList(value: Array<string>): void;
  addSubmittedDates(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusTimestampMeta.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusTimestampMeta): ConsensusTimestampMeta.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusTimestampMeta, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusTimestampMeta;
  static deserializeBinaryFromReader(message: ConsensusTimestampMeta, reader: jspb.BinaryReader): ConsensusTimestampMeta;
}

export namespace ConsensusTimestampMeta {
  export type AsObject = {
    consensusRunTimestamp: string,
    submittedDatesList: Array<string>,
  }
}

export class ConsensusRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getSubmittedDate(): string;
  setSubmittedDate(value: string): void;

  getConsensusRunTimestamp(): string;
  setConsensusRunTimestamp(value: string): void;

  getFilter(): string;
  setFilter(value: string): void;

  hasOrderby(): boolean;
  clearOrderby(): void;
  getOrderby(): common_gateway_base_pb.OrderBy | undefined;
  setOrderby(value?: common_gateway_base_pb.OrderBy): void;

  hasLimit(): boolean;
  clearLimit(): void;
  getLimit(): common_gateway_base_pb.Limit | undefined;
  setLimit(value?: common_gateway_base_pb.Limit): void;

  getOffset(): number;
  setOffset(value: number): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusRequest): ConsensusRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusRequest;
  static deserializeBinaryFromReader(message: ConsensusRequest, reader: jspb.BinaryReader): ConsensusRequest;
}

export namespace ConsensusRequest {
  export type AsObject = {
    assetId: string,
    submittedDate: string,
    consensusRunTimestamp: string,
    filter: string,
    orderby?: common_gateway_base_pb.OrderBy.AsObject,
    limit?: common_gateway_base_pb.Limit.AsObject,
    offset: number,
    traceName: string,
  }
}

export class ConsensusResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): ConsensusResponseData | undefined;
  setData(value?: ConsensusResponseData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): ConsensusResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusResponse): ConsensusResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusResponse;
  static deserializeBinaryFromReader(message: ConsensusResponse, reader: jspb.BinaryReader): ConsensusResponse;
}

export namespace ConsensusResponse {
  export type AsObject = {
    data?: ConsensusResponseData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class ConsensusResponseData extends jspb.Message {
  clearColumnsList(): void;
  getColumnsList(): Array<common_gateway_base_pb.ColumnInfo>;
  setColumnsList(value: Array<common_gateway_base_pb.ColumnInfo>): void;
  addColumns(value?: common_gateway_base_pb.ColumnInfo, index?: number): common_gateway_base_pb.ColumnInfo;

  clearRowsList(): void;
  getRowsList(): Array<common_gateway_base_pb.ValuesRow>;
  setRowsList(value: Array<common_gateway_base_pb.ValuesRow>): void;
  addRows(value?: common_gateway_base_pb.ValuesRow, index?: number): common_gateway_base_pb.ValuesRow;

  getTotalRows(): number;
  setTotalRows(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusResponseData.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusResponseData): ConsensusResponseData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusResponseData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusResponseData;
  static deserializeBinaryFromReader(message: ConsensusResponseData, reader: jspb.BinaryReader): ConsensusResponseData;
}

export namespace ConsensusResponseData {
  export type AsObject = {
    columnsList: Array<common_gateway_base_pb.ColumnInfo.AsObject>,
    rowsList: Array<common_gateway_base_pb.ValuesRow.AsObject>,
    totalRows: number,
  }
}

export class GetConsensusRunsRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  getSnapDateFrom(): string;
  setSnapDateFrom(value: string): void;

  getSnapDateTo(): string;
  setSnapDateTo(value: string): void;

  getParticipant(): string;
  setParticipant(value: string): void;

  getShowArchived(): boolean;
  setShowArchived(value: boolean): void;

  hasFilterPack(): boolean;
  clearFilterPack(): void;
  getFilterPack(): common_gateway_base_pb.FilterPack | undefined;
  setFilterPack(value?: common_gateway_base_pb.FilterPack): void;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): common_gateway_base_pb.Page | undefined;
  setPage(value?: common_gateway_base_pb.Page): void;

  hasOrderBy(): boolean;
  clearOrderBy(): void;
  getOrderBy(): common_gateway_base_pb.OrderBy | undefined;
  setOrderBy(value?: common_gateway_base_pb.OrderBy): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetConsensusRunsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetConsensusRunsRequest): GetConsensusRunsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetConsensusRunsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetConsensusRunsRequest;
  static deserializeBinaryFromReader(message: GetConsensusRunsRequest, reader: jspb.BinaryReader): GetConsensusRunsRequest;
}

export namespace GetConsensusRunsRequest {
  export type AsObject = {
    assetId: string,
    traceName: string,
    snapDateFrom: string,
    snapDateTo: string,
    participant: string,
    showArchived: boolean,
    filterPack?: common_gateway_base_pb.FilterPack.AsObject,
    page?: common_gateway_base_pb.Page.AsObject,
    orderBy?: common_gateway_base_pb.OrderBy.AsObject,
  }
}

export class GetConsensusRunsResponse extends jspb.Message {
  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  hasData(): boolean;
  clearData(): void;
  getData(): GetConsensusRunsData | undefined;
  setData(value?: GetConsensusRunsData): void;

  getResponseCase(): GetConsensusRunsResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetConsensusRunsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetConsensusRunsResponse): GetConsensusRunsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetConsensusRunsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetConsensusRunsResponse;
  static deserializeBinaryFromReader(message: GetConsensusRunsResponse, reader: jspb.BinaryReader): GetConsensusRunsResponse;
}

export namespace GetConsensusRunsResponse {
  export type AsObject = {
    error?: common_gateway_base_pb.Error.AsObject,
    data?: GetConsensusRunsData.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    ERROR = 1,
    DATA = 2,
  }
}

export class GetConsensusRunsData extends jspb.Message {
  clearColumnsList(): void;
  getColumnsList(): Array<common_gateway_base_pb.ColumnInfo>;
  setColumnsList(value: Array<common_gateway_base_pb.ColumnInfo>): void;
  addColumns(value?: common_gateway_base_pb.ColumnInfo, index?: number): common_gateway_base_pb.ColumnInfo;

  clearRowsList(): void;
  getRowsList(): Array<common_gateway_base_pb.ValuesRow>;
  setRowsList(value: Array<common_gateway_base_pb.ValuesRow>): void;
  addRows(value?: common_gateway_base_pb.ValuesRow, index?: number): common_gateway_base_pb.ValuesRow;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): common_gateway_base_pb.Page | undefined;
  setPage(value?: common_gateway_base_pb.Page): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetConsensusRunsData.AsObject;
  static toObject(includeInstance: boolean, msg: GetConsensusRunsData): GetConsensusRunsData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetConsensusRunsData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetConsensusRunsData;
  static deserializeBinaryFromReader(message: GetConsensusRunsData, reader: jspb.BinaryReader): GetConsensusRunsData;
}

export namespace GetConsensusRunsData {
  export type AsObject = {
    columnsList: Array<common_gateway_base_pb.ColumnInfo.AsObject>,
    rowsList: Array<common_gateway_base_pb.ValuesRow.AsObject>,
    page?: common_gateway_base_pb.Page.AsObject,
  }
}

export class ConsensusResultSet extends jspb.Message {
  getConsensusRunId(): string;
  setConsensusRunId(value: string): void;

  getConsensusResultSetId(): string;
  setConsensusResultSetId(value: string): void;

  getSubmissionTimestamp(): string;
  setSubmissionTimestamp(value: string): void;

  getConsensusRunStatus(): string;
  setConsensusRunStatus(value: string): void;

  getCohortName(): string;
  setCohortName(value: string): void;

  getDataContent(): string;
  setDataContent(value: string): void;

  getConsensusRunTimestamp(): string;
  setConsensusRunTimestamp(value: string): void;

  clearParticipantsList(): void;
  getParticipantsList(): Array<string>;
  setParticipantsList(value: Array<string>): void;
  addParticipants(value: string, index?: number): string;

  getParticipant(): string;
  setParticipant(value: string): void;

  getStatus(): string;
  setStatus(value: string): void;

  getConsensusNotes(): string;
  setConsensusNotes(value: string): void;

  getConsensusResultSetLabel(): string;
  setConsensusResultSetLabel(value: string): void;

  getRunBy(): string;
  setRunBy(value: string): void;

  getJobId(): string;
  setJobId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusResultSet.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusResultSet): ConsensusResultSet.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusResultSet, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusResultSet;
  static deserializeBinaryFromReader(message: ConsensusResultSet, reader: jspb.BinaryReader): ConsensusResultSet;
}

export namespace ConsensusResultSet {
  export type AsObject = {
    consensusRunId: string,
    consensusResultSetId: string,
    submissionTimestamp: string,
    consensusRunStatus: string,
    cohortName: string,
    dataContent: string,
    consensusRunTimestamp: string,
    participantsList: Array<string>,
    participant: string,
    status: string,
    consensusNotes: string,
    consensusResultSetLabel: string,
    runBy: string,
    jobId: string,
  }
}

export class ConsensusResultSetValuesRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  getSubmittedDate(): string;
  setSubmittedDate(value: string): void;

  getConsensusRunTimestamp(): string;
  setConsensusRunTimestamp(value: string): void;

  getClient(): string;
  setClient(value: string): void;

  hasFilterPack(): boolean;
  clearFilterPack(): void;
  getFilterPack(): common_gateway_base_pb.FilterPack | undefined;
  setFilterPack(value?: common_gateway_base_pb.FilterPack): void;

  hasOrderby(): boolean;
  clearOrderby(): void;
  getOrderby(): common_gateway_base_pb.OrderBy | undefined;
  setOrderby(value?: common_gateway_base_pb.OrderBy): void;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): common_gateway_base_pb.Page | undefined;
  setPage(value?: common_gateway_base_pb.Page): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusResultSetValuesRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusResultSetValuesRequest): ConsensusResultSetValuesRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusResultSetValuesRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusResultSetValuesRequest;
  static deserializeBinaryFromReader(message: ConsensusResultSetValuesRequest, reader: jspb.BinaryReader): ConsensusResultSetValuesRequest;
}

export namespace ConsensusResultSetValuesRequest {
  export type AsObject = {
    assetId: string,
    traceName: string,
    submittedDate: string,
    consensusRunTimestamp: string,
    client: string,
    filterPack?: common_gateway_base_pb.FilterPack.AsObject,
    orderby?: common_gateway_base_pb.OrderBy.AsObject,
    page?: common_gateway_base_pb.Page.AsObject,
  }
}

export class ConsensusResultSetValuesResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): ConsensusResultSetValues | undefined;
  setData(value?: ConsensusResultSetValues): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): ConsensusResultSetValuesResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusResultSetValuesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusResultSetValuesResponse): ConsensusResultSetValuesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusResultSetValuesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusResultSetValuesResponse;
  static deserializeBinaryFromReader(message: ConsensusResultSetValuesResponse, reader: jspb.BinaryReader): ConsensusResultSetValuesResponse;
}

export namespace ConsensusResultSetValuesResponse {
  export type AsObject = {
    data?: ConsensusResultSetValues.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class ConsensusResultSetValues extends jspb.Message {
  clearColumnsList(): void;
  getColumnsList(): Array<common_gateway_base_pb.ColumnInfo>;
  setColumnsList(value: Array<common_gateway_base_pb.ColumnInfo>): void;
  addColumns(value?: common_gateway_base_pb.ColumnInfo, index?: number): common_gateway_base_pb.ColumnInfo;

  clearRowsList(): void;
  getRowsList(): Array<common_gateway_base_pb.ValuesRow>;
  setRowsList(value: Array<common_gateway_base_pb.ValuesRow>): void;
  addRows(value?: common_gateway_base_pb.ValuesRow, index?: number): common_gateway_base_pb.ValuesRow;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): common_gateway_base_pb.Page | undefined;
  setPage(value?: common_gateway_base_pb.Page): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusResultSetValues.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusResultSetValues): ConsensusResultSetValues.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusResultSetValues, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusResultSetValues;
  static deserializeBinaryFromReader(message: ConsensusResultSetValues, reader: jspb.BinaryReader): ConsensusResultSetValues;
}

export namespace ConsensusResultSetValues {
  export type AsObject = {
    columnsList: Array<common_gateway_base_pb.ColumnInfo.AsObject>,
    rowsList: Array<common_gateway_base_pb.ValuesRow.AsObject>,
    page?: common_gateway_base_pb.Page.AsObject,
  }
}

export class ConsensusExplorerInstrumentDetailsRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getSubmittedDate(): string;
  setSubmittedDate(value: string): void;

  getConsensusResultSetId(): string;
  setConsensusResultSetId(value: string): void;

  hasSubmittedId(): boolean;
  clearSubmittedId(): void;
  getSubmittedId(): string;
  setSubmittedId(value: string): void;

  hasConsensusId(): boolean;
  clearConsensusId(): void;
  getConsensusId(): string;
  setConsensusId(value: string): void;

  hasEvaluatedPriceId(): boolean;
  clearEvaluatedPriceId(): void;
  getEvaluatedPriceId(): string;
  setEvaluatedPriceId(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  getIdCase(): ConsensusExplorerInstrumentDetailsRequest.IdCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusExplorerInstrumentDetailsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusExplorerInstrumentDetailsRequest): ConsensusExplorerInstrumentDetailsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusExplorerInstrumentDetailsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusExplorerInstrumentDetailsRequest;
  static deserializeBinaryFromReader(message: ConsensusExplorerInstrumentDetailsRequest, reader: jspb.BinaryReader): ConsensusExplorerInstrumentDetailsRequest;
}

export namespace ConsensusExplorerInstrumentDetailsRequest {
  export type AsObject = {
    assetId: string,
    submittedDate: string,
    consensusResultSetId: string,
    submittedId: string,
    consensusId: string,
    evaluatedPriceId: string,
    traceName: string,
  }

  export enum IdCase {
    ID_NOT_SET = 0,
    SUBMITTED_ID = 4,
    CONSENSUS_ID = 5,
    EVALUATED_PRICE_ID = 6,
  }
}

export class ConsensusExplorerRangeRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getSubmittedDate(): string;
  setSubmittedDate(value: string): void;

  getParticipant(): string;
  setParticipant(value: string): void;

  getConsensusRunTimestamp(): string;
  setConsensusRunTimestamp(value: string): void;

  getSubmissionId(): string;
  setSubmissionId(value: string): void;

  getExpert(): boolean;
  setExpert(value: boolean): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusExplorerRangeRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusExplorerRangeRequest): ConsensusExplorerRangeRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusExplorerRangeRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusExplorerRangeRequest;
  static deserializeBinaryFromReader(message: ConsensusExplorerRangeRequest, reader: jspb.BinaryReader): ConsensusExplorerRangeRequest;
}

export namespace ConsensusExplorerRangeRequest {
  export type AsObject = {
    assetId: string,
    submittedDate: string,
    participant: string,
    consensusRunTimestamp: string,
    submissionId: string,
    expert: boolean,
    traceName: string,
  }
}

export class Range extends jspb.Message {
  hasMin(): boolean;
  clearMin(): void;
  getMin(): RangePoint | undefined;
  setMin(value?: RangePoint): void;

  hasMax(): boolean;
  clearMax(): void;
  getMax(): RangePoint | undefined;
  setMax(value?: RangePoint): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Range.AsObject;
  static toObject(includeInstance: boolean, msg: Range): Range.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Range, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Range;
  static deserializeBinaryFromReader(message: Range, reader: jspb.BinaryReader): Range;
}

export namespace Range {
  export type AsObject = {
    min?: RangePoint.AsObject,
    max?: RangePoint.AsObject,
  }
}

export class RangePoint extends jspb.Message {
  getLabel(): string;
  setLabel(value: string): void;

  hasValue(): boolean;
  clearValue(): void;
  getValue(): google_protobuf_struct_pb.Value | undefined;
  setValue(value?: google_protobuf_struct_pb.Value): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RangePoint.AsObject;
  static toObject(includeInstance: boolean, msg: RangePoint): RangePoint.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RangePoint, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RangePoint;
  static deserializeBinaryFromReader(message: RangePoint, reader: jspb.BinaryReader): RangePoint;
}

export namespace RangePoint {
  export type AsObject = {
    label: string,
    value?: google_protobuf_struct_pb.Value.AsObject,
  }
}

export class EVPRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getSubmittedDate(): string;
  setSubmittedDate(value: string): void;

  getConsensusRunTimestamp(): string;
  setConsensusRunTimestamp(value: string): void;

  hasFilterPack(): boolean;
  clearFilterPack(): void;
  getFilterPack(): common_gateway_base_pb.FilterPack | undefined;
  setFilterPack(value?: common_gateway_base_pb.FilterPack): void;

  hasOrderby(): boolean;
  clearOrderby(): void;
  getOrderby(): common_gateway_base_pb.OrderBy | undefined;
  setOrderby(value?: common_gateway_base_pb.OrderBy): void;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): common_gateway_base_pb.Page | undefined;
  setPage(value?: common_gateway_base_pb.Page): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EVPRequest.AsObject;
  static toObject(includeInstance: boolean, msg: EVPRequest): EVPRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EVPRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EVPRequest;
  static deserializeBinaryFromReader(message: EVPRequest, reader: jspb.BinaryReader): EVPRequest;
}

export namespace EVPRequest {
  export type AsObject = {
    assetId: string,
    submittedDate: string,
    consensusRunTimestamp: string,
    filterPack?: common_gateway_base_pb.FilterPack.AsObject,
    orderby?: common_gateway_base_pb.OrderBy.AsObject,
    page?: common_gateway_base_pb.Page.AsObject,
    traceName: string,
  }
}

export class EVPResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): EVPResponseData | undefined;
  setData(value?: EVPResponseData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): EVPResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EVPResponse.AsObject;
  static toObject(includeInstance: boolean, msg: EVPResponse): EVPResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EVPResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EVPResponse;
  static deserializeBinaryFromReader(message: EVPResponse, reader: jspb.BinaryReader): EVPResponse;
}

export namespace EVPResponse {
  export type AsObject = {
    data?: EVPResponseData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class EVPResponseData extends jspb.Message {
  clearColumnsList(): void;
  getColumnsList(): Array<common_gateway_base_pb.ColumnInfo>;
  setColumnsList(value: Array<common_gateway_base_pb.ColumnInfo>): void;
  addColumns(value?: common_gateway_base_pb.ColumnInfo, index?: number): common_gateway_base_pb.ColumnInfo;

  clearRowsList(): void;
  getRowsList(): Array<common_gateway_base_pb.ValuesRow>;
  setRowsList(value: Array<common_gateway_base_pb.ValuesRow>): void;
  addRows(value?: common_gateway_base_pb.ValuesRow, index?: number): common_gateway_base_pb.ValuesRow;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): common_gateway_base_pb.Page | undefined;
  setPage(value?: common_gateway_base_pb.Page): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EVPResponseData.AsObject;
  static toObject(includeInstance: boolean, msg: EVPResponseData): EVPResponseData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EVPResponseData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EVPResponseData;
  static deserializeBinaryFromReader(message: EVPResponseData, reader: jspb.BinaryReader): EVPResponseData;
}

export namespace EVPResponseData {
  export type AsObject = {
    columnsList: Array<common_gateway_base_pb.ColumnInfo.AsObject>,
    rowsList: Array<common_gateway_base_pb.ValuesRow.AsObject>,
    page?: common_gateway_base_pb.Page.AsObject,
  }
}

export class ConsensusExplorerRequest extends jspb.Message {
  getAssetId(): string;
  setAssetId(value: string): void;

  getTraceName(): string;
  setTraceName(value: string): void;

  getSubmittedDate(): string;
  setSubmittedDate(value: string): void;

  getConsensusRunTimestamp(): string;
  setConsensusRunTimestamp(value: string): void;

  hasSubmissionId(): boolean;
  clearSubmissionId(): void;
  getSubmissionId(): string;
  setSubmissionId(value: string): void;

  hasGroupKeys(): boolean;
  clearGroupKeys(): void;
  getGroupKeys(): common_gateway_base_pb.ListOfKeys | undefined;
  setGroupKeys(value?: common_gateway_base_pb.ListOfKeys): void;

  getIdCase(): ConsensusExplorerRequest.IdCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusExplorerRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusExplorerRequest): ConsensusExplorerRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusExplorerRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusExplorerRequest;
  static deserializeBinaryFromReader(message: ConsensusExplorerRequest, reader: jspb.BinaryReader): ConsensusExplorerRequest;
}

export namespace ConsensusExplorerRequest {
  export type AsObject = {
    assetId: string,
    traceName: string,
    submittedDate: string,
    consensusRunTimestamp: string,
    submissionId: string,
    groupKeys?: common_gateway_base_pb.ListOfKeys.AsObject,
  }

  export enum IdCase {
    ID_NOT_SET = 0,
    SUBMISSION_ID = 5,
    GROUP_KEYS = 6,
  }
}

export class ConsensusExplorerInstrumentDetailsResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): ConsensusExplorerInstrumentDetailsData | undefined;
  setData(value?: ConsensusExplorerInstrumentDetailsData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): ConsensusExplorerInstrumentDetailsResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusExplorerInstrumentDetailsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusExplorerInstrumentDetailsResponse): ConsensusExplorerInstrumentDetailsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusExplorerInstrumentDetailsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusExplorerInstrumentDetailsResponse;
  static deserializeBinaryFromReader(message: ConsensusExplorerInstrumentDetailsResponse, reader: jspb.BinaryReader): ConsensusExplorerInstrumentDetailsResponse;
}

export namespace ConsensusExplorerInstrumentDetailsResponse {
  export type AsObject = {
    data?: ConsensusExplorerInstrumentDetailsData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class ConsensusExplorerInstrumentDetailsData extends jspb.Message {
  getIsExpert(): boolean;
  setIsExpert(value: boolean): void;

  clearInstrumentDetailsList(): void;
  getInstrumentDetailsList(): Array<common_gateway_base_pb.StringKeyVal>;
  setInstrumentDetailsList(value: Array<common_gateway_base_pb.StringKeyVal>): void;
  addInstrumentDetails(value?: common_gateway_base_pb.StringKeyVal, index?: number): common_gateway_base_pb.StringKeyVal;

  hasInstrumentSubmissionStatus(): boolean;
  clearInstrumentSubmissionStatus(): void;
  getInstrumentSubmissionStatus(): InstrumentSubmissionStatus | undefined;
  setInstrumentSubmissionStatus(value?: InstrumentSubmissionStatus): void;

  hasConsensusScores(): boolean;
  clearConsensusScores(): void;
  getConsensusScores(): ConsensusScores | undefined;
  setConsensusScores(value?: ConsensusScores): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusExplorerInstrumentDetailsData.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusExplorerInstrumentDetailsData): ConsensusExplorerInstrumentDetailsData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusExplorerInstrumentDetailsData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusExplorerInstrumentDetailsData;
  static deserializeBinaryFromReader(message: ConsensusExplorerInstrumentDetailsData, reader: jspb.BinaryReader): ConsensusExplorerInstrumentDetailsData;
}

export namespace ConsensusExplorerInstrumentDetailsData {
  export type AsObject = {
    isExpert: boolean,
    instrumentDetailsList: Array<common_gateway_base_pb.StringKeyVal.AsObject>,
    instrumentSubmissionStatus?: InstrumentSubmissionStatus.AsObject,
    consensusScores?: ConsensusScores.AsObject,
  }
}

export class InstrumentSubmissionStatus extends jspb.Message {
  getHighestDqe(): string;
  setHighestDqe(value: string): void;

  getConsensusStatus(): string;
  setConsensusStatus(value: string): void;

  getConsensusStatusDetails(): string;
  setConsensusStatusDetails(value: string): void;

  getParticipantConsensusStatus(): string;
  setParticipantConsensusStatus(value: string): void;

  getParticipantConsensusStatusDetails(): string;
  setParticipantConsensusStatusDetails(value: string): void;

  getBimodality(): string;
  setBimodality(value: string): void;

  clearDqeHistoryList(): void;
  getDqeHistoryList(): Array<DateAndValue>;
  setDqeHistoryList(value: Array<DateAndValue>): void;
  addDqeHistory(value?: DateAndValue, index?: number): DateAndValue;

  clearConsensusStatusHistoryList(): void;
  getConsensusStatusHistoryList(): Array<DateAndValue>;
  setConsensusStatusHistoryList(value: Array<DateAndValue>): void;
  addConsensusStatusHistory(value?: DateAndValue, index?: number): DateAndValue;

  clearConsensusStatusDetailsHistoryList(): void;
  getConsensusStatusDetailsHistoryList(): Array<DateAndValue>;
  setConsensusStatusDetailsHistoryList(value: Array<DateAndValue>): void;
  addConsensusStatusDetailsHistory(value?: DateAndValue, index?: number): DateAndValue;

  clearParticipantConsensusStatusHistoryList(): void;
  getParticipantConsensusStatusHistoryList(): Array<DateAndValue>;
  setParticipantConsensusStatusHistoryList(value: Array<DateAndValue>): void;
  addParticipantConsensusStatusHistory(value?: DateAndValue, index?: number): DateAndValue;

  clearParticipantConsensusStatusDetailsHistoryList(): void;
  getParticipantConsensusStatusDetailsHistoryList(): Array<DateAndValue>;
  setParticipantConsensusStatusDetailsHistoryList(value: Array<DateAndValue>): void;
  addParticipantConsensusStatusDetailsHistory(value?: DateAndValue, index?: number): DateAndValue;

  clearBimodalityHistoryList(): void;
  getBimodalityHistoryList(): Array<DateAndValue>;
  setBimodalityHistoryList(value: Array<DateAndValue>): void;
  addBimodalityHistory(value?: DateAndValue, index?: number): DateAndValue;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): InstrumentSubmissionStatus.AsObject;
  static toObject(includeInstance: boolean, msg: InstrumentSubmissionStatus): InstrumentSubmissionStatus.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: InstrumentSubmissionStatus, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): InstrumentSubmissionStatus;
  static deserializeBinaryFromReader(message: InstrumentSubmissionStatus, reader: jspb.BinaryReader): InstrumentSubmissionStatus;
}

export namespace InstrumentSubmissionStatus {
  export type AsObject = {
    highestDqe: string,
    consensusStatus: string,
    consensusStatusDetails: string,
    participantConsensusStatus: string,
    participantConsensusStatusDetails: string,
    bimodality: string,
    dqeHistoryList: Array<DateAndValue.AsObject>,
    consensusStatusHistoryList: Array<DateAndValue.AsObject>,
    consensusStatusDetailsHistoryList: Array<DateAndValue.AsObject>,
    participantConsensusStatusHistoryList: Array<DateAndValue.AsObject>,
    participantConsensusStatusDetailsHistoryList: Array<DateAndValue.AsObject>,
    bimodalityHistoryList: Array<DateAndValue.AsObject>,
  }
}

export class DateAndValue extends jspb.Message {
  getDate(): string;
  setDate(value: string): void;

  hasValue(): boolean;
  clearValue(): void;
  getValue(): google_protobuf_struct_pb.Value | undefined;
  setValue(value?: google_protobuf_struct_pb.Value): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DateAndValue.AsObject;
  static toObject(includeInstance: boolean, msg: DateAndValue): DateAndValue.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DateAndValue, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DateAndValue;
  static deserializeBinaryFromReader(message: DateAndValue, reader: jspb.BinaryReader): DateAndValue;
}

export namespace DateAndValue {
  export type AsObject = {
    date: string,
    value?: google_protobuf_struct_pb.Value.AsObject,
  }
}

export class ExpertiseScoreWithDate extends jspb.Message {
  getDate(): string;
  setDate(value: string): void;

  hasScore(): boolean;
  clearScore(): void;
  getScore(): google_protobuf_struct_pb.Value | undefined;
  setScore(value?: google_protobuf_struct_pb.Value): void;

  hasExpertiseRank(): boolean;
  clearExpertiseRank(): void;
  getExpertiseRank(): google_protobuf_struct_pb.Value | undefined;
  setExpertiseRank(value?: google_protobuf_struct_pb.Value): void;

  hasExpertsCount(): boolean;
  clearExpertsCount(): void;
  getExpertsCount(): google_protobuf_struct_pb.Value | undefined;
  setExpertsCount(value?: google_protobuf_struct_pb.Value): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ExpertiseScoreWithDate.AsObject;
  static toObject(includeInstance: boolean, msg: ExpertiseScoreWithDate): ExpertiseScoreWithDate.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ExpertiseScoreWithDate, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ExpertiseScoreWithDate;
  static deserializeBinaryFromReader(message: ExpertiseScoreWithDate, reader: jspb.BinaryReader): ExpertiseScoreWithDate;
}

export namespace ExpertiseScoreWithDate {
  export type AsObject = {
    date: string,
    score?: google_protobuf_struct_pb.Value.AsObject,
    expertiseRank?: google_protobuf_struct_pb.Value.AsObject,
    expertsCount?: google_protobuf_struct_pb.Value.AsObject,
  }
}

export class EvpAlignmentScoreWithDate extends jspb.Message {
  getDate(): string;
  setDate(value: string): void;

  hasScore(): boolean;
  clearScore(): void;
  getScore(): google_protobuf_struct_pb.Value | undefined;
  setScore(value?: google_protobuf_struct_pb.Value): void;

  getScoreStatus(): string;
  setScoreStatus(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EvpAlignmentScoreWithDate.AsObject;
  static toObject(includeInstance: boolean, msg: EvpAlignmentScoreWithDate): EvpAlignmentScoreWithDate.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EvpAlignmentScoreWithDate, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EvpAlignmentScoreWithDate;
  static deserializeBinaryFromReader(message: EvpAlignmentScoreWithDate, reader: jspb.BinaryReader): EvpAlignmentScoreWithDate;
}

export namespace EvpAlignmentScoreWithDate {
  export type AsObject = {
    date: string,
    score?: google_protobuf_struct_pb.Value.AsObject,
    scoreStatus: string,
  }
}

export class ConsensusScores extends jspb.Message {
  hasConsensusDensityScore(): boolean;
  clearConsensusDensityScore(): void;
  getConsensusDensityScore(): ConsensusDensityScore | undefined;
  setConsensusDensityScore(value?: ConsensusDensityScore): void;

  hasExpertiseScore(): boolean;
  clearExpertiseScore(): void;
  getExpertiseScore(): ExpertiseScore | undefined;
  setExpertiseScore(value?: ExpertiseScore): void;

  hasEvpQualityScore(): boolean;
  clearEvpQualityScore(): void;
  getEvpQualityScore(): EvpQualityScore | undefined;
  setEvpQualityScore(value?: EvpQualityScore): void;

  hasEvpAlignmentScore(): boolean;
  clearEvpAlignmentScore(): void;
  getEvpAlignmentScore(): EvpAlignmentScore | undefined;
  setEvpAlignmentScore(value?: EvpAlignmentScore): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusScores.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusScores): ConsensusScores.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusScores, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusScores;
  static deserializeBinaryFromReader(message: ConsensusScores, reader: jspb.BinaryReader): ConsensusScores;
}

export namespace ConsensusScores {
  export type AsObject = {
    consensusDensityScore?: ConsensusDensityScore.AsObject,
    expertiseScore?: ExpertiseScore.AsObject,
    evpQualityScore?: EvpQualityScore.AsObject,
    evpAlignmentScore?: EvpAlignmentScore.AsObject,
  }
}

export class ConsensusDensityScore extends jspb.Message {
  hasScore(): boolean;
  clearScore(): void;
  getScore(): google_protobuf_struct_pb.Value | undefined;
  setScore(value?: google_protobuf_struct_pb.Value): void;

  hasOutlierVolume(): boolean;
  clearOutlierVolume(): void;
  getOutlierVolume(): google_protobuf_struct_pb.Value | undefined;
  setOutlierVolume(value?: google_protobuf_struct_pb.Value): void;

  hasBimodality(): boolean;
  clearBimodality(): void;
  getBimodality(): google_protobuf_struct_pb.Value | undefined;
  setBimodality(value?: google_protobuf_struct_pb.Value): void;

  hasDispersion(): boolean;
  clearDispersion(): void;
  getDispersion(): google_protobuf_struct_pb.Value | undefined;
  setDispersion(value?: google_protobuf_struct_pb.Value): void;

  hasEvpAlignmentScore(): boolean;
  clearEvpAlignmentScore(): void;
  getEvpAlignmentScore(): google_protobuf_struct_pb.Value | undefined;
  setEvpAlignmentScore(value?: google_protobuf_struct_pb.Value): void;

  hasEvpQuality(): boolean;
  clearEvpQuality(): void;
  getEvpQuality(): google_protobuf_struct_pb.Value | undefined;
  setEvpQuality(value?: google_protobuf_struct_pb.Value): void;

  hasNumberOfParticipants(): boolean;
  clearNumberOfParticipants(): void;
  getNumberOfParticipants(): google_protobuf_struct_pb.Value | undefined;
  setNumberOfParticipants(value?: google_protobuf_struct_pb.Value): void;

  hasChallengeQuality(): boolean;
  clearChallengeQuality(): void;
  getChallengeQuality(): google_protobuf_struct_pb.Value | undefined;
  setChallengeQuality(value?: google_protobuf_struct_pb.Value): void;

  clearHistoryList(): void;
  getHistoryList(): Array<DateAndValue>;
  setHistoryList(value: Array<DateAndValue>): void;
  addHistory(value?: DateAndValue, index?: number): DateAndValue;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusDensityScore.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusDensityScore): ConsensusDensityScore.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusDensityScore, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusDensityScore;
  static deserializeBinaryFromReader(message: ConsensusDensityScore, reader: jspb.BinaryReader): ConsensusDensityScore;
}

export namespace ConsensusDensityScore {
  export type AsObject = {
    score?: google_protobuf_struct_pb.Value.AsObject,
    outlierVolume?: google_protobuf_struct_pb.Value.AsObject,
    bimodality?: google_protobuf_struct_pb.Value.AsObject,
    dispersion?: google_protobuf_struct_pb.Value.AsObject,
    evpAlignmentScore?: google_protobuf_struct_pb.Value.AsObject,
    evpQuality?: google_protobuf_struct_pb.Value.AsObject,
    numberOfParticipants?: google_protobuf_struct_pb.Value.AsObject,
    challengeQuality?: google_protobuf_struct_pb.Value.AsObject,
    historyList: Array<DateAndValue.AsObject>,
  }
}

export class ExpertiseScore extends jspb.Message {
  hasScore(): boolean;
  clearScore(): void;
  getScore(): google_protobuf_struct_pb.Value | undefined;
  setScore(value?: google_protobuf_struct_pb.Value): void;

  hasExpertiseRank(): boolean;
  clearExpertiseRank(): void;
  getExpertiseRank(): google_protobuf_struct_pb.Value | undefined;
  setExpertiseRank(value?: google_protobuf_struct_pb.Value): void;

  hasExpertsCount(): boolean;
  clearExpertsCount(): void;
  getExpertsCount(): google_protobuf_struct_pb.Value | undefined;
  setExpertsCount(value?: google_protobuf_struct_pb.Value): void;

  hasSubmittedScore(): boolean;
  clearSubmittedScore(): void;
  getSubmittedScore(): google_protobuf_struct_pb.Value | undefined;
  setSubmittedScore(value?: google_protobuf_struct_pb.Value): void;

  hasConsensusScore(): boolean;
  clearConsensusScore(): void;
  getConsensusScore(): google_protobuf_struct_pb.Value | undefined;
  setConsensusScore(value?: google_protobuf_struct_pb.Value): void;

  hasDimensionCreditScore(): boolean;
  clearDimensionCreditScore(): void;
  getDimensionCreditScore(): google_protobuf_struct_pb.Value | undefined;
  setDimensionCreditScore(value?: google_protobuf_struct_pb.Value): void;

  hasChallengeScore(): boolean;
  clearChallengeScore(): void;
  getChallengeScore(): google_protobuf_struct_pb.Value | undefined;
  setChallengeScore(value?: google_protobuf_struct_pb.Value): void;

  hasConsensusDistanceScore(): boolean;
  clearConsensusDistanceScore(): void;
  getConsensusDistanceScore(): google_protobuf_struct_pb.Value | undefined;
  setConsensusDistanceScore(value?: google_protobuf_struct_pb.Value): void;

  hasProximitytopostchallengeconsensusmean(): boolean;
  clearProximitytopostchallengeconsensusmean(): void;
  getProximitytopostchallengeconsensusmean(): google_protobuf_struct_pb.Value | undefined;
  setProximitytopostchallengeconsensusmean(value?: google_protobuf_struct_pb.Value): void;

  clearHistoryList(): void;
  getHistoryList(): Array<ExpertiseScoreWithDate>;
  setHistoryList(value: Array<ExpertiseScoreWithDate>): void;
  addHistory(value?: ExpertiseScoreWithDate, index?: number): ExpertiseScoreWithDate;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ExpertiseScore.AsObject;
  static toObject(includeInstance: boolean, msg: ExpertiseScore): ExpertiseScore.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ExpertiseScore, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ExpertiseScore;
  static deserializeBinaryFromReader(message: ExpertiseScore, reader: jspb.BinaryReader): ExpertiseScore;
}

export namespace ExpertiseScore {
  export type AsObject = {
    score?: google_protobuf_struct_pb.Value.AsObject,
    expertiseRank?: google_protobuf_struct_pb.Value.AsObject,
    expertsCount?: google_protobuf_struct_pb.Value.AsObject,
    submittedScore?: google_protobuf_struct_pb.Value.AsObject,
    consensusScore?: google_protobuf_struct_pb.Value.AsObject,
    dimensionCreditScore?: google_protobuf_struct_pb.Value.AsObject,
    challengeScore?: google_protobuf_struct_pb.Value.AsObject,
    consensusDistanceScore?: google_protobuf_struct_pb.Value.AsObject,
    proximitytopostchallengeconsensusmean?: google_protobuf_struct_pb.Value.AsObject,
    historyList: Array<ExpertiseScoreWithDate.AsObject>,
  }
}

export class EvpQualityScore extends jspb.Message {
  hasScore(): boolean;
  clearScore(): void;
  getScore(): google_protobuf_struct_pb.Value | undefined;
  setScore(value?: google_protobuf_struct_pb.Value): void;

  getTradeCount(): string;
  setTradeCount(value: string): void;

  getOrderCount(): string;
  setOrderCount(value: string): void;

  getIndicativeCount(): string;
  setIndicativeCount(value: string): void;

  clearHistoryList(): void;
  getHistoryList(): Array<DateAndValue>;
  setHistoryList(value: Array<DateAndValue>): void;
  addHistory(value?: DateAndValue, index?: number): DateAndValue;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EvpQualityScore.AsObject;
  static toObject(includeInstance: boolean, msg: EvpQualityScore): EvpQualityScore.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EvpQualityScore, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EvpQualityScore;
  static deserializeBinaryFromReader(message: EvpQualityScore, reader: jspb.BinaryReader): EvpQualityScore;
}

export namespace EvpQualityScore {
  export type AsObject = {
    score?: google_protobuf_struct_pb.Value.AsObject,
    tradeCount: string,
    orderCount: string,
    indicativeCount: string,
    historyList: Array<DateAndValue.AsObject>,
  }
}

export class EvpAlignmentScore extends jspb.Message {
  hasScore(): boolean;
  clearScore(): void;
  getScore(): google_protobuf_struct_pb.Value | undefined;
  setScore(value?: google_protobuf_struct_pb.Value): void;

  getScoreStatus(): string;
  setScoreStatus(value: string): void;

  hasEvpMid(): boolean;
  clearEvpMid(): void;
  getEvpMid(): google_protobuf_struct_pb.Value | undefined;
  setEvpMid(value?: google_protobuf_struct_pb.Value): void;

  hasSubmissionMean(): boolean;
  clearSubmissionMean(): void;
  getSubmissionMean(): google_protobuf_struct_pb.Value | undefined;
  setSubmissionMean(value?: google_protobuf_struct_pb.Value): void;

  hasSubmissionStdDev(): boolean;
  clearSubmissionStdDev(): void;
  getSubmissionStdDev(): google_protobuf_struct_pb.Value | undefined;
  setSubmissionStdDev(value?: google_protobuf_struct_pb.Value): void;

  hasEvpAlignmentDispersionScore(): boolean;
  clearEvpAlignmentDispersionScore(): void;
  getEvpAlignmentDispersionScore(): google_protobuf_struct_pb.Value | undefined;
  setEvpAlignmentDispersionScore(value?: google_protobuf_struct_pb.Value): void;

  clearHistoryList(): void;
  getHistoryList(): Array<EvpAlignmentScoreWithDate>;
  setHistoryList(value: Array<EvpAlignmentScoreWithDate>): void;
  addHistory(value?: EvpAlignmentScoreWithDate, index?: number): EvpAlignmentScoreWithDate;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EvpAlignmentScore.AsObject;
  static toObject(includeInstance: boolean, msg: EvpAlignmentScore): EvpAlignmentScore.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EvpAlignmentScore, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EvpAlignmentScore;
  static deserializeBinaryFromReader(message: EvpAlignmentScore, reader: jspb.BinaryReader): EvpAlignmentScore;
}

export namespace EvpAlignmentScore {
  export type AsObject = {
    score?: google_protobuf_struct_pb.Value.AsObject,
    scoreStatus: string,
    evpMid?: google_protobuf_struct_pb.Value.AsObject,
    submissionMean?: google_protobuf_struct_pb.Value.AsObject,
    submissionStdDev?: google_protobuf_struct_pb.Value.AsObject,
    evpAlignmentDispersionScore?: google_protobuf_struct_pb.Value.AsObject,
    historyList: Array<EvpAlignmentScoreWithDate.AsObject>,
  }
}

export class ConsensusExplorerRangeResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): ConsensusExplorerRangeData | undefined;
  setData(value?: ConsensusExplorerRangeData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): ConsensusExplorerRangeResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusExplorerRangeResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusExplorerRangeResponse): ConsensusExplorerRangeResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusExplorerRangeResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusExplorerRangeResponse;
  static deserializeBinaryFromReader(message: ConsensusExplorerRangeResponse, reader: jspb.BinaryReader): ConsensusExplorerRangeResponse;
}

export namespace ConsensusExplorerRangeResponse {
  export type AsObject = {
    data?: ConsensusExplorerRangeData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class ConsensusExplorerRangeData extends jspb.Message {
  hasChartRanges(): boolean;
  clearChartRanges(): void;
  getChartRanges(): ChartRanges | undefined;
  setChartRanges(value?: ChartRanges): void;

  hasSubmissionPoint(): boolean;
  clearSubmissionPoint(): void;
  getSubmissionPoint(): RangePoint | undefined;
  setSubmissionPoint(value?: RangePoint): void;

  hasSubmissionMeanPoint(): boolean;
  clearSubmissionMeanPoint(): void;
  getSubmissionMeanPoint(): RangePoint | undefined;
  setSubmissionMeanPoint(value?: RangePoint): void;

  hasEvpMid(): boolean;
  clearEvpMid(): void;
  getEvpMid(): RangePoint | undefined;
  setEvpMid(value?: RangePoint): void;

  hasAllParticipantCrsConsensusPrice(): boolean;
  clearAllParticipantCrsConsensusPrice(): void;
  getAllParticipantCrsConsensusPrice(): RangePoint | undefined;
  setAllParticipantCrsConsensusPrice(value?: RangePoint): void;

  hasMarketDataCrsConsensusPrice(): boolean;
  clearMarketDataCrsConsensusPrice(): void;
  getMarketDataCrsConsensusPrice(): RangePoint | undefined;
  setMarketDataCrsConsensusPrice(value?: RangePoint): void;

  hasChallengeOverlayCrsConsensusPrice(): boolean;
  clearChallengeOverlayCrsConsensusPrice(): void;
  getChallengeOverlayCrsConsensusPrice(): RangePoint | undefined;
  setChallengeOverlayCrsConsensusPrice(value?: RangePoint): void;

  hasExpertPreChallengeConsensusPrice(): boolean;
  clearExpertPreChallengeConsensusPrice(): void;
  getExpertPreChallengeConsensusPrice(): RangePoint | undefined;
  setExpertPreChallengeConsensusPrice(value?: RangePoint): void;

  hasExpertPostChallengeConsensusPrice(): boolean;
  clearExpertPostChallengeConsensusPrice(): void;
  getExpertPostChallengeConsensusPrice(): RangePoint | undefined;
  setExpertPostChallengeConsensusPrice(value?: RangePoint): void;

  hasBimodalLeftMean(): boolean;
  clearBimodalLeftMean(): void;
  getBimodalLeftMean(): RangePoint | undefined;
  setBimodalLeftMean(value?: RangePoint): void;

  hasBimodalRightMean(): boolean;
  clearBimodalRightMean(): void;
  getBimodalRightMean(): RangePoint | undefined;
  setBimodalRightMean(value?: RangePoint): void;

  hasTradeRangesData(): boolean;
  clearTradeRangesData(): void;
  getTradeRangesData(): TradeRangesData | undefined;
  setTradeRangesData(value?: TradeRangesData): void;

  hasTradePeriodsWithMetrics(): boolean;
  clearTradePeriodsWithMetrics(): void;
  getTradePeriodsWithMetrics(): TradePeriodsWithMetrics | undefined;
  setTradePeriodsWithMetrics(value?: TradePeriodsWithMetrics): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusExplorerRangeData.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusExplorerRangeData): ConsensusExplorerRangeData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusExplorerRangeData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusExplorerRangeData;
  static deserializeBinaryFromReader(message: ConsensusExplorerRangeData, reader: jspb.BinaryReader): ConsensusExplorerRangeData;
}

export namespace ConsensusExplorerRangeData {
  export type AsObject = {
    chartRanges?: ChartRanges.AsObject,
    submissionPoint?: RangePoint.AsObject,
    submissionMeanPoint?: RangePoint.AsObject,
    evpMid?: RangePoint.AsObject,
    allParticipantCrsConsensusPrice?: RangePoint.AsObject,
    marketDataCrsConsensusPrice?: RangePoint.AsObject,
    challengeOverlayCrsConsensusPrice?: RangePoint.AsObject,
    expertPreChallengeConsensusPrice?: RangePoint.AsObject,
    expertPostChallengeConsensusPrice?: RangePoint.AsObject,
    bimodalLeftMean?: RangePoint.AsObject,
    bimodalRightMean?: RangePoint.AsObject,
    tradeRangesData?: TradeRangesData.AsObject,
    tradePeriodsWithMetrics?: TradePeriodsWithMetrics.AsObject,
  }
}

export class ChartRanges extends jspb.Message {
  hasSubmissionMinMax(): boolean;
  clearSubmissionMinMax(): void;
  getSubmissionMinMax(): Range | undefined;
  setSubmissionMinMax(value?: Range): void;

  hasSubmissionMeanMedian(): boolean;
  clearSubmissionMeanMedian(): void;
  getSubmissionMeanMedian(): Range | undefined;
  setSubmissionMeanMedian(value?: Range): void;

  hasEvp(): boolean;
  clearEvp(): void;
  getEvp(): Range | undefined;
  setEvp(value?: Range): void;

  hasSubmissionOnlyConsensus(): boolean;
  clearSubmissionOnlyConsensus(): void;
  getSubmissionOnlyConsensus(): Range | undefined;
  setSubmissionOnlyConsensus(value?: Range): void;

  hasMarketDataOverlayConsensus(): boolean;
  clearMarketDataOverlayConsensus(): void;
  getMarketDataOverlayConsensus(): Range | undefined;
  setMarketDataOverlayConsensus(value?: Range): void;

  hasChallengeOverlayConsensus(): boolean;
  clearChallengeOverlayConsensus(): void;
  getChallengeOverlayConsensus(): Range | undefined;
  setChallengeOverlayConsensus(value?: Range): void;

  hasExpertPreChallenge(): boolean;
  clearExpertPreChallenge(): void;
  getExpertPreChallenge(): Range | undefined;
  setExpertPreChallenge(value?: Range): void;

  hasExpertPostChallenge(): boolean;
  clearExpertPostChallenge(): void;
  getExpertPostChallenge(): Range | undefined;
  setExpertPostChallenge(value?: Range): void;

  hasBimodalLeftPopulation(): boolean;
  clearBimodalLeftPopulation(): void;
  getBimodalLeftPopulation(): Range | undefined;
  setBimodalLeftPopulation(value?: Range): void;

  hasBimodalRightPopulation(): boolean;
  clearBimodalRightPopulation(): void;
  getBimodalRightPopulation(): Range | undefined;
  setBimodalRightPopulation(value?: Range): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChartRanges.AsObject;
  static toObject(includeInstance: boolean, msg: ChartRanges): ChartRanges.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ChartRanges, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChartRanges;
  static deserializeBinaryFromReader(message: ChartRanges, reader: jspb.BinaryReader): ChartRanges;
}

export namespace ChartRanges {
  export type AsObject = {
    submissionMinMax?: Range.AsObject,
    submissionMeanMedian?: Range.AsObject,
    evp?: Range.AsObject,
    submissionOnlyConsensus?: Range.AsObject,
    marketDataOverlayConsensus?: Range.AsObject,
    challengeOverlayConsensus?: Range.AsObject,
    expertPreChallenge?: Range.AsObject,
    expertPostChallenge?: Range.AsObject,
    bimodalLeftPopulation?: Range.AsObject,
    bimodalRightPopulation?: Range.AsObject,
  }
}

export class TradeRangesData extends jspb.Message {
  getLatestTradePrice(): number;
  setLatestTradePrice(value: number): void;

  getNotional(): number;
  setNotional(value: number): void;

  getTradeExecutionTime(): string;
  setTradeExecutionTime(value: string): void;

  getPricingRecency(): string;
  setPricingRecency(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TradeRangesData.AsObject;
  static toObject(includeInstance: boolean, msg: TradeRangesData): TradeRangesData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TradeRangesData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TradeRangesData;
  static deserializeBinaryFromReader(message: TradeRangesData, reader: jspb.BinaryReader): TradeRangesData;
}

export namespace TradeRangesData {
  export type AsObject = {
    latestTradePrice: number,
    notional: number,
    tradeExecutionTime: string,
    pricingRecency: string,
  }
}

export class TradePeriodsWithMetrics extends jspb.Message {
  hasLessDay(): boolean;
  clearLessDay(): void;
  getLessDay(): TradePeriodMetrics | undefined;
  setLessDay(value?: TradePeriodMetrics): void;

  hasLessWeek(): boolean;
  clearLessWeek(): void;
  getLessWeek(): TradePeriodMetrics | undefined;
  setLessWeek(value?: TradePeriodMetrics): void;

  hasLessMonth(): boolean;
  clearLessMonth(): void;
  getLessMonth(): TradePeriodMetrics | undefined;
  setLessMonth(value?: TradePeriodMetrics): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TradePeriodsWithMetrics.AsObject;
  static toObject(includeInstance: boolean, msg: TradePeriodsWithMetrics): TradePeriodsWithMetrics.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TradePeriodsWithMetrics, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TradePeriodsWithMetrics;
  static deserializeBinaryFromReader(message: TradePeriodsWithMetrics, reader: jspb.BinaryReader): TradePeriodsWithMetrics;
}

export namespace TradePeriodsWithMetrics {
  export type AsObject = {
    lessDay?: TradePeriodMetrics.AsObject,
    lessWeek?: TradePeriodMetrics.AsObject,
    lessMonth?: TradePeriodMetrics.AsObject,
  }
}

export class TradePeriodMetrics extends jspb.Message {
  getTradeCount(): number;
  setTradeCount(value: number): void;

  getMinNotionalAmount(): number;
  setMinNotionalAmount(value: number): void;

  getMaxNotionalAmount(): number;
  setMaxNotionalAmount(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TradePeriodMetrics.AsObject;
  static toObject(includeInstance: boolean, msg: TradePeriodMetrics): TradePeriodMetrics.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TradePeriodMetrics, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TradePeriodMetrics;
  static deserializeBinaryFromReader(message: TradePeriodMetrics, reader: jspb.BinaryReader): TradePeriodMetrics;
}

export namespace TradePeriodMetrics {
  export type AsObject = {
    tradeCount: number,
    minNotionalAmount: number,
    maxNotionalAmount: number,
  }
}

export class ConsensusExplorerTableResponse extends jspb.Message {
  hasData(): boolean;
  clearData(): void;
  getData(): ConsensusExplorerTableData | undefined;
  setData(value?: ConsensusExplorerTableData): void;

  hasError(): boolean;
  clearError(): void;
  getError(): common_gateway_base_pb.Error | undefined;
  setError(value?: common_gateway_base_pb.Error): void;

  getResponseCase(): ConsensusExplorerTableResponse.ResponseCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusExplorerTableResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusExplorerTableResponse): ConsensusExplorerTableResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusExplorerTableResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusExplorerTableResponse;
  static deserializeBinaryFromReader(message: ConsensusExplorerTableResponse, reader: jspb.BinaryReader): ConsensusExplorerTableResponse;
}

export namespace ConsensusExplorerTableResponse {
  export type AsObject = {
    data?: ConsensusExplorerTableData.AsObject,
    error?: common_gateway_base_pb.Error.AsObject,
  }

  export enum ResponseCase {
    RESPONSE_NOT_SET = 0,
    DATA = 1,
    ERROR = 2,
  }
}

export class ConsensusExplorerTableData extends jspb.Message {
  hasComparisonTable(): boolean;
  clearComparisonTable(): void;
  getComparisonTable(): ComparisonTable | undefined;
  setComparisonTable(value?: ComparisonTable): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusExplorerTableData.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusExplorerTableData): ConsensusExplorerTableData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusExplorerTableData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusExplorerTableData;
  static deserializeBinaryFromReader(message: ConsensusExplorerTableData, reader: jspb.BinaryReader): ConsensusExplorerTableData;
}

export namespace ConsensusExplorerTableData {
  export type AsObject = {
    comparisonTable?: ComparisonTable.AsObject,
  }
}

export class ComparisonTable extends jspb.Message {
  hasSubmission(): boolean;
  clearSubmission(): void;
  getSubmission(): SubmissionExplorerTableColumn | undefined;
  setSubmission(value?: SubmissionExplorerTableColumn): void;

  hasSubmissionStatistics(): boolean;
  clearSubmissionStatistics(): void;
  getSubmissionStatistics(): SubmissionStatisticsExplorerTableColumn | undefined;
  setSubmissionStatistics(value?: SubmissionStatisticsExplorerTableColumn): void;

  hasAllParticipantCohortConsensus(): boolean;
  clearAllParticipantCohortConsensus(): void;
  getAllParticipantCohortConsensus(): AllParticipantExplorerTableColumn | undefined;
  setAllParticipantCohortConsensus(value?: AllParticipantExplorerTableColumn): void;

  hasEvaluatedPrice(): boolean;
  clearEvaluatedPrice(): void;
  getEvaluatedPrice(): EvpExplorerTableColumn | undefined;
  setEvaluatedPrice(value?: EvpExplorerTableColumn): void;

  hasExpertCohortConsensus(): boolean;
  clearExpertCohortConsensus(): void;
  getExpertCohortConsensus(): ExpertExplorerTableColumn | undefined;
  setExpertCohortConsensus(value?: ExpertExplorerTableColumn): void;

  hasAvailableTrades(): boolean;
  clearAvailableTrades(): void;
  getAvailableTrades(): AvailableTrades | undefined;
  setAvailableTrades(value?: AvailableTrades): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ComparisonTable.AsObject;
  static toObject(includeInstance: boolean, msg: ComparisonTable): ComparisonTable.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ComparisonTable, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ComparisonTable;
  static deserializeBinaryFromReader(message: ComparisonTable, reader: jspb.BinaryReader): ComparisonTable;
}

export namespace ComparisonTable {
  export type AsObject = {
    submission?: SubmissionExplorerTableColumn.AsObject,
    submissionStatistics?: SubmissionStatisticsExplorerTableColumn.AsObject,
    allParticipantCohortConsensus?: AllParticipantExplorerTableColumn.AsObject,
    evaluatedPrice?: EvpExplorerTableColumn.AsObject,
    expertCohortConsensus?: ExpertExplorerTableColumn.AsObject,
    availableTrades?: AvailableTrades.AsObject,
  }
}

export class SubmissionExplorerTableColumn extends jspb.Message {
  getSubmissionPrice(): number;
  setSubmissionPrice(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubmissionExplorerTableColumn.AsObject;
  static toObject(includeInstance: boolean, msg: SubmissionExplorerTableColumn): SubmissionExplorerTableColumn.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubmissionExplorerTableColumn, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubmissionExplorerTableColumn;
  static deserializeBinaryFromReader(message: SubmissionExplorerTableColumn, reader: jspb.BinaryReader): SubmissionExplorerTableColumn;
}

export namespace SubmissionExplorerTableColumn {
  export type AsObject = {
    submissionPrice: number,
  }
}

export class SubmissionStatisticsExplorerTableColumn extends jspb.Message {
  hasStatisticalMean(): boolean;
  clearStatisticalMean(): void;
  getStatisticalMean(): google_protobuf_struct_pb.Value | undefined;
  setStatisticalMean(value?: google_protobuf_struct_pb.Value): void;

  hasAbsDiffFromStatisticalMean(): boolean;
  clearAbsDiffFromStatisticalMean(): void;
  getAbsDiffFromStatisticalMean(): google_protobuf_struct_pb.Value | undefined;
  setAbsDiffFromStatisticalMean(value?: google_protobuf_struct_pb.Value): void;

  hasSubPriceDiff(): boolean;
  clearSubPriceDiff(): void;
  getSubPriceDiff(): google_protobuf_struct_pb.Value | undefined;
  setSubPriceDiff(value?: google_protobuf_struct_pb.Value): void;

  hasStatMeanAbsDiffFromLatestTrade(): boolean;
  clearStatMeanAbsDiffFromLatestTrade(): void;
  getStatMeanAbsDiffFromLatestTrade(): google_protobuf_struct_pb.Value | undefined;
  setStatMeanAbsDiffFromLatestTrade(value?: google_protobuf_struct_pb.Value): void;

  hasLowerBoundary(): boolean;
  clearLowerBoundary(): void;
  getLowerBoundary(): google_protobuf_struct_pb.Value | undefined;
  setLowerBoundary(value?: google_protobuf_struct_pb.Value): void;

  hasUpperBoundary(): boolean;
  clearUpperBoundary(): void;
  getUpperBoundary(): google_protobuf_struct_pb.Value | undefined;
  setUpperBoundary(value?: google_protobuf_struct_pb.Value): void;

  getSubValidPointsCount(): number;
  setSubValidPointsCount(value: number): void;

  hasStdDev(): boolean;
  clearStdDev(): void;
  getStdDev(): google_protobuf_struct_pb.Value | undefined;
  setStdDev(value?: google_protobuf_struct_pb.Value): void;

  hasMin(): boolean;
  clearMin(): void;
  getMin(): google_protobuf_struct_pb.Value | undefined;
  setMin(value?: google_protobuf_struct_pb.Value): void;

  hasMax(): boolean;
  clearMax(): void;
  getMax(): google_protobuf_struct_pb.Value | undefined;
  setMax(value?: google_protobuf_struct_pb.Value): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubmissionStatisticsExplorerTableColumn.AsObject;
  static toObject(includeInstance: boolean, msg: SubmissionStatisticsExplorerTableColumn): SubmissionStatisticsExplorerTableColumn.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubmissionStatisticsExplorerTableColumn, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubmissionStatisticsExplorerTableColumn;
  static deserializeBinaryFromReader(message: SubmissionStatisticsExplorerTableColumn, reader: jspb.BinaryReader): SubmissionStatisticsExplorerTableColumn;
}

export namespace SubmissionStatisticsExplorerTableColumn {
  export type AsObject = {
    statisticalMean?: google_protobuf_struct_pb.Value.AsObject,
    absDiffFromStatisticalMean?: google_protobuf_struct_pb.Value.AsObject,
    subPriceDiff?: google_protobuf_struct_pb.Value.AsObject,
    statMeanAbsDiffFromLatestTrade?: google_protobuf_struct_pb.Value.AsObject,
    lowerBoundary?: google_protobuf_struct_pb.Value.AsObject,
    upperBoundary?: google_protobuf_struct_pb.Value.AsObject,
    subValidPointsCount: number,
    stdDev?: google_protobuf_struct_pb.Value.AsObject,
    min?: google_protobuf_struct_pb.Value.AsObject,
    max?: google_protobuf_struct_pb.Value.AsObject,
  }
}

export class AllParticipantExplorerTableColumn extends jspb.Message {
  hasConsensusPrice(): boolean;
  clearConsensusPrice(): void;
  getConsensusPrice(): google_protobuf_struct_pb.Value | undefined;
  setConsensusPrice(value?: google_protobuf_struct_pb.Value): void;

  hasAbsDiffFromConsensusPrice(): boolean;
  clearAbsDiffFromConsensusPrice(): void;
  getAbsDiffFromConsensusPrice(): google_protobuf_struct_pb.Value | undefined;
  setAbsDiffFromConsensusPrice(value?: google_protobuf_struct_pb.Value): void;

  hasSubPriceDiff(): boolean;
  clearSubPriceDiff(): void;
  getSubPriceDiff(): google_protobuf_struct_pb.Value | undefined;
  setSubPriceDiff(value?: google_protobuf_struct_pb.Value): void;

  hasConPriceAbsDiffFromLatestTrade(): boolean;
  clearConPriceAbsDiffFromLatestTrade(): void;
  getConPriceAbsDiffFromLatestTrade(): google_protobuf_struct_pb.Value | undefined;
  setConPriceAbsDiffFromLatestTrade(value?: google_protobuf_struct_pb.Value): void;

  hasLowerBoundary(): boolean;
  clearLowerBoundary(): void;
  getLowerBoundary(): google_protobuf_struct_pb.Value | undefined;
  setLowerBoundary(value?: google_protobuf_struct_pb.Value): void;

  hasUpperBoundary(): boolean;
  clearUpperBoundary(): void;
  getUpperBoundary(): google_protobuf_struct_pb.Value | undefined;
  setUpperBoundary(value?: google_protobuf_struct_pb.Value): void;

  getParticipantsCount(): number;
  setParticipantsCount(value: number): void;

  hasStdDev(): boolean;
  clearStdDev(): void;
  getStdDev(): google_protobuf_struct_pb.Value | undefined;
  setStdDev(value?: google_protobuf_struct_pb.Value): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AllParticipantExplorerTableColumn.AsObject;
  static toObject(includeInstance: boolean, msg: AllParticipantExplorerTableColumn): AllParticipantExplorerTableColumn.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AllParticipantExplorerTableColumn, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AllParticipantExplorerTableColumn;
  static deserializeBinaryFromReader(message: AllParticipantExplorerTableColumn, reader: jspb.BinaryReader): AllParticipantExplorerTableColumn;
}

export namespace AllParticipantExplorerTableColumn {
  export type AsObject = {
    consensusPrice?: google_protobuf_struct_pb.Value.AsObject,
    absDiffFromConsensusPrice?: google_protobuf_struct_pb.Value.AsObject,
    subPriceDiff?: google_protobuf_struct_pb.Value.AsObject,
    conPriceAbsDiffFromLatestTrade?: google_protobuf_struct_pb.Value.AsObject,
    lowerBoundary?: google_protobuf_struct_pb.Value.AsObject,
    upperBoundary?: google_protobuf_struct_pb.Value.AsObject,
    participantsCount: number,
    stdDev?: google_protobuf_struct_pb.Value.AsObject,
  }
}

export class EvpExplorerTableColumn extends jspb.Message {
  hasMid(): boolean;
  clearMid(): void;
  getMid(): google_protobuf_struct_pb.Value | undefined;
  setMid(value?: google_protobuf_struct_pb.Value): void;

  hasBid(): boolean;
  clearBid(): void;
  getBid(): google_protobuf_struct_pb.Value | undefined;
  setBid(value?: google_protobuf_struct_pb.Value): void;

  hasAsk(): boolean;
  clearAsk(): void;
  getAsk(): google_protobuf_struct_pb.Value | undefined;
  setAsk(value?: google_protobuf_struct_pb.Value): void;

  hasAbsDiffFromEvpMid(): boolean;
  clearAbsDiffFromEvpMid(): void;
  getAbsDiffFromEvpMid(): google_protobuf_struct_pb.Value | undefined;
  setAbsDiffFromEvpMid(value?: google_protobuf_struct_pb.Value): void;

  hasSubPriceDiff(): boolean;
  clearSubPriceDiff(): void;
  getSubPriceDiff(): google_protobuf_struct_pb.Value | undefined;
  setSubPriceDiff(value?: google_protobuf_struct_pb.Value): void;

  hasEvpMidAbsDiffFromLatestTrade(): boolean;
  clearEvpMidAbsDiffFromLatestTrade(): void;
  getEvpMidAbsDiffFromLatestTrade(): google_protobuf_struct_pb.Value | undefined;
  setEvpMidAbsDiffFromLatestTrade(value?: google_protobuf_struct_pb.Value): void;

  hasEvpLowerBoundary(): boolean;
  clearEvpLowerBoundary(): void;
  getEvpLowerBoundary(): google_protobuf_struct_pb.Value | undefined;
  setEvpLowerBoundary(value?: google_protobuf_struct_pb.Value): void;

  hasEvpUpperBoundary(): boolean;
  clearEvpUpperBoundary(): void;
  getEvpUpperBoundary(): google_protobuf_struct_pb.Value | undefined;
  setEvpUpperBoundary(value?: google_protobuf_struct_pb.Value): void;

  hasTradesOrOrdersCount(): boolean;
  clearTradesOrOrdersCount(): void;
  getTradesOrOrdersCount(): google_protobuf_struct_pb.Value | undefined;
  setTradesOrOrdersCount(value?: google_protobuf_struct_pb.Value): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EvpExplorerTableColumn.AsObject;
  static toObject(includeInstance: boolean, msg: EvpExplorerTableColumn): EvpExplorerTableColumn.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EvpExplorerTableColumn, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EvpExplorerTableColumn;
  static deserializeBinaryFromReader(message: EvpExplorerTableColumn, reader: jspb.BinaryReader): EvpExplorerTableColumn;
}

export namespace EvpExplorerTableColumn {
  export type AsObject = {
    mid?: google_protobuf_struct_pb.Value.AsObject,
    bid?: google_protobuf_struct_pb.Value.AsObject,
    ask?: google_protobuf_struct_pb.Value.AsObject,
    absDiffFromEvpMid?: google_protobuf_struct_pb.Value.AsObject,
    subPriceDiff?: google_protobuf_struct_pb.Value.AsObject,
    evpMidAbsDiffFromLatestTrade?: google_protobuf_struct_pb.Value.AsObject,
    evpLowerBoundary?: google_protobuf_struct_pb.Value.AsObject,
    evpUpperBoundary?: google_protobuf_struct_pb.Value.AsObject,
    tradesOrOrdersCount?: google_protobuf_struct_pb.Value.AsObject,
  }
}

export class ExpertExplorerTableColumn extends jspb.Message {
  hasMean(): boolean;
  clearMean(): void;
  getMean(): google_protobuf_struct_pb.Value | undefined;
  setMean(value?: google_protobuf_struct_pb.Value): void;

  hasAbsDiffFromExpertCohortMean(): boolean;
  clearAbsDiffFromExpertCohortMean(): void;
  getAbsDiffFromExpertCohortMean(): google_protobuf_struct_pb.Value | undefined;
  setAbsDiffFromExpertCohortMean(value?: google_protobuf_struct_pb.Value): void;

  hasSubPriceDiff(): boolean;
  clearSubPriceDiff(): void;
  getSubPriceDiff(): google_protobuf_struct_pb.Value | undefined;
  setSubPriceDiff(value?: google_protobuf_struct_pb.Value): void;

  hasConPriceAbsDiffFromLatestTrade(): boolean;
  clearConPriceAbsDiffFromLatestTrade(): void;
  getConPriceAbsDiffFromLatestTrade(): google_protobuf_struct_pb.Value | undefined;
  setConPriceAbsDiffFromLatestTrade(value?: google_protobuf_struct_pb.Value): void;

  getParticipantInstrumentsCount(): number;
  setParticipantInstrumentsCount(value: number): void;

  hasStdDev(): boolean;
  clearStdDev(): void;
  getStdDev(): google_protobuf_struct_pb.Value | undefined;
  setStdDev(value?: google_protobuf_struct_pb.Value): void;

  hasMin(): boolean;
  clearMin(): void;
  getMin(): google_protobuf_struct_pb.Value | undefined;
  setMin(value?: google_protobuf_struct_pb.Value): void;

  hasMax(): boolean;
  clearMax(): void;
  getMax(): google_protobuf_struct_pb.Value | undefined;
  setMax(value?: google_protobuf_struct_pb.Value): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ExpertExplorerTableColumn.AsObject;
  static toObject(includeInstance: boolean, msg: ExpertExplorerTableColumn): ExpertExplorerTableColumn.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ExpertExplorerTableColumn, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ExpertExplorerTableColumn;
  static deserializeBinaryFromReader(message: ExpertExplorerTableColumn, reader: jspb.BinaryReader): ExpertExplorerTableColumn;
}

export namespace ExpertExplorerTableColumn {
  export type AsObject = {
    mean?: google_protobuf_struct_pb.Value.AsObject,
    absDiffFromExpertCohortMean?: google_protobuf_struct_pb.Value.AsObject,
    subPriceDiff?: google_protobuf_struct_pb.Value.AsObject,
    conPriceAbsDiffFromLatestTrade?: google_protobuf_struct_pb.Value.AsObject,
    participantInstrumentsCount: number,
    stdDev?: google_protobuf_struct_pb.Value.AsObject,
    min?: google_protobuf_struct_pb.Value.AsObject,
    max?: google_protobuf_struct_pb.Value.AsObject,
  }
}

export class AvailableTrades extends jspb.Message {
  hasLatestTradePrice(): boolean;
  clearLatestTradePrice(): void;
  getLatestTradePrice(): google_protobuf_struct_pb.Value | undefined;
  setLatestTradePrice(value?: google_protobuf_struct_pb.Value): void;

  hasAbsDiffFromConsensusPrice(): boolean;
  clearAbsDiffFromConsensusPrice(): void;
  getAbsDiffFromConsensusPrice(): google_protobuf_struct_pb.Value | undefined;
  setAbsDiffFromConsensusPrice(value?: google_protobuf_struct_pb.Value): void;

  hasAbsDiffFromExpertCohortPrice(): boolean;
  clearAbsDiffFromExpertCohortPrice(): void;
  getAbsDiffFromExpertCohortPrice(): google_protobuf_struct_pb.Value | undefined;
  setAbsDiffFromExpertCohortPrice(value?: google_protobuf_struct_pb.Value): void;

  hasSubPriceAbsDiffFromLatestTrade(): boolean;
  clearSubPriceAbsDiffFromLatestTrade(): void;
  getSubPriceAbsDiffFromLatestTrade(): google_protobuf_struct_pb.Value | undefined;
  setSubPriceAbsDiffFromLatestTrade(value?: google_protobuf_struct_pb.Value): void;

  hasMin(): boolean;
  clearMin(): void;
  getMin(): google_protobuf_struct_pb.Value | undefined;
  setMin(value?: google_protobuf_struct_pb.Value): void;

  hasMax(): boolean;
  clearMax(): void;
  getMax(): google_protobuf_struct_pb.Value | undefined;
  setMax(value?: google_protobuf_struct_pb.Value): void;

  getDaytradenumber(): number;
  setDaytradenumber(value: number): void;

  getWeektradenumber(): number;
  setWeektradenumber(value: number): void;

  getMonthtradenumber(): number;
  setMonthtradenumber(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AvailableTrades.AsObject;
  static toObject(includeInstance: boolean, msg: AvailableTrades): AvailableTrades.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AvailableTrades, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AvailableTrades;
  static deserializeBinaryFromReader(message: AvailableTrades, reader: jspb.BinaryReader): AvailableTrades;
}

export namespace AvailableTrades {
  export type AsObject = {
    latestTradePrice?: google_protobuf_struct_pb.Value.AsObject,
    absDiffFromConsensusPrice?: google_protobuf_struct_pb.Value.AsObject,
    absDiffFromExpertCohortPrice?: google_protobuf_struct_pb.Value.AsObject,
    subPriceAbsDiffFromLatestTrade?: google_protobuf_struct_pb.Value.AsObject,
    min?: google_protobuf_struct_pb.Value.AsObject,
    max?: google_protobuf_struct_pb.Value.AsObject,
    daytradenumber: number,
    weektradenumber: number,
    monthtradenumber: number,
  }
}

