// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: common/analytics.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetPredefinedFiltersRequest is used to request predefined filters that have been added to the system for use in analytics.
type GetPredefinedFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId               string    `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`                                             //The unique identifier of the asset to retrieve the filters for.
	SubmittedDate         string    `protobuf:"bytes,2,opt,name=submitted_date,json=submittedDate,proto3" json:"submitted_date,omitempty"`                           //The date of the submission.
	ConsensusRunTimestamp string    `protobuf:"bytes,3,opt,name=consensus_run_timestamp,json=consensusRunTimestamp,proto3" json:"consensus_run_timestamp,omitempty"` //The timestamp of the consensus run.
	Filter                string    `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`                                                              //The filter to be applied on the request.
	Filters               []*Filter `protobuf:"bytes,5,rep,name=filters,proto3" json:"filters,omitempty"`                                                            //A list of filters to be applied on the request.
	TraceName             string    `protobuf:"bytes,6,opt,name=trace_name,json=traceName,proto3" json:"trace_name,omitempty"`                                       //The name of the trace for debugging purposes.
}

func (x *GetPredefinedFiltersRequest) Reset() {
	*x = GetPredefinedFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_analytics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPredefinedFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPredefinedFiltersRequest) ProtoMessage() {}

func (x *GetPredefinedFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_analytics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPredefinedFiltersRequest.ProtoReflect.Descriptor instead.
func (*GetPredefinedFiltersRequest) Descriptor() ([]byte, []int) {
	return file_common_analytics_proto_rawDescGZIP(), []int{0}
}

func (x *GetPredefinedFiltersRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *GetPredefinedFiltersRequest) GetSubmittedDate() string {
	if x != nil {
		return x.SubmittedDate
	}
	return ""
}

func (x *GetPredefinedFiltersRequest) GetConsensusRunTimestamp() string {
	if x != nil {
		return x.ConsensusRunTimestamp
	}
	return ""
}

func (x *GetPredefinedFiltersRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *GetPredefinedFiltersRequest) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetPredefinedFiltersRequest) GetTraceName() string {
	if x != nil {
		return x.TraceName
	}
	return ""
}

// GetPredefinedFiltersResponse is used to receive a response with predefined filter information.
type GetPredefinedFiltersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*GetPredefinedFiltersResponse_Data
	//	*GetPredefinedFiltersResponse_Error
	Response isGetPredefinedFiltersResponse_Response `protobuf_oneof:"response"`
}

func (x *GetPredefinedFiltersResponse) Reset() {
	*x = GetPredefinedFiltersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_analytics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPredefinedFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPredefinedFiltersResponse) ProtoMessage() {}

func (x *GetPredefinedFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_analytics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPredefinedFiltersResponse.ProtoReflect.Descriptor instead.
func (*GetPredefinedFiltersResponse) Descriptor() ([]byte, []int) {
	return file_common_analytics_proto_rawDescGZIP(), []int{1}
}

func (m *GetPredefinedFiltersResponse) GetResponse() isGetPredefinedFiltersResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetPredefinedFiltersResponse) GetData() *PredefinedFilters {
	if x, ok := x.GetResponse().(*GetPredefinedFiltersResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *GetPredefinedFiltersResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*GetPredefinedFiltersResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isGetPredefinedFiltersResponse_Response interface {
	isGetPredefinedFiltersResponse_Response()
}

type GetPredefinedFiltersResponse_Data struct {
	Data *PredefinedFilters `protobuf:"bytes,1,opt,name=data,proto3,oneof"` //The data of the response.
}

type GetPredefinedFiltersResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"` //The error in the response.
}

func (*GetPredefinedFiltersResponse_Data) isGetPredefinedFiltersResponse_Response() {}

func (*GetPredefinedFiltersResponse_Error) isGetPredefinedFiltersResponse_Response() {}

// PredefinedFilters contains a list of predefined filters.
type PredefinedFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*PredefinedFilter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"` //The list of predefined filters.
}

func (x *PredefinedFilters) Reset() {
	*x = PredefinedFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_analytics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredefinedFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredefinedFilters) ProtoMessage() {}

func (x *PredefinedFilters) ProtoReflect() protoreflect.Message {
	mi := &file_common_analytics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredefinedFilters.ProtoReflect.Descriptor instead.
func (*PredefinedFilters) Descriptor() ([]byte, []int) {
	return file_common_analytics_proto_rawDescGZIP(), []int{2}
}

func (x *PredefinedFilters) GetFilters() []*PredefinedFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

// is used to receive a response with histogram data, which consists of a "Submission Histogram" and a "Consensus Histogram".
type HistogramRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId               string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`                                             //The unique identifier of the asset to retrieve the histogram for.
	SubmittedId           string `protobuf:"bytes,2,opt,name=submitted_id,json=submittedId,proto3" json:"submitted_id,omitempty"`                                 //The submitted ID of the data.
	SubmittedDate         string `protobuf:"bytes,3,opt,name=submitted_date,json=submittedDate,proto3" json:"submitted_date,omitempty"`                           //The submitted date of the data
	ConsensusRunTimestamp string `protobuf:"bytes,4,opt,name=consensus_run_timestamp,json=consensusRunTimestamp,proto3" json:"consensus_run_timestamp,omitempty"` //The consensus run timestamp of the data.
	TraceName             string `protobuf:"bytes,5,opt,name=trace_name,json=traceName,proto3" json:"trace_name,omitempty"`                                       //The name of the trace for debugging purposes.
}

func (x *HistogramRequest) Reset() {
	*x = HistogramRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_analytics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistogramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramRequest) ProtoMessage() {}

func (x *HistogramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_analytics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramRequest.ProtoReflect.Descriptor instead.
func (*HistogramRequest) Descriptor() ([]byte, []int) {
	return file_common_analytics_proto_rawDescGZIP(), []int{3}
}

func (x *HistogramRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *HistogramRequest) GetSubmittedId() string {
	if x != nil {
		return x.SubmittedId
	}
	return ""
}

func (x *HistogramRequest) GetSubmittedDate() string {
	if x != nil {
		return x.SubmittedDate
	}
	return ""
}

func (x *HistogramRequest) GetConsensusRunTimestamp() string {
	if x != nil {
		return x.ConsensusRunTimestamp
	}
	return ""
}

func (x *HistogramRequest) GetTraceName() string {
	if x != nil {
		return x.TraceName
	}
	return ""
}

// HistogramResponse is used to receive a response with histogram data
type HistogramResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*HistogramResponse_Data
	//	*HistogramResponse_Error
	Response isHistogramResponse_Response `protobuf_oneof:"response"`
}

func (x *HistogramResponse) Reset() {
	*x = HistogramResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_analytics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistogramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramResponse) ProtoMessage() {}

func (x *HistogramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_analytics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramResponse.ProtoReflect.Descriptor instead.
func (*HistogramResponse) Descriptor() ([]byte, []int) {
	return file_common_analytics_proto_rawDescGZIP(), []int{4}
}

func (m *HistogramResponse) GetResponse() isHistogramResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *HistogramResponse) GetData() *HistogramData {
	if x, ok := x.GetResponse().(*HistogramResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *HistogramResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*HistogramResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isHistogramResponse_Response interface {
	isHistogramResponse_Response()
}

type HistogramResponse_Data struct {
	Data *HistogramData `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type HistogramResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*HistogramResponse_Data) isHistogramResponse_Response() {}

func (*HistogramResponse_Error) isHistogramResponse_Response() {}

// HistogramData is representation of histogram
type HistogramData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmissionHistogram *SubmissionHistogram `protobuf:"bytes,1,opt,name=submissionHistogram,proto3" json:"submissionHistogram,omitempty"` //A histogram representation of submission data.
	ConsensusHistogram  *ConsensusHistogram  `protobuf:"bytes,2,opt,name=consensusHistogram,proto3" json:"consensusHistogram,omitempty"`   //A histogram representation of consensus data.
}

func (x *HistogramData) Reset() {
	*x = HistogramData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_analytics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistogramData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramData) ProtoMessage() {}

func (x *HistogramData) ProtoReflect() protoreflect.Message {
	mi := &file_common_analytics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramData.ProtoReflect.Descriptor instead.
func (*HistogramData) Descriptor() ([]byte, []int) {
	return file_common_analytics_proto_rawDescGZIP(), []int{5}
}

func (x *HistogramData) GetSubmissionHistogram() *SubmissionHistogram {
	if x != nil {
		return x.SubmissionHistogram
	}
	return nil
}

func (x *HistogramData) GetConsensusHistogram() *ConsensusHistogram {
	if x != nil {
		return x.ConsensusHistogram
	}
	return nil
}

// SubmissionHistogram represents the distribution of values (count of rows (total, invalid, with parse errors)) by severity.
type SubmissionHistogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighSeverity     *PredefinedFilter `protobuf:"bytes,1,opt,name=high_severity,json=highSeverity,proto3" json:"high_severity,omitempty"`       //The high severity filter.
	MediumSeverity   *PredefinedFilter `protobuf:"bytes,2,opt,name=medium_severity,json=mediumSeverity,proto3" json:"medium_severity,omitempty"` //The medium severity filter.
	LowSeverity      *PredefinedFilter `protobuf:"bytes,3,opt,name=low_severity,json=lowSeverity,proto3" json:"low_severity,omitempty"`          //The low severity filter.
	Valid            *PredefinedFilter `protobuf:"bytes,4,opt,name=valid,proto3" json:"valid,omitempty"`                                         //The valid filter.
	TotalRows        int32             `protobuf:"varint,5,opt,name=totalRows,proto3" json:"totalRows,omitempty"`                                // The total number of rows.
	TotalInvalidRows int32             `protobuf:"varint,6,opt,name=totalInvalidRows,proto3" json:"totalInvalidRows,omitempty"`                  //The total number of invalid rows.
	TotalParseErrors int32             `protobuf:"varint,7,opt,name=totalParseErrors,proto3" json:"totalParseErrors,omitempty"`                  //The total number of parse errors.
}

func (x *SubmissionHistogram) Reset() {
	*x = SubmissionHistogram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_analytics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmissionHistogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionHistogram) ProtoMessage() {}

func (x *SubmissionHistogram) ProtoReflect() protoreflect.Message {
	mi := &file_common_analytics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionHistogram.ProtoReflect.Descriptor instead.
func (*SubmissionHistogram) Descriptor() ([]byte, []int) {
	return file_common_analytics_proto_rawDescGZIP(), []int{6}
}

func (x *SubmissionHistogram) GetHighSeverity() *PredefinedFilter {
	if x != nil {
		return x.HighSeverity
	}
	return nil
}

func (x *SubmissionHistogram) GetMediumSeverity() *PredefinedFilter {
	if x != nil {
		return x.MediumSeverity
	}
	return nil
}

func (x *SubmissionHistogram) GetLowSeverity() *PredefinedFilter {
	if x != nil {
		return x.LowSeverity
	}
	return nil
}

func (x *SubmissionHistogram) GetValid() *PredefinedFilter {
	if x != nil {
		return x.Valid
	}
	return nil
}

func (x *SubmissionHistogram) GetTotalRows() int32 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

func (x *SubmissionHistogram) GetTotalInvalidRows() int32 {
	if x != nil {
		return x.TotalInvalidRows
	}
	return 0
}

func (x *SubmissionHistogram) GetTotalParseErrors() int32 {
	if x != nil {
		return x.TotalParseErrors
	}
	return 0
}

// ConsensusHistogram is used to get a histogram representation of consensus analytics data.
type ConsensusHistogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NonOutliers      *PredefinedFilter `protobuf:"bytes,1,opt,name=nonOutliers,proto3" json:"nonOutliers,omitempty"`            //The non-outlier filter.
	Outliers         *PredefinedFilter `protobuf:"bytes,2,opt,name=outliers,proto3" json:"outliers,omitempty"`                  //The outlier filter.
	NoConsensus      *PredefinedFilter `protobuf:"bytes,3,opt,name=noConsensus,proto3" json:"noConsensus,omitempty"`            //The no consensus filter.
	HighSeverity     *PredefinedFilter `protobuf:"bytes,4,opt,name=highSeverity,proto3" json:"highSeverity,omitempty"`          //The high severity filter.
	Rows             int32             `protobuf:"varint,5,opt,name=rows,proto3" json:"rows,omitempty"`                         //The number of rows.
	TotalParseErrors int32             `protobuf:"varint,6,opt,name=totalParseErrors,proto3" json:"totalParseErrors,omitempty"` //The total number of parse errors.
}

func (x *ConsensusHistogram) Reset() {
	*x = ConsensusHistogram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_analytics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusHistogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusHistogram) ProtoMessage() {}

func (x *ConsensusHistogram) ProtoReflect() protoreflect.Message {
	mi := &file_common_analytics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusHistogram.ProtoReflect.Descriptor instead.
func (*ConsensusHistogram) Descriptor() ([]byte, []int) {
	return file_common_analytics_proto_rawDescGZIP(), []int{7}
}

func (x *ConsensusHistogram) GetNonOutliers() *PredefinedFilter {
	if x != nil {
		return x.NonOutliers
	}
	return nil
}

func (x *ConsensusHistogram) GetOutliers() *PredefinedFilter {
	if x != nil {
		return x.Outliers
	}
	return nil
}

func (x *ConsensusHistogram) GetNoConsensus() *PredefinedFilter {
	if x != nil {
		return x.NoConsensus
	}
	return nil
}

func (x *ConsensusHistogram) GetHighSeverity() *PredefinedFilter {
	if x != nil {
		return x.HighSeverity
	}
	return nil
}

func (x *ConsensusHistogram) GetRows() int32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *ConsensusHistogram) GetTotalParseErrors() int32 {
	if x != nil {
		return x.TotalParseErrors
	}
	return 0
}

// GenericChartMetadataDataQualityResponse is used to get information about data quality errors in a chart, including the total number of rows, column information, and values.
type GenericChartMetadataDataQualityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*GenericChartMetadataDataQualityResponse_Data
	//	*GenericChartMetadataDataQualityResponse_Error
	Response isGenericChartMetadataDataQualityResponse_Response `protobuf_oneof:"response"`
}

func (x *GenericChartMetadataDataQualityResponse) Reset() {
	*x = GenericChartMetadataDataQualityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_analytics_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericChartMetadataDataQualityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericChartMetadataDataQualityResponse) ProtoMessage() {}

func (x *GenericChartMetadataDataQualityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_analytics_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericChartMetadataDataQualityResponse.ProtoReflect.Descriptor instead.
func (*GenericChartMetadataDataQualityResponse) Descriptor() ([]byte, []int) {
	return file_common_analytics_proto_rawDescGZIP(), []int{8}
}

func (m *GenericChartMetadataDataQualityResponse) GetResponse() isGenericChartMetadataDataQualityResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GenericChartMetadataDataQualityResponse) GetData() *GenericChartResponse {
	if x, ok := x.GetResponse().(*GenericChartMetadataDataQualityResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *GenericChartMetadataDataQualityResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*GenericChartMetadataDataQualityResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isGenericChartMetadataDataQualityResponse_Response interface {
	isGenericChartMetadataDataQualityResponse_Response()
}

type GenericChartMetadataDataQualityResponse_Data struct {
	Data *GenericChartResponse `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type GenericChartMetadataDataQualityResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*GenericChartMetadataDataQualityResponse_Data) isGenericChartMetadataDataQualityResponse_Response() {
}

func (*GenericChartMetadataDataQualityResponse_Error) isGenericChartMetadataDataQualityResponse_Response() {
}

// contains information about the chart consensus for a specific asset.
type GenericChartMetadataConsensus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"` //a string that represents the ID of the asset
	// Types that are assignable to Consensus:
	//
	//	*GenericChartMetadataConsensus_Id
	//	*GenericChartMetadataConsensus_DateRangeFilter
	Consensus     isGenericChartMetadataConsensus_Consensus `protobuf_oneof:"consensus"`
	ChartMetadata *GenericChartMetadata                     `protobuf:"bytes,4,opt,name=chart_metadata,json=chartMetadata,proto3" json:"chart_metadata,omitempty"` //an object of the "GenericChartMetadata" message
	TraceName     string                                    `protobuf:"bytes,5,opt,name=trace_name,json=traceName,proto3" json:"trace_name,omitempty"`             //a string that represents the trace name of the chart
}

func (x *GenericChartMetadataConsensus) Reset() {
	*x = GenericChartMetadataConsensus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_analytics_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericChartMetadataConsensus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericChartMetadataConsensus) ProtoMessage() {}

func (x *GenericChartMetadataConsensus) ProtoReflect() protoreflect.Message {
	mi := &file_common_analytics_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericChartMetadataConsensus.ProtoReflect.Descriptor instead.
func (*GenericChartMetadataConsensus) Descriptor() ([]byte, []int) {
	return file_common_analytics_proto_rawDescGZIP(), []int{9}
}

func (x *GenericChartMetadataConsensus) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (m *GenericChartMetadataConsensus) GetConsensus() isGenericChartMetadataConsensus_Consensus {
	if m != nil {
		return m.Consensus
	}
	return nil
}

func (x *GenericChartMetadataConsensus) GetId() string {
	if x, ok := x.GetConsensus().(*GenericChartMetadataConsensus_Id); ok {
		return x.Id
	}
	return ""
}

func (x *GenericChartMetadataConsensus) GetDateRangeFilter() string {
	if x, ok := x.GetConsensus().(*GenericChartMetadataConsensus_DateRangeFilter); ok {
		return x.DateRangeFilter
	}
	return ""
}

func (x *GenericChartMetadataConsensus) GetChartMetadata() *GenericChartMetadata {
	if x != nil {
		return x.ChartMetadata
	}
	return nil
}

func (x *GenericChartMetadataConsensus) GetTraceName() string {
	if x != nil {
		return x.TraceName
	}
	return ""
}

type isGenericChartMetadataConsensus_Consensus interface {
	isGenericChartMetadataConsensus_Consensus()
}

type GenericChartMetadataConsensus_Id struct {
	Id string `protobuf:"bytes,2,opt,name=id,proto3,oneof"` // latest_run_single_run
}

type GenericChartMetadataConsensus_DateRangeFilter struct {
	DateRangeFilter string `protobuf:"bytes,3,opt,name=date_range_filter,json=dateRangeFilter,proto3,oneof"`
}

func (*GenericChartMetadataConsensus_Id) isGenericChartMetadataConsensus_Consensus() {}

func (*GenericChartMetadataConsensus_DateRangeFilter) isGenericChartMetadataConsensus_Consensus() {}

// GenericChartMetadataConsensusResponse is the response for a consensus request for a chart.
type GenericChartMetadataConsensusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*GenericChartMetadataConsensusResponse_Data
	//	*GenericChartMetadataConsensusResponse_Error
	Response isGenericChartMetadataConsensusResponse_Response `protobuf_oneof:"response"`
}

func (x *GenericChartMetadataConsensusResponse) Reset() {
	*x = GenericChartMetadataConsensusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_analytics_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericChartMetadataConsensusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericChartMetadataConsensusResponse) ProtoMessage() {}

func (x *GenericChartMetadataConsensusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_analytics_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericChartMetadataConsensusResponse.ProtoReflect.Descriptor instead.
func (*GenericChartMetadataConsensusResponse) Descriptor() ([]byte, []int) {
	return file_common_analytics_proto_rawDescGZIP(), []int{10}
}

func (m *GenericChartMetadataConsensusResponse) GetResponse() isGenericChartMetadataConsensusResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GenericChartMetadataConsensusResponse) GetData() *GenericChartResponse {
	if x, ok := x.GetResponse().(*GenericChartMetadataConsensusResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *GenericChartMetadataConsensusResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*GenericChartMetadataConsensusResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isGenericChartMetadataConsensusResponse_Response interface {
	isGenericChartMetadataConsensusResponse_Response()
}

type GenericChartMetadataConsensusResponse_Data struct {
	Data *GenericChartResponse `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type GenericChartMetadataConsensusResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*GenericChartMetadataConsensusResponse_Data) isGenericChartMetadataConsensusResponse_Response() {
}

func (*GenericChartMetadataConsensusResponse_Error) isGenericChartMetadataConsensusResponse_Response() {
}

// GenericChartMetadata contains information about the metadata of a chart.
type GenericChartMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics      []*NameAliasPair `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`                               //a repeated field of "NameAliasPair" objects that represent the metrics used in the chart
	Filter       string           `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`                                 //a string that represents a filter applied to the chart
	GroupBy      []*NameAliasPair `protobuf:"bytes,3,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`                //a repeated field of "NameAliasPair" objects that represent the fields used for grouping in the chart
	SortBy       string           `protobuf:"bytes,4,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`                   //a string that represents the field used for sorting the chart
	RowLimit     int32            `protobuf:"varint,5,opt,name=row_limit,json=rowLimit,proto3" json:"row_limit,omitempty"`            //an integer that represents the maximum number of rows in the chart
	SeriesLimit  int32            `protobuf:"varint,6,opt,name=series_limit,json=seriesLimit,proto3" json:"series_limit,omitempty"`   //an integer that represents the maximum number of series in the chart
	SelectFields []*NameAliasPair `protobuf:"bytes,7,rep,name=select_fields,json=selectFields,proto3" json:"select_fields,omitempty"` //a repeated field of "NameAliasPair" objects that represent the fields selected for display in the chart
}

func (x *GenericChartMetadata) Reset() {
	*x = GenericChartMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_analytics_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericChartMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericChartMetadata) ProtoMessage() {}

func (x *GenericChartMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_common_analytics_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericChartMetadata.ProtoReflect.Descriptor instead.
func (*GenericChartMetadata) Descriptor() ([]byte, []int) {
	return file_common_analytics_proto_rawDescGZIP(), []int{11}
}

func (x *GenericChartMetadata) GetMetrics() []*NameAliasPair {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *GenericChartMetadata) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *GenericChartMetadata) GetGroupBy() []*NameAliasPair {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *GenericChartMetadata) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *GenericChartMetadata) GetRowLimit() int32 {
	if x != nil {
		return x.RowLimit
	}
	return 0
}

func (x *GenericChartMetadata) GetSeriesLimit() int32 {
	if x != nil {
		return x.SeriesLimit
	}
	return 0
}

func (x *GenericChartMetadata) GetSelectFields() []*NameAliasPair {
	if x != nil {
		return x.SelectFields
	}
	return nil
}

// GenericChartMetadataDataQuality contains information about data quality for a specific asset and client in a chart.
type GenericChartMetadataDataQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"` //a string that represents the ID of the asset
	Client  string `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty"`                  //a string that represents the client of the chart
	// Types that are assignable to Submission:
	//
	//	*GenericChartMetadataDataQuality_Id
	//	*GenericChartMetadataDataQuality_DateRangeFilter
	Submission    isGenericChartMetadataDataQuality_Submission `protobuf_oneof:"submission"`
	ChartMetadata *GenericChartMetadata                        `protobuf:"bytes,5,opt,name=chart_metadata,json=chartMetadata,proto3" json:"chart_metadata,omitempty"` //an object of the "GenericChartMetadata" message
	TraceName     string                                       `protobuf:"bytes,6,opt,name=trace_name,json=traceName,proto3" json:"trace_name,omitempty"`             //a string that represents the trace name of the chart
}

func (x *GenericChartMetadataDataQuality) Reset() {
	*x = GenericChartMetadataDataQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_analytics_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericChartMetadataDataQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericChartMetadataDataQuality) ProtoMessage() {}

func (x *GenericChartMetadataDataQuality) ProtoReflect() protoreflect.Message {
	mi := &file_common_analytics_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericChartMetadataDataQuality.ProtoReflect.Descriptor instead.
func (*GenericChartMetadataDataQuality) Descriptor() ([]byte, []int) {
	return file_common_analytics_proto_rawDescGZIP(), []int{12}
}

func (x *GenericChartMetadataDataQuality) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *GenericChartMetadataDataQuality) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (m *GenericChartMetadataDataQuality) GetSubmission() isGenericChartMetadataDataQuality_Submission {
	if m != nil {
		return m.Submission
	}
	return nil
}

func (x *GenericChartMetadataDataQuality) GetId() string {
	if x, ok := x.GetSubmission().(*GenericChartMetadataDataQuality_Id); ok {
		return x.Id
	}
	return ""
}

func (x *GenericChartMetadataDataQuality) GetDateRangeFilter() string {
	if x, ok := x.GetSubmission().(*GenericChartMetadataDataQuality_DateRangeFilter); ok {
		return x.DateRangeFilter
	}
	return ""
}

func (x *GenericChartMetadataDataQuality) GetChartMetadata() *GenericChartMetadata {
	if x != nil {
		return x.ChartMetadata
	}
	return nil
}

func (x *GenericChartMetadataDataQuality) GetTraceName() string {
	if x != nil {
		return x.TraceName
	}
	return ""
}

type isGenericChartMetadataDataQuality_Submission interface {
	isGenericChartMetadataDataQuality_Submission()
}

type GenericChartMetadataDataQuality_Id struct {
	Id string `protobuf:"bytes,3,opt,name=id,proto3,oneof"`
}

type GenericChartMetadataDataQuality_DateRangeFilter struct {
	DateRangeFilter string `protobuf:"bytes,4,opt,name=date_range_filter,json=dateRangeFilter,proto3,oneof"`
}

func (*GenericChartMetadataDataQuality_Id) isGenericChartMetadataDataQuality_Submission() {}

func (*GenericChartMetadataDataQuality_DateRangeFilter) isGenericChartMetadataDataQuality_Submission() {
}

var File_common_analytics_proto protoreflect.FileDescriptor

var file_common_analytics_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69,
	0x75, 0x6d, 0x1a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfa, 0x01,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x75, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x69, 0x74, 0x61,
	0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x49, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x69, 0x74, 0x61,
	0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xce,
	0x01, 0x0a, 0x10, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x77, 0x0a, 0x11, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x0d, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x13, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69,
	0x75, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x13, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x4c, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69,
	0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22, 0x82, 0x03, 0x0a, 0x13, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x12, 0x3f, 0x0a, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e,
	0x69, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x68, 0x69, 0x67, 0x68, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x43, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x5f, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x69,
	0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x6f, 0x77, 0x5f, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x6c, 0x6f, 0x77, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f,
	0x77, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xc8,
	0x02, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x3c, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x6c,
	0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x69, 0x74,
	0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x6e, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x6c, 0x69,
	0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x6e,
	0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x65, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x6e, 0x6f,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x68, 0x69, 0x67,
	0x68, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x68, 0x69, 0x67,
	0x68, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x27, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74,
	0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xed, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2c, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x45, 0x0a,
	0x0e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x22, 0x92, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e,
	0x69, 0x75, 0x6d, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31,
	0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x50, 0x61, 0x69, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x69,
	0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x1f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a,
	0x11, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0e, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x7a, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x61, 0x2e,
	0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x42, 0x1e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x61, 0x2f, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x73, 0x64,
	0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_common_analytics_proto_rawDescOnce sync.Once
	file_common_analytics_proto_rawDescData = file_common_analytics_proto_rawDesc
)

func file_common_analytics_proto_rawDescGZIP() []byte {
	file_common_analytics_proto_rawDescOnce.Do(func() {
		file_common_analytics_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_analytics_proto_rawDescData)
	})
	return file_common_analytics_proto_rawDescData
}

var file_common_analytics_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_common_analytics_proto_goTypes = []interface{}{
	(*GetPredefinedFiltersRequest)(nil),             // 0: titanium.GetPredefinedFiltersRequest
	(*GetPredefinedFiltersResponse)(nil),            // 1: titanium.GetPredefinedFiltersResponse
	(*PredefinedFilters)(nil),                       // 2: titanium.PredefinedFilters
	(*HistogramRequest)(nil),                        // 3: titanium.HistogramRequest
	(*HistogramResponse)(nil),                       // 4: titanium.HistogramResponse
	(*HistogramData)(nil),                           // 5: titanium.HistogramData
	(*SubmissionHistogram)(nil),                     // 6: titanium.SubmissionHistogram
	(*ConsensusHistogram)(nil),                      // 7: titanium.ConsensusHistogram
	(*GenericChartMetadataDataQualityResponse)(nil), // 8: titanium.GenericChartMetadataDataQualityResponse
	(*GenericChartMetadataConsensus)(nil),           // 9: titanium.GenericChartMetadataConsensus
	(*GenericChartMetadataConsensusResponse)(nil),   // 10: titanium.GenericChartMetadataConsensusResponse
	(*GenericChartMetadata)(nil),                    // 11: titanium.GenericChartMetadata
	(*GenericChartMetadataDataQuality)(nil),         // 12: titanium.GenericChartMetadataDataQuality
	(*Filter)(nil),                                  // 13: titanium.Filter
	(*Error)(nil),                                   // 14: titanium.Error
	(*PredefinedFilter)(nil),                        // 15: titanium.PredefinedFilter
	(*GenericChartResponse)(nil),                    // 16: titanium.GenericChartResponse
	(*NameAliasPair)(nil),                           // 17: titanium.NameAliasPair
}
var file_common_analytics_proto_depIdxs = []int32{
	13, // 0: titanium.GetPredefinedFiltersRequest.filters:type_name -> titanium.Filter
	2,  // 1: titanium.GetPredefinedFiltersResponse.data:type_name -> titanium.PredefinedFilters
	14, // 2: titanium.GetPredefinedFiltersResponse.error:type_name -> titanium.Error
	15, // 3: titanium.PredefinedFilters.filters:type_name -> titanium.PredefinedFilter
	5,  // 4: titanium.HistogramResponse.data:type_name -> titanium.HistogramData
	14, // 5: titanium.HistogramResponse.error:type_name -> titanium.Error
	6,  // 6: titanium.HistogramData.submissionHistogram:type_name -> titanium.SubmissionHistogram
	7,  // 7: titanium.HistogramData.consensusHistogram:type_name -> titanium.ConsensusHistogram
	15, // 8: titanium.SubmissionHistogram.high_severity:type_name -> titanium.PredefinedFilter
	15, // 9: titanium.SubmissionHistogram.medium_severity:type_name -> titanium.PredefinedFilter
	15, // 10: titanium.SubmissionHistogram.low_severity:type_name -> titanium.PredefinedFilter
	15, // 11: titanium.SubmissionHistogram.valid:type_name -> titanium.PredefinedFilter
	15, // 12: titanium.ConsensusHistogram.nonOutliers:type_name -> titanium.PredefinedFilter
	15, // 13: titanium.ConsensusHistogram.outliers:type_name -> titanium.PredefinedFilter
	15, // 14: titanium.ConsensusHistogram.noConsensus:type_name -> titanium.PredefinedFilter
	15, // 15: titanium.ConsensusHistogram.highSeverity:type_name -> titanium.PredefinedFilter
	16, // 16: titanium.GenericChartMetadataDataQualityResponse.data:type_name -> titanium.GenericChartResponse
	14, // 17: titanium.GenericChartMetadataDataQualityResponse.error:type_name -> titanium.Error
	11, // 18: titanium.GenericChartMetadataConsensus.chart_metadata:type_name -> titanium.GenericChartMetadata
	16, // 19: titanium.GenericChartMetadataConsensusResponse.data:type_name -> titanium.GenericChartResponse
	14, // 20: titanium.GenericChartMetadataConsensusResponse.error:type_name -> titanium.Error
	17, // 21: titanium.GenericChartMetadata.metrics:type_name -> titanium.NameAliasPair
	17, // 22: titanium.GenericChartMetadata.group_by:type_name -> titanium.NameAliasPair
	17, // 23: titanium.GenericChartMetadata.select_fields:type_name -> titanium.NameAliasPair
	11, // 24: titanium.GenericChartMetadataDataQuality.chart_metadata:type_name -> titanium.GenericChartMetadata
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_common_analytics_proto_init() }
func file_common_analytics_proto_init() {
	if File_common_analytics_proto != nil {
		return
	}
	file_common_gateway_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_common_analytics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPredefinedFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_analytics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPredefinedFiltersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_analytics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredefinedFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_analytics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistogramRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_analytics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistogramResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_analytics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistogramData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_analytics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmissionHistogram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_analytics_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusHistogram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_analytics_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericChartMetadataDataQualityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_analytics_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericChartMetadataConsensus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_analytics_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericChartMetadataConsensusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_analytics_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericChartMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_analytics_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericChartMetadataDataQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_common_analytics_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*GetPredefinedFiltersResponse_Data)(nil),
		(*GetPredefinedFiltersResponse_Error)(nil),
	}
	file_common_analytics_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*HistogramResponse_Data)(nil),
		(*HistogramResponse_Error)(nil),
	}
	file_common_analytics_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*GenericChartMetadataDataQualityResponse_Data)(nil),
		(*GenericChartMetadataDataQualityResponse_Error)(nil),
	}
	file_common_analytics_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*GenericChartMetadataConsensus_Id)(nil),
		(*GenericChartMetadataConsensus_DateRangeFilter)(nil),
	}
	file_common_analytics_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*GenericChartMetadataConsensusResponse_Data)(nil),
		(*GenericChartMetadataConsensusResponse_Error)(nil),
	}
	file_common_analytics_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*GenericChartMetadataDataQuality_Id)(nil),
		(*GenericChartMetadataDataQuality_DateRangeFilter)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_analytics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_analytics_proto_goTypes,
		DependencyIndexes: file_common_analytics_proto_depIdxs,
		MessageInfos:      file_common_analytics_proto_msgTypes,
	}.Build()
	File_common_analytics_proto = out.File
	file_common_analytics_proto_rawDesc = nil
	file_common_analytics_proto_goTypes = nil
	file_common_analytics_proto_depIdxs = nil
}
