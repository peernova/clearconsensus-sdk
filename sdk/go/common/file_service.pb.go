// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: common/file_service.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExportType int32

const (
	ExportType_EXPORT_TYPE_UNSPECIFIED               ExportType = 0 //This value represents an unspecified export type.
	ExportType_EXPORT_TYPE_ORIGINALLY_SUBMITTED_FILE ExportType = 1 //This value represents the originally submitted file export type.
	ExportType_EXPORT_TYPE_PARSING_ERRORS_FILE       ExportType = 2 //
)

// Enum value maps for ExportType.
var (
	ExportType_name = map[int32]string{
		0: "EXPORT_TYPE_UNSPECIFIED",
		1: "EXPORT_TYPE_ORIGINALLY_SUBMITTED_FILE",
		2: "EXPORT_TYPE_PARSING_ERRORS_FILE",
	}
	ExportType_value = map[string]int32{
		"EXPORT_TYPE_UNSPECIFIED":               0,
		"EXPORT_TYPE_ORIGINALLY_SUBMITTED_FILE": 1,
		"EXPORT_TYPE_PARSING_ERRORS_FILE":       2,
	}
)

func (x ExportType) Enum() *ExportType {
	p := new(ExportType)
	*p = x
	return p
}

func (x ExportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExportType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_file_service_proto_enumTypes[0].Descriptor()
}

func (ExportType) Type() protoreflect.EnumType {
	return &file_common_file_service_proto_enumTypes[0]
}

func (x ExportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExportType.Descriptor instead.
func (ExportType) EnumDescriptor() ([]byte, []int) {
	return file_common_file_service_proto_rawDescGZIP(), []int{0}
}

// FileIdentifier contains information about a file including its filename, upload date, and status.
type FileIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename   string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                       //a string representing the name of the file
	UploadDate string `protobuf:"bytes,2,opt,name=upload_date,json=uploadDate,proto3" json:"upload_date,omitempty"` //a string representing the date the file was uploaded
	FileStatus string `protobuf:"bytes,3,opt,name=file_status,json=fileStatus,proto3" json:"file_status,omitempty"` //a string representing the status of the file
}

func (x *FileIdentifier) Reset() {
	*x = FileIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_file_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileIdentifier) ProtoMessage() {}

func (x *FileIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_common_file_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileIdentifier.ProtoReflect.Descriptor instead.
func (*FileIdentifier) Descriptor() ([]byte, []int) {
	return file_common_file_service_proto_rawDescGZIP(), []int{0}
}

func (x *FileIdentifier) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileIdentifier) GetUploadDate() string {
	if x != nil {
		return x.UploadDate
	}
	return ""
}

func (x *FileIdentifier) GetFileStatus() string {
	if x != nil {
		return x.FileStatus
	}
	return ""
}

// FileDelimiterSetting contains information about the delimiter used in a file and the encapsulating character.
type FileDelimiterSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delimiter         string `protobuf:"bytes,1,opt,name=delimiter,proto3" json:"delimiter,omitempty"`                                          //a string representing the delimiter used in the file
	EncapsulatingChar string `protobuf:"bytes,2,opt,name=encapsulating_char,json=encapsulatingChar,proto3" json:"encapsulating_char,omitempty"` //a string representing the encapsulating character used in the file
}

func (x *FileDelimiterSetting) Reset() {
	*x = FileDelimiterSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_file_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDelimiterSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDelimiterSetting) ProtoMessage() {}

func (x *FileDelimiterSetting) ProtoReflect() protoreflect.Message {
	mi := &file_common_file_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDelimiterSetting.ProtoReflect.Descriptor instead.
func (*FileDelimiterSetting) Descriptor() ([]byte, []int) {
	return file_common_file_service_proto_rawDescGZIP(), []int{1}
}

func (x *FileDelimiterSetting) GetDelimiter() string {
	if x != nil {
		return x.Delimiter
	}
	return ""
}

func (x *FileDelimiterSetting) GetEncapsulatingChar() string {
	if x != nil {
		return x.EncapsulatingChar
	}
	return ""
}

// SetFileDelimiterRequest is used to set the delimiter for a specific file by providing the FileIdentifier and FileDelimiterSetting.
type SetFileDelimiterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileIdentifier   *FileIdentifier       `protobuf:"bytes,1,opt,name=file_identifier,json=fileIdentifier,proto3" json:"file_identifier,omitempty"`       //a FileIdentifier representing the file to be modified
	DelimiterSetting *FileDelimiterSetting `protobuf:"bytes,2,opt,name=delimiter_setting,json=delimiterSetting,proto3" json:"delimiter_setting,omitempty"` //a FileDelimiterSetting representing the new delimiter setting
}

func (x *SetFileDelimiterRequest) Reset() {
	*x = SetFileDelimiterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_file_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFileDelimiterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFileDelimiterRequest) ProtoMessage() {}

func (x *SetFileDelimiterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_file_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFileDelimiterRequest.ProtoReflect.Descriptor instead.
func (*SetFileDelimiterRequest) Descriptor() ([]byte, []int) {
	return file_common_file_service_proto_rawDescGZIP(), []int{2}
}

func (x *SetFileDelimiterRequest) GetFileIdentifier() *FileIdentifier {
	if x != nil {
		return x.FileIdentifier
	}
	return nil
}

func (x *SetFileDelimiterRequest) GetDelimiterSetting() *FileDelimiterSetting {
	if x != nil {
		return x.DelimiterSetting
	}
	return nil
}

// FilePreview contains a preview of a file including the rows of the file, the delimiter setting, and the descriptor definition of the file.
type FilePreview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows                 []*structpb.Struct    `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`                                                             //a repeated field of google.protobuf.Struct representing the rows of the file
	DelimiterSetting     *FileDelimiterSetting `protobuf:"bytes,2,opt,name=delimiter_setting,json=delimiterSetting,proto3" json:"delimiter_setting,omitempty"`             //a FileDelimiterSetting representing the delimiter setting used in the file
	DescriptorDefinition *DescriptorDefinition `protobuf:"bytes,3,opt,name=descriptor_definition,json=descriptorDefinition,proto3" json:"descriptor_definition,omitempty"` //a DescriptorDefinition representing the descriptor definition of the file
}

func (x *FilePreview) Reset() {
	*x = FilePreview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_file_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilePreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilePreview) ProtoMessage() {}

func (x *FilePreview) ProtoReflect() protoreflect.Message {
	mi := &file_common_file_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilePreview.ProtoReflect.Descriptor instead.
func (*FilePreview) Descriptor() ([]byte, []int) {
	return file_common_file_service_proto_rawDescGZIP(), []int{3}
}

func (x *FilePreview) GetRows() []*structpb.Struct {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *FilePreview) GetDelimiterSetting() *FileDelimiterSetting {
	if x != nil {
		return x.DelimiterSetting
	}
	return nil
}

func (x *FilePreview) GetDescriptorDefinition() *DescriptorDefinition {
	if x != nil {
		return x.DescriptorDefinition
	}
	return nil
}

// FileList is used to return a list of files, with each file represented as a FileIdentifier.
type FileList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*FileIdentifier `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"` //a repeated field of FileIdentifier representing the files being returned
}

func (x *FileList) Reset() {
	*x = FileList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_file_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileList) ProtoMessage() {}

func (x *FileList) ProtoReflect() protoreflect.Message {
	mi := &file_common_file_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileList.ProtoReflect.Descriptor instead.
func (*FileList) Descriptor() ([]byte, []int) {
	return file_common_file_service_proto_rawDescGZIP(), []int{4}
}

func (x *FileList) GetResults() []*FileIdentifier {
	if x != nil {
		return x.Results
	}
	return nil
}

// FileDescriptorSetting contains information about the descriptor of a file and is used in the SetFileDescriptorRequest message along with the FileIdentifier to set the descriptor of a file.
type FileDescriptorSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DescriptorName string `protobuf:"bytes,1,opt,name=descriptor_name,json=descriptorName,proto3" json:"descriptor_name,omitempty"` //a string representing the name of the descriptor
}

func (x *FileDescriptorSetting) Reset() {
	*x = FileDescriptorSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_file_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDescriptorSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDescriptorSetting) ProtoMessage() {}

func (x *FileDescriptorSetting) ProtoReflect() protoreflect.Message {
	mi := &file_common_file_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDescriptorSetting.ProtoReflect.Descriptor instead.
func (*FileDescriptorSetting) Descriptor() ([]byte, []int) {
	return file_common_file_service_proto_rawDescGZIP(), []int{5}
}

func (x *FileDescriptorSetting) GetDescriptorName() string {
	if x != nil {
		return x.DescriptorName
	}
	return ""
}

// FileSubmissionRequest is used to submit a file, it contains information about the date, asset_id, file name, file, client and compression type.
type SetFileDescriptorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileIdentifier    *FileIdentifier        `protobuf:"bytes,1,opt,name=file_identifier,json=fileIdentifier,proto3" json:"file_identifier,omitempty"`          //a FileIdentifier representing the file to be modified
	DescriptorSetting *FileDescriptorSetting `protobuf:"bytes,2,opt,name=descriptor_setting,json=descriptorSetting,proto3" json:"descriptor_setting,omitempty"` //a FileDescriptorSetting representing the new descriptor setting
}

func (x *SetFileDescriptorRequest) Reset() {
	*x = SetFileDescriptorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_file_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFileDescriptorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFileDescriptorRequest) ProtoMessage() {}

func (x *SetFileDescriptorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_file_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFileDescriptorRequest.ProtoReflect.Descriptor instead.
func (*SetFileDescriptorRequest) Descriptor() ([]byte, []int) {
	return file_common_file_service_proto_rawDescGZIP(), []int{6}
}

func (x *SetFileDescriptorRequest) GetFileIdentifier() *FileIdentifier {
	if x != nil {
		return x.FileIdentifier
	}
	return nil
}

func (x *SetFileDescriptorRequest) GetDescriptorSetting() *FileDescriptorSetting {
	if x != nil {
		return x.DescriptorSetting
	}
	return nil
}

// FileSubmissionRequest is used to submit a file(with specified compression type and etc.)
type FileSubmissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date        string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`                            //a string representing the date of the file submission
	AssetId     string `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`       //a string representing the ID of the asset the file belongs to
	FileName    string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`    //a string representing the name of the file
	File        string `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`                            //a string representing the file
	Client      string `protobuf:"bytes,5,opt,name=client,proto3" json:"client,omitempty"`                        //a string representing the client who submitted the file
	Compression string `protobuf:"bytes,6,opt,name=compression,proto3" json:"compression,omitempty"`              //a string representing the compression type of the file
	TraceName   string `protobuf:"bytes,7,opt,name=trace_name,json=traceName,proto3" json:"trace_name,omitempty"` //a string representing the trace name of the file
}

func (x *FileSubmissionRequest) Reset() {
	*x = FileSubmissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_file_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSubmissionRequest) ProtoMessage() {}

func (x *FileSubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_file_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSubmissionRequest.ProtoReflect.Descriptor instead.
func (*FileSubmissionRequest) Descriptor() ([]byte, []int) {
	return file_common_file_service_proto_rawDescGZIP(), []int{7}
}

func (x *FileSubmissionRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *FileSubmissionRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *FileSubmissionRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileSubmissionRequest) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *FileSubmissionRequest) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *FileSubmissionRequest) GetCompression() string {
	if x != nil {
		return x.Compression
	}
	return ""
}

func (x *FileSubmissionRequest) GetTraceName() string {
	if x != nil {
		return x.TraceName
	}
	return ""
}

// FileHistoryRequest is used to request the history of files submitted for a specific asset
type FileHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId   string   `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`       //a string representing the ID of the asset
	FileDate  string   `protobuf:"bytes,2,opt,name=file_date,json=fileDate,proto3" json:"file_date,omitempty"`    //a string representing the date of the file
	Filter    string   `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`                        //a string representing the filter to be applied to the file history
	Client    string   `protobuf:"bytes,4,opt,name=client,proto3" json:"client,omitempty"`                        //represents the client making the request.
	OrderBy   *OrderBy `protobuf:"bytes,5,opt,name=orderBy,proto3" json:"orderBy,omitempty"`                      //represents the sorting order.
	Limit     *Limit   `protobuf:"bytes,6,opt,name=limit,proto3" json:"limit,omitempty"`                          //represents the maximum number of results.
	Offset    int32    `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty"`                       //represents the starting position of the results.
	TraceName string   `protobuf:"bytes,8,opt,name=trace_name,json=traceName,proto3" json:"trace_name,omitempty"` //represents a trace name.
}

func (x *FileHistoryRequest) Reset() {
	*x = FileHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_file_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileHistoryRequest) ProtoMessage() {}

func (x *FileHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_file_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileHistoryRequest.ProtoReflect.Descriptor instead.
func (*FileHistoryRequest) Descriptor() ([]byte, []int) {
	return file_common_file_service_proto_rawDescGZIP(), []int{8}
}

func (x *FileHistoryRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *FileHistoryRequest) GetFileDate() string {
	if x != nil {
		return x.FileDate
	}
	return ""
}

func (x *FileHistoryRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *FileHistoryRequest) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *FileHistoryRequest) GetOrderBy() *OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *FileHistoryRequest) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *FileHistoryRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FileHistoryRequest) GetTraceName() string {
	if x != nil {
		return x.TraceName
	}
	return ""
}

// FileHistoryResponse returns the history of submitted files in the form of FileHistoryResponseData which contains columns and rows of files.
type FileHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*FileHistoryResponse_Data
	//	*FileHistoryResponse_Error
	Response isFileHistoryResponse_Response `protobuf_oneof:"response"`
}

func (x *FileHistoryResponse) Reset() {
	*x = FileHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_file_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileHistoryResponse) ProtoMessage() {}

func (x *FileHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_file_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileHistoryResponse.ProtoReflect.Descriptor instead.
func (*FileHistoryResponse) Descriptor() ([]byte, []int) {
	return file_common_file_service_proto_rawDescGZIP(), []int{9}
}

func (m *FileHistoryResponse) GetResponse() isFileHistoryResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *FileHistoryResponse) GetData() *FileHistoryResponseData {
	if x, ok := x.GetResponse().(*FileHistoryResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *FileHistoryResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*FileHistoryResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isFileHistoryResponse_Response interface {
	isFileHistoryResponse_Response()
}

type FileHistoryResponse_Data struct {
	Data *FileHistoryResponseData `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type FileHistoryResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*FileHistoryResponse_Data) isFileHistoryResponse_Response() {}

func (*FileHistoryResponse_Error) isFileHistoryResponse_Response() {}

type FileHistoryResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns   []*ColumnInfo     `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	Rows      []*FileHistoryRow `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
	TotalRows int32             `protobuf:"varint,3,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"`
}

func (x *FileHistoryResponseData) Reset() {
	*x = FileHistoryResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_file_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileHistoryResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileHistoryResponseData) ProtoMessage() {}

func (x *FileHistoryResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_common_file_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileHistoryResponseData.ProtoReflect.Descriptor instead.
func (*FileHistoryResponseData) Descriptor() ([]byte, []int) {
	return file_common_file_service_proto_rawDescGZIP(), []int{10}
}

func (x *FileHistoryResponseData) GetColumns() []*ColumnInfo {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *FileHistoryResponseData) GetRows() []*FileHistoryRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *FileHistoryResponseData) GetTotalRows() int32 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

// FileHistoryRow contains the values of a file and also whether it is a latest consensus member or not.
type FileHistoryRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values                []*structpb.Value   `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	LatestConsensusMember bool                `protobuf:"varint,2,opt,name=latest_consensus_member,json=latestConsensusMember,proto3" json:"latest_consensus_member,omitempty"`
	ConsensusRun          []*ConsensusRunInfo `protobuf:"bytes,3,rep,name=consensusRun,proto3" json:"consensusRun,omitempty"`
}

func (x *FileHistoryRow) Reset() {
	*x = FileHistoryRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_file_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileHistoryRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileHistoryRow) ProtoMessage() {}

func (x *FileHistoryRow) ProtoReflect() protoreflect.Message {
	mi := &file_common_file_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileHistoryRow.ProtoReflect.Descriptor instead.
func (*FileHistoryRow) Descriptor() ([]byte, []int) {
	return file_common_file_service_proto_rawDescGZIP(), []int{11}
}

func (x *FileHistoryRow) GetValues() []*structpb.Value {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *FileHistoryRow) GetLatestConsensusMember() bool {
	if x != nil {
		return x.LatestConsensusMember
	}
	return false
}

func (x *FileHistoryRow) GetConsensusRun() []*ConsensusRunInfo {
	if x != nil {
		return x.ConsensusRun
	}
	return nil
}

// GetFileExportUrlRequest is used to get pre-signed s3 url for exporting a file.
type GetFileExportUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmittedId   string     `protobuf:"bytes,1,opt,name=submitted_id,json=submittedId,proto3" json:"submitted_id,omitempty"`                        //represents the ID of the submitted file.
	SubmittedDate string     `protobuf:"bytes,2,opt,name=submitted_date,json=submittedDate,proto3" json:"submitted_date,omitempty"`                  //represents the date of the submitted file.
	ExportType    ExportType `protobuf:"varint,3,opt,name=export_type,json=exportType,proto3,enum=titanium.ExportType" json:"export_type,omitempty"` //represents the type of export.
}

func (x *GetFileExportUrlRequest) Reset() {
	*x = GetFileExportUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_file_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileExportUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileExportUrlRequest) ProtoMessage() {}

func (x *GetFileExportUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_file_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileExportUrlRequest.ProtoReflect.Descriptor instead.
func (*GetFileExportUrlRequest) Descriptor() ([]byte, []int) {
	return file_common_file_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetFileExportUrlRequest) GetSubmittedId() string {
	if x != nil {
		return x.SubmittedId
	}
	return ""
}

func (x *GetFileExportUrlRequest) GetSubmittedDate() string {
	if x != nil {
		return x.SubmittedDate
	}
	return ""
}

func (x *GetFileExportUrlRequest) GetExportType() ExportType {
	if x != nil {
		return x.ExportType
	}
	return ExportType_EXPORT_TYPE_UNSPECIFIED
}

// GetFileExportUrlResponse represents response with the pre-signed s3 url in the form of FileExportUrl message.
type GetFileExportUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*GetFileExportUrlResponse_Data
	//	*GetFileExportUrlResponse_Error
	Response isGetFileExportUrlResponse_Response `protobuf_oneof:"response"`
}

func (x *GetFileExportUrlResponse) Reset() {
	*x = GetFileExportUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_file_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileExportUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileExportUrlResponse) ProtoMessage() {}

func (x *GetFileExportUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_file_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileExportUrlResponse.ProtoReflect.Descriptor instead.
func (*GetFileExportUrlResponse) Descriptor() ([]byte, []int) {
	return file_common_file_service_proto_rawDescGZIP(), []int{13}
}

func (m *GetFileExportUrlResponse) GetResponse() isGetFileExportUrlResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetFileExportUrlResponse) GetData() *GetFileExportUrlResponse_FileExportUrl {
	if x, ok := x.GetResponse().(*GetFileExportUrlResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *GetFileExportUrlResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*GetFileExportUrlResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isGetFileExportUrlResponse_Response interface {
	isGetFileExportUrlResponse_Response()
}

type GetFileExportUrlResponse_Data struct {
	Data *GetFileExportUrlResponse_FileExportUrl `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type GetFileExportUrlResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*GetFileExportUrlResponse_Data) isGetFileExportUrlResponse_Response() {}

func (*GetFileExportUrlResponse_Error) isGetFileExportUrlResponse_Response() {}

type GetFileExportUrlResponse_FileExportUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S3Url string `protobuf:"bytes,1,opt,name=s3_url,json=s3Url,proto3" json:"s3_url,omitempty"` //represents the pre-signed s3 URL for exporting a file.
}

func (x *GetFileExportUrlResponse_FileExportUrl) Reset() {
	*x = GetFileExportUrlResponse_FileExportUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_file_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileExportUrlResponse_FileExportUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileExportUrlResponse_FileExportUrl) ProtoMessage() {}

func (x *GetFileExportUrlResponse_FileExportUrl) ProtoReflect() protoreflect.Message {
	mi := &file_common_file_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileExportUrlResponse_FileExportUrl.ProtoReflect.Descriptor instead.
func (*GetFileExportUrlResponse_FileExportUrl) Descriptor() ([]byte, []int) {
	return file_common_file_service_proto_rawDescGZIP(), []int{13, 0}
}

func (x *GetFileExportUrlResponse_FileExportUrl) GetS3Url() string {
	if x != nil {
		return x.S3Url
	}
	return ""
}

var File_common_file_service_proto protoreflect.FileDescriptor

var file_common_file_service_proto_rawDesc = []byte{
	0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x69, 0x74,
	0x61, 0x6e, 0x69, 0x75, 0x6d, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6e,
	0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x63,
	0x0a, 0x14, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x68, 0x61, 0x72, 0x22, 0xa9, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x41, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e,
	0x69, 0x75, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x4b, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x64,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22,
	0xdc, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x2b, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x4b, 0x0a, 0x11,
	0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69,
	0x75, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x53, 0x0a, 0x15, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e,
	0x69, 0x75, 0x6d, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e,
	0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x69,
	0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x40,
	0x0a, 0x15, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xad, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x0f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75,
	0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x4e, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74,
	0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x22, 0xd0, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x87, 0x02, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12,
	0x25, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x83, 0x01,
	0x0a, 0x13, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x17, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12,
	0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x22, 0xb8, 0x01, 0x0a,
	0x0e, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x12,
	0x2e, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x17, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x52, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x52, 0x75, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x72,
	0x6c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e,
	0x69, 0x75, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x1a, 0x26, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x55, 0x72, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x33, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x33, 0x55, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x79, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x4d,
	0x49, 0x54, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f,
	0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x53,
	0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10,
	0x02, 0x42, 0x72, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x6e, 0x6f, 0x76,
	0x61, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x42, 0x16, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x01, 0x5a,
	0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x6e, 0x6f, 0x76, 0x61, 0x2f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_file_service_proto_rawDescOnce sync.Once
	file_common_file_service_proto_rawDescData = file_common_file_service_proto_rawDesc
)

func file_common_file_service_proto_rawDescGZIP() []byte {
	file_common_file_service_proto_rawDescOnce.Do(func() {
		file_common_file_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_file_service_proto_rawDescData)
	})
	return file_common_file_service_proto_rawDescData
}

var file_common_file_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_common_file_service_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_common_file_service_proto_goTypes = []interface{}{
	(ExportType)(0),                                // 0: titanium.ExportType
	(*FileIdentifier)(nil),                         // 1: titanium.FileIdentifier
	(*FileDelimiterSetting)(nil),                   // 2: titanium.FileDelimiterSetting
	(*SetFileDelimiterRequest)(nil),                // 3: titanium.SetFileDelimiterRequest
	(*FilePreview)(nil),                            // 4: titanium.FilePreview
	(*FileList)(nil),                               // 5: titanium.FileList
	(*FileDescriptorSetting)(nil),                  // 6: titanium.FileDescriptorSetting
	(*SetFileDescriptorRequest)(nil),               // 7: titanium.SetFileDescriptorRequest
	(*FileSubmissionRequest)(nil),                  // 8: titanium.FileSubmissionRequest
	(*FileHistoryRequest)(nil),                     // 9: titanium.FileHistoryRequest
	(*FileHistoryResponse)(nil),                    // 10: titanium.FileHistoryResponse
	(*FileHistoryResponseData)(nil),                // 11: titanium.FileHistoryResponseData
	(*FileHistoryRow)(nil),                         // 12: titanium.FileHistoryRow
	(*GetFileExportUrlRequest)(nil),                // 13: titanium.GetFileExportUrlRequest
	(*GetFileExportUrlResponse)(nil),               // 14: titanium.GetFileExportUrlResponse
	(*GetFileExportUrlResponse_FileExportUrl)(nil), // 15: titanium.GetFileExportUrlResponse.FileExportUrl
	(*structpb.Struct)(nil),                        // 16: google.protobuf.Struct
	(*DescriptorDefinition)(nil),                   // 17: titanium.DescriptorDefinition
	(*OrderBy)(nil),                                // 18: titanium.OrderBy
	(*Limit)(nil),                                  // 19: titanium.Limit
	(*Error)(nil),                                  // 20: titanium.Error
	(*ColumnInfo)(nil),                             // 21: titanium.ColumnInfo
	(*structpb.Value)(nil),                         // 22: google.protobuf.Value
	(*ConsensusRunInfo)(nil),                       // 23: titanium.ConsensusRunInfo
}
var file_common_file_service_proto_depIdxs = []int32{
	1,  // 0: titanium.SetFileDelimiterRequest.file_identifier:type_name -> titanium.FileIdentifier
	2,  // 1: titanium.SetFileDelimiterRequest.delimiter_setting:type_name -> titanium.FileDelimiterSetting
	16, // 2: titanium.FilePreview.rows:type_name -> google.protobuf.Struct
	2,  // 3: titanium.FilePreview.delimiter_setting:type_name -> titanium.FileDelimiterSetting
	17, // 4: titanium.FilePreview.descriptor_definition:type_name -> titanium.DescriptorDefinition
	1,  // 5: titanium.FileList.results:type_name -> titanium.FileIdentifier
	1,  // 6: titanium.SetFileDescriptorRequest.file_identifier:type_name -> titanium.FileIdentifier
	6,  // 7: titanium.SetFileDescriptorRequest.descriptor_setting:type_name -> titanium.FileDescriptorSetting
	18, // 8: titanium.FileHistoryRequest.orderBy:type_name -> titanium.OrderBy
	19, // 9: titanium.FileHistoryRequest.limit:type_name -> titanium.Limit
	11, // 10: titanium.FileHistoryResponse.data:type_name -> titanium.FileHistoryResponseData
	20, // 11: titanium.FileHistoryResponse.error:type_name -> titanium.Error
	21, // 12: titanium.FileHistoryResponseData.columns:type_name -> titanium.ColumnInfo
	12, // 13: titanium.FileHistoryResponseData.rows:type_name -> titanium.FileHistoryRow
	22, // 14: titanium.FileHistoryRow.values:type_name -> google.protobuf.Value
	23, // 15: titanium.FileHistoryRow.consensusRun:type_name -> titanium.ConsensusRunInfo
	0,  // 16: titanium.GetFileExportUrlRequest.export_type:type_name -> titanium.ExportType
	15, // 17: titanium.GetFileExportUrlResponse.data:type_name -> titanium.GetFileExportUrlResponse.FileExportUrl
	20, // 18: titanium.GetFileExportUrlResponse.error:type_name -> titanium.Error
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_common_file_service_proto_init() }
func file_common_file_service_proto_init() {
	if File_common_file_service_proto != nil {
		return
	}
	file_common_gateway_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_common_file_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_file_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDelimiterSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_file_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFileDelimiterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_file_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilePreview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_file_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_file_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDescriptorSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_file_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFileDescriptorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_file_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileSubmissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_file_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_file_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_file_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileHistoryResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_file_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileHistoryRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_file_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileExportUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_file_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileExportUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_file_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileExportUrlResponse_FileExportUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_common_file_service_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*FileHistoryResponse_Data)(nil),
		(*FileHistoryResponse_Error)(nil),
	}
	file_common_file_service_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*GetFileExportUrlResponse_Data)(nil),
		(*GetFileExportUrlResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_file_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_file_service_proto_goTypes,
		DependencyIndexes: file_common_file_service_proto_depIdxs,
		EnumInfos:         file_common_file_service_proto_enumTypes,
		MessageInfos:      file_common_file_service_proto_msgTypes,
	}.Build()
	File_common_file_service_proto = out.File
	file_common_file_service_proto_rawDesc = nil
	file_common_file_service_proto_goTypes = nil
	file_common_file_service_proto_depIdxs = nil
}
