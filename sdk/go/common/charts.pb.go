// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: common/charts.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ChartsRequest is a request message to get the visual representation of data according to the given criteria.
type ChartsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId       string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"` //the ID of the asset for which chart data is requested.
	Underlying    string `protobuf:"bytes,2,opt,name=underlying,proto3" json:"underlying,omitempty"`          //the underlying asset type.
	SubmittedDate string `protobuf:"bytes,3,opt,name=submitted_date,json=submittedDate,proto3" json:"submitted_date,omitempty"`
	Client        string `protobuf:"bytes,4,opt,name=client,proto3" json:"client,omitempty"`
	TraceName     string `protobuf:"bytes,5,opt,name=trace_name,json=traceName,proto3" json:"trace_name,omitempty"`
}

func (x *ChartsRequest) Reset() {
	*x = ChartsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_charts_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartsRequest) ProtoMessage() {}

func (x *ChartsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_charts_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartsRequest.ProtoReflect.Descriptor instead.
func (*ChartsRequest) Descriptor() ([]byte, []int) {
	return file_common_charts_proto_rawDescGZIP(), []int{0}
}

func (x *ChartsRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ChartsRequest) GetUnderlying() string {
	if x != nil {
		return x.Underlying
	}
	return ""
}

func (x *ChartsRequest) GetSubmittedDate() string {
	if x != nil {
		return x.SubmittedDate
	}
	return ""
}

func (x *ChartsRequest) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *ChartsRequest) GetTraceName() string {
	if x != nil {
		return x.TraceName
	}
	return ""
}

// ChartsResponse is a response message that contains the response data, which includes information about outliers, benchmarks, chart sources, and tenors.
type ChartsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ChartsResponse_Data
	//	*ChartsResponse_Error
	Response isChartsResponse_Response `protobuf_oneof:"response"`
}

func (x *ChartsResponse) Reset() {
	*x = ChartsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_charts_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartsResponse) ProtoMessage() {}

func (x *ChartsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_charts_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartsResponse.ProtoReflect.Descriptor instead.
func (*ChartsResponse) Descriptor() ([]byte, []int) {
	return file_common_charts_proto_rawDescGZIP(), []int{1}
}

func (m *ChartsResponse) GetResponse() isChartsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ChartsResponse) GetData() *ChartsResponseData {
	if x, ok := x.GetResponse().(*ChartsResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *ChartsResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*ChartsResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isChartsResponse_Response interface {
	isChartsResponse_Response()
}

type ChartsResponse_Data struct {
	Data *ChartsResponseData `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type ChartsResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*ChartsResponse_Data) isChartsResponse_Response() {}

func (*ChartsResponse_Error) isChartsResponse_Response() {}

// ChartsResponseData is a message that contains data for the chart response.
type ChartsResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outliers     []*OutlierMetadata   `protobuf:"bytes,1,rep,name=outliers,proto3" json:"outliers,omitempty"`         //a repeated field that contains metadata about the outliers.
	Benchmark    []*BenchmarkMetadata `protobuf:"bytes,2,rep,name=benchmark,proto3" json:"benchmark,omitempty"`       // a repeated field that contains metadata about the benchmark.
	ChartSources []*ChartSource       `protobuf:"bytes,3,rep,name=chartSources,proto3" json:"chartSources,omitempty"` //a repeated field that contains information about the chart sources.
	Tenors       []string             `protobuf:"bytes,4,rep,name=tenors,proto3" json:"tenors,omitempty"`             //a repeated field that contains information about the tenors.
}

func (x *ChartsResponseData) Reset() {
	*x = ChartsResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_charts_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartsResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartsResponseData) ProtoMessage() {}

func (x *ChartsResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_common_charts_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartsResponseData.ProtoReflect.Descriptor instead.
func (*ChartsResponseData) Descriptor() ([]byte, []int) {
	return file_common_charts_proto_rawDescGZIP(), []int{2}
}

func (x *ChartsResponseData) GetOutliers() []*OutlierMetadata {
	if x != nil {
		return x.Outliers
	}
	return nil
}

func (x *ChartsResponseData) GetBenchmark() []*BenchmarkMetadata {
	if x != nil {
		return x.Benchmark
	}
	return nil
}

func (x *ChartsResponseData) GetChartSources() []*ChartSource {
	if x != nil {
		return x.ChartSources
	}
	return nil
}

func (x *ChartsResponseData) GetTenors() []string {
	if x != nil {
		return x.Tenors
	}
	return nil
}

// ChartSource is information about a single chart source.
type ChartSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Charts []*Chart `protobuf:"bytes,2,rep,name=charts,proto3" json:"charts,omitempty"` // a repeated field that contains information about the individual charts.
}

func (x *ChartSource) Reset() {
	*x = ChartSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_charts_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSource) ProtoMessage() {}

func (x *ChartSource) ProtoReflect() protoreflect.Message {
	mi := &file_common_charts_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSource.ProtoReflect.Descriptor instead.
func (*ChartSource) Descriptor() ([]byte, []int) {
	return file_common_charts_proto_rawDescGZIP(), []int{3}
}

func (x *ChartSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChartSource) GetCharts() []*Chart {
	if x != nil {
		return x.Charts
	}
	return nil
}

// Charts is visual representation of the systems data.
type Chart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Points []*ChartPoint `protobuf:"bytes,2,rep,name=points,proto3" json:"points,omitempty"` //a repeated field that contains information about the chart points.
}

func (x *Chart) Reset() {
	*x = Chart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_charts_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart) ProtoMessage() {}

func (x *Chart) ProtoReflect() protoreflect.Message {
	mi := &file_common_charts_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart.ProtoReflect.Descriptor instead.
func (*Chart) Descriptor() ([]byte, []int) {
	return file_common_charts_proto_rawDescGZIP(), []int{4}
}

func (x *Chart) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Chart) GetPoints() []*ChartPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

// ChartPoint is representation of chart point(tenor and value) (Tenor refers to the time-to-maturity of a loan or other financial contract)
type ChartPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenor string  `protobuf:"bytes,1,opt,name=tenor,proto3" json:"tenor,omitempty"`   // the time-to-maturity of a loan or other financial contract.
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"` //the value of the chart point.
}

func (x *ChartPoint) Reset() {
	*x = ChartPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_charts_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartPoint) ProtoMessage() {}

func (x *ChartPoint) ProtoReflect() protoreflect.Message {
	mi := &file_common_charts_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartPoint.ProtoReflect.Descriptor instead.
func (*ChartPoint) Descriptor() ([]byte, []int) {
	return file_common_charts_proto_rawDescGZIP(), []int{5}
}

func (x *ChartPoint) GetTenor() string {
	if x != nil {
		return x.Tenor
	}
	return ""
}

func (x *ChartPoint) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// ChartsCurrenciesRequest is request for charts for currency pairs
type ChartsCurrenciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId       string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"` //the ID of the asset for which chart data is requested.
	SubmittedDate string `protobuf:"bytes,2,opt,name=submitted_date,json=submittedDate,proto3" json:"submitted_date,omitempty"`
	TraceName     string `protobuf:"bytes,3,opt,name=trace_name,json=traceName,proto3" json:"trace_name,omitempty"` //the name used to trace the request.
}

func (x *ChartsCurrenciesRequest) Reset() {
	*x = ChartsCurrenciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_charts_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartsCurrenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartsCurrenciesRequest) ProtoMessage() {}

func (x *ChartsCurrenciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_charts_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartsCurrenciesRequest.ProtoReflect.Descriptor instead.
func (*ChartsCurrenciesRequest) Descriptor() ([]byte, []int) {
	return file_common_charts_proto_rawDescGZIP(), []int{6}
}

func (x *ChartsCurrenciesRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ChartsCurrenciesRequest) GetSubmittedDate() string {
	if x != nil {
		return x.SubmittedDate
	}
	return ""
}

func (x *ChartsCurrenciesRequest) GetTraceName() string {
	if x != nil {
		return x.TraceName
	}
	return ""
}

// ChartsCurrenciesResponse is the response that contains data with currency pairs.
type ChartsCurrenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ChartsCurrenciesResponse_Data
	//	*ChartsCurrenciesResponse_Error
	Response isChartsCurrenciesResponse_Response `protobuf_oneof:"response"`
}

func (x *ChartsCurrenciesResponse) Reset() {
	*x = ChartsCurrenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_charts_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartsCurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartsCurrenciesResponse) ProtoMessage() {}

func (x *ChartsCurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_charts_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartsCurrenciesResponse.ProtoReflect.Descriptor instead.
func (*ChartsCurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_common_charts_proto_rawDescGZIP(), []int{7}
}

func (m *ChartsCurrenciesResponse) GetResponse() isChartsCurrenciesResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ChartsCurrenciesResponse) GetData() *ChartsCurrenciesResponseData {
	if x, ok := x.GetResponse().(*ChartsCurrenciesResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *ChartsCurrenciesResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*ChartsCurrenciesResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isChartsCurrenciesResponse_Response interface {
	isChartsCurrenciesResponse_Response()
}

type ChartsCurrenciesResponse_Data struct {
	Data *ChartsCurrenciesResponseData `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type ChartsCurrenciesResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*ChartsCurrenciesResponse_Data) isChartsCurrenciesResponse_Response() {}

func (*ChartsCurrenciesResponse_Error) isChartsCurrenciesResponse_Response() {}

type ChartsCurrenciesResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyPairs []string `protobuf:"bytes,1,rep,name=currencyPairs,proto3" json:"currencyPairs,omitempty"` //a repeated field that contains information about the currency pairs.
}

func (x *ChartsCurrenciesResponseData) Reset() {
	*x = ChartsCurrenciesResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_charts_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartsCurrenciesResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartsCurrenciesResponseData) ProtoMessage() {}

func (x *ChartsCurrenciesResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_common_charts_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartsCurrenciesResponseData.ProtoReflect.Descriptor instead.
func (*ChartsCurrenciesResponseData) Descriptor() ([]byte, []int) {
	return file_common_charts_proto_rawDescGZIP(), []int{8}
}

func (x *ChartsCurrenciesResponseData) GetCurrencyPairs() []string {
	if x != nil {
		return x.CurrencyPairs
	}
	return nil
}

var File_common_charts_proto protoreflect.FileDescriptor

var file_common_charts_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x1a,
	0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x01, 0x0a, 0x0d, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x79, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74,
	0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xd9, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x6c, 0x69,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x69, 0x74, 0x61,
	0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x73, 0x12, 0x39,
	0x0a, 0x09, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x42, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x09,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x39, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x6f, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x6f, 0x72, 0x73, 0x22, 0x4a, 0x0a, 0x0b,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x22, 0x49, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x22, 0x38, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x6e, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x65, 0x6e, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7a, 0x0a,
	0x17, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x18, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x0a, 0x1c, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x73, 0x42,
	0x74, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x61, 0x2e,
	0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x42, 0x18, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x01, 0x5a,
	0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x6e, 0x6f, 0x76, 0x61, 0x2f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_charts_proto_rawDescOnce sync.Once
	file_common_charts_proto_rawDescData = file_common_charts_proto_rawDesc
)

func file_common_charts_proto_rawDescGZIP() []byte {
	file_common_charts_proto_rawDescOnce.Do(func() {
		file_common_charts_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_charts_proto_rawDescData)
	})
	return file_common_charts_proto_rawDescData
}

var file_common_charts_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_common_charts_proto_goTypes = []interface{}{
	(*ChartsRequest)(nil),                // 0: titanium.ChartsRequest
	(*ChartsResponse)(nil),               // 1: titanium.ChartsResponse
	(*ChartsResponseData)(nil),           // 2: titanium.ChartsResponseData
	(*ChartSource)(nil),                  // 3: titanium.ChartSource
	(*Chart)(nil),                        // 4: titanium.Chart
	(*ChartPoint)(nil),                   // 5: titanium.ChartPoint
	(*ChartsCurrenciesRequest)(nil),      // 6: titanium.ChartsCurrenciesRequest
	(*ChartsCurrenciesResponse)(nil),     // 7: titanium.ChartsCurrenciesResponse
	(*ChartsCurrenciesResponseData)(nil), // 8: titanium.ChartsCurrenciesResponseData
	(*Error)(nil),                        // 9: titanium.Error
	(*OutlierMetadata)(nil),              // 10: titanium.OutlierMetadata
	(*BenchmarkMetadata)(nil),            // 11: titanium.BenchmarkMetadata
}
var file_common_charts_proto_depIdxs = []int32{
	2,  // 0: titanium.ChartsResponse.data:type_name -> titanium.ChartsResponseData
	9,  // 1: titanium.ChartsResponse.error:type_name -> titanium.Error
	10, // 2: titanium.ChartsResponseData.outliers:type_name -> titanium.OutlierMetadata
	11, // 3: titanium.ChartsResponseData.benchmark:type_name -> titanium.BenchmarkMetadata
	3,  // 4: titanium.ChartsResponseData.chartSources:type_name -> titanium.ChartSource
	4,  // 5: titanium.ChartSource.charts:type_name -> titanium.Chart
	5,  // 6: titanium.Chart.points:type_name -> titanium.ChartPoint
	8,  // 7: titanium.ChartsCurrenciesResponse.data:type_name -> titanium.ChartsCurrenciesResponseData
	9,  // 8: titanium.ChartsCurrenciesResponse.error:type_name -> titanium.Error
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_common_charts_proto_init() }
func file_common_charts_proto_init() {
	if File_common_charts_proto != nil {
		return
	}
	file_common_gateway_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_common_charts_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_charts_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_charts_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartsResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_charts_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_charts_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_charts_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_charts_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartsCurrenciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_charts_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartsCurrenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_charts_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartsCurrenciesResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_common_charts_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ChartsResponse_Data)(nil),
		(*ChartsResponse_Error)(nil),
	}
	file_common_charts_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ChartsCurrenciesResponse_Data)(nil),
		(*ChartsCurrenciesResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_charts_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_charts_proto_goTypes,
		DependencyIndexes: file_common_charts_proto_depIdxs,
		MessageInfos:      file_common_charts_proto_msgTypes,
	}.Build()
	File_common_charts_proto = out.File
	file_common_charts_proto_rawDesc = nil
	file_common_charts_proto_goTypes = nil
	file_common_charts_proto_depIdxs = nil
}
