// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: common/challenge.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChallengeFreezeAction int32

const (
	ChallengeFreezeAction_CHALLENGE_FREEZE_ACTION_UNSPECIFIED ChallengeFreezeAction = 0
	ChallengeFreezeAction_CHALLENGE_FREEZE_ACTION_ENABLE      ChallengeFreezeAction = 1
	ChallengeFreezeAction_CHALLENGE_FREEZE_ACTION_DISABLE     ChallengeFreezeAction = 2
)

// Enum value maps for ChallengeFreezeAction.
var (
	ChallengeFreezeAction_name = map[int32]string{
		0: "CHALLENGE_FREEZE_ACTION_UNSPECIFIED",
		1: "CHALLENGE_FREEZE_ACTION_ENABLE",
		2: "CHALLENGE_FREEZE_ACTION_DISABLE",
	}
	ChallengeFreezeAction_value = map[string]int32{
		"CHALLENGE_FREEZE_ACTION_UNSPECIFIED": 0,
		"CHALLENGE_FREEZE_ACTION_ENABLE":      1,
		"CHALLENGE_FREEZE_ACTION_DISABLE":     2,
	}
)

func (x ChallengeFreezeAction) Enum() *ChallengeFreezeAction {
	p := new(ChallengeFreezeAction)
	*p = x
	return p
}

func (x ChallengeFreezeAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeFreezeAction) Descriptor() protoreflect.EnumDescriptor {
	return file_common_challenge_proto_enumTypes[0].Descriptor()
}

func (ChallengeFreezeAction) Type() protoreflect.EnumType {
	return &file_common_challenge_proto_enumTypes[0]
}

func (x ChallengeFreezeAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeFreezeAction.Descriptor instead.
func (ChallengeFreezeAction) EnumDescriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{0}
}

type EvidenceType int32

const (
	EvidenceType_EVIDENCE_TYPE_UNSPECIFIED EvidenceType = 0
	EvidenceType_TRADE                     EvidenceType = 1
	EvidenceType_ORDER                     EvidenceType = 2
)

// Enum value maps for EvidenceType.
var (
	EvidenceType_name = map[int32]string{
		0: "EVIDENCE_TYPE_UNSPECIFIED",
		1: "TRADE",
		2: "ORDER",
	}
	EvidenceType_value = map[string]int32{
		"EVIDENCE_TYPE_UNSPECIFIED": 0,
		"TRADE":                     1,
		"ORDER":                     2,
	}
)

func (x EvidenceType) Enum() *EvidenceType {
	p := new(EvidenceType)
	*p = x
	return p
}

func (x EvidenceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvidenceType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_challenge_proto_enumTypes[1].Descriptor()
}

func (EvidenceType) Type() protoreflect.EnumType {
	return &file_common_challenge_proto_enumTypes[1]
}

func (x EvidenceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvidenceType.Descriptor instead.
func (EvidenceType) EnumDescriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{1}
}

// ChallengeFormMetaRequest message is used to request information about the form fields required to submit a challenge for a specific asset and evidence type.
type ChallengeFormMetaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId      string       `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`                                            //the ID of the asset for which to request form information
	EvidenceType EvidenceType `protobuf:"varint,2,opt,name=evidence_type,json=evidenceType,proto3,enum=titanium.EvidenceType" json:"evidence_type,omitempty"` //the type of evidence required to submit a challenge
	SubmissionId string       `protobuf:"bytes,3,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`                             //ID of the submission
	TraceName    string       `protobuf:"bytes,4,opt,name=trace_name,json=traceName,proto3" json:"trace_name,omitempty"`                                      //the name of the trace
}

func (x *ChallengeFormMetaRequest) Reset() {
	*x = ChallengeFormMetaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeFormMetaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeFormMetaRequest) ProtoMessage() {}

func (x *ChallengeFormMetaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeFormMetaRequest.ProtoReflect.Descriptor instead.
func (*ChallengeFormMetaRequest) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{0}
}

func (x *ChallengeFormMetaRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ChallengeFormMetaRequest) GetEvidenceType() EvidenceType {
	if x != nil {
		return x.EvidenceType
	}
	return EvidenceType_EVIDENCE_TYPE_UNSPECIFIED
}

func (x *ChallengeFormMetaRequest) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

func (x *ChallengeFormMetaRequest) GetTraceName() string {
	if x != nil {
		return x.TraceName
	}
	return ""
}

// ChallengeFormMetaResponse message is the response to a ChallengeFormMetaRequest. It contains a response field: ChallengeFormMetaResponseData or an Error.
type ChallengeFormMetaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ChallengeFormMetaResponse_Data
	//	*ChallengeFormMetaResponse_Error
	Response isChallengeFormMetaResponse_Response `protobuf_oneof:"response"`
}

func (x *ChallengeFormMetaResponse) Reset() {
	*x = ChallengeFormMetaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeFormMetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeFormMetaResponse) ProtoMessage() {}

func (x *ChallengeFormMetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeFormMetaResponse.ProtoReflect.Descriptor instead.
func (*ChallengeFormMetaResponse) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{1}
}

func (m *ChallengeFormMetaResponse) GetResponse() isChallengeFormMetaResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ChallengeFormMetaResponse) GetData() *ChallengeFormMetaResponseData {
	if x, ok := x.GetResponse().(*ChallengeFormMetaResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *ChallengeFormMetaResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*ChallengeFormMetaResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isChallengeFormMetaResponse_Response interface {
	isChallengeFormMetaResponse_Response()
}

type ChallengeFormMetaResponse_Data struct {
	Data *ChallengeFormMetaResponseData `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type ChallengeFormMetaResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*ChallengeFormMetaResponse_Data) isChallengeFormMetaResponse_Response() {}

func (*ChallengeFormMetaResponse_Error) isChallengeFormMetaResponse_Response() {}

// ChallengeFormMetaResponseData object contains information about the form fields required to submit a challenge.
type ChallengeFormMetaResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows        []*ChallengeFormGeneralRow  `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`                                    //a list of fields required to submit a challenge
	OneOfFields []*ChallengeFormOneOfFields `protobuf:"bytes,2,rep,name=one_of_fields,json=oneOfFields,proto3" json:"one_of_fields,omitempty"` //a list of fields that are mutually exclusive
}

func (x *ChallengeFormMetaResponseData) Reset() {
	*x = ChallengeFormMetaResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeFormMetaResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeFormMetaResponseData) ProtoMessage() {}

func (x *ChallengeFormMetaResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeFormMetaResponseData.ProtoReflect.Descriptor instead.
func (*ChallengeFormMetaResponseData) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{2}
}

func (x *ChallengeFormMetaResponseData) GetRows() []*ChallengeFormGeneralRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *ChallengeFormMetaResponseData) GetOneOfFields() []*ChallengeFormOneOfFields {
	if x != nil {
		return x.OneOfFields
	}
	return nil
}

// ChallengeFormOneOfFields message is used to represent a set of fields that are mutually exclusive.
type ChallengeFormOneOfFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"` // a list of field names
}

func (x *ChallengeFormOneOfFields) Reset() {
	*x = ChallengeFormOneOfFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeFormOneOfFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeFormOneOfFields) ProtoMessage() {}

func (x *ChallengeFormOneOfFields) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeFormOneOfFields.ProtoReflect.Descriptor instead.
func (*ChallengeFormOneOfFields) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{3}
}

func (x *ChallengeFormOneOfFields) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// ChallengeFormGeneralRow message is used to represent a row of fields required to submit a challenge.
type ChallengeFormGeneralRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field     string                            `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`                          //the name of the field
	Tooltip   string                            `protobuf:"bytes,2,opt,name=tooltip,proto3" json:"tooltip,omitempty"`                      // a tooltip for the field
	Type      string                            `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                            // the type of the field (e.g. "string", "double", etc.)
	Precision *ChallengeFormGeneralRowPrecision `protobuf:"bytes,4,opt,name=precision,proto3" json:"precision,omitempty"`                  //the precision required for a field of type "double"
	Max       *ChallengeFormGeneralRowMax       `protobuf:"bytes,5,opt,name=max,proto3" json:"max,omitempty"`                              //the maximum value allowed for a field of type "double"
	Min       *ChallengeFormGeneralRowMin       `protobuf:"bytes,6,opt,name=min,proto3" json:"min,omitempty"`                              // the minimum value allowed for a field of type "double"
	Regex     string                            `protobuf:"bytes,7,opt,name=regex,proto3" json:"regex,omitempty"`                          //a regular expression used to validate the field's value
	MaxLength *ChallengeFormGeneralRowMaxLength `protobuf:"bytes,8,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"` //the maximum length allowed for a field of type "string"
	MinLength *ChallengeFormGeneralRowMinLength `protobuf:"bytes,9,opt,name=min_length,json=minLength,proto3" json:"min_length,omitempty"` //the minimum length allowed for a field of type "string"
	Value     *structpb.Value                   `protobuf:"bytes,10,opt,name=value,proto3" json:"value,omitempty"`                         //a value for the field
}

func (x *ChallengeFormGeneralRow) Reset() {
	*x = ChallengeFormGeneralRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeFormGeneralRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeFormGeneralRow) ProtoMessage() {}

func (x *ChallengeFormGeneralRow) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeFormGeneralRow.ProtoReflect.Descriptor instead.
func (*ChallengeFormGeneralRow) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{4}
}

func (x *ChallengeFormGeneralRow) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *ChallengeFormGeneralRow) GetTooltip() string {
	if x != nil {
		return x.Tooltip
	}
	return ""
}

func (x *ChallengeFormGeneralRow) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChallengeFormGeneralRow) GetPrecision() *ChallengeFormGeneralRowPrecision {
	if x != nil {
		return x.Precision
	}
	return nil
}

func (x *ChallengeFormGeneralRow) GetMax() *ChallengeFormGeneralRowMax {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *ChallengeFormGeneralRow) GetMin() *ChallengeFormGeneralRowMin {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *ChallengeFormGeneralRow) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

func (x *ChallengeFormGeneralRow) GetMaxLength() *ChallengeFormGeneralRowMaxLength {
	if x != nil {
		return x.MaxLength
	}
	return nil
}

func (x *ChallengeFormGeneralRow) GetMinLength() *ChallengeFormGeneralRowMinLength {
	if x != nil {
		return x.MinLength
	}
	return nil
}

func (x *ChallengeFormGeneralRow) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type ChallengeFormGeneralRowPrecision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ChallengeFormGeneralRowPrecision) Reset() {
	*x = ChallengeFormGeneralRowPrecision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeFormGeneralRowPrecision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeFormGeneralRowPrecision) ProtoMessage() {}

func (x *ChallengeFormGeneralRowPrecision) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeFormGeneralRowPrecision.ProtoReflect.Descriptor instead.
func (*ChallengeFormGeneralRowPrecision) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{5}
}

func (x *ChallengeFormGeneralRowPrecision) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ChallengeFormGeneralRowMax struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ChallengeFormGeneralRowMax) Reset() {
	*x = ChallengeFormGeneralRowMax{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeFormGeneralRowMax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeFormGeneralRowMax) ProtoMessage() {}

func (x *ChallengeFormGeneralRowMax) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeFormGeneralRowMax.ProtoReflect.Descriptor instead.
func (*ChallengeFormGeneralRowMax) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{6}
}

func (x *ChallengeFormGeneralRowMax) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ChallengeFormGeneralRowMin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ChallengeFormGeneralRowMin) Reset() {
	*x = ChallengeFormGeneralRowMin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeFormGeneralRowMin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeFormGeneralRowMin) ProtoMessage() {}

func (x *ChallengeFormGeneralRowMin) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeFormGeneralRowMin.ProtoReflect.Descriptor instead.
func (*ChallengeFormGeneralRowMin) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{7}
}

func (x *ChallengeFormGeneralRowMin) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ChallengeFormGeneralRowMaxLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ChallengeFormGeneralRowMaxLength) Reset() {
	*x = ChallengeFormGeneralRowMaxLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeFormGeneralRowMaxLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeFormGeneralRowMaxLength) ProtoMessage() {}

func (x *ChallengeFormGeneralRowMaxLength) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeFormGeneralRowMaxLength.ProtoReflect.Descriptor instead.
func (*ChallengeFormGeneralRowMaxLength) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{8}
}

func (x *ChallengeFormGeneralRowMaxLength) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ChallengeFormGeneralRowMinLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ChallengeFormGeneralRowMinLength) Reset() {
	*x = ChallengeFormGeneralRowMinLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeFormGeneralRowMinLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeFormGeneralRowMinLength) ProtoMessage() {}

func (x *ChallengeFormGeneralRowMinLength) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeFormGeneralRowMinLength.ProtoReflect.Descriptor instead.
func (*ChallengeFormGeneralRowMinLength) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{9}
}

func (x *ChallengeFormGeneralRowMinLength) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// ChallengeCreateRequest message is used to create a new challenge.(Initiate new challenge process)
type ChallengeCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId       string        `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`                                            //the ID of the asset to be challenged
	EvidenceType  EvidenceType  `protobuf:"varint,2,opt,name=evidence_type,json=evidenceType,proto3,enum=titanium.EvidenceType" json:"evidence_type,omitempty"` //the type of evidence required to submit a challenge
	SubmittedDate string        `protobuf:"bytes,3,opt,name=submitted_date,json=submittedDate,proto3" json:"submitted_date,omitempty"`
	SubmittedId   string        `protobuf:"bytes,4,opt,name=submitted_id,json=submittedId,proto3" json:"submitted_id,omitempty"`       // ID of the submission
	SubmittedUrl  string        `protobuf:"bytes,5,opt,name=submitted_url,json=submittedUrl,proto3" json:"submitted_url,omitempty"`    //the URL for the submission
	Date          string        `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`                                        // the date the challenge was initiated
	Time          string        `protobuf:"bytes,7,opt,name=time,proto3" json:"time,omitempty"`                                        //the time the challenge was initiated
	GeneralFields []string      `protobuf:"bytes,8,rep,name=general_fields,json=generalFields,proto3" json:"general_fields,omitempty"` //general fields required to submit a challenge
	Note          string        `protobuf:"bytes,9,opt,name=note,proto3" json:"note,omitempty"`                                        //a note to accompany the challenge
	Attachments   []*Attachment `protobuf:"bytes,10,rep,name=attachments,proto3" json:"attachments,omitempty"`                         //attachments related to the challenge
	TraceName     string        `protobuf:"bytes,11,opt,name=trace_name,json=traceName,proto3" json:"trace_name,omitempty"`            //the name of the trace
}

func (x *ChallengeCreateRequest) Reset() {
	*x = ChallengeCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeCreateRequest) ProtoMessage() {}

func (x *ChallengeCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeCreateRequest.ProtoReflect.Descriptor instead.
func (*ChallengeCreateRequest) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{10}
}

func (x *ChallengeCreateRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ChallengeCreateRequest) GetEvidenceType() EvidenceType {
	if x != nil {
		return x.EvidenceType
	}
	return EvidenceType_EVIDENCE_TYPE_UNSPECIFIED
}

func (x *ChallengeCreateRequest) GetSubmittedDate() string {
	if x != nil {
		return x.SubmittedDate
	}
	return ""
}

func (x *ChallengeCreateRequest) GetSubmittedId() string {
	if x != nil {
		return x.SubmittedId
	}
	return ""
}

func (x *ChallengeCreateRequest) GetSubmittedUrl() string {
	if x != nil {
		return x.SubmittedUrl
	}
	return ""
}

func (x *ChallengeCreateRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ChallengeCreateRequest) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *ChallengeCreateRequest) GetGeneralFields() []string {
	if x != nil {
		return x.GeneralFields
	}
	return nil
}

func (x *ChallengeCreateRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *ChallengeCreateRequest) GetAttachments() []*Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *ChallengeCreateRequest) GetTraceName() string {
	if x != nil {
		return x.TraceName
	}
	return ""
}

// ChallengeCreateResponse message is the response to a ChallengeCreateRequest.
type ChallengeCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ChallengeCreateResponse_Data
	//	*ChallengeCreateResponse_Error
	Response isChallengeCreateResponse_Response `protobuf_oneof:"response"`
}

func (x *ChallengeCreateResponse) Reset() {
	*x = ChallengeCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeCreateResponse) ProtoMessage() {}

func (x *ChallengeCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeCreateResponse.ProtoReflect.Descriptor instead.
func (*ChallengeCreateResponse) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{11}
}

func (m *ChallengeCreateResponse) GetResponse() isChallengeCreateResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ChallengeCreateResponse) GetData() *ChallengeCreateResponseData {
	if x, ok := x.GetResponse().(*ChallengeCreateResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *ChallengeCreateResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*ChallengeCreateResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isChallengeCreateResponse_Response interface {
	isChallengeCreateResponse_Response()
}

type ChallengeCreateResponse_Data struct {
	Data *ChallengeCreateResponseData `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type ChallengeCreateResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*ChallengeCreateResponse_Data) isChallengeCreateResponse_Response() {}

func (*ChallengeCreateResponse_Error) isChallengeCreateResponse_Response() {}

type ChallengeCreateResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketId string `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"` // the ID of the challenge ticket
}

func (x *ChallengeCreateResponseData) Reset() {
	*x = ChallengeCreateResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeCreateResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeCreateResponseData) ProtoMessage() {}

func (x *ChallengeCreateResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeCreateResponseData.ProtoReflect.Descriptor instead.
func (*ChallengeCreateResponseData) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{12}
}

func (x *ChallengeCreateResponseData) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

// ChallengeFreezeStatusRequest message is used to request the current freeze status of the challenges.
type ChallengeFreezeStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsensusRunId string `protobuf:"bytes,1,opt,name=consensus_run_id,json=consensusRunId,proto3" json:"consensus_run_id,omitempty"` //the timestamp of the consensus run
}

func (x *ChallengeFreezeStatusRequest) Reset() {
	*x = ChallengeFreezeStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeFreezeStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeFreezeStatusRequest) ProtoMessage() {}

func (x *ChallengeFreezeStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeFreezeStatusRequest.ProtoReflect.Descriptor instead.
func (*ChallengeFreezeStatusRequest) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{13}
}

func (x *ChallengeFreezeStatusRequest) GetConsensusRunId() string {
	if x != nil {
		return x.ConsensusRunId
	}
	return ""
}

// ChallengeFreezeActionRequest message is used to change the freeze status of the challenges.
type ChallengeFreezeActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsensusRunId string                `protobuf:"bytes,1,opt,name=consensus_run_id,json=consensusRunId,proto3" json:"consensus_run_id,omitempty"` //the timestamp of the consensus run
	Action         ChallengeFreezeAction `protobuf:"varint,2,opt,name=action,proto3,enum=titanium.ChallengeFreezeAction" json:"action,omitempty"`    //the action to take (enable or disable freezing)
}

func (x *ChallengeFreezeActionRequest) Reset() {
	*x = ChallengeFreezeActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeFreezeActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeFreezeActionRequest) ProtoMessage() {}

func (x *ChallengeFreezeActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeFreezeActionRequest.ProtoReflect.Descriptor instead.
func (*ChallengeFreezeActionRequest) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{14}
}

func (x *ChallengeFreezeActionRequest) GetConsensusRunId() string {
	if x != nil {
		return x.ConsensusRunId
	}
	return ""
}

func (x *ChallengeFreezeActionRequest) GetAction() ChallengeFreezeAction {
	if x != nil {
		return x.Action
	}
	return ChallengeFreezeAction_CHALLENGE_FREEZE_ACTION_UNSPECIFIED
}

// ChallengeActiveRequest is a request to retrieve a list of active challenges for a specific asset
type ChallengeActiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId   string   `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Filter    string   `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`   //Filter criteria to retrieve the challenges.
	OrderBy   *OrderBy `protobuf:"bytes,3,opt,name=orderBy,proto3" json:"orderBy,omitempty"` // Sorting criteria to order the challenges.
	Limit     *Limit   `protobuf:"bytes,4,opt,name=limit,proto3" json:"limit,omitempty"`     //Number of challenges to retrieve.
	Offset    int32    `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`  //: Starting position of the challenges to retrieve.
	TraceName string   `protobuf:"bytes,6,opt,name=trace_name,json=traceName,proto3" json:"trace_name,omitempty"`
}

func (x *ChallengeActiveRequest) Reset() {
	*x = ChallengeActiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeActiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeActiveRequest) ProtoMessage() {}

func (x *ChallengeActiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeActiveRequest.ProtoReflect.Descriptor instead.
func (*ChallengeActiveRequest) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{15}
}

func (x *ChallengeActiveRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ChallengeActiveRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ChallengeActiveRequest) GetOrderBy() *OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *ChallengeActiveRequest) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ChallengeActiveRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ChallengeActiveRequest) GetTraceName() string {
	if x != nil {
		return x.TraceName
	}
	return ""
}

// ChallengeActiveResponse message is the response to a ChallengeActiveRequest.
type ChallengeActiveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ChallengeActiveResponse_Data
	//	*ChallengeActiveResponse_Error
	Response isChallengeActiveResponse_Response `protobuf_oneof:"response"`
}

func (x *ChallengeActiveResponse) Reset() {
	*x = ChallengeActiveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeActiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeActiveResponse) ProtoMessage() {}

func (x *ChallengeActiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeActiveResponse.ProtoReflect.Descriptor instead.
func (*ChallengeActiveResponse) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{16}
}

func (m *ChallengeActiveResponse) GetResponse() isChallengeActiveResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ChallengeActiveResponse) GetData() *ChallengeActiveResponseData {
	if x, ok := x.GetResponse().(*ChallengeActiveResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *ChallengeActiveResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*ChallengeActiveResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isChallengeActiveResponse_Response interface {
	isChallengeActiveResponse_Response()
}

type ChallengeActiveResponse_Data struct {
	Data *ChallengeActiveResponseData `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type ChallengeActiveResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*ChallengeActiveResponse_Data) isChallengeActiveResponse_Response() {}

func (*ChallengeActiveResponse_Error) isChallengeActiveResponse_Response() {}

// ChallengeActiveResponseData message is used to return a list of active challenges for a specific asset.
type ChallengeActiveResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns   []*ColumnInfo                 `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	Rows      []*ChallengeConsensusMetadata `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
	TotalRows int32                         `protobuf:"varint,3,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"`
}

func (x *ChallengeActiveResponseData) Reset() {
	*x = ChallengeActiveResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeActiveResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeActiveResponseData) ProtoMessage() {}

func (x *ChallengeActiveResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeActiveResponseData.ProtoReflect.Descriptor instead.
func (*ChallengeActiveResponseData) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{17}
}

func (x *ChallengeActiveResponseData) GetColumns() []*ColumnInfo {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ChallengeActiveResponseData) GetRows() []*ChallengeConsensusMetadata {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *ChallengeActiveResponseData) GetTotalRows() int32 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

// ChallengeConsensusMetadata message is used to contain information about a challenge. It contains a repeated field called challenges, which holds a list of ValuesRow objects that represent the data of the challenges.
type ChallengeConsensusMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenges []*ValuesRow `protobuf:"bytes,3,rep,name=challenges,proto3" json:"challenges,omitempty"`
}

func (x *ChallengeConsensusMetadata) Reset() {
	*x = ChallengeConsensusMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeConsensusMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeConsensusMetadata) ProtoMessage() {}

func (x *ChallengeConsensusMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeConsensusMetadata.ProtoReflect.Descriptor instead.
func (*ChallengeConsensusMetadata) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{18}
}

func (x *ChallengeConsensusMetadata) GetChallenges() []*ValuesRow {
	if x != nil {
		return x.Challenges
	}
	return nil
}

// ChallengeHistoryResponse message is the response to a request for the history of challenges.
type ChallengeHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ChallengeHistoryResponse_Data
	//	*ChallengeHistoryResponse_Error
	Response isChallengeHistoryResponse_Response `protobuf_oneof:"response"`
}

func (x *ChallengeHistoryResponse) Reset() {
	*x = ChallengeHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeHistoryResponse) ProtoMessage() {}

func (x *ChallengeHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeHistoryResponse.ProtoReflect.Descriptor instead.
func (*ChallengeHistoryResponse) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{19}
}

func (m *ChallengeHistoryResponse) GetResponse() isChallengeHistoryResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ChallengeHistoryResponse) GetData() *ChallengeHistoryResponseData {
	if x, ok := x.GetResponse().(*ChallengeHistoryResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *ChallengeHistoryResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*ChallengeHistoryResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isChallengeHistoryResponse_Response interface {
	isChallengeHistoryResponse_Response()
}

type ChallengeHistoryResponse_Data struct {
	Data *ChallengeHistoryResponseData `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type ChallengeHistoryResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*ChallengeHistoryResponse_Data) isChallengeHistoryResponse_Response() {}

func (*ChallengeHistoryResponse_Error) isChallengeHistoryResponse_Response() {}

// ChallengeHistoryResponseData object contains information about the challenges.
type ChallengeHistoryResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns   []*ColumnInfo `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	Rows      []*ValuesRow  `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
	TotalRows int32         `protobuf:"varint,3,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"`
}

func (x *ChallengeHistoryResponseData) Reset() {
	*x = ChallengeHistoryResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeHistoryResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeHistoryResponseData) ProtoMessage() {}

func (x *ChallengeHistoryResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeHistoryResponseData.ProtoReflect.Descriptor instead.
func (*ChallengeHistoryResponseData) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{20}
}

func (x *ChallengeHistoryResponseData) GetColumns() []*ColumnInfo {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ChallengeHistoryResponseData) GetRows() []*ValuesRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *ChallengeHistoryResponseData) GetTotalRows() int32 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

// ChallengeDecisionRequest message is used to make a decision on a specific challenge. It contains fields such as asset_id, challenge_id and decision.
type ChallengeDecisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId     string   `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	ChallengeId string   `protobuf:"bytes,2,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	Decision    Decision `protobuf:"varint,3,opt,name=decision,proto3,enum=titanium.Decision" json:"decision,omitempty"`
}

func (x *ChallengeDecisionRequest) Reset() {
	*x = ChallengeDecisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeDecisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeDecisionRequest) ProtoMessage() {}

func (x *ChallengeDecisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeDecisionRequest.ProtoReflect.Descriptor instead.
func (*ChallengeDecisionRequest) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{21}
}

func (x *ChallengeDecisionRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ChallengeDecisionRequest) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *ChallengeDecisionRequest) GetDecision() Decision {
	if x != nil {
		return x.Decision
	}
	return Decision_DECISION_UNSPECIFIED
}

// ChallengeHistoryRequest message is used to request the history of challenges for a specific asset.
type ChallengeHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId   string   `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Filter    string   `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	OrderBy   *OrderBy `protobuf:"bytes,3,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	Limit     *Limit   `protobuf:"bytes,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    int32    `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	TraceName string   `protobuf:"bytes,6,opt,name=trace_name,json=traceName,proto3" json:"trace_name,omitempty"`
}

func (x *ChallengeHistoryRequest) Reset() {
	*x = ChallengeHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeHistoryRequest) ProtoMessage() {}

func (x *ChallengeHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeHistoryRequest.ProtoReflect.Descriptor instead.
func (*ChallengeHistoryRequest) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{22}
}

func (x *ChallengeHistoryRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ChallengeHistoryRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ChallengeHistoryRequest) GetOrderBy() *OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *ChallengeHistoryRequest) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ChallengeHistoryRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ChallengeHistoryRequest) GetTraceName() string {
	if x != nil {
		return x.TraceName
	}
	return ""
}

// ChallengeListRequest message is used to request a list of challenges for a specific asset.
type ChallengeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId               string   `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	ConsensusRunTimestamp string   `protobuf:"bytes,2,opt,name=consensus_run_timestamp,json=consensusRunTimestamp,proto3" json:"consensus_run_timestamp,omitempty"`
	SnapTime              string   `protobuf:"bytes,3,opt,name=snap_time,json=snapTime,proto3" json:"snap_time,omitempty"`
	Date                  string   `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	Filter                string   `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	OrderBy               *OrderBy `protobuf:"bytes,6,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	Limit                 *Limit   `protobuf:"bytes,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset                int32    `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
	TraceName             string   `protobuf:"bytes,9,opt,name=trace_name,json=traceName,proto3" json:"trace_name,omitempty"`
}

func (x *ChallengeListRequest) Reset() {
	*x = ChallengeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeListRequest) ProtoMessage() {}

func (x *ChallengeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeListRequest.ProtoReflect.Descriptor instead.
func (*ChallengeListRequest) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{23}
}

func (x *ChallengeListRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ChallengeListRequest) GetConsensusRunTimestamp() string {
	if x != nil {
		return x.ConsensusRunTimestamp
	}
	return ""
}

func (x *ChallengeListRequest) GetSnapTime() string {
	if x != nil {
		return x.SnapTime
	}
	return ""
}

func (x *ChallengeListRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ChallengeListRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ChallengeListRequest) GetOrderBy() *OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *ChallengeListRequest) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ChallengeListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ChallengeListRequest) GetTraceName() string {
	if x != nil {
		return x.TraceName
	}
	return ""
}

// ChallengeListResponse message is the response to a ChallengeListRequest.
type ChallengeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ChallengeListResponse_Data
	//	*ChallengeListResponse_Error
	Response isChallengeListResponse_Response `protobuf_oneof:"response"`
}

func (x *ChallengeListResponse) Reset() {
	*x = ChallengeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeListResponse) ProtoMessage() {}

func (x *ChallengeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeListResponse.ProtoReflect.Descriptor instead.
func (*ChallengeListResponse) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{24}
}

func (m *ChallengeListResponse) GetResponse() isChallengeListResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ChallengeListResponse) GetData() *ChallengeListResponseData {
	if x, ok := x.GetResponse().(*ChallengeListResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *ChallengeListResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*ChallengeListResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isChallengeListResponse_Response interface {
	isChallengeListResponse_Response()
}

type ChallengeListResponse_Data struct {
	Data *ChallengeListResponseData `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type ChallengeListResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*ChallengeListResponse_Data) isChallengeListResponse_Response() {}

func (*ChallengeListResponse_Error) isChallengeListResponse_Response() {}

// ChallengeListResponseData object contains information about the challenges.
type ChallengeListResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns    []*ColumnInfo            `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	Challenges []*ChallengeListMetadata `protobuf:"bytes,2,rep,name=challenges,proto3" json:"challenges,omitempty"`
	TotalRows  int32                    `protobuf:"varint,3,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"`
}

func (x *ChallengeListResponseData) Reset() {
	*x = ChallengeListResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeListResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeListResponseData) ProtoMessage() {}

func (x *ChallengeListResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeListResponseData.ProtoReflect.Descriptor instead.
func (*ChallengeListResponseData) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{25}
}

func (x *ChallengeListResponseData) GetColumns() []*ColumnInfo {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ChallengeListResponseData) GetChallenges() []*ChallengeListMetadata {
	if x != nil {
		return x.Challenges
	}
	return nil
}

func (x *ChallengeListResponseData) GetTotalRows() int32 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

type ChallengeListMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*structpb.Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ChallengeListMetadata) Reset() {
	*x = ChallengeListMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeListMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeListMetadata) ProtoMessage() {}

func (x *ChallengeListMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeListMetadata.ProtoReflect.Descriptor instead.
func (*ChallengeListMetadata) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{26}
}

func (x *ChallengeListMetadata) GetValues() []*structpb.Value {
	if x != nil {
		return x.Values
	}
	return nil
}

// GetAttachmentUploadUrlRequest message is used to request a URL for uploading an attachment for a specific challenge.
type GetAttachmentUploadUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId     string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	SubmittedId string `protobuf:"bytes,2,opt,name=submitted_id,json=submittedId,proto3" json:"submitted_id,omitempty"`
	FileName    string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *GetAttachmentUploadUrlRequest) Reset() {
	*x = GetAttachmentUploadUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttachmentUploadUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttachmentUploadUrlRequest) ProtoMessage() {}

func (x *GetAttachmentUploadUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttachmentUploadUrlRequest.ProtoReflect.Descriptor instead.
func (*GetAttachmentUploadUrlRequest) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{27}
}

func (x *GetAttachmentUploadUrlRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *GetAttachmentUploadUrlRequest) GetSubmittedId() string {
	if x != nil {
		return x.SubmittedId
	}
	return ""
}

func (x *GetAttachmentUploadUrlRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

// GetAttachmentUploadUrlResponse message is the response to a GetAttachmentUploadUrlRequest
type GetAttachmentUploadUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*GetAttachmentUploadUrlResponse_Data
	//	*GetAttachmentUploadUrlResponse_Error
	Response isGetAttachmentUploadUrlResponse_Response `protobuf_oneof:"response"`
}

func (x *GetAttachmentUploadUrlResponse) Reset() {
	*x = GetAttachmentUploadUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttachmentUploadUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttachmentUploadUrlResponse) ProtoMessage() {}

func (x *GetAttachmentUploadUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttachmentUploadUrlResponse.ProtoReflect.Descriptor instead.
func (*GetAttachmentUploadUrlResponse) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{28}
}

func (m *GetAttachmentUploadUrlResponse) GetResponse() isGetAttachmentUploadUrlResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetAttachmentUploadUrlResponse) GetData() *GetAttachmentUploadUrlResponse_AttachmentUploadUrl {
	if x, ok := x.GetResponse().(*GetAttachmentUploadUrlResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *GetAttachmentUploadUrlResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*GetAttachmentUploadUrlResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isGetAttachmentUploadUrlResponse_Response interface {
	isGetAttachmentUploadUrlResponse_Response()
}

type GetAttachmentUploadUrlResponse_Data struct {
	Data *GetAttachmentUploadUrlResponse_AttachmentUploadUrl `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type GetAttachmentUploadUrlResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*GetAttachmentUploadUrlResponse_Data) isGetAttachmentUploadUrlResponse_Response() {}

func (*GetAttachmentUploadUrlResponse_Error) isGetAttachmentUploadUrlResponse_Response() {}

// Attachment is a message represents attachment to challenge.
type Attachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AttachmentId string `protobuf:"bytes,2,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
	Url          string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Attachment) Reset() {
	*x = Attachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attachment) ProtoMessage() {}

func (x *Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attachment.ProtoReflect.Descriptor instead.
func (*Attachment) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{29}
}

func (x *Attachment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Attachment) GetAttachmentId() string {
	if x != nil {
		return x.AttachmentId
	}
	return ""
}

func (x *Attachment) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type GetChallengeDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId        string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	SubmittedDate  string `protobuf:"bytes,2,opt,name=submitted_date,json=submittedDate,proto3" json:"submitted_date,omitempty"`
	SubmissionId   string `protobuf:"bytes,3,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
	TraceName      string `protobuf:"bytes,4,opt,name=trace_name,json=traceName,proto3" json:"trace_name,omitempty"`
	ConsensusRunId string `protobuf:"bytes,5,opt,name=consensus_run_id,json=consensusRunId,proto3" json:"consensus_run_id,omitempty"`
}

func (x *GetChallengeDetailsRequest) Reset() {
	*x = GetChallengeDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChallengeDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengeDetailsRequest) ProtoMessage() {}

func (x *GetChallengeDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengeDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetChallengeDetailsRequest) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{30}
}

func (x *GetChallengeDetailsRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *GetChallengeDetailsRequest) GetSubmittedDate() string {
	if x != nil {
		return x.SubmittedDate
	}
	return ""
}

func (x *GetChallengeDetailsRequest) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

func (x *GetChallengeDetailsRequest) GetTraceName() string {
	if x != nil {
		return x.TraceName
	}
	return ""
}

func (x *GetChallengeDetailsRequest) GetConsensusRunId() string {
	if x != nil {
		return x.ConsensusRunId
	}
	return ""
}

type GetChallengeDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*GetChallengeDetailsResponse_Data
	//	*GetChallengeDetailsResponse_Error
	Response isGetChallengeDetailsResponse_Response `protobuf_oneof:"response"`
}

func (x *GetChallengeDetailsResponse) Reset() {
	*x = GetChallengeDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChallengeDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengeDetailsResponse) ProtoMessage() {}

func (x *GetChallengeDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengeDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetChallengeDetailsResponse) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{31}
}

func (m *GetChallengeDetailsResponse) GetResponse() isGetChallengeDetailsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetChallengeDetailsResponse) GetData() *GetChallengeDetailsResponse_Result {
	if x, ok := x.GetResponse().(*GetChallengeDetailsResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *GetChallengeDetailsResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*GetChallengeDetailsResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isGetChallengeDetailsResponse_Response interface {
	isGetChallengeDetailsResponse_Response()
}

type GetChallengeDetailsResponse_Data struct {
	Data *GetChallengeDetailsResponse_Result `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type GetChallengeDetailsResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*GetChallengeDetailsResponse_Data) isGetChallengeDetailsResponse_Response() {}

func (*GetChallengeDetailsResponse_Error) isGetChallengeDetailsResponse_Response() {}

type GetAttachmentUploadUrlResponse_AttachmentUploadUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadUrl    string `protobuf:"bytes,1,opt,name=upload_url,json=uploadUrl,proto3" json:"upload_url,omitempty"`          //string that represents pre-signed url to upload attachment
	AttachmentId string `protobuf:"bytes,2,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"` // string that represents ID of attachment
	FileName     string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *GetAttachmentUploadUrlResponse_AttachmentUploadUrl) Reset() {
	*x = GetAttachmentUploadUrlResponse_AttachmentUploadUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttachmentUploadUrlResponse_AttachmentUploadUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttachmentUploadUrlResponse_AttachmentUploadUrl) ProtoMessage() {}

func (x *GetAttachmentUploadUrlResponse_AttachmentUploadUrl) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttachmentUploadUrlResponse_AttachmentUploadUrl.ProtoReflect.Descriptor instead.
func (*GetAttachmentUploadUrlResponse_AttachmentUploadUrl) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{28, 0}
}

func (x *GetAttachmentUploadUrlResponse_AttachmentUploadUrl) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

func (x *GetAttachmentUploadUrlResponse_AttachmentUploadUrl) GetAttachmentId() string {
	if x != nil {
		return x.AttachmentId
	}
	return ""
}

func (x *GetAttachmentUploadUrlResponse_AttachmentUploadUrl) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type GetChallengeDetailsResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeData       map[string]string                                `protobuf:"bytes,1,rep,name=challenge_data,json=challengeData,proto3" json:"challenge_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CommonChallengeData *GetChallengeDetailsResponse_CommonChallengeData `protobuf:"bytes,2,opt,name=common_challenge_data,json=commonChallengeData,proto3" json:"common_challenge_data,omitempty"`
	Attachments         []*Attachment                                    `protobuf:"bytes,3,rep,name=attachments,proto3" json:"attachments,omitempty"`
	TotalNumber         map[string]int32                                 `protobuf:"bytes,4,rep,name=totalNumber,proto3" json:"totalNumber,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetChallengeDetailsResponse_Result) Reset() {
	*x = GetChallengeDetailsResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChallengeDetailsResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengeDetailsResponse_Result) ProtoMessage() {}

func (x *GetChallengeDetailsResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengeDetailsResponse_Result.ProtoReflect.Descriptor instead.
func (*GetChallengeDetailsResponse_Result) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{31, 0}
}

func (x *GetChallengeDetailsResponse_Result) GetChallengeData() map[string]string {
	if x != nil {
		return x.ChallengeData
	}
	return nil
}

func (x *GetChallengeDetailsResponse_Result) GetCommonChallengeData() *GetChallengeDetailsResponse_CommonChallengeData {
	if x != nil {
		return x.CommonChallengeData
	}
	return nil
}

func (x *GetChallengeDetailsResponse_Result) GetAttachments() []*Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *GetChallengeDetailsResponse_Result) GetTotalNumber() map[string]int32 {
	if x != nil {
		return x.TotalNumber
	}
	return nil
}

type GetChallengeDetailsResponse_CommonChallengeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date         string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Time         string `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	EvidenceType string `protobuf:"bytes,3,opt,name=evidence_type,json=evidenceType,proto3" json:"evidence_type,omitempty"`
}

func (x *GetChallengeDetailsResponse_CommonChallengeData) Reset() {
	*x = GetChallengeDetailsResponse_CommonChallengeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_challenge_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChallengeDetailsResponse_CommonChallengeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChallengeDetailsResponse_CommonChallengeData) ProtoMessage() {}

func (x *GetChallengeDetailsResponse_CommonChallengeData) ProtoReflect() protoreflect.Message {
	mi := &file_common_challenge_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChallengeDetailsResponse_CommonChallengeData.ProtoReflect.Descriptor instead.
func (*GetChallengeDetailsResponse_CommonChallengeData) Descriptor() ([]byte, []int) {
	return file_common_challenge_proto_rawDescGZIP(), []int{31, 1}
}

func (x *GetChallengeDetailsResponse_CommonChallengeData) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *GetChallengeDetailsResponse_CommonChallengeData) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *GetChallengeDetailsResponse_CommonChallengeData) GetEvidenceType() string {
	if x != nil {
		return x.EvidenceType
	}
	return ""
}

var File_common_challenge_proto protoreflect.FileDescriptor

var file_common_challenge_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69,
	0x75, 0x6d, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x01, 0x0a, 0x18,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0d, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x69, 0x74,
	0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75,
	0x6d, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12,
	0x46, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75,
	0x6d, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x4f,
	0x6e, 0x65, 0x4f, 0x66, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x4f,
	0x66, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x30, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xf1, 0x03, 0x0a, 0x17, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x52, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f,
	0x6f, 0x6c, 0x74, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x70, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74,
	0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x50,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x52, 0x6f, 0x77, 0x4d, 0x61, 0x78, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x36, 0x0a, 0x03, 0x6d,
	0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e,
	0x69, 0x75, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x4d, 0x69, 0x6e, 0x52, 0x03,
	0x6d, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x12, 0x49, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x6f, 0x77,
	0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e,
	0x69, 0x75, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x4d, 0x69, 0x6e, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x38, 0x0a,
	0x20, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x32, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52,
	0x6f, 0x77, 0x4d, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x32, 0x0a, 0x1a, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x4d, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x38, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x38, 0x0a, 0x20, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x52, 0x6f, 0x77, 0x4d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x99, 0x03, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0d, 0x65, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x8b, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x69, 0x74, 0x61,
	0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69,
	0x75, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x0a,
	0x1b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x1c, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x75,
	0x6e, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd6, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75,
	0x6d, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x8b, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x69, 0x74,
	0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e,
	0x69, 0x75, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa6,
	0x01, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e,
	0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x38,
	0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74,
	0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x22, 0x51, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x74, 0x61,
	0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x6f, 0x77, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x18, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d,
	0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x1c, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74,
	0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x74, 0x61,
	0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x6f, 0x77, 0x52, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x6f, 0x77, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd7,
	0x01, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61,
	0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbd, 0x02, 0x0a, 0x14, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61,
	0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74,
	0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73,
	0x22, 0x47, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x7a, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75,
	0x6d, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69,
	0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x76, 0x0a, 0x13, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x0a, 0x0a, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x22, 0xcc, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x75, 0x6e, 0x49,
	0x64, 0x22, 0xf7, 0x05, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xfa,
	0x03, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x66, 0x0a, 0x0e, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x6d, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x13, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x36, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d,
	0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x13, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x89, 0x01, 0x0a, 0x15,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e,
	0x47, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1e, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45,
	0x5a, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f,
	0x46, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x43, 0x0a, 0x0c, 0x45, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x56, 0x49, 0x44, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x02, 0x42, 0x77, 0x0a, 0x20,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x61, 0x2e, 0x74, 0x69, 0x74,
	0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x42, 0x1b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x01, 0x5a,
	0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x65, 0x72,
	0x6e, 0x6f, 0x76, 0x61, 0x2f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_challenge_proto_rawDescOnce sync.Once
	file_common_challenge_proto_rawDescData = file_common_challenge_proto_rawDesc
)

func file_common_challenge_proto_rawDescGZIP() []byte {
	file_common_challenge_proto_rawDescOnce.Do(func() {
		file_common_challenge_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_challenge_proto_rawDescData)
	})
	return file_common_challenge_proto_rawDescData
}

var file_common_challenge_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_common_challenge_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_common_challenge_proto_goTypes = []interface{}{
	(ChallengeFreezeAction)(0),                                 // 0: titanium.ChallengeFreezeAction
	(EvidenceType)(0),                                          // 1: titanium.EvidenceType
	(*ChallengeFormMetaRequest)(nil),                           // 2: titanium.ChallengeFormMetaRequest
	(*ChallengeFormMetaResponse)(nil),                          // 3: titanium.ChallengeFormMetaResponse
	(*ChallengeFormMetaResponseData)(nil),                      // 4: titanium.ChallengeFormMetaResponseData
	(*ChallengeFormOneOfFields)(nil),                           // 5: titanium.ChallengeFormOneOfFields
	(*ChallengeFormGeneralRow)(nil),                            // 6: titanium.ChallengeFormGeneralRow
	(*ChallengeFormGeneralRowPrecision)(nil),                   // 7: titanium.ChallengeFormGeneralRowPrecision
	(*ChallengeFormGeneralRowMax)(nil),                         // 8: titanium.ChallengeFormGeneralRowMax
	(*ChallengeFormGeneralRowMin)(nil),                         // 9: titanium.ChallengeFormGeneralRowMin
	(*ChallengeFormGeneralRowMaxLength)(nil),                   // 10: titanium.ChallengeFormGeneralRowMaxLength
	(*ChallengeFormGeneralRowMinLength)(nil),                   // 11: titanium.ChallengeFormGeneralRowMinLength
	(*ChallengeCreateRequest)(nil),                             // 12: titanium.ChallengeCreateRequest
	(*ChallengeCreateResponse)(nil),                            // 13: titanium.ChallengeCreateResponse
	(*ChallengeCreateResponseData)(nil),                        // 14: titanium.ChallengeCreateResponseData
	(*ChallengeFreezeStatusRequest)(nil),                       // 15: titanium.ChallengeFreezeStatusRequest
	(*ChallengeFreezeActionRequest)(nil),                       // 16: titanium.ChallengeFreezeActionRequest
	(*ChallengeActiveRequest)(nil),                             // 17: titanium.ChallengeActiveRequest
	(*ChallengeActiveResponse)(nil),                            // 18: titanium.ChallengeActiveResponse
	(*ChallengeActiveResponseData)(nil),                        // 19: titanium.ChallengeActiveResponseData
	(*ChallengeConsensusMetadata)(nil),                         // 20: titanium.ChallengeConsensusMetadata
	(*ChallengeHistoryResponse)(nil),                           // 21: titanium.ChallengeHistoryResponse
	(*ChallengeHistoryResponseData)(nil),                       // 22: titanium.ChallengeHistoryResponseData
	(*ChallengeDecisionRequest)(nil),                           // 23: titanium.ChallengeDecisionRequest
	(*ChallengeHistoryRequest)(nil),                            // 24: titanium.ChallengeHistoryRequest
	(*ChallengeListRequest)(nil),                               // 25: titanium.ChallengeListRequest
	(*ChallengeListResponse)(nil),                              // 26: titanium.ChallengeListResponse
	(*ChallengeListResponseData)(nil),                          // 27: titanium.ChallengeListResponseData
	(*ChallengeListMetadata)(nil),                              // 28: titanium.ChallengeListMetadata
	(*GetAttachmentUploadUrlRequest)(nil),                      // 29: titanium.GetAttachmentUploadUrlRequest
	(*GetAttachmentUploadUrlResponse)(nil),                     // 30: titanium.GetAttachmentUploadUrlResponse
	(*Attachment)(nil),                                         // 31: titanium.Attachment
	(*GetChallengeDetailsRequest)(nil),                         // 32: titanium.GetChallengeDetailsRequest
	(*GetChallengeDetailsResponse)(nil),                        // 33: titanium.GetChallengeDetailsResponse
	(*GetAttachmentUploadUrlResponse_AttachmentUploadUrl)(nil), // 34: titanium.GetAttachmentUploadUrlResponse.AttachmentUploadUrl
	(*GetChallengeDetailsResponse_Result)(nil),                 // 35: titanium.GetChallengeDetailsResponse.Result
	(*GetChallengeDetailsResponse_CommonChallengeData)(nil),    // 36: titanium.GetChallengeDetailsResponse.CommonChallengeData
	nil,                    // 37: titanium.GetChallengeDetailsResponse.Result.ChallengeDataEntry
	nil,                    // 38: titanium.GetChallengeDetailsResponse.Result.TotalNumberEntry
	(*Error)(nil),          // 39: titanium.Error
	(*structpb.Value)(nil), // 40: google.protobuf.Value
	(*OrderBy)(nil),        // 41: titanium.OrderBy
	(*Limit)(nil),          // 42: titanium.Limit
	(*ColumnInfo)(nil),     // 43: titanium.ColumnInfo
	(*ValuesRow)(nil),      // 44: titanium.ValuesRow
	(Decision)(0),          // 45: titanium.Decision
}
var file_common_challenge_proto_depIdxs = []int32{
	1,  // 0: titanium.ChallengeFormMetaRequest.evidence_type:type_name -> titanium.EvidenceType
	4,  // 1: titanium.ChallengeFormMetaResponse.data:type_name -> titanium.ChallengeFormMetaResponseData
	39, // 2: titanium.ChallengeFormMetaResponse.error:type_name -> titanium.Error
	6,  // 3: titanium.ChallengeFormMetaResponseData.rows:type_name -> titanium.ChallengeFormGeneralRow
	5,  // 4: titanium.ChallengeFormMetaResponseData.one_of_fields:type_name -> titanium.ChallengeFormOneOfFields
	7,  // 5: titanium.ChallengeFormGeneralRow.precision:type_name -> titanium.ChallengeFormGeneralRowPrecision
	8,  // 6: titanium.ChallengeFormGeneralRow.max:type_name -> titanium.ChallengeFormGeneralRowMax
	9,  // 7: titanium.ChallengeFormGeneralRow.min:type_name -> titanium.ChallengeFormGeneralRowMin
	10, // 8: titanium.ChallengeFormGeneralRow.max_length:type_name -> titanium.ChallengeFormGeneralRowMaxLength
	11, // 9: titanium.ChallengeFormGeneralRow.min_length:type_name -> titanium.ChallengeFormGeneralRowMinLength
	40, // 10: titanium.ChallengeFormGeneralRow.value:type_name -> google.protobuf.Value
	1,  // 11: titanium.ChallengeCreateRequest.evidence_type:type_name -> titanium.EvidenceType
	31, // 12: titanium.ChallengeCreateRequest.attachments:type_name -> titanium.Attachment
	14, // 13: titanium.ChallengeCreateResponse.data:type_name -> titanium.ChallengeCreateResponseData
	39, // 14: titanium.ChallengeCreateResponse.error:type_name -> titanium.Error
	0,  // 15: titanium.ChallengeFreezeActionRequest.action:type_name -> titanium.ChallengeFreezeAction
	41, // 16: titanium.ChallengeActiveRequest.orderBy:type_name -> titanium.OrderBy
	42, // 17: titanium.ChallengeActiveRequest.limit:type_name -> titanium.Limit
	19, // 18: titanium.ChallengeActiveResponse.data:type_name -> titanium.ChallengeActiveResponseData
	39, // 19: titanium.ChallengeActiveResponse.error:type_name -> titanium.Error
	43, // 20: titanium.ChallengeActiveResponseData.columns:type_name -> titanium.ColumnInfo
	20, // 21: titanium.ChallengeActiveResponseData.rows:type_name -> titanium.ChallengeConsensusMetadata
	44, // 22: titanium.ChallengeConsensusMetadata.challenges:type_name -> titanium.ValuesRow
	22, // 23: titanium.ChallengeHistoryResponse.data:type_name -> titanium.ChallengeHistoryResponseData
	39, // 24: titanium.ChallengeHistoryResponse.error:type_name -> titanium.Error
	43, // 25: titanium.ChallengeHistoryResponseData.columns:type_name -> titanium.ColumnInfo
	44, // 26: titanium.ChallengeHistoryResponseData.rows:type_name -> titanium.ValuesRow
	45, // 27: titanium.ChallengeDecisionRequest.decision:type_name -> titanium.Decision
	41, // 28: titanium.ChallengeHistoryRequest.orderBy:type_name -> titanium.OrderBy
	42, // 29: titanium.ChallengeHistoryRequest.limit:type_name -> titanium.Limit
	41, // 30: titanium.ChallengeListRequest.orderBy:type_name -> titanium.OrderBy
	42, // 31: titanium.ChallengeListRequest.limit:type_name -> titanium.Limit
	27, // 32: titanium.ChallengeListResponse.data:type_name -> titanium.ChallengeListResponseData
	39, // 33: titanium.ChallengeListResponse.error:type_name -> titanium.Error
	43, // 34: titanium.ChallengeListResponseData.columns:type_name -> titanium.ColumnInfo
	28, // 35: titanium.ChallengeListResponseData.challenges:type_name -> titanium.ChallengeListMetadata
	40, // 36: titanium.ChallengeListMetadata.values:type_name -> google.protobuf.Value
	34, // 37: titanium.GetAttachmentUploadUrlResponse.data:type_name -> titanium.GetAttachmentUploadUrlResponse.AttachmentUploadUrl
	39, // 38: titanium.GetAttachmentUploadUrlResponse.error:type_name -> titanium.Error
	35, // 39: titanium.GetChallengeDetailsResponse.data:type_name -> titanium.GetChallengeDetailsResponse.Result
	39, // 40: titanium.GetChallengeDetailsResponse.error:type_name -> titanium.Error
	37, // 41: titanium.GetChallengeDetailsResponse.Result.challenge_data:type_name -> titanium.GetChallengeDetailsResponse.Result.ChallengeDataEntry
	36, // 42: titanium.GetChallengeDetailsResponse.Result.common_challenge_data:type_name -> titanium.GetChallengeDetailsResponse.CommonChallengeData
	31, // 43: titanium.GetChallengeDetailsResponse.Result.attachments:type_name -> titanium.Attachment
	38, // 44: titanium.GetChallengeDetailsResponse.Result.totalNumber:type_name -> titanium.GetChallengeDetailsResponse.Result.TotalNumberEntry
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_common_challenge_proto_init() }
func file_common_challenge_proto_init() {
	if File_common_challenge_proto != nil {
		return
	}
	file_common_gateway_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_common_challenge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeFormMetaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeFormMetaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeFormMetaResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeFormOneOfFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeFormGeneralRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeFormGeneralRowPrecision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeFormGeneralRowMax); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeFormGeneralRowMin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeFormGeneralRowMaxLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeFormGeneralRowMinLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeCreateResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeFreezeStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeFreezeActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeActiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeActiveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeActiveResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeConsensusMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeHistoryResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeDecisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeListResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeListMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAttachmentUploadUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAttachmentUploadUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChallengeDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChallengeDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAttachmentUploadUrlResponse_AttachmentUploadUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChallengeDetailsResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_challenge_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChallengeDetailsResponse_CommonChallengeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_common_challenge_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ChallengeFormMetaResponse_Data)(nil),
		(*ChallengeFormMetaResponse_Error)(nil),
	}
	file_common_challenge_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ChallengeCreateResponse_Data)(nil),
		(*ChallengeCreateResponse_Error)(nil),
	}
	file_common_challenge_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ChallengeActiveResponse_Data)(nil),
		(*ChallengeActiveResponse_Error)(nil),
	}
	file_common_challenge_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*ChallengeHistoryResponse_Data)(nil),
		(*ChallengeHistoryResponse_Error)(nil),
	}
	file_common_challenge_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*ChallengeListResponse_Data)(nil),
		(*ChallengeListResponse_Error)(nil),
	}
	file_common_challenge_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*GetAttachmentUploadUrlResponse_Data)(nil),
		(*GetAttachmentUploadUrlResponse_Error)(nil),
	}
	file_common_challenge_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*GetChallengeDetailsResponse_Data)(nil),
		(*GetChallengeDetailsResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_challenge_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_challenge_proto_goTypes,
		DependencyIndexes: file_common_challenge_proto_depIdxs,
		EnumInfos:         file_common_challenge_proto_enumTypes,
		MessageInfos:      file_common_challenge_proto_msgTypes,
	}.Build()
	File_common_challenge_proto = out.File
	file_common_challenge_proto_rawDesc = nil
	file_common_challenge_proto_goTypes = nil
	file_common_challenge_proto_depIdxs = nil
}
