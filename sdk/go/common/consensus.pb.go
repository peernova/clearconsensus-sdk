// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: common/consensus.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ConsensusActiveRequest is request to get active consensuses(not closed) according to filter and limit and etc. in request.
type ConsensusActiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter  string   `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`   //a string value to filter the consensuses.
	OrderBy *OrderBy `protobuf:"bytes,2,opt,name=orderBy,proto3" json:"orderBy,omitempty"` //the order to sort the consensuses.
	Limit   *Limit   `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`     //the number of consensuses to retrieve.
	Offset  int32    `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`  //the starting point of the consensuses to retrieve.
}

func (x *ConsensusActiveRequest) Reset() {
	*x = ConsensusActiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusActiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusActiveRequest) ProtoMessage() {}

func (x *ConsensusActiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusActiveRequest.ProtoReflect.Descriptor instead.
func (*ConsensusActiveRequest) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{0}
}

func (x *ConsensusActiveRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ConsensusActiveRequest) GetOrderBy() *OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *ConsensusActiveRequest) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ConsensusActiveRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// ConsensusToPublishRequest A request to retrieve consensuses that can be published.
type ConsensusToPublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter  string   `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`   //a string value to filter the consensuses.
	OrderBy *OrderBy `protobuf:"bytes,2,opt,name=orderBy,proto3" json:"orderBy,omitempty"` //the order to sort the consensuses.
	Limit   *Limit   `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`     //the number of consensuses to retrieve.
	Offset  int32    `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`  //the starting point of the consensuses to retrieve.
}

func (x *ConsensusToPublishRequest) Reset() {
	*x = ConsensusToPublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusToPublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusToPublishRequest) ProtoMessage() {}

func (x *ConsensusToPublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusToPublishRequest.ProtoReflect.Descriptor instead.
func (*ConsensusToPublishRequest) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{1}
}

func (x *ConsensusToPublishRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ConsensusToPublishRequest) GetOrderBy() *OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *ConsensusToPublishRequest) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ConsensusToPublishRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// ConsensusToPublishResponse: A response to the ConsensusToPublishRequest, it contains either a ConsensusToPublishResponseData or an Error message.
type ConsensusToPublishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ConsensusToPublishResponse_Data
	//	*ConsensusToPublishResponse_Error
	Response isConsensusToPublishResponse_Response `protobuf_oneof:"response"`
}

func (x *ConsensusToPublishResponse) Reset() {
	*x = ConsensusToPublishResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusToPublishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusToPublishResponse) ProtoMessage() {}

func (x *ConsensusToPublishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusToPublishResponse.ProtoReflect.Descriptor instead.
func (*ConsensusToPublishResponse) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{2}
}

func (m *ConsensusToPublishResponse) GetResponse() isConsensusToPublishResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ConsensusToPublishResponse) GetData() *ConsensusToPublishResponseData {
	if x, ok := x.GetResponse().(*ConsensusToPublishResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *ConsensusToPublishResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*ConsensusToPublishResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isConsensusToPublishResponse_Response interface {
	isConsensusToPublishResponse_Response()
}

type ConsensusToPublishResponse_Data struct {
	Data *ConsensusToPublishResponseData `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type ConsensusToPublishResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*ConsensusToPublishResponse_Data) isConsensusToPublishResponse_Response() {}

func (*ConsensusToPublishResponse_Error) isConsensusToPublishResponse_Response() {}

// ConsensusToPublishResponseData is a message that contains the data of the consensuses to publish.
type ConsensusToPublishResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns   []*ColumnInfo `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`                       // information about the columns of the data.
	Rows      []*ValuesRow  `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`                             // the values of the consensuses.
	TotalRows int32         `protobuf:"varint,3,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"` //the total number of rows in the data.
}

func (x *ConsensusToPublishResponseData) Reset() {
	*x = ConsensusToPublishResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusToPublishResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusToPublishResponseData) ProtoMessage() {}

func (x *ConsensusToPublishResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusToPublishResponseData.ProtoReflect.Descriptor instead.
func (*ConsensusToPublishResponseData) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{3}
}

func (x *ConsensusToPublishResponseData) GetColumns() []*ColumnInfo {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ConsensusToPublishResponseData) GetRows() []*ValuesRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *ConsensusToPublishResponseData) GetTotalRows() int32 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

// ConsensusPublishRequest is a request to publish a specific consensus.
type ConsensusPublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsensusTrackingId string `protobuf:"bytes,1,opt,name=consensus_tracking_id,json=consensusTrackingId,proto3" json:"consensus_tracking_id,omitempty"` //the ID of the consensus to publish.
	AssetId             string `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`                                       //the ID of the asset the consensus is related to.
	TraceName           string `protobuf:"bytes,3,opt,name=trace_name,json=traceName,proto3" json:"trace_name,omitempty"`                                 //the name of the trace of the consensus.
}

func (x *ConsensusPublishRequest) Reset() {
	*x = ConsensusPublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusPublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusPublishRequest) ProtoMessage() {}

func (x *ConsensusPublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusPublishRequest.ProtoReflect.Descriptor instead.
func (*ConsensusPublishRequest) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{4}
}

func (x *ConsensusPublishRequest) GetConsensusTrackingId() string {
	if x != nil {
		return x.ConsensusTrackingId
	}
	return ""
}

func (x *ConsensusPublishRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ConsensusPublishRequest) GetTraceName() string {
	if x != nil {
		return x.TraceName
	}
	return ""
}

// ConsensusHistoryRequest is a request to retrieve the history of consensuses based on a specified filter.
type ConsensusHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter  string   `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	OrderBy *OrderBy `protobuf:"bytes,2,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	Limit   *Limit   `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32    `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ConsensusHistoryRequest) Reset() {
	*x = ConsensusHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusHistoryRequest) ProtoMessage() {}

func (x *ConsensusHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusHistoryRequest.ProtoReflect.Descriptor instead.
func (*ConsensusHistoryRequest) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{5}
}

func (x *ConsensusHistoryRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ConsensusHistoryRequest) GetOrderBy() *OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *ConsensusHistoryRequest) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ConsensusHistoryRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// ConsensusHistoryResponse is a response to the ConsensusHistoryRequest, it contains either a ConsensusHistoryResponseData or an Error message.
type ConsensusHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ConsensusHistoryResponse_Data
	//	*ConsensusHistoryResponse_Error
	Response isConsensusHistoryResponse_Response `protobuf_oneof:"response"`
}

func (x *ConsensusHistoryResponse) Reset() {
	*x = ConsensusHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusHistoryResponse) ProtoMessage() {}

func (x *ConsensusHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusHistoryResponse.ProtoReflect.Descriptor instead.
func (*ConsensusHistoryResponse) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{6}
}

func (m *ConsensusHistoryResponse) GetResponse() isConsensusHistoryResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ConsensusHistoryResponse) GetData() *ConsensusHistoryResponseData {
	if x, ok := x.GetResponse().(*ConsensusHistoryResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *ConsensusHistoryResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*ConsensusHistoryResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isConsensusHistoryResponse_Response interface {
	isConsensusHistoryResponse_Response()
}

type ConsensusHistoryResponse_Data struct {
	Data *ConsensusHistoryResponseData `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type ConsensusHistoryResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*ConsensusHistoryResponse_Data) isConsensusHistoryResponse_Response() {}

func (*ConsensusHistoryResponse_Error) isConsensusHistoryResponse_Response() {}

// ConsensusHistoryResponseData is a message that contains the data of the consensus history.
type ConsensusHistoryResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns   []*ColumnInfo `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`                       // information about the columns of the data.
	Rows      []*ValuesRow  `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`                             // the values of the consensuses.
	TotalRows int32         `protobuf:"varint,3,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"` //the total number of rows in the data.
}

func (x *ConsensusHistoryResponseData) Reset() {
	*x = ConsensusHistoryResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusHistoryResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusHistoryResponseData) ProtoMessage() {}

func (x *ConsensusHistoryResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusHistoryResponseData.ProtoReflect.Descriptor instead.
func (*ConsensusHistoryResponseData) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{7}
}

func (x *ConsensusHistoryResponseData) GetColumns() []*ColumnInfo {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ConsensusHistoryResponseData) GetRows() []*ValuesRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *ConsensusHistoryResponseData) GetTotalRows() int32 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

// ConsensusDecisionRequest is a request to set a decision for a specific consensus.
type ConsensusDecisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsensusTrackingId string   `protobuf:"bytes,1,opt,name=consensus_tracking_id,json=consensusTrackingId,proto3" json:"consensus_tracking_id,omitempty"` //the ID of the consensus to set the decision for.
	Decision            Decision `protobuf:"varint,2,opt,name=decision,proto3,enum=titanium.Decision" json:"decision,omitempty"`                            // the decision to set.
}

func (x *ConsensusDecisionRequest) Reset() {
	*x = ConsensusDecisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusDecisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusDecisionRequest) ProtoMessage() {}

func (x *ConsensusDecisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusDecisionRequest.ProtoReflect.Descriptor instead.
func (*ConsensusDecisionRequest) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{8}
}

func (x *ConsensusDecisionRequest) GetConsensusTrackingId() string {
	if x != nil {
		return x.ConsensusTrackingId
	}
	return ""
}

func (x *ConsensusDecisionRequest) GetDecision() Decision {
	if x != nil {
		return x.Decision
	}
	return Decision_DECISION_UNSPECIFIED
}

// ConsensusTimestampsRequest is a request to retrieve the timestamps (run data and submitted dates) for a specific consensus.
type ConsensusTimestampsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId   string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`       //the ID of the asset the consensus is related to.
	TraceName string `protobuf:"bytes,2,opt,name=trace_name,json=traceName,proto3" json:"trace_name,omitempty"` //the name of the trace of the consensus.
}

func (x *ConsensusTimestampsRequest) Reset() {
	*x = ConsensusTimestampsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusTimestampsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusTimestampsRequest) ProtoMessage() {}

func (x *ConsensusTimestampsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusTimestampsRequest.ProtoReflect.Descriptor instead.
func (*ConsensusTimestampsRequest) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{9}
}

func (x *ConsensusTimestampsRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ConsensusTimestampsRequest) GetTraceName() string {
	if x != nil {
		return x.TraceName
	}
	return ""
}

// //ConsensusTimestampsResponseData is a response to the ConsensusTimestampsRequest, it contains either a ConsensusTimestampsResponseData or an Error message.
type ConsensusTimestampsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ConsensusTimestampsResponse_Data
	//	*ConsensusTimestampsResponse_Error
	Response isConsensusTimestampsResponse_Response `protobuf_oneof:"response"`
}

func (x *ConsensusTimestampsResponse) Reset() {
	*x = ConsensusTimestampsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusTimestampsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusTimestampsResponse) ProtoMessage() {}

func (x *ConsensusTimestampsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusTimestampsResponse.ProtoReflect.Descriptor instead.
func (*ConsensusTimestampsResponse) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{10}
}

func (m *ConsensusTimestampsResponse) GetResponse() isConsensusTimestampsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ConsensusTimestampsResponse) GetData() *ConsensusTimestampsResponseData {
	if x, ok := x.GetResponse().(*ConsensusTimestampsResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *ConsensusTimestampsResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*ConsensusTimestampsResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isConsensusTimestampsResponse_Response interface {
	isConsensusTimestampsResponse_Response()
}

type ConsensusTimestampsResponse_Data struct {
	Data *ConsensusTimestampsResponseData `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type ConsensusTimestampsResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*ConsensusTimestampsResponse_Data) isConsensusTimestampsResponse_Response() {}

func (*ConsensusTimestampsResponse_Error) isConsensusTimestampsResponse_Response() {}

// ConsensusTimestampsResponseData is a message that contains the metadata of the consensus timestamps
type ConsensusTimestampsResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamps []*ConsensusTimestampMeta `protobuf:"bytes,1,rep,name=timestamps,proto3" json:"timestamps,omitempty"` //the timestamps of the consensus (run data and submitted dates).
}

func (x *ConsensusTimestampsResponseData) Reset() {
	*x = ConsensusTimestampsResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusTimestampsResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusTimestampsResponseData) ProtoMessage() {}

func (x *ConsensusTimestampsResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusTimestampsResponseData.ProtoReflect.Descriptor instead.
func (*ConsensusTimestampsResponseData) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{11}
}

func (x *ConsensusTimestampsResponseData) GetTimestamps() []*ConsensusTimestampMeta {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

// ConsensusTimestampMeta is a message that contains metadata about the consensus timestamps.
type ConsensusTimestampMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsensusRunTimestamp string   `protobuf:"bytes,1,opt,name=consensus_run_timestamp,json=consensusRunTimestamp,proto3" json:"consensus_run_timestamp,omitempty"` //the timestamp of the consensus run.
	SubmittedDates        []string `protobuf:"bytes,2,rep,name=submitted_dates,json=submittedDates,proto3" json:"submitted_dates,omitempty"`                        //the submitted dates of the consensus.
}

func (x *ConsensusTimestampMeta) Reset() {
	*x = ConsensusTimestampMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusTimestampMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusTimestampMeta) ProtoMessage() {}

func (x *ConsensusTimestampMeta) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusTimestampMeta.ProtoReflect.Descriptor instead.
func (*ConsensusTimestampMeta) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{12}
}

func (x *ConsensusTimestampMeta) GetConsensusRunTimestamp() string {
	if x != nil {
		return x.ConsensusRunTimestamp
	}
	return ""
}

func (x *ConsensusTimestampMeta) GetSubmittedDates() []string {
	if x != nil {
		return x.SubmittedDates
	}
	return nil
}

// ConsensusRequest is a request to retrieve a consensus.
// Consensus can be the average price, average volatility or other agreed upon methods for a particular instrument.
type ConsensusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId               string   `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`                                             //the ID of the asset the consensus is related to.
	SubmittedDate         string   `protobuf:"bytes,2,opt,name=submitted_date,json=submittedDate,proto3" json:"submitted_date,omitempty"`                           // the submitted date of the consensus.
	ConsensusRunTimestamp string   `protobuf:"bytes,3,opt,name=consensus_run_timestamp,json=consensusRunTimestamp,proto3" json:"consensus_run_timestamp,omitempty"` // the timestamp of the consensus run.
	Filter                string   `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`                                                              //a filter for the requested consensus.
	OrderBy               *OrderBy `protobuf:"bytes,5,opt,name=orderBy,proto3" json:"orderBy,omitempty"`                                                            //a field to order the results by.
	Limit                 *Limit   `protobuf:"bytes,6,opt,name=limit,proto3" json:"limit,omitempty"`                                                                // a limit for the number of results to return.
	Offset                int32    `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty"`                                                             //an offset for the results to return.
	TraceName             string   `protobuf:"bytes,8,opt,name=trace_name,json=traceName,proto3" json:"trace_name,omitempty"`                                       //the trace name of the consensus.
}

func (x *ConsensusRequest) Reset() {
	*x = ConsensusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusRequest) ProtoMessage() {}

func (x *ConsensusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusRequest.ProtoReflect.Descriptor instead.
func (*ConsensusRequest) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{13}
}

func (x *ConsensusRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ConsensusRequest) GetSubmittedDate() string {
	if x != nil {
		return x.SubmittedDate
	}
	return ""
}

func (x *ConsensusRequest) GetConsensusRunTimestamp() string {
	if x != nil {
		return x.ConsensusRunTimestamp
	}
	return ""
}

func (x *ConsensusRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ConsensusRequest) GetOrderBy() *OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *ConsensusRequest) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ConsensusRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ConsensusRequest) GetTraceName() string {
	if x != nil {
		return x.TraceName
	}
	return ""
}

// ConsensusResponse is the response to the ConsensusRequest.
type ConsensusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ConsensusResponse_Data
	//	*ConsensusResponse_Error
	Response isConsensusResponse_Response `protobuf_oneof:"response"`
}

func (x *ConsensusResponse) Reset() {
	*x = ConsensusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusResponse) ProtoMessage() {}

func (x *ConsensusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusResponse.ProtoReflect.Descriptor instead.
func (*ConsensusResponse) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{14}
}

func (m *ConsensusResponse) GetResponse() isConsensusResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ConsensusResponse) GetData() *ConsensusResponseData {
	if x, ok := x.GetResponse().(*ConsensusResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *ConsensusResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*ConsensusResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isConsensusResponse_Response interface {
	isConsensusResponse_Response()
}

type ConsensusResponse_Data struct {
	Data *ConsensusResponseData `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type ConsensusResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*ConsensusResponse_Data) isConsensusResponse_Response() {}

func (*ConsensusResponse_Error) isConsensusResponse_Response() {}

// ConsensusResponseData is message that represents data about specific consensus.
type ConsensusResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns   []*ColumnInfo `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`                       //a list of column information.
	Rows      []*ValuesRow  `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`                             // a list of values rows.
	TotalRows int32         `protobuf:"varint,3,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"` // the total number of rows.
}

func (x *ConsensusResponseData) Reset() {
	*x = ConsensusResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusResponseData) ProtoMessage() {}

func (x *ConsensusResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusResponseData.ProtoReflect.Descriptor instead.
func (*ConsensusResponseData) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{15}
}

func (x *ConsensusResponseData) GetColumns() []*ColumnInfo {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ConsensusResponseData) GetRows() []*ValuesRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *ConsensusResponseData) GetTotalRows() int32 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

type GetConsensusRunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId      string      `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	TraceName    string      `protobuf:"bytes,2,opt,name=trace_name,json=traceName,proto3" json:"trace_name,omitempty"`
	SnapDateFrom string      `protobuf:"bytes,3,opt,name=snap_date_from,json=snapDateFrom,proto3" json:"snap_date_from,omitempty"`
	SnapDateTo   string      `protobuf:"bytes,4,opt,name=snap_date_to,json=snapDateTo,proto3" json:"snap_date_to,omitempty"`
	Participant  string      `protobuf:"bytes,5,opt,name=participant,proto3" json:"participant,omitempty"`
	ShowArchived bool        `protobuf:"varint,6,opt,name=show_archived,json=showArchived,proto3" json:"show_archived,omitempty"`
	FilterPack   *FilterPack `protobuf:"bytes,7,opt,name=filter_pack,json=filterPack,proto3" json:"filter_pack,omitempty"`
	Page         *Page       `protobuf:"bytes,8,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetConsensusRunsRequest) Reset() {
	*x = GetConsensusRunsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsensusRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsensusRunsRequest) ProtoMessage() {}

func (x *GetConsensusRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsensusRunsRequest.ProtoReflect.Descriptor instead.
func (*GetConsensusRunsRequest) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{16}
}

func (x *GetConsensusRunsRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *GetConsensusRunsRequest) GetTraceName() string {
	if x != nil {
		return x.TraceName
	}
	return ""
}

func (x *GetConsensusRunsRequest) GetSnapDateFrom() string {
	if x != nil {
		return x.SnapDateFrom
	}
	return ""
}

func (x *GetConsensusRunsRequest) GetSnapDateTo() string {
	if x != nil {
		return x.SnapDateTo
	}
	return ""
}

func (x *GetConsensusRunsRequest) GetParticipant() string {
	if x != nil {
		return x.Participant
	}
	return ""
}

func (x *GetConsensusRunsRequest) GetShowArchived() bool {
	if x != nil {
		return x.ShowArchived
	}
	return false
}

func (x *GetConsensusRunsRequest) GetFilterPack() *FilterPack {
	if x != nil {
		return x.FilterPack
	}
	return nil
}

func (x *GetConsensusRunsRequest) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type GetConsensusRunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*GetConsensusRunsResponse_Error
	//	*GetConsensusRunsResponse_Data
	Response isGetConsensusRunsResponse_Response `protobuf_oneof:"response"`
}

func (x *GetConsensusRunsResponse) Reset() {
	*x = GetConsensusRunsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsensusRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsensusRunsResponse) ProtoMessage() {}

func (x *GetConsensusRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsensusRunsResponse.ProtoReflect.Descriptor instead.
func (*GetConsensusRunsResponse) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{17}
}

func (m *GetConsensusRunsResponse) GetResponse() isGetConsensusRunsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetConsensusRunsResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*GetConsensusRunsResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *GetConsensusRunsResponse) GetData() *GetConsensusRunsData {
	if x, ok := x.GetResponse().(*GetConsensusRunsResponse_Data); ok {
		return x.Data
	}
	return nil
}

type isGetConsensusRunsResponse_Response interface {
	isGetConsensusRunsResponse_Response()
}

type GetConsensusRunsResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type GetConsensusRunsResponse_Data struct {
	Data *GetConsensusRunsData `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*GetConsensusRunsResponse_Error) isGetConsensusRunsResponse_Response() {}

func (*GetConsensusRunsResponse_Data) isGetConsensusRunsResponse_Response() {}

type GetConsensusRunsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []*ColumnInfo `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	Rows    []*ValuesRow  `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
	Page    *Page         `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetConsensusRunsData) Reset() {
	*x = GetConsensusRunsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsensusRunsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsensusRunsData) ProtoMessage() {}

func (x *GetConsensusRunsData) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsensusRunsData.ProtoReflect.Descriptor instead.
func (*GetConsensusRunsData) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{18}
}

func (x *GetConsensusRunsData) GetColumns() []*ColumnInfo {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *GetConsensusRunsData) GetRows() []*ValuesRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *GetConsensusRunsData) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ConsensusResultSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsensusRunId          string   `protobuf:"bytes,1,opt,name=consensus_run_id,json=consensusRunId,proto3" json:"consensus_run_id,omitempty"`
	ConsensusResultSetId    string   `protobuf:"bytes,2,opt,name=consensus_result_set_id,json=consensusResultSetId,proto3" json:"consensus_result_set_id,omitempty"`
	SubmissionTimestamp     string   `protobuf:"bytes,3,opt,name=submission_timestamp,json=submissionTimestamp,proto3" json:"submission_timestamp,omitempty"`
	ConsensusRunStatus      string   `protobuf:"bytes,4,opt,name=consensus_run_status,json=consensusRunStatus,proto3" json:"consensus_run_status,omitempty"`
	CohortName              string   `protobuf:"bytes,5,opt,name=cohort_name,json=cohortName,proto3" json:"cohort_name,omitempty"`
	DataContent             string   `protobuf:"bytes,6,opt,name=data_content,json=dataContent,proto3" json:"data_content,omitempty"`
	ConsensusRunTimestamp   string   `protobuf:"bytes,7,opt,name=consensus_run_timestamp,json=consensusRunTimestamp,proto3" json:"consensus_run_timestamp,omitempty"`
	Participants            []string `protobuf:"bytes,8,rep,name=participants,proto3" json:"participants,omitempty"`
	Participant             string   `protobuf:"bytes,9,opt,name=participant,proto3" json:"participant,omitempty"`
	Status                  string   `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	ConsensusNotes          string   `protobuf:"bytes,11,opt,name=consensus_notes,json=consensusNotes,proto3" json:"consensus_notes,omitempty"`
	ConsensusResultSetLabel string   `protobuf:"bytes,12,opt,name=consensus_result_set_label,json=consensusResultSetLabel,proto3" json:"consensus_result_set_label,omitempty"`
	RunBy                   string   `protobuf:"bytes,13,opt,name=run_by,json=runBy,proto3" json:"run_by,omitempty"`
	JobId                   string   `protobuf:"bytes,14,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *ConsensusResultSet) Reset() {
	*x = ConsensusResultSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusResultSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusResultSet) ProtoMessage() {}

func (x *ConsensusResultSet) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusResultSet.ProtoReflect.Descriptor instead.
func (*ConsensusResultSet) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{19}
}

func (x *ConsensusResultSet) GetConsensusRunId() string {
	if x != nil {
		return x.ConsensusRunId
	}
	return ""
}

func (x *ConsensusResultSet) GetConsensusResultSetId() string {
	if x != nil {
		return x.ConsensusResultSetId
	}
	return ""
}

func (x *ConsensusResultSet) GetSubmissionTimestamp() string {
	if x != nil {
		return x.SubmissionTimestamp
	}
	return ""
}

func (x *ConsensusResultSet) GetConsensusRunStatus() string {
	if x != nil {
		return x.ConsensusRunStatus
	}
	return ""
}

func (x *ConsensusResultSet) GetCohortName() string {
	if x != nil {
		return x.CohortName
	}
	return ""
}

func (x *ConsensusResultSet) GetDataContent() string {
	if x != nil {
		return x.DataContent
	}
	return ""
}

func (x *ConsensusResultSet) GetConsensusRunTimestamp() string {
	if x != nil {
		return x.ConsensusRunTimestamp
	}
	return ""
}

func (x *ConsensusResultSet) GetParticipants() []string {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *ConsensusResultSet) GetParticipant() string {
	if x != nil {
		return x.Participant
	}
	return ""
}

func (x *ConsensusResultSet) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ConsensusResultSet) GetConsensusNotes() string {
	if x != nil {
		return x.ConsensusNotes
	}
	return ""
}

func (x *ConsensusResultSet) GetConsensusResultSetLabel() string {
	if x != nil {
		return x.ConsensusResultSetLabel
	}
	return ""
}

func (x *ConsensusResultSet) GetRunBy() string {
	if x != nil {
		return x.RunBy
	}
	return ""
}

func (x *ConsensusResultSet) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type ConsensusResultSetValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId               string      `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	TraceName             string      `protobuf:"bytes,2,opt,name=trace_name,json=traceName,proto3" json:"trace_name,omitempty"`
	SubmittedId           string      `protobuf:"bytes,3,opt,name=submitted_id,json=submittedId,proto3" json:"submitted_id,omitempty"`
	SubmittedDate         string      `protobuf:"bytes,4,opt,name=submitted_date,json=submittedDate,proto3" json:"submitted_date,omitempty"`
	ConsensusResultSetId  string      `protobuf:"bytes,5,opt,name=consensus_result_set_id,json=consensusResultSetId,proto3" json:"consensus_result_set_id,omitempty"`
	ConsensusRunTimestamp string      `protobuf:"bytes,6,opt,name=consensus_run_timestamp,json=consensusRunTimestamp,proto3" json:"consensus_run_timestamp,omitempty"`
	Client                string      `protobuf:"bytes,7,opt,name=client,proto3" json:"client,omitempty"`
	Filter                string      `protobuf:"bytes,8,opt,name=filter,proto3" json:"filter,omitempty"`
	FilterPack            *FilterPack `protobuf:"bytes,9,opt,name=filter_pack,json=filterPack,proto3" json:"filter_pack,omitempty"`
	OrderBy               *OrderBy    `protobuf:"bytes,10,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	Page                  *Page       `protobuf:"bytes,11,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ConsensusResultSetValuesRequest) Reset() {
	*x = ConsensusResultSetValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusResultSetValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusResultSetValuesRequest) ProtoMessage() {}

func (x *ConsensusResultSetValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusResultSetValuesRequest.ProtoReflect.Descriptor instead.
func (*ConsensusResultSetValuesRequest) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{20}
}

func (x *ConsensusResultSetValuesRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ConsensusResultSetValuesRequest) GetTraceName() string {
	if x != nil {
		return x.TraceName
	}
	return ""
}

func (x *ConsensusResultSetValuesRequest) GetSubmittedId() string {
	if x != nil {
		return x.SubmittedId
	}
	return ""
}

func (x *ConsensusResultSetValuesRequest) GetSubmittedDate() string {
	if x != nil {
		return x.SubmittedDate
	}
	return ""
}

func (x *ConsensusResultSetValuesRequest) GetConsensusResultSetId() string {
	if x != nil {
		return x.ConsensusResultSetId
	}
	return ""
}

func (x *ConsensusResultSetValuesRequest) GetConsensusRunTimestamp() string {
	if x != nil {
		return x.ConsensusRunTimestamp
	}
	return ""
}

func (x *ConsensusResultSetValuesRequest) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *ConsensusResultSetValuesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ConsensusResultSetValuesRequest) GetFilterPack() *FilterPack {
	if x != nil {
		return x.FilterPack
	}
	return nil
}

func (x *ConsensusResultSetValuesRequest) GetOrderBy() *OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *ConsensusResultSetValuesRequest) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ConsensusResultSetValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ConsensusResultSetValuesResponse_Data
	//	*ConsensusResultSetValuesResponse_Error
	Response isConsensusResultSetValuesResponse_Response `protobuf_oneof:"response"`
}

func (x *ConsensusResultSetValuesResponse) Reset() {
	*x = ConsensusResultSetValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusResultSetValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusResultSetValuesResponse) ProtoMessage() {}

func (x *ConsensusResultSetValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusResultSetValuesResponse.ProtoReflect.Descriptor instead.
func (*ConsensusResultSetValuesResponse) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{21}
}

func (m *ConsensusResultSetValuesResponse) GetResponse() isConsensusResultSetValuesResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ConsensusResultSetValuesResponse) GetData() *ConsensusResultSetValues {
	if x, ok := x.GetResponse().(*ConsensusResultSetValuesResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *ConsensusResultSetValuesResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*ConsensusResultSetValuesResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isConsensusResultSetValuesResponse_Response interface {
	isConsensusResultSetValuesResponse_Response()
}

type ConsensusResultSetValuesResponse_Data struct {
	Data *ConsensusResultSetValues `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type ConsensusResultSetValuesResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*ConsensusResultSetValuesResponse_Data) isConsensusResultSetValuesResponse_Response() {}

func (*ConsensusResultSetValuesResponse_Error) isConsensusResultSetValuesResponse_Response() {}

type ConsensusResultSetValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []*ColumnInfo `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	Rows    []*ValuesRow  `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
	Page    *Page         `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ConsensusResultSetValues) Reset() {
	*x = ConsensusResultSetValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_consensus_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusResultSetValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusResultSetValues) ProtoMessage() {}

func (x *ConsensusResultSetValues) ProtoReflect() protoreflect.Message {
	mi := &file_common_consensus_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusResultSetValues.ProtoReflect.Descriptor instead.
func (*ConsensusResultSetValues) Descriptor() ([]byte, []int) {
	return file_common_consensus_proto_rawDescGZIP(), []int{22}
}

func (x *ConsensusResultSetValues) GetColumns() []*ColumnInfo {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ConsensusResultSetValues) GetRows() []*ValuesRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *ConsensusResultSetValues) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

var File_common_consensus_proto protoreflect.FileDescriptor

var file_common_consensus_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69,
	0x75, 0x6d, 0x1a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x01,
	0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x25, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74,
	0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x9f, 0x01, 0x0a,
	0x19, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x6f, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12,
	0x25, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x91,
	0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x6f, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x69,
	0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x54, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74,
	0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x54, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75,
	0x6d, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x22, 0x87, 0x01,
	0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74,
	0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69,
	0x75, 0x6d, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x69, 0x74, 0x61,
	0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75,
	0x6d, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73,
	0x22, 0x7e, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x56, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75,
	0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e,
	0x69, 0x75, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x63,
	0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x73, 0x22, 0x79, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x36, 0x0a,
	0x17, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x73, 0x22, 0xaf,
	0x02, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75,
	0x6d, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x7f, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69,
	0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x8f, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74,
	0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x74, 0x61,
	0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x6f, 0x77, 0x52, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x6f, 0x77, 0x73, 0x22, 0xbd, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6e, 0x61,
	0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x20, 0x0a, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x63, 0x6b, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x12,
	0x22, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69,
	0x75, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52,
	0x75, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x75, 0x6e, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x22, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x69,
	0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x22, 0xc8, 0x04, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x75,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x75, 0x6e, 0x42, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0xcc, 0x03, 0x0a,
	0x1f, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e,
	0x69, 0x75, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x0a,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x2b, 0x0a, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69,
	0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x20,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61,
	0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x97, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x74,
	0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x6f, 0x77, 0x52,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x42, 0x77, 0x0a, 0x20, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x61, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69,
	0x75, 0x6d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x42, 0x1b, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x6e, 0x6f, 0x76,
	0x61, 0x2f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_consensus_proto_rawDescOnce sync.Once
	file_common_consensus_proto_rawDescData = file_common_consensus_proto_rawDesc
)

func file_common_consensus_proto_rawDescGZIP() []byte {
	file_common_consensus_proto_rawDescOnce.Do(func() {
		file_common_consensus_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_consensus_proto_rawDescData)
	})
	return file_common_consensus_proto_rawDescData
}

var file_common_consensus_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_common_consensus_proto_goTypes = []interface{}{
	(*ConsensusActiveRequest)(nil),           // 0: titanium.ConsensusActiveRequest
	(*ConsensusToPublishRequest)(nil),        // 1: titanium.ConsensusToPublishRequest
	(*ConsensusToPublishResponse)(nil),       // 2: titanium.ConsensusToPublishResponse
	(*ConsensusToPublishResponseData)(nil),   // 3: titanium.ConsensusToPublishResponseData
	(*ConsensusPublishRequest)(nil),          // 4: titanium.ConsensusPublishRequest
	(*ConsensusHistoryRequest)(nil),          // 5: titanium.ConsensusHistoryRequest
	(*ConsensusHistoryResponse)(nil),         // 6: titanium.ConsensusHistoryResponse
	(*ConsensusHistoryResponseData)(nil),     // 7: titanium.ConsensusHistoryResponseData
	(*ConsensusDecisionRequest)(nil),         // 8: titanium.ConsensusDecisionRequest
	(*ConsensusTimestampsRequest)(nil),       // 9: titanium.ConsensusTimestampsRequest
	(*ConsensusTimestampsResponse)(nil),      // 10: titanium.ConsensusTimestampsResponse
	(*ConsensusTimestampsResponseData)(nil),  // 11: titanium.ConsensusTimestampsResponseData
	(*ConsensusTimestampMeta)(nil),           // 12: titanium.ConsensusTimestampMeta
	(*ConsensusRequest)(nil),                 // 13: titanium.ConsensusRequest
	(*ConsensusResponse)(nil),                // 14: titanium.ConsensusResponse
	(*ConsensusResponseData)(nil),            // 15: titanium.ConsensusResponseData
	(*GetConsensusRunsRequest)(nil),          // 16: titanium.GetConsensusRunsRequest
	(*GetConsensusRunsResponse)(nil),         // 17: titanium.GetConsensusRunsResponse
	(*GetConsensusRunsData)(nil),             // 18: titanium.GetConsensusRunsData
	(*ConsensusResultSet)(nil),               // 19: titanium.ConsensusResultSet
	(*ConsensusResultSetValuesRequest)(nil),  // 20: titanium.ConsensusResultSetValuesRequest
	(*ConsensusResultSetValuesResponse)(nil), // 21: titanium.ConsensusResultSetValuesResponse
	(*ConsensusResultSetValues)(nil),         // 22: titanium.ConsensusResultSetValues
	(*OrderBy)(nil),                          // 23: titanium.OrderBy
	(*Limit)(nil),                            // 24: titanium.Limit
	(*Error)(nil),                            // 25: titanium.Error
	(*ColumnInfo)(nil),                       // 26: titanium.ColumnInfo
	(*ValuesRow)(nil),                        // 27: titanium.ValuesRow
	(Decision)(0),                            // 28: titanium.Decision
	(*FilterPack)(nil),                       // 29: titanium.FilterPack
	(*Page)(nil),                             // 30: titanium.Page
}
var file_common_consensus_proto_depIdxs = []int32{
	23, // 0: titanium.ConsensusActiveRequest.orderBy:type_name -> titanium.OrderBy
	24, // 1: titanium.ConsensusActiveRequest.limit:type_name -> titanium.Limit
	23, // 2: titanium.ConsensusToPublishRequest.orderBy:type_name -> titanium.OrderBy
	24, // 3: titanium.ConsensusToPublishRequest.limit:type_name -> titanium.Limit
	3,  // 4: titanium.ConsensusToPublishResponse.data:type_name -> titanium.ConsensusToPublishResponseData
	25, // 5: titanium.ConsensusToPublishResponse.error:type_name -> titanium.Error
	26, // 6: titanium.ConsensusToPublishResponseData.columns:type_name -> titanium.ColumnInfo
	27, // 7: titanium.ConsensusToPublishResponseData.rows:type_name -> titanium.ValuesRow
	23, // 8: titanium.ConsensusHistoryRequest.orderBy:type_name -> titanium.OrderBy
	24, // 9: titanium.ConsensusHistoryRequest.limit:type_name -> titanium.Limit
	7,  // 10: titanium.ConsensusHistoryResponse.data:type_name -> titanium.ConsensusHistoryResponseData
	25, // 11: titanium.ConsensusHistoryResponse.error:type_name -> titanium.Error
	26, // 12: titanium.ConsensusHistoryResponseData.columns:type_name -> titanium.ColumnInfo
	27, // 13: titanium.ConsensusHistoryResponseData.rows:type_name -> titanium.ValuesRow
	28, // 14: titanium.ConsensusDecisionRequest.decision:type_name -> titanium.Decision
	11, // 15: titanium.ConsensusTimestampsResponse.data:type_name -> titanium.ConsensusTimestampsResponseData
	25, // 16: titanium.ConsensusTimestampsResponse.error:type_name -> titanium.Error
	12, // 17: titanium.ConsensusTimestampsResponseData.timestamps:type_name -> titanium.ConsensusTimestampMeta
	23, // 18: titanium.ConsensusRequest.orderBy:type_name -> titanium.OrderBy
	24, // 19: titanium.ConsensusRequest.limit:type_name -> titanium.Limit
	15, // 20: titanium.ConsensusResponse.data:type_name -> titanium.ConsensusResponseData
	25, // 21: titanium.ConsensusResponse.error:type_name -> titanium.Error
	26, // 22: titanium.ConsensusResponseData.columns:type_name -> titanium.ColumnInfo
	27, // 23: titanium.ConsensusResponseData.rows:type_name -> titanium.ValuesRow
	29, // 24: titanium.GetConsensusRunsRequest.filter_pack:type_name -> titanium.FilterPack
	30, // 25: titanium.GetConsensusRunsRequest.page:type_name -> titanium.Page
	25, // 26: titanium.GetConsensusRunsResponse.error:type_name -> titanium.Error
	18, // 27: titanium.GetConsensusRunsResponse.data:type_name -> titanium.GetConsensusRunsData
	26, // 28: titanium.GetConsensusRunsData.columns:type_name -> titanium.ColumnInfo
	27, // 29: titanium.GetConsensusRunsData.rows:type_name -> titanium.ValuesRow
	30, // 30: titanium.GetConsensusRunsData.page:type_name -> titanium.Page
	29, // 31: titanium.ConsensusResultSetValuesRequest.filter_pack:type_name -> titanium.FilterPack
	23, // 32: titanium.ConsensusResultSetValuesRequest.orderBy:type_name -> titanium.OrderBy
	30, // 33: titanium.ConsensusResultSetValuesRequest.page:type_name -> titanium.Page
	22, // 34: titanium.ConsensusResultSetValuesResponse.data:type_name -> titanium.ConsensusResultSetValues
	25, // 35: titanium.ConsensusResultSetValuesResponse.error:type_name -> titanium.Error
	26, // 36: titanium.ConsensusResultSetValues.columns:type_name -> titanium.ColumnInfo
	27, // 37: titanium.ConsensusResultSetValues.rows:type_name -> titanium.ValuesRow
	30, // 38: titanium.ConsensusResultSetValues.page:type_name -> titanium.Page
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_common_consensus_proto_init() }
func file_common_consensus_proto_init() {
	if File_common_consensus_proto != nil {
		return
	}
	file_common_gateway_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_common_consensus_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusActiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_consensus_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusToPublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_consensus_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusToPublishResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_consensus_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusToPublishResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_consensus_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusPublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_consensus_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_consensus_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_consensus_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusHistoryResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_consensus_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusDecisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_consensus_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusTimestampsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_consensus_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusTimestampsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_consensus_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusTimestampsResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_consensus_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusTimestampMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_consensus_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_consensus_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_consensus_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_consensus_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsensusRunsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_consensus_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsensusRunsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_consensus_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsensusRunsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_consensus_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusResultSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_consensus_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusResultSetValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_consensus_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusResultSetValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_consensus_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusResultSetValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_common_consensus_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ConsensusToPublishResponse_Data)(nil),
		(*ConsensusToPublishResponse_Error)(nil),
	}
	file_common_consensus_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ConsensusHistoryResponse_Data)(nil),
		(*ConsensusHistoryResponse_Error)(nil),
	}
	file_common_consensus_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ConsensusTimestampsResponse_Data)(nil),
		(*ConsensusTimestampsResponse_Error)(nil),
	}
	file_common_consensus_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*ConsensusResponse_Data)(nil),
		(*ConsensusResponse_Error)(nil),
	}
	file_common_consensus_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*GetConsensusRunsResponse_Error)(nil),
		(*GetConsensusRunsResponse_Data)(nil),
	}
	file_common_consensus_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*ConsensusResultSetValuesResponse_Data)(nil),
		(*ConsensusResultSetValuesResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_consensus_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_consensus_proto_goTypes,
		DependencyIndexes: file_common_consensus_proto_depIdxs,
		MessageInfos:      file_common_consensus_proto_msgTypes,
	}.Build()
	File_common_consensus_proto = out.File
	file_common_consensus_proto_rawDesc = nil
	file_common_consensus_proto_goTypes = nil
	file_common_consensus_proto_depIdxs = nil
}
