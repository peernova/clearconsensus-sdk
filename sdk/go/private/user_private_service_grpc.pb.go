// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package private

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserPrivateServiceClient is the client API for UserPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserPrivateServiceClient interface {
	AddUser(ctx context.Context, in *common.UserRequest, opts ...grpc.CallOption) (*common.UserResponse, error)
	UpdateUser(ctx context.Context, in *common.UserRequest, opts ...grpc.CallOption) (*common.UserResponse, error)
	DeleteUser(ctx context.Context, in *common.UserRequest, opts ...grpc.CallOption) (*common.UserResponse, error)
}

type userPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPrivateServiceClient(cc grpc.ClientConnInterface) UserPrivateServiceClient {
	return &userPrivateServiceClient{cc}
}

func (c *userPrivateServiceClient) AddUser(ctx context.Context, in *common.UserRequest, opts ...grpc.CallOption) (*common.UserResponse, error) {
	out := new(common.UserResponse)
	err := c.cc.Invoke(ctx, "/titanium.UserPrivateService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPrivateServiceClient) UpdateUser(ctx context.Context, in *common.UserRequest, opts ...grpc.CallOption) (*common.UserResponse, error) {
	out := new(common.UserResponse)
	err := c.cc.Invoke(ctx, "/titanium.UserPrivateService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPrivateServiceClient) DeleteUser(ctx context.Context, in *common.UserRequest, opts ...grpc.CallOption) (*common.UserResponse, error) {
	out := new(common.UserResponse)
	err := c.cc.Invoke(ctx, "/titanium.UserPrivateService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPrivateServiceServer is the server API for UserPrivateService service.
// All implementations must embed UnimplementedUserPrivateServiceServer
// for forward compatibility
type UserPrivateServiceServer interface {
	AddUser(context.Context, *common.UserRequest) (*common.UserResponse, error)
	UpdateUser(context.Context, *common.UserRequest) (*common.UserResponse, error)
	DeleteUser(context.Context, *common.UserRequest) (*common.UserResponse, error)
	mustEmbedUnimplementedUserPrivateServiceServer()
}

// UnimplementedUserPrivateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserPrivateServiceServer struct {
}

func (UnimplementedUserPrivateServiceServer) AddUser(context.Context, *common.UserRequest) (*common.UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserPrivateServiceServer) UpdateUser(context.Context, *common.UserRequest) (*common.UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserPrivateServiceServer) DeleteUser(context.Context, *common.UserRequest) (*common.UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserPrivateServiceServer) mustEmbedUnimplementedUserPrivateServiceServer() {}

// UnsafeUserPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserPrivateServiceServer will
// result in compilation errors.
type UnsafeUserPrivateServiceServer interface {
	mustEmbedUnimplementedUserPrivateServiceServer()
}

func RegisterUserPrivateServiceServer(s grpc.ServiceRegistrar, srv UserPrivateServiceServer) {
	s.RegisterService(&UserPrivateService_ServiceDesc, srv)
}

func _UserPrivateService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPrivateServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.UserPrivateService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPrivateServiceServer).AddUser(ctx, req.(*common.UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPrivateService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPrivateServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.UserPrivateService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPrivateServiceServer).UpdateUser(ctx, req.(*common.UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPrivateService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPrivateServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.UserPrivateService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPrivateServiceServer).DeleteUser(ctx, req.(*common.UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserPrivateService_ServiceDesc is the grpc.ServiceDesc for UserPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.UserPrivateService",
	HandlerType: (*UserPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _UserPrivateService_AddUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserPrivateService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserPrivateService_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "private/user_private_service.proto",
}
