// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package private

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssetsPrivateServiceClient is the client API for AssetsPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetsPrivateServiceClient interface {
	// AddAsset adds asset to the system.
	AddAsset(ctx context.Context, in *AddAssetRequest, opts ...grpc.CallOption) (*common.MessageResponse, error)
	// todo delete and use the same method in public service
	RecentAssets(ctx context.Context, in *common.RecentAssetsRequest, opts ...grpc.CallOption) (*common.RecentAssetsResponse, error)
	// todo delete and use the same method in public service
	Assets(ctx context.Context, in *common.AssetsRequest, opts ...grpc.CallOption) (*common.AssetsResponse, error)
}

type assetsPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetsPrivateServiceClient(cc grpc.ClientConnInterface) AssetsPrivateServiceClient {
	return &assetsPrivateServiceClient{cc}
}

func (c *assetsPrivateServiceClient) AddAsset(ctx context.Context, in *AddAssetRequest, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/titanium.AssetsPrivateService/AddAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsPrivateServiceClient) RecentAssets(ctx context.Context, in *common.RecentAssetsRequest, opts ...grpc.CallOption) (*common.RecentAssetsResponse, error) {
	out := new(common.RecentAssetsResponse)
	err := c.cc.Invoke(ctx, "/titanium.AssetsPrivateService/RecentAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsPrivateServiceClient) Assets(ctx context.Context, in *common.AssetsRequest, opts ...grpc.CallOption) (*common.AssetsResponse, error) {
	out := new(common.AssetsResponse)
	err := c.cc.Invoke(ctx, "/titanium.AssetsPrivateService/Assets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetsPrivateServiceServer is the server API for AssetsPrivateService service.
// All implementations must embed UnimplementedAssetsPrivateServiceServer
// for forward compatibility
type AssetsPrivateServiceServer interface {
	// AddAsset adds asset to the system.
	AddAsset(context.Context, *AddAssetRequest) (*common.MessageResponse, error)
	// todo delete and use the same method in public service
	RecentAssets(context.Context, *common.RecentAssetsRequest) (*common.RecentAssetsResponse, error)
	// todo delete and use the same method in public service
	Assets(context.Context, *common.AssetsRequest) (*common.AssetsResponse, error)
	mustEmbedUnimplementedAssetsPrivateServiceServer()
}

// UnimplementedAssetsPrivateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAssetsPrivateServiceServer struct {
}

func (UnimplementedAssetsPrivateServiceServer) AddAsset(context.Context, *AddAssetRequest) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAsset not implemented")
}
func (UnimplementedAssetsPrivateServiceServer) RecentAssets(context.Context, *common.RecentAssetsRequest) (*common.RecentAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecentAssets not implemented")
}
func (UnimplementedAssetsPrivateServiceServer) Assets(context.Context, *common.AssetsRequest) (*common.AssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assets not implemented")
}
func (UnimplementedAssetsPrivateServiceServer) mustEmbedUnimplementedAssetsPrivateServiceServer() {}

// UnsafeAssetsPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetsPrivateServiceServer will
// result in compilation errors.
type UnsafeAssetsPrivateServiceServer interface {
	mustEmbedUnimplementedAssetsPrivateServiceServer()
}

func RegisterAssetsPrivateServiceServer(s grpc.ServiceRegistrar, srv AssetsPrivateServiceServer) {
	s.RegisterService(&AssetsPrivateService_ServiceDesc, srv)
}

func _AssetsPrivateService_AddAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsPrivateServiceServer).AddAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.AssetsPrivateService/AddAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsPrivateServiceServer).AddAsset(ctx, req.(*AddAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsPrivateService_RecentAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RecentAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsPrivateServiceServer).RecentAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.AssetsPrivateService/RecentAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsPrivateServiceServer).RecentAssets(ctx, req.(*common.RecentAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsPrivateService_Assets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.AssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsPrivateServiceServer).Assets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.AssetsPrivateService/Assets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsPrivateServiceServer).Assets(ctx, req.(*common.AssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetsPrivateService_ServiceDesc is the grpc.ServiceDesc for AssetsPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetsPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.AssetsPrivateService",
	HandlerType: (*AssetsPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAsset",
			Handler:    _AssetsPrivateService_AddAsset_Handler,
		},
		{
			MethodName: "RecentAssets",
			Handler:    _AssetsPrivateService_RecentAssets_Handler,
		},
		{
			MethodName: "Assets",
			Handler:    _AssetsPrivateService_Assets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "private/assets_private_service.proto",
}
