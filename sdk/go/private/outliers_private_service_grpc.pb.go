// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package private

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OutliersPrivateServiceClient is the client API for OutliersPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OutliersPrivateServiceClient interface {
	OperatorOutliers(ctx context.Context, in *OperatorOutliersRequest, opts ...grpc.CallOption) (*OperatorOutliersResponse, error)
	Outliers(ctx context.Context, in *common.OutliersRequest, opts ...grpc.CallOption) (*common.OutliersResponse, error)
}

type outliersPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOutliersPrivateServiceClient(cc grpc.ClientConnInterface) OutliersPrivateServiceClient {
	return &outliersPrivateServiceClient{cc}
}

func (c *outliersPrivateServiceClient) OperatorOutliers(ctx context.Context, in *OperatorOutliersRequest, opts ...grpc.CallOption) (*OperatorOutliersResponse, error) {
	out := new(OperatorOutliersResponse)
	err := c.cc.Invoke(ctx, "/titanium.OutliersPrivateService/OperatorOutliers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outliersPrivateServiceClient) Outliers(ctx context.Context, in *common.OutliersRequest, opts ...grpc.CallOption) (*common.OutliersResponse, error) {
	out := new(common.OutliersResponse)
	err := c.cc.Invoke(ctx, "/titanium.OutliersPrivateService/Outliers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OutliersPrivateServiceServer is the server API for OutliersPrivateService service.
// All implementations must embed UnimplementedOutliersPrivateServiceServer
// for forward compatibility
type OutliersPrivateServiceServer interface {
	OperatorOutliers(context.Context, *OperatorOutliersRequest) (*OperatorOutliersResponse, error)
	Outliers(context.Context, *common.OutliersRequest) (*common.OutliersResponse, error)
	mustEmbedUnimplementedOutliersPrivateServiceServer()
}

// UnimplementedOutliersPrivateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOutliersPrivateServiceServer struct {
}

func (UnimplementedOutliersPrivateServiceServer) OperatorOutliers(context.Context, *OperatorOutliersRequest) (*OperatorOutliersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorOutliers not implemented")
}
func (UnimplementedOutliersPrivateServiceServer) Outliers(context.Context, *common.OutliersRequest) (*common.OutliersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Outliers not implemented")
}
func (UnimplementedOutliersPrivateServiceServer) mustEmbedUnimplementedOutliersPrivateServiceServer() {
}

// UnsafeOutliersPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OutliersPrivateServiceServer will
// result in compilation errors.
type UnsafeOutliersPrivateServiceServer interface {
	mustEmbedUnimplementedOutliersPrivateServiceServer()
}

func RegisterOutliersPrivateServiceServer(s grpc.ServiceRegistrar, srv OutliersPrivateServiceServer) {
	s.RegisterService(&OutliersPrivateService_ServiceDesc, srv)
}

func _OutliersPrivateService_OperatorOutliers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorOutliersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutliersPrivateServiceServer).OperatorOutliers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.OutliersPrivateService/OperatorOutliers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutliersPrivateServiceServer).OperatorOutliers(ctx, req.(*OperatorOutliersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutliersPrivateService_Outliers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.OutliersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutliersPrivateServiceServer).Outliers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.OutliersPrivateService/Outliers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutliersPrivateServiceServer).Outliers(ctx, req.(*common.OutliersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OutliersPrivateService_ServiceDesc is the grpc.ServiceDesc for OutliersPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OutliersPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.OutliersPrivateService",
	HandlerType: (*OutliersPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OperatorOutliers",
			Handler:    _OutliersPrivateService_OperatorOutliers_Handler,
		},
		{
			MethodName: "Outliers",
			Handler:    _OutliersPrivateService_Outliers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "private/outliers_private_service.proto",
}
