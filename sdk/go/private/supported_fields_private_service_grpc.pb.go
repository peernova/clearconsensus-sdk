// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package private

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SupportedFieldsPrivateServiceClient is the client API for SupportedFieldsPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SupportedFieldsPrivateServiceClient interface {
	CreateSupportedFields(ctx context.Context, in *SupportedFieldsValues, opts ...grpc.CallOption) (*common.MessageResponse, error)
	AddSupportedFields(ctx context.Context, in *SupportedFieldsValues, opts ...grpc.CallOption) (*common.MessageResponse, error)
	DeleteSupportedFields(ctx context.Context, in *SupportedFieldsValues, opts ...grpc.CallOption) (*common.MessageResponse, error)
}

type supportedFieldsPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSupportedFieldsPrivateServiceClient(cc grpc.ClientConnInterface) SupportedFieldsPrivateServiceClient {
	return &supportedFieldsPrivateServiceClient{cc}
}

func (c *supportedFieldsPrivateServiceClient) CreateSupportedFields(ctx context.Context, in *SupportedFieldsValues, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/titanium.SupportedFieldsPrivateService/CreateSupportedFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportedFieldsPrivateServiceClient) AddSupportedFields(ctx context.Context, in *SupportedFieldsValues, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/titanium.SupportedFieldsPrivateService/AddSupportedFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportedFieldsPrivateServiceClient) DeleteSupportedFields(ctx context.Context, in *SupportedFieldsValues, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/titanium.SupportedFieldsPrivateService/DeleteSupportedFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupportedFieldsPrivateServiceServer is the server API for SupportedFieldsPrivateService service.
// All implementations must embed UnimplementedSupportedFieldsPrivateServiceServer
// for forward compatibility
type SupportedFieldsPrivateServiceServer interface {
	CreateSupportedFields(context.Context, *SupportedFieldsValues) (*common.MessageResponse, error)
	AddSupportedFields(context.Context, *SupportedFieldsValues) (*common.MessageResponse, error)
	DeleteSupportedFields(context.Context, *SupportedFieldsValues) (*common.MessageResponse, error)
	mustEmbedUnimplementedSupportedFieldsPrivateServiceServer()
}

// UnimplementedSupportedFieldsPrivateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSupportedFieldsPrivateServiceServer struct {
}

func (UnimplementedSupportedFieldsPrivateServiceServer) CreateSupportedFields(context.Context, *SupportedFieldsValues) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupportedFields not implemented")
}
func (UnimplementedSupportedFieldsPrivateServiceServer) AddSupportedFields(context.Context, *SupportedFieldsValues) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSupportedFields not implemented")
}
func (UnimplementedSupportedFieldsPrivateServiceServer) DeleteSupportedFields(context.Context, *SupportedFieldsValues) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSupportedFields not implemented")
}
func (UnimplementedSupportedFieldsPrivateServiceServer) mustEmbedUnimplementedSupportedFieldsPrivateServiceServer() {
}

// UnsafeSupportedFieldsPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SupportedFieldsPrivateServiceServer will
// result in compilation errors.
type UnsafeSupportedFieldsPrivateServiceServer interface {
	mustEmbedUnimplementedSupportedFieldsPrivateServiceServer()
}

func RegisterSupportedFieldsPrivateServiceServer(s grpc.ServiceRegistrar, srv SupportedFieldsPrivateServiceServer) {
	s.RegisterService(&SupportedFieldsPrivateService_ServiceDesc, srv)
}

func _SupportedFieldsPrivateService_CreateSupportedFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportedFieldsValues)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportedFieldsPrivateServiceServer).CreateSupportedFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.SupportedFieldsPrivateService/CreateSupportedFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportedFieldsPrivateServiceServer).CreateSupportedFields(ctx, req.(*SupportedFieldsValues))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupportedFieldsPrivateService_AddSupportedFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportedFieldsValues)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportedFieldsPrivateServiceServer).AddSupportedFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.SupportedFieldsPrivateService/AddSupportedFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportedFieldsPrivateServiceServer).AddSupportedFields(ctx, req.(*SupportedFieldsValues))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupportedFieldsPrivateService_DeleteSupportedFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportedFieldsValues)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportedFieldsPrivateServiceServer).DeleteSupportedFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.SupportedFieldsPrivateService/DeleteSupportedFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportedFieldsPrivateServiceServer).DeleteSupportedFields(ctx, req.(*SupportedFieldsValues))
	}
	return interceptor(ctx, in, info, handler)
}

// SupportedFieldsPrivateService_ServiceDesc is the grpc.ServiceDesc for SupportedFieldsPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SupportedFieldsPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.SupportedFieldsPrivateService",
	HandlerType: (*SupportedFieldsPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSupportedFields",
			Handler:    _SupportedFieldsPrivateService_CreateSupportedFields_Handler,
		},
		{
			MethodName: "AddSupportedFields",
			Handler:    _SupportedFieldsPrivateService_AddSupportedFields_Handler,
		},
		{
			MethodName: "DeleteSupportedFields",
			Handler:    _SupportedFieldsPrivateService_DeleteSupportedFields_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "private/supported_fields_private_service.proto",
}
