// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package private

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataServicePrivateClient is the client API for DataServicePrivate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServicePrivateClient interface {
	// todo remove /operator from URL paths
	// ExportReport returns pre signed s3 urls which can be used for export report(and compression type)
	ExportReport(ctx context.Context, in *common.ExportReportRequest, opts ...grpc.CallOption) (*common.ExportResponse, error)
	// todo remove /operator from URL paths
	// AuthorizeUpload shows availability of uploading for user.
	AuthorizeUpload(ctx context.Context, in *common.UploadURLRequest, opts ...grpc.CallOption) (*UploadAuthorizationResponse, error)
	// NotifyUpload returns message with notify that data was uploaded according to url in request.
	NotifyUpload(ctx context.Context, in *UploadNotifyRequest, opts ...grpc.CallOption) (*common.MessageResponse, error)
}

type dataServicePrivateClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServicePrivateClient(cc grpc.ClientConnInterface) DataServicePrivateClient {
	return &dataServicePrivateClient{cc}
}

func (c *dataServicePrivateClient) ExportReport(ctx context.Context, in *common.ExportReportRequest, opts ...grpc.CallOption) (*common.ExportResponse, error) {
	out := new(common.ExportResponse)
	err := c.cc.Invoke(ctx, "/titanium.DataServicePrivate/ExportReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServicePrivateClient) AuthorizeUpload(ctx context.Context, in *common.UploadURLRequest, opts ...grpc.CallOption) (*UploadAuthorizationResponse, error) {
	out := new(UploadAuthorizationResponse)
	err := c.cc.Invoke(ctx, "/titanium.DataServicePrivate/AuthorizeUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServicePrivateClient) NotifyUpload(ctx context.Context, in *UploadNotifyRequest, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/titanium.DataServicePrivate/NotifyUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServicePrivateServer is the server API for DataServicePrivate service.
// All implementations must embed UnimplementedDataServicePrivateServer
// for forward compatibility
type DataServicePrivateServer interface {
	// todo remove /operator from URL paths
	// ExportReport returns pre signed s3 urls which can be used for export report(and compression type)
	ExportReport(context.Context, *common.ExportReportRequest) (*common.ExportResponse, error)
	// todo remove /operator from URL paths
	// AuthorizeUpload shows availability of uploading for user.
	AuthorizeUpload(context.Context, *common.UploadURLRequest) (*UploadAuthorizationResponse, error)
	// NotifyUpload returns message with notify that data was uploaded according to url in request.
	NotifyUpload(context.Context, *UploadNotifyRequest) (*common.MessageResponse, error)
	mustEmbedUnimplementedDataServicePrivateServer()
}

// UnimplementedDataServicePrivateServer must be embedded to have forward compatible implementations.
type UnimplementedDataServicePrivateServer struct {
}

func (UnimplementedDataServicePrivateServer) ExportReport(context.Context, *common.ExportReportRequest) (*common.ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportReport not implemented")
}
func (UnimplementedDataServicePrivateServer) AuthorizeUpload(context.Context, *common.UploadURLRequest) (*UploadAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeUpload not implemented")
}
func (UnimplementedDataServicePrivateServer) NotifyUpload(context.Context, *UploadNotifyRequest) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyUpload not implemented")
}
func (UnimplementedDataServicePrivateServer) mustEmbedUnimplementedDataServicePrivateServer() {}

// UnsafeDataServicePrivateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServicePrivateServer will
// result in compilation errors.
type UnsafeDataServicePrivateServer interface {
	mustEmbedUnimplementedDataServicePrivateServer()
}

func RegisterDataServicePrivateServer(s grpc.ServiceRegistrar, srv DataServicePrivateServer) {
	s.RegisterService(&DataServicePrivate_ServiceDesc, srv)
}

func _DataServicePrivate_ExportReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ExportReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServicePrivateServer).ExportReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DataServicePrivate/ExportReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServicePrivateServer).ExportReport(ctx, req.(*common.ExportReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServicePrivate_AuthorizeUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UploadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServicePrivateServer).AuthorizeUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DataServicePrivate/AuthorizeUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServicePrivateServer).AuthorizeUpload(ctx, req.(*common.UploadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServicePrivate_NotifyUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServicePrivateServer).NotifyUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DataServicePrivate/NotifyUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServicePrivateServer).NotifyUpload(ctx, req.(*UploadNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataServicePrivate_ServiceDesc is the grpc.ServiceDesc for DataServicePrivate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataServicePrivate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.DataServicePrivate",
	HandlerType: (*DataServicePrivateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExportReport",
			Handler:    _DataServicePrivate_ExportReport_Handler,
		},
		{
			MethodName: "AuthorizeUpload",
			Handler:    _DataServicePrivate_AuthorizeUpload_Handler,
		},
		{
			MethodName: "NotifyUpload",
			Handler:    _DataServicePrivate_NotifyUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "private/data_private_service.proto",
}
