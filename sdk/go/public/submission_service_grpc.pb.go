// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubmissionServiceClient is the client API for SubmissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubmissionServiceClient interface {
	// GetFilesView returns information about submitted to s3 storage files.
	GetFilesView(ctx context.Context, in *common.GetSubmissionFilesRequest, opts ...grpc.CallOption) (*common.GetSubmissionFilesResponse, error)
}

type submissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubmissionServiceClient(cc grpc.ClientConnInterface) SubmissionServiceClient {
	return &submissionServiceClient{cc}
}

func (c *submissionServiceClient) GetFilesView(ctx context.Context, in *common.GetSubmissionFilesRequest, opts ...grpc.CallOption) (*common.GetSubmissionFilesResponse, error) {
	out := new(common.GetSubmissionFilesResponse)
	err := c.cc.Invoke(ctx, "/titanium.SubmissionService/GetFilesView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubmissionServiceServer is the server API for SubmissionService service.
// All implementations must embed UnimplementedSubmissionServiceServer
// for forward compatibility
type SubmissionServiceServer interface {
	// GetFilesView returns information about submitted to s3 storage files.
	GetFilesView(context.Context, *common.GetSubmissionFilesRequest) (*common.GetSubmissionFilesResponse, error)
	mustEmbedUnimplementedSubmissionServiceServer()
}

// UnimplementedSubmissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubmissionServiceServer struct {
}

func (UnimplementedSubmissionServiceServer) GetFilesView(context.Context, *common.GetSubmissionFilesRequest) (*common.GetSubmissionFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilesView not implemented")
}
func (UnimplementedSubmissionServiceServer) mustEmbedUnimplementedSubmissionServiceServer() {}

// UnsafeSubmissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubmissionServiceServer will
// result in compilation errors.
type UnsafeSubmissionServiceServer interface {
	mustEmbedUnimplementedSubmissionServiceServer()
}

func RegisterSubmissionServiceServer(s grpc.ServiceRegistrar, srv SubmissionServiceServer) {
	s.RegisterService(&SubmissionService_ServiceDesc, srv)
}

func _SubmissionService_GetFilesView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetSubmissionFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmissionServiceServer).GetFilesView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.SubmissionService/GetFilesView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmissionServiceServer).GetFilesView(ctx, req.(*common.GetSubmissionFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubmissionService_ServiceDesc is the grpc.ServiceDesc for SubmissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubmissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.SubmissionService",
	HandlerType: (*SubmissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFilesView",
			Handler:    _SubmissionService_GetFilesView_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/submission_service.proto",
}
