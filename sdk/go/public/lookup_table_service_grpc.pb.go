// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LookupTableServiceClient is the client API for LookupTableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LookupTableServiceClient interface {
	AddLookupTable(ctx context.Context, in *common.AddLookupTableRequest, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error)
	GetLookupTable(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.GetLookupTableResponse, error)
	ListLookupTables(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*common.ListLookupTableResponse, error)
	ListLookupTableVersions(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.ListVersionResponse, error)
	EnableLookupTable(ctx context.Context, in *common.EnableDisableRequest, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error)
	DisableLookupTable(ctx context.Context, in *common.EnableDisableRequest, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error)
}

type lookupTableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLookupTableServiceClient(cc grpc.ClientConnInterface) LookupTableServiceClient {
	return &lookupTableServiceClient{cc}
}

func (c *lookupTableServiceClient) AddLookupTable(ctx context.Context, in *common.AddLookupTableRequest, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error) {
	out := new(common.AcknowledgeResponse)
	err := c.cc.Invoke(ctx, "/titanium.LookupTableService/AddLookupTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupTableServiceClient) GetLookupTable(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.GetLookupTableResponse, error) {
	out := new(common.GetLookupTableResponse)
	err := c.cc.Invoke(ctx, "/titanium.LookupTableService/GetLookupTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupTableServiceClient) ListLookupTables(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*common.ListLookupTableResponse, error) {
	out := new(common.ListLookupTableResponse)
	err := c.cc.Invoke(ctx, "/titanium.LookupTableService/ListLookupTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupTableServiceClient) ListLookupTableVersions(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.ListVersionResponse, error) {
	out := new(common.ListVersionResponse)
	err := c.cc.Invoke(ctx, "/titanium.LookupTableService/ListLookupTableVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupTableServiceClient) EnableLookupTable(ctx context.Context, in *common.EnableDisableRequest, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error) {
	out := new(common.AcknowledgeResponse)
	err := c.cc.Invoke(ctx, "/titanium.LookupTableService/EnableLookupTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupTableServiceClient) DisableLookupTable(ctx context.Context, in *common.EnableDisableRequest, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error) {
	out := new(common.AcknowledgeResponse)
	err := c.cc.Invoke(ctx, "/titanium.LookupTableService/DisableLookupTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LookupTableServiceServer is the server API for LookupTableService service.
// All implementations must embed UnimplementedLookupTableServiceServer
// for forward compatibility
type LookupTableServiceServer interface {
	AddLookupTable(context.Context, *common.AddLookupTableRequest) (*common.AcknowledgeResponse, error)
	GetLookupTable(context.Context, *common.GetDefinition) (*common.GetLookupTableResponse, error)
	ListLookupTables(context.Context, *common.ListRequest) (*common.ListLookupTableResponse, error)
	ListLookupTableVersions(context.Context, *common.GetDefinition) (*common.ListVersionResponse, error)
	EnableLookupTable(context.Context, *common.EnableDisableRequest) (*common.AcknowledgeResponse, error)
	DisableLookupTable(context.Context, *common.EnableDisableRequest) (*common.AcknowledgeResponse, error)
	mustEmbedUnimplementedLookupTableServiceServer()
}

// UnimplementedLookupTableServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLookupTableServiceServer struct {
}

func (UnimplementedLookupTableServiceServer) AddLookupTable(context.Context, *common.AddLookupTableRequest) (*common.AcknowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLookupTable not implemented")
}
func (UnimplementedLookupTableServiceServer) GetLookupTable(context.Context, *common.GetDefinition) (*common.GetLookupTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLookupTable not implemented")
}
func (UnimplementedLookupTableServiceServer) ListLookupTables(context.Context, *common.ListRequest) (*common.ListLookupTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLookupTables not implemented")
}
func (UnimplementedLookupTableServiceServer) ListLookupTableVersions(context.Context, *common.GetDefinition) (*common.ListVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLookupTableVersions not implemented")
}
func (UnimplementedLookupTableServiceServer) EnableLookupTable(context.Context, *common.EnableDisableRequest) (*common.AcknowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableLookupTable not implemented")
}
func (UnimplementedLookupTableServiceServer) DisableLookupTable(context.Context, *common.EnableDisableRequest) (*common.AcknowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableLookupTable not implemented")
}
func (UnimplementedLookupTableServiceServer) mustEmbedUnimplementedLookupTableServiceServer() {}

// UnsafeLookupTableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LookupTableServiceServer will
// result in compilation errors.
type UnsafeLookupTableServiceServer interface {
	mustEmbedUnimplementedLookupTableServiceServer()
}

func RegisterLookupTableServiceServer(s grpc.ServiceRegistrar, srv LookupTableServiceServer) {
	s.RegisterService(&LookupTableService_ServiceDesc, srv)
}

func _LookupTableService_AddLookupTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.AddLookupTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupTableServiceServer).AddLookupTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.LookupTableService/AddLookupTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupTableServiceServer).AddLookupTable(ctx, req.(*common.AddLookupTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LookupTableService_GetLookupTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupTableServiceServer).GetLookupTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.LookupTableService/GetLookupTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupTableServiceServer).GetLookupTable(ctx, req.(*common.GetDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _LookupTableService_ListLookupTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupTableServiceServer).ListLookupTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.LookupTableService/ListLookupTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupTableServiceServer).ListLookupTables(ctx, req.(*common.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LookupTableService_ListLookupTableVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupTableServiceServer).ListLookupTableVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.LookupTableService/ListLookupTableVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupTableServiceServer).ListLookupTableVersions(ctx, req.(*common.GetDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _LookupTableService_EnableLookupTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.EnableDisableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupTableServiceServer).EnableLookupTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.LookupTableService/EnableLookupTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupTableServiceServer).EnableLookupTable(ctx, req.(*common.EnableDisableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LookupTableService_DisableLookupTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.EnableDisableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupTableServiceServer).DisableLookupTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.LookupTableService/DisableLookupTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupTableServiceServer).DisableLookupTable(ctx, req.(*common.EnableDisableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LookupTableService_ServiceDesc is the grpc.ServiceDesc for LookupTableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LookupTableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.LookupTableService",
	HandlerType: (*LookupTableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLookupTable",
			Handler:    _LookupTableService_AddLookupTable_Handler,
		},
		{
			MethodName: "GetLookupTable",
			Handler:    _LookupTableService_GetLookupTable_Handler,
		},
		{
			MethodName: "ListLookupTables",
			Handler:    _LookupTableService_ListLookupTables_Handler,
		},
		{
			MethodName: "ListLookupTableVersions",
			Handler:    _LookupTableService_ListLookupTableVersions_Handler,
		},
		{
			MethodName: "EnableLookupTable",
			Handler:    _LookupTableService_EnableLookupTable_Handler,
		},
		{
			MethodName: "DisableLookupTable",
			Handler:    _LookupTableService_DisableLookupTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/lookup_table_service.proto",
}
