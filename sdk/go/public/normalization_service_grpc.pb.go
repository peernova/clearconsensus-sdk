// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NormalizationServiceClient is the client API for NormalizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NormalizationServiceClient interface {
	AddNormalizationRule(ctx context.Context, in *common.NormalizationRuleDefinition, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error)
	GetNormalizationRule(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.NormalizationRuleResponse, error)
	EnableNormalizationRule(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error)
	DisableNormalizationRule(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error)
	ListNormalizationRules(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*common.ListRuleResponse, error)
	ListNormalizationRuleVersions(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.ListVersionResponse, error)
	GetNormalizationRuleVersion(ctx context.Context, in *common.VersionRequest, opts ...grpc.CallOption) (*common.NormalizationRuleResponse, error)
}

type normalizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNormalizationServiceClient(cc grpc.ClientConnInterface) NormalizationServiceClient {
	return &normalizationServiceClient{cc}
}

func (c *normalizationServiceClient) AddNormalizationRule(ctx context.Context, in *common.NormalizationRuleDefinition, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error) {
	out := new(common.AcknowledgeResponse)
	err := c.cc.Invoke(ctx, "/titanium.NormalizationService/AddNormalizationRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *normalizationServiceClient) GetNormalizationRule(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.NormalizationRuleResponse, error) {
	out := new(common.NormalizationRuleResponse)
	err := c.cc.Invoke(ctx, "/titanium.NormalizationService/GetNormalizationRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *normalizationServiceClient) EnableNormalizationRule(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error) {
	out := new(common.AcknowledgeResponse)
	err := c.cc.Invoke(ctx, "/titanium.NormalizationService/EnableNormalizationRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *normalizationServiceClient) DisableNormalizationRule(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error) {
	out := new(common.AcknowledgeResponse)
	err := c.cc.Invoke(ctx, "/titanium.NormalizationService/DisableNormalizationRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *normalizationServiceClient) ListNormalizationRules(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*common.ListRuleResponse, error) {
	out := new(common.ListRuleResponse)
	err := c.cc.Invoke(ctx, "/titanium.NormalizationService/ListNormalizationRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *normalizationServiceClient) ListNormalizationRuleVersions(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.ListVersionResponse, error) {
	out := new(common.ListVersionResponse)
	err := c.cc.Invoke(ctx, "/titanium.NormalizationService/ListNormalizationRuleVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *normalizationServiceClient) GetNormalizationRuleVersion(ctx context.Context, in *common.VersionRequest, opts ...grpc.CallOption) (*common.NormalizationRuleResponse, error) {
	out := new(common.NormalizationRuleResponse)
	err := c.cc.Invoke(ctx, "/titanium.NormalizationService/GetNormalizationRuleVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NormalizationServiceServer is the server API for NormalizationService service.
// All implementations must embed UnimplementedNormalizationServiceServer
// for forward compatibility
type NormalizationServiceServer interface {
	AddNormalizationRule(context.Context, *common.NormalizationRuleDefinition) (*common.AcknowledgeResponse, error)
	GetNormalizationRule(context.Context, *common.GetDefinition) (*common.NormalizationRuleResponse, error)
	EnableNormalizationRule(context.Context, *common.GetDefinition) (*common.AcknowledgeResponse, error)
	DisableNormalizationRule(context.Context, *common.GetDefinition) (*common.AcknowledgeResponse, error)
	ListNormalizationRules(context.Context, *common.ListRequest) (*common.ListRuleResponse, error)
	ListNormalizationRuleVersions(context.Context, *common.GetDefinition) (*common.ListVersionResponse, error)
	GetNormalizationRuleVersion(context.Context, *common.VersionRequest) (*common.NormalizationRuleResponse, error)
	mustEmbedUnimplementedNormalizationServiceServer()
}

// UnimplementedNormalizationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNormalizationServiceServer struct {
}

func (UnimplementedNormalizationServiceServer) AddNormalizationRule(context.Context, *common.NormalizationRuleDefinition) (*common.AcknowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNormalizationRule not implemented")
}
func (UnimplementedNormalizationServiceServer) GetNormalizationRule(context.Context, *common.GetDefinition) (*common.NormalizationRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNormalizationRule not implemented")
}
func (UnimplementedNormalizationServiceServer) EnableNormalizationRule(context.Context, *common.GetDefinition) (*common.AcknowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableNormalizationRule not implemented")
}
func (UnimplementedNormalizationServiceServer) DisableNormalizationRule(context.Context, *common.GetDefinition) (*common.AcknowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableNormalizationRule not implemented")
}
func (UnimplementedNormalizationServiceServer) ListNormalizationRules(context.Context, *common.ListRequest) (*common.ListRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNormalizationRules not implemented")
}
func (UnimplementedNormalizationServiceServer) ListNormalizationRuleVersions(context.Context, *common.GetDefinition) (*common.ListVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNormalizationRuleVersions not implemented")
}
func (UnimplementedNormalizationServiceServer) GetNormalizationRuleVersion(context.Context, *common.VersionRequest) (*common.NormalizationRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNormalizationRuleVersion not implemented")
}
func (UnimplementedNormalizationServiceServer) mustEmbedUnimplementedNormalizationServiceServer() {}

// UnsafeNormalizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NormalizationServiceServer will
// result in compilation errors.
type UnsafeNormalizationServiceServer interface {
	mustEmbedUnimplementedNormalizationServiceServer()
}

func RegisterNormalizationServiceServer(s grpc.ServiceRegistrar, srv NormalizationServiceServer) {
	s.RegisterService(&NormalizationService_ServiceDesc, srv)
}

func _NormalizationService_AddNormalizationRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NormalizationRuleDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NormalizationServiceServer).AddNormalizationRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.NormalizationService/AddNormalizationRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NormalizationServiceServer).AddNormalizationRule(ctx, req.(*common.NormalizationRuleDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _NormalizationService_GetNormalizationRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NormalizationServiceServer).GetNormalizationRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.NormalizationService/GetNormalizationRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NormalizationServiceServer).GetNormalizationRule(ctx, req.(*common.GetDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _NormalizationService_EnableNormalizationRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NormalizationServiceServer).EnableNormalizationRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.NormalizationService/EnableNormalizationRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NormalizationServiceServer).EnableNormalizationRule(ctx, req.(*common.GetDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _NormalizationService_DisableNormalizationRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NormalizationServiceServer).DisableNormalizationRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.NormalizationService/DisableNormalizationRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NormalizationServiceServer).DisableNormalizationRule(ctx, req.(*common.GetDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _NormalizationService_ListNormalizationRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NormalizationServiceServer).ListNormalizationRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.NormalizationService/ListNormalizationRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NormalizationServiceServer).ListNormalizationRules(ctx, req.(*common.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NormalizationService_ListNormalizationRuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NormalizationServiceServer).ListNormalizationRuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.NormalizationService/ListNormalizationRuleVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NormalizationServiceServer).ListNormalizationRuleVersions(ctx, req.(*common.GetDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _NormalizationService_GetNormalizationRuleVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NormalizationServiceServer).GetNormalizationRuleVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.NormalizationService/GetNormalizationRuleVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NormalizationServiceServer).GetNormalizationRuleVersion(ctx, req.(*common.VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NormalizationService_ServiceDesc is the grpc.ServiceDesc for NormalizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NormalizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.NormalizationService",
	HandlerType: (*NormalizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNormalizationRule",
			Handler:    _NormalizationService_AddNormalizationRule_Handler,
		},
		{
			MethodName: "GetNormalizationRule",
			Handler:    _NormalizationService_GetNormalizationRule_Handler,
		},
		{
			MethodName: "EnableNormalizationRule",
			Handler:    _NormalizationService_EnableNormalizationRule_Handler,
		},
		{
			MethodName: "DisableNormalizationRule",
			Handler:    _NormalizationService_DisableNormalizationRule_Handler,
		},
		{
			MethodName: "ListNormalizationRules",
			Handler:    _NormalizationService_ListNormalizationRules_Handler,
		},
		{
			MethodName: "ListNormalizationRuleVersions",
			Handler:    _NormalizationService_ListNormalizationRuleVersions_Handler,
		},
		{
			MethodName: "GetNormalizationRuleVersion",
			Handler:    _NormalizationService_GetNormalizationRuleVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/normalization_service.proto",
}
