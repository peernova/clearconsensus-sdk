// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SupportedFieldsServiceClient is the client API for SupportedFieldsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SupportedFieldsServiceClient interface {
	ListSupportedFields(ctx context.Context, in *common.GetSupportedFields, opts ...grpc.CallOption) (*common.GetSupportedFieldsResponse, error)
	GetSupportedFieldsValues(ctx context.Context, in *common.SupportedField, opts ...grpc.CallOption) (*common.GetFieldValuesResponse, error)
}

type supportedFieldsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSupportedFieldsServiceClient(cc grpc.ClientConnInterface) SupportedFieldsServiceClient {
	return &supportedFieldsServiceClient{cc}
}

func (c *supportedFieldsServiceClient) ListSupportedFields(ctx context.Context, in *common.GetSupportedFields, opts ...grpc.CallOption) (*common.GetSupportedFieldsResponse, error) {
	out := new(common.GetSupportedFieldsResponse)
	err := c.cc.Invoke(ctx, "/titanium.SupportedFieldsService/ListSupportedFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supportedFieldsServiceClient) GetSupportedFieldsValues(ctx context.Context, in *common.SupportedField, opts ...grpc.CallOption) (*common.GetFieldValuesResponse, error) {
	out := new(common.GetFieldValuesResponse)
	err := c.cc.Invoke(ctx, "/titanium.SupportedFieldsService/GetSupportedFieldsValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupportedFieldsServiceServer is the server API for SupportedFieldsService service.
// All implementations must embed UnimplementedSupportedFieldsServiceServer
// for forward compatibility
type SupportedFieldsServiceServer interface {
	ListSupportedFields(context.Context, *common.GetSupportedFields) (*common.GetSupportedFieldsResponse, error)
	GetSupportedFieldsValues(context.Context, *common.SupportedField) (*common.GetFieldValuesResponse, error)
	mustEmbedUnimplementedSupportedFieldsServiceServer()
}

// UnimplementedSupportedFieldsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSupportedFieldsServiceServer struct {
}

func (UnimplementedSupportedFieldsServiceServer) ListSupportedFields(context.Context, *common.GetSupportedFields) (*common.GetSupportedFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSupportedFields not implemented")
}
func (UnimplementedSupportedFieldsServiceServer) GetSupportedFieldsValues(context.Context, *common.SupportedField) (*common.GetFieldValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedFieldsValues not implemented")
}
func (UnimplementedSupportedFieldsServiceServer) mustEmbedUnimplementedSupportedFieldsServiceServer() {
}

// UnsafeSupportedFieldsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SupportedFieldsServiceServer will
// result in compilation errors.
type UnsafeSupportedFieldsServiceServer interface {
	mustEmbedUnimplementedSupportedFieldsServiceServer()
}

func RegisterSupportedFieldsServiceServer(s grpc.ServiceRegistrar, srv SupportedFieldsServiceServer) {
	s.RegisterService(&SupportedFieldsService_ServiceDesc, srv)
}

func _SupportedFieldsService_ListSupportedFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetSupportedFields)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportedFieldsServiceServer).ListSupportedFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.SupportedFieldsService/ListSupportedFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportedFieldsServiceServer).ListSupportedFields(ctx, req.(*common.GetSupportedFields))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupportedFieldsService_GetSupportedFieldsValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SupportedField)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupportedFieldsServiceServer).GetSupportedFieldsValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.SupportedFieldsService/GetSupportedFieldsValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupportedFieldsServiceServer).GetSupportedFieldsValues(ctx, req.(*common.SupportedField))
	}
	return interceptor(ctx, in, info, handler)
}

// SupportedFieldsService_ServiceDesc is the grpc.ServiceDesc for SupportedFieldsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SupportedFieldsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.SupportedFieldsService",
	HandlerType: (*SupportedFieldsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSupportedFields",
			Handler:    _SupportedFieldsService_ListSupportedFields_Handler,
		},
		{
			MethodName: "GetSupportedFieldsValues",
			Handler:    _SupportedFieldsService_GetSupportedFieldsValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/supported_fields_service.proto",
}
