// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DtccServiceClient is the client API for DtccService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DtccServiceClient interface {
	GetDtccTable(ctx context.Context, in *DtccTabRequest, opts ...grpc.CallOption) (*DtccTabResponse, error)
}

type dtccServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDtccServiceClient(cc grpc.ClientConnInterface) DtccServiceClient {
	return &dtccServiceClient{cc}
}

func (c *dtccServiceClient) GetDtccTable(ctx context.Context, in *DtccTabRequest, opts ...grpc.CallOption) (*DtccTabResponse, error) {
	out := new(DtccTabResponse)
	err := c.cc.Invoke(ctx, "/titanium.DtccService/GetDtccTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DtccServiceServer is the server API for DtccService service.
// All implementations must embed UnimplementedDtccServiceServer
// for forward compatibility
type DtccServiceServer interface {
	GetDtccTable(context.Context, *DtccTabRequest) (*DtccTabResponse, error)
	mustEmbedUnimplementedDtccServiceServer()
}

// UnimplementedDtccServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDtccServiceServer struct {
}

func (UnimplementedDtccServiceServer) GetDtccTable(context.Context, *DtccTabRequest) (*DtccTabResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDtccTable not implemented")
}
func (UnimplementedDtccServiceServer) mustEmbedUnimplementedDtccServiceServer() {}

// UnsafeDtccServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DtccServiceServer will
// result in compilation errors.
type UnsafeDtccServiceServer interface {
	mustEmbedUnimplementedDtccServiceServer()
}

func RegisterDtccServiceServer(s grpc.ServiceRegistrar, srv DtccServiceServer) {
	s.RegisterService(&DtccService_ServiceDesc, srv)
}

func _DtccService_GetDtccTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DtccTabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtccServiceServer).GetDtccTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DtccService/GetDtccTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtccServiceServer).GetDtccTable(ctx, req.(*DtccTabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DtccService_ServiceDesc is the grpc.ServiceDesc for DtccService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DtccService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.DtccService",
	HandlerType: (*DtccServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDtccTable",
			Handler:    _DtccService_GetDtccTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/dtcc.proto",
}
