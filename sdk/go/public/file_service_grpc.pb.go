// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	// GetFilePreview retrieves a preview of a specified file.
	GetFilePreview(ctx context.Context, in *common.FileIdentifier, opts ...grpc.CallOption) (*common.FilePreview, error)
	// ListFiles retrieves a list of files.
	ListFiles(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*common.FileList, error)
	// SetFileDelimiter sets the delimiter for a specified file.
	SetFileDelimiter(ctx context.Context, in *common.SetFileDelimiterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetFileDelimiter retrieves the delimiter for a specified file.
	GetFileDelimiter(ctx context.Context, in *common.FileIdentifier, opts ...grpc.CallOption) (*common.FileDelimiterSetting, error)
	// SetFileDescriptor sets the descriptor for a specified file.
	SetFileDescriptor(ctx context.Context, in *common.SetFileDescriptorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetFileDescriptor retrieves the descriptor for a specified file.
	GetFileDescriptor(ctx context.Context, in *common.FileIdentifier, opts ...grpc.CallOption) (*common.FileDescriptorSetting, error)
	// FileSubmission submits a file for processing.
	FileSubmission(ctx context.Context, in *common.FileSubmissionRequest, opts ...grpc.CallOption) (*common.MessageResponse, error)
	// FileHistory retrieves the history for a specified file.
	FileHistory(ctx context.Context, in *common.FileHistoryRequest, opts ...grpc.CallOption) (*common.FileHistoryResponse, error)
	// GetFileExportUrl retrieves the export URL for a specified file.
	GetFileExportUrl(ctx context.Context, in *common.GetFileExportUrlRequest, opts ...grpc.CallOption) (*common.GetFileExportUrlResponse, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) GetFilePreview(ctx context.Context, in *common.FileIdentifier, opts ...grpc.CallOption) (*common.FilePreview, error) {
	out := new(common.FilePreview)
	err := c.cc.Invoke(ctx, "/titanium.FileService/GetFilePreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) ListFiles(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*common.FileList, error) {
	out := new(common.FileList)
	err := c.cc.Invoke(ctx, "/titanium.FileService/ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) SetFileDelimiter(ctx context.Context, in *common.SetFileDelimiterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/titanium.FileService/SetFileDelimiter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetFileDelimiter(ctx context.Context, in *common.FileIdentifier, opts ...grpc.CallOption) (*common.FileDelimiterSetting, error) {
	out := new(common.FileDelimiterSetting)
	err := c.cc.Invoke(ctx, "/titanium.FileService/GetFileDelimiter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) SetFileDescriptor(ctx context.Context, in *common.SetFileDescriptorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/titanium.FileService/SetFileDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetFileDescriptor(ctx context.Context, in *common.FileIdentifier, opts ...grpc.CallOption) (*common.FileDescriptorSetting, error) {
	out := new(common.FileDescriptorSetting)
	err := c.cc.Invoke(ctx, "/titanium.FileService/GetFileDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) FileSubmission(ctx context.Context, in *common.FileSubmissionRequest, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/titanium.FileService/FileSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) FileHistory(ctx context.Context, in *common.FileHistoryRequest, opts ...grpc.CallOption) (*common.FileHistoryResponse, error) {
	out := new(common.FileHistoryResponse)
	err := c.cc.Invoke(ctx, "/titanium.FileService/FileHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetFileExportUrl(ctx context.Context, in *common.GetFileExportUrlRequest, opts ...grpc.CallOption) (*common.GetFileExportUrlResponse, error) {
	out := new(common.GetFileExportUrlResponse)
	err := c.cc.Invoke(ctx, "/titanium.FileService/GetFileExportUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	// GetFilePreview retrieves a preview of a specified file.
	GetFilePreview(context.Context, *common.FileIdentifier) (*common.FilePreview, error)
	// ListFiles retrieves a list of files.
	ListFiles(context.Context, *common.ListRequest) (*common.FileList, error)
	// SetFileDelimiter sets the delimiter for a specified file.
	SetFileDelimiter(context.Context, *common.SetFileDelimiterRequest) (*emptypb.Empty, error)
	// GetFileDelimiter retrieves the delimiter for a specified file.
	GetFileDelimiter(context.Context, *common.FileIdentifier) (*common.FileDelimiterSetting, error)
	// SetFileDescriptor sets the descriptor for a specified file.
	SetFileDescriptor(context.Context, *common.SetFileDescriptorRequest) (*emptypb.Empty, error)
	// GetFileDescriptor retrieves the descriptor for a specified file.
	GetFileDescriptor(context.Context, *common.FileIdentifier) (*common.FileDescriptorSetting, error)
	// FileSubmission submits a file for processing.
	FileSubmission(context.Context, *common.FileSubmissionRequest) (*common.MessageResponse, error)
	// FileHistory retrieves the history for a specified file.
	FileHistory(context.Context, *common.FileHistoryRequest) (*common.FileHistoryResponse, error)
	// GetFileExportUrl retrieves the export URL for a specified file.
	GetFileExportUrl(context.Context, *common.GetFileExportUrlRequest) (*common.GetFileExportUrlResponse, error)
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) GetFilePreview(context.Context, *common.FileIdentifier) (*common.FilePreview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilePreview not implemented")
}
func (UnimplementedFileServiceServer) ListFiles(context.Context, *common.ListRequest) (*common.FileList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedFileServiceServer) SetFileDelimiter(context.Context, *common.SetFileDelimiterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFileDelimiter not implemented")
}
func (UnimplementedFileServiceServer) GetFileDelimiter(context.Context, *common.FileIdentifier) (*common.FileDelimiterSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileDelimiter not implemented")
}
func (UnimplementedFileServiceServer) SetFileDescriptor(context.Context, *common.SetFileDescriptorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFileDescriptor not implemented")
}
func (UnimplementedFileServiceServer) GetFileDescriptor(context.Context, *common.FileIdentifier) (*common.FileDescriptorSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileDescriptor not implemented")
}
func (UnimplementedFileServiceServer) FileSubmission(context.Context, *common.FileSubmissionRequest) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileSubmission not implemented")
}
func (UnimplementedFileServiceServer) FileHistory(context.Context, *common.FileHistoryRequest) (*common.FileHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileHistory not implemented")
}
func (UnimplementedFileServiceServer) GetFileExportUrl(context.Context, *common.GetFileExportUrlRequest) (*common.GetFileExportUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileExportUrl not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_GetFilePreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.FileIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFilePreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.FileService/GetFilePreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFilePreview(ctx, req.(*common.FileIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.FileService/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).ListFiles(ctx, req.(*common.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_SetFileDelimiter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SetFileDelimiterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).SetFileDelimiter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.FileService/SetFileDelimiter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).SetFileDelimiter(ctx, req.(*common.SetFileDelimiterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetFileDelimiter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.FileIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFileDelimiter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.FileService/GetFileDelimiter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFileDelimiter(ctx, req.(*common.FileIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_SetFileDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SetFileDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).SetFileDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.FileService/SetFileDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).SetFileDescriptor(ctx, req.(*common.SetFileDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetFileDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.FileIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFileDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.FileService/GetFileDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFileDescriptor(ctx, req.(*common.FileIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_FileSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.FileSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).FileSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.FileService/FileSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).FileSubmission(ctx, req.(*common.FileSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_FileHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.FileHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).FileHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.FileService/FileHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).FileHistory(ctx, req.(*common.FileHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetFileExportUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetFileExportUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFileExportUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.FileService/GetFileExportUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFileExportUrl(ctx, req.(*common.GetFileExportUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFilePreview",
			Handler:    _FileService_GetFilePreview_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _FileService_ListFiles_Handler,
		},
		{
			MethodName: "SetFileDelimiter",
			Handler:    _FileService_SetFileDelimiter_Handler,
		},
		{
			MethodName: "GetFileDelimiter",
			Handler:    _FileService_GetFileDelimiter_Handler,
		},
		{
			MethodName: "SetFileDescriptor",
			Handler:    _FileService_SetFileDescriptor_Handler,
		},
		{
			MethodName: "GetFileDescriptor",
			Handler:    _FileService_GetFileDescriptor_Handler,
		},
		{
			MethodName: "FileSubmission",
			Handler:    _FileService_FileSubmission_Handler,
		},
		{
			MethodName: "FileHistory",
			Handler:    _FileService_FileHistory_Handler,
		},
		{
			MethodName: "GetFileExportUrl",
			Handler:    _FileService_GetFileExportUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/file_service.proto",
}
