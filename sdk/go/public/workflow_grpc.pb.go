// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkflowServiceClient is the client API for WorkflowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowServiceClient interface {
	RunWorkflow(ctx context.Context, in *common.RunWorkflowRequest, opts ...grpc.CallOption) (*common.RunWorkflowResponse, error)
	ReprocessWorkflow(ctx context.Context, in *common.ReprocessWorkflowRequest, opts ...grpc.CallOption) (*common.RunWorkflowResponse, error)
	AddWorkflow(ctx context.Context, in *common.AddWorkflowDefinitionRequest, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error)
	GetWorkflow(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.WorkflowDefinitionResponse, error)
	ListWorkflows(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*common.WorkflowList, error)
	EnableWorkflow(ctx context.Context, in *common.EnableDisableRequest, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error)
	DisableWorkflow(ctx context.Context, in *common.EnableDisableRequest, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error)
	ListWorkflowActions(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*common.WorkflowList, error)
	GetWorkflowAction(ctx context.Context, in *common.GetActionRequest, opts ...grpc.CallOption) (*common.GetWorkflowActionResponse, error)
}

type workflowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowServiceClient(cc grpc.ClientConnInterface) WorkflowServiceClient {
	return &workflowServiceClient{cc}
}

func (c *workflowServiceClient) RunWorkflow(ctx context.Context, in *common.RunWorkflowRequest, opts ...grpc.CallOption) (*common.RunWorkflowResponse, error) {
	out := new(common.RunWorkflowResponse)
	err := c.cc.Invoke(ctx, "/titanium.WorkflowService/RunWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) ReprocessWorkflow(ctx context.Context, in *common.ReprocessWorkflowRequest, opts ...grpc.CallOption) (*common.RunWorkflowResponse, error) {
	out := new(common.RunWorkflowResponse)
	err := c.cc.Invoke(ctx, "/titanium.WorkflowService/ReprocessWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) AddWorkflow(ctx context.Context, in *common.AddWorkflowDefinitionRequest, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error) {
	out := new(common.AcknowledgeResponse)
	err := c.cc.Invoke(ctx, "/titanium.WorkflowService/AddWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflow(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.WorkflowDefinitionResponse, error) {
	out := new(common.WorkflowDefinitionResponse)
	err := c.cc.Invoke(ctx, "/titanium.WorkflowService/GetWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) ListWorkflows(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*common.WorkflowList, error) {
	out := new(common.WorkflowList)
	err := c.cc.Invoke(ctx, "/titanium.WorkflowService/ListWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) EnableWorkflow(ctx context.Context, in *common.EnableDisableRequest, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error) {
	out := new(common.AcknowledgeResponse)
	err := c.cc.Invoke(ctx, "/titanium.WorkflowService/EnableWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) DisableWorkflow(ctx context.Context, in *common.EnableDisableRequest, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error) {
	out := new(common.AcknowledgeResponse)
	err := c.cc.Invoke(ctx, "/titanium.WorkflowService/DisableWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) ListWorkflowActions(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*common.WorkflowList, error) {
	out := new(common.WorkflowList)
	err := c.cc.Invoke(ctx, "/titanium.WorkflowService/ListWorkflowActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowAction(ctx context.Context, in *common.GetActionRequest, opts ...grpc.CallOption) (*common.GetWorkflowActionResponse, error) {
	out := new(common.GetWorkflowActionResponse)
	err := c.cc.Invoke(ctx, "/titanium.WorkflowService/GetWorkflowAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowServiceServer is the server API for WorkflowService service.
// All implementations must embed UnimplementedWorkflowServiceServer
// for forward compatibility
type WorkflowServiceServer interface {
	RunWorkflow(context.Context, *common.RunWorkflowRequest) (*common.RunWorkflowResponse, error)
	ReprocessWorkflow(context.Context, *common.ReprocessWorkflowRequest) (*common.RunWorkflowResponse, error)
	AddWorkflow(context.Context, *common.AddWorkflowDefinitionRequest) (*common.AcknowledgeResponse, error)
	GetWorkflow(context.Context, *common.GetDefinition) (*common.WorkflowDefinitionResponse, error)
	ListWorkflows(context.Context, *common.ListRequest) (*common.WorkflowList, error)
	EnableWorkflow(context.Context, *common.EnableDisableRequest) (*common.AcknowledgeResponse, error)
	DisableWorkflow(context.Context, *common.EnableDisableRequest) (*common.AcknowledgeResponse, error)
	ListWorkflowActions(context.Context, *common.ListRequest) (*common.WorkflowList, error)
	GetWorkflowAction(context.Context, *common.GetActionRequest) (*common.GetWorkflowActionResponse, error)
	mustEmbedUnimplementedWorkflowServiceServer()
}

// UnimplementedWorkflowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkflowServiceServer struct {
}

func (UnimplementedWorkflowServiceServer) RunWorkflow(context.Context, *common.RunWorkflowRequest) (*common.RunWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) ReprocessWorkflow(context.Context, *common.ReprocessWorkflowRequest) (*common.RunWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReprocessWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) AddWorkflow(context.Context, *common.AddWorkflowDefinitionRequest) (*common.AcknowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) GetWorkflow(context.Context, *common.GetDefinition) (*common.WorkflowDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) ListWorkflows(context.Context, *common.ListRequest) (*common.WorkflowList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (UnimplementedWorkflowServiceServer) EnableWorkflow(context.Context, *common.EnableDisableRequest) (*common.AcknowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) DisableWorkflow(context.Context, *common.EnableDisableRequest) (*common.AcknowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) ListWorkflowActions(context.Context, *common.ListRequest) (*common.WorkflowList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflowActions not implemented")
}
func (UnimplementedWorkflowServiceServer) GetWorkflowAction(context.Context, *common.GetActionRequest) (*common.GetWorkflowActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowAction not implemented")
}
func (UnimplementedWorkflowServiceServer) mustEmbedUnimplementedWorkflowServiceServer() {}

// UnsafeWorkflowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowServiceServer will
// result in compilation errors.
type UnsafeWorkflowServiceServer interface {
	mustEmbedUnimplementedWorkflowServiceServer()
}

func RegisterWorkflowServiceServer(s grpc.ServiceRegistrar, srv WorkflowServiceServer) {
	s.RegisterService(&WorkflowService_ServiceDesc, srv)
}

func _WorkflowService_RunWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RunWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).RunWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.WorkflowService/RunWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).RunWorkflow(ctx, req.(*common.RunWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_ReprocessWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReprocessWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).ReprocessWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.WorkflowService/ReprocessWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).ReprocessWorkflow(ctx, req.(*common.ReprocessWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_AddWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.AddWorkflowDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).AddWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.WorkflowService/AddWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).AddWorkflow(ctx, req.(*common.AddWorkflowDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.WorkflowService/GetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflow(ctx, req.(*common.GetDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.WorkflowService/ListWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).ListWorkflows(ctx, req.(*common.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_EnableWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.EnableDisableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).EnableWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.WorkflowService/EnableWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).EnableWorkflow(ctx, req.(*common.EnableDisableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_DisableWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.EnableDisableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).DisableWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.WorkflowService/DisableWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).DisableWorkflow(ctx, req.(*common.EnableDisableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_ListWorkflowActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).ListWorkflowActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.WorkflowService/ListWorkflowActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).ListWorkflowActions(ctx, req.(*common.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.WorkflowService/GetWorkflowAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowAction(ctx, req.(*common.GetActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkflowService_ServiceDesc is the grpc.ServiceDesc for WorkflowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.WorkflowService",
	HandlerType: (*WorkflowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunWorkflow",
			Handler:    _WorkflowService_RunWorkflow_Handler,
		},
		{
			MethodName: "ReprocessWorkflow",
			Handler:    _WorkflowService_ReprocessWorkflow_Handler,
		},
		{
			MethodName: "AddWorkflow",
			Handler:    _WorkflowService_AddWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _WorkflowService_GetWorkflow_Handler,
		},
		{
			MethodName: "ListWorkflows",
			Handler:    _WorkflowService_ListWorkflows_Handler,
		},
		{
			MethodName: "EnableWorkflow",
			Handler:    _WorkflowService_EnableWorkflow_Handler,
		},
		{
			MethodName: "DisableWorkflow",
			Handler:    _WorkflowService_DisableWorkflow_Handler,
		},
		{
			MethodName: "ListWorkflowActions",
			Handler:    _WorkflowService_ListWorkflowActions_Handler,
		},
		{
			MethodName: "GetWorkflowAction",
			Handler:    _WorkflowService_GetWorkflowAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/workflow.proto",
}
