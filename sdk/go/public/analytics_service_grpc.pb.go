// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnalyticsControllerClient is the client API for AnalyticsController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsControllerClient interface {
	// FindDataQualityErrors returns data quality errors according to request.
	FindDataQualityErrors(ctx context.Context, in *common.GenericChartMetadataDataQuality, opts ...grpc.CallOption) (*common.GenericChartMetadataDataQualityResponse, error)
	// GetAllDataQualityErrors returns all existing data quality errors in the system.
	GetAllDataQualityErrors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.GenericChartMetadataDataQualityResponse, error)
	// FindConsensusAnalytics returns analytics related to specific consensus according to request.
	FindConsensusAnalytics(ctx context.Context, in *common.GenericChartMetadataDataQuality, opts ...grpc.CallOption) (*common.GenericChartMetadataDataQualityResponse, error)
	// GetAllConsensusAnalytics returns analytics related to all consensuses.
	GetAllConsensusAnalytics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.GenericChartMetadataDataQualityResponse, error)
	// GetPredefinedFilter returns pre defined filters according to request.
	GetPredefinedFilter(ctx context.Context, in *common.GetPredefinedFiltersRequest, opts ...grpc.CallOption) (*common.GetPredefinedFiltersResponse, error)
	// GetHistogram returns analytics(submission and consensus) represented by histogram according to request.
	GetHistogram(ctx context.Context, in *common.HistogramRequest, opts ...grpc.CallOption) (*common.HistogramResponse, error)
}

type analyticsControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsControllerClient(cc grpc.ClientConnInterface) AnalyticsControllerClient {
	return &analyticsControllerClient{cc}
}

func (c *analyticsControllerClient) FindDataQualityErrors(ctx context.Context, in *common.GenericChartMetadataDataQuality, opts ...grpc.CallOption) (*common.GenericChartMetadataDataQualityResponse, error) {
	out := new(common.GenericChartMetadataDataQualityResponse)
	err := c.cc.Invoke(ctx, "/titanium.AnalyticsController/FindDataQualityErrors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsControllerClient) GetAllDataQualityErrors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.GenericChartMetadataDataQualityResponse, error) {
	out := new(common.GenericChartMetadataDataQualityResponse)
	err := c.cc.Invoke(ctx, "/titanium.AnalyticsController/GetAllDataQualityErrors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsControllerClient) FindConsensusAnalytics(ctx context.Context, in *common.GenericChartMetadataDataQuality, opts ...grpc.CallOption) (*common.GenericChartMetadataDataQualityResponse, error) {
	out := new(common.GenericChartMetadataDataQualityResponse)
	err := c.cc.Invoke(ctx, "/titanium.AnalyticsController/FindConsensusAnalytics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsControllerClient) GetAllConsensusAnalytics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.GenericChartMetadataDataQualityResponse, error) {
	out := new(common.GenericChartMetadataDataQualityResponse)
	err := c.cc.Invoke(ctx, "/titanium.AnalyticsController/GetAllConsensusAnalytics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsControllerClient) GetPredefinedFilter(ctx context.Context, in *common.GetPredefinedFiltersRequest, opts ...grpc.CallOption) (*common.GetPredefinedFiltersResponse, error) {
	out := new(common.GetPredefinedFiltersResponse)
	err := c.cc.Invoke(ctx, "/titanium.AnalyticsController/GetPredefinedFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsControllerClient) GetHistogram(ctx context.Context, in *common.HistogramRequest, opts ...grpc.CallOption) (*common.HistogramResponse, error) {
	out := new(common.HistogramResponse)
	err := c.cc.Invoke(ctx, "/titanium.AnalyticsController/GetHistogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsControllerServer is the server API for AnalyticsController service.
// All implementations must embed UnimplementedAnalyticsControllerServer
// for forward compatibility
type AnalyticsControllerServer interface {
	// FindDataQualityErrors returns data quality errors according to request.
	FindDataQualityErrors(context.Context, *common.GenericChartMetadataDataQuality) (*common.GenericChartMetadataDataQualityResponse, error)
	// GetAllDataQualityErrors returns all existing data quality errors in the system.
	GetAllDataQualityErrors(context.Context, *emptypb.Empty) (*common.GenericChartMetadataDataQualityResponse, error)
	// FindConsensusAnalytics returns analytics related to specific consensus according to request.
	FindConsensusAnalytics(context.Context, *common.GenericChartMetadataDataQuality) (*common.GenericChartMetadataDataQualityResponse, error)
	// GetAllConsensusAnalytics returns analytics related to all consensuses.
	GetAllConsensusAnalytics(context.Context, *emptypb.Empty) (*common.GenericChartMetadataDataQualityResponse, error)
	// GetPredefinedFilter returns pre defined filters according to request.
	GetPredefinedFilter(context.Context, *common.GetPredefinedFiltersRequest) (*common.GetPredefinedFiltersResponse, error)
	// GetHistogram returns analytics(submission and consensus) represented by histogram according to request.
	GetHistogram(context.Context, *common.HistogramRequest) (*common.HistogramResponse, error)
	mustEmbedUnimplementedAnalyticsControllerServer()
}

// UnimplementedAnalyticsControllerServer must be embedded to have forward compatible implementations.
type UnimplementedAnalyticsControllerServer struct {
}

func (UnimplementedAnalyticsControllerServer) FindDataQualityErrors(context.Context, *common.GenericChartMetadataDataQuality) (*common.GenericChartMetadataDataQualityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDataQualityErrors not implemented")
}
func (UnimplementedAnalyticsControllerServer) GetAllDataQualityErrors(context.Context, *emptypb.Empty) (*common.GenericChartMetadataDataQualityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDataQualityErrors not implemented")
}
func (UnimplementedAnalyticsControllerServer) FindConsensusAnalytics(context.Context, *common.GenericChartMetadataDataQuality) (*common.GenericChartMetadataDataQualityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindConsensusAnalytics not implemented")
}
func (UnimplementedAnalyticsControllerServer) GetAllConsensusAnalytics(context.Context, *emptypb.Empty) (*common.GenericChartMetadataDataQualityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllConsensusAnalytics not implemented")
}
func (UnimplementedAnalyticsControllerServer) GetPredefinedFilter(context.Context, *common.GetPredefinedFiltersRequest) (*common.GetPredefinedFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredefinedFilter not implemented")
}
func (UnimplementedAnalyticsControllerServer) GetHistogram(context.Context, *common.HistogramRequest) (*common.HistogramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistogram not implemented")
}
func (UnimplementedAnalyticsControllerServer) mustEmbedUnimplementedAnalyticsControllerServer() {}

// UnsafeAnalyticsControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsControllerServer will
// result in compilation errors.
type UnsafeAnalyticsControllerServer interface {
	mustEmbedUnimplementedAnalyticsControllerServer()
}

func RegisterAnalyticsControllerServer(s grpc.ServiceRegistrar, srv AnalyticsControllerServer) {
	s.RegisterService(&AnalyticsController_ServiceDesc, srv)
}

func _AnalyticsController_FindDataQualityErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GenericChartMetadataDataQuality)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsControllerServer).FindDataQualityErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.AnalyticsController/FindDataQualityErrors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsControllerServer).FindDataQualityErrors(ctx, req.(*common.GenericChartMetadataDataQuality))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsController_GetAllDataQualityErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsControllerServer).GetAllDataQualityErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.AnalyticsController/GetAllDataQualityErrors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsControllerServer).GetAllDataQualityErrors(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsController_FindConsensusAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GenericChartMetadataDataQuality)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsControllerServer).FindConsensusAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.AnalyticsController/FindConsensusAnalytics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsControllerServer).FindConsensusAnalytics(ctx, req.(*common.GenericChartMetadataDataQuality))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsController_GetAllConsensusAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsControllerServer).GetAllConsensusAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.AnalyticsController/GetAllConsensusAnalytics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsControllerServer).GetAllConsensusAnalytics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsController_GetPredefinedFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetPredefinedFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsControllerServer).GetPredefinedFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.AnalyticsController/GetPredefinedFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsControllerServer).GetPredefinedFilter(ctx, req.(*common.GetPredefinedFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsController_GetHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.HistogramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsControllerServer).GetHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.AnalyticsController/GetHistogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsControllerServer).GetHistogram(ctx, req.(*common.HistogramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyticsController_ServiceDesc is the grpc.ServiceDesc for AnalyticsController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyticsController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.AnalyticsController",
	HandlerType: (*AnalyticsControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindDataQualityErrors",
			Handler:    _AnalyticsController_FindDataQualityErrors_Handler,
		},
		{
			MethodName: "GetAllDataQualityErrors",
			Handler:    _AnalyticsController_GetAllDataQualityErrors_Handler,
		},
		{
			MethodName: "FindConsensusAnalytics",
			Handler:    _AnalyticsController_FindConsensusAnalytics_Handler,
		},
		{
			MethodName: "GetAllConsensusAnalytics",
			Handler:    _AnalyticsController_GetAllConsensusAnalytics_Handler,
		},
		{
			MethodName: "GetPredefinedFilter",
			Handler:    _AnalyticsController_GetPredefinedFilter_Handler,
		},
		{
			MethodName: "GetHistogram",
			Handler:    _AnalyticsController_GetHistogram_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/analytics_service.proto",
}
