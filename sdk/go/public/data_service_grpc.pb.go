// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	// Submitted returns submitted data based on the request made.
	Submitted(ctx context.Context, in *common.SubmittedRequest, opts ...grpc.CallOption) (*common.SubmittedResponse, error)
	// Export exports data according to the request.
	Export(ctx context.Context, in *common.ExportRequest, opts ...grpc.CallOption) (*common.ExportResponse, error)
	// UploadURL returns a pre-signed S3 URL for uploading data.
	UploadURL(ctx context.Context, in *common.UploadURLRequest, opts ...grpc.CallOption) (*common.UploadURLResponse, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) Submitted(ctx context.Context, in *common.SubmittedRequest, opts ...grpc.CallOption) (*common.SubmittedResponse, error) {
	out := new(common.SubmittedResponse)
	err := c.cc.Invoke(ctx, "/titanium.DataService/Submitted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) Export(ctx context.Context, in *common.ExportRequest, opts ...grpc.CallOption) (*common.ExportResponse, error) {
	out := new(common.ExportResponse)
	err := c.cc.Invoke(ctx, "/titanium.DataService/Export", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UploadURL(ctx context.Context, in *common.UploadURLRequest, opts ...grpc.CallOption) (*common.UploadURLResponse, error) {
	out := new(common.UploadURLResponse)
	err := c.cc.Invoke(ctx, "/titanium.DataService/UploadURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServiceServer is the server API for DataService service.
// All implementations must embed UnimplementedDataServiceServer
// for forward compatibility
type DataServiceServer interface {
	// Submitted returns submitted data based on the request made.
	Submitted(context.Context, *common.SubmittedRequest) (*common.SubmittedResponse, error)
	// Export exports data according to the request.
	Export(context.Context, *common.ExportRequest) (*common.ExportResponse, error)
	// UploadURL returns a pre-signed S3 URL for uploading data.
	UploadURL(context.Context, *common.UploadURLRequest) (*common.UploadURLResponse, error)
	mustEmbedUnimplementedDataServiceServer()
}

// UnimplementedDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataServiceServer struct {
}

func (UnimplementedDataServiceServer) Submitted(context.Context, *common.SubmittedRequest) (*common.SubmittedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submitted not implemented")
}
func (UnimplementedDataServiceServer) Export(context.Context, *common.ExportRequest) (*common.ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Export not implemented")
}
func (UnimplementedDataServiceServer) UploadURL(context.Context, *common.UploadURLRequest) (*common.UploadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadURL not implemented")
}
func (UnimplementedDataServiceServer) mustEmbedUnimplementedDataServiceServer() {}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_Submitted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SubmittedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).Submitted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DataService/Submitted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).Submitted(ctx, req.(*common.SubmittedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DataService/Export",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).Export(ctx, req.(*common.ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UploadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UploadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UploadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DataService/UploadURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UploadURL(ctx, req.(*common.UploadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Submitted",
			Handler:    _DataService_Submitted_Handler,
		},
		{
			MethodName: "Export",
			Handler:    _DataService_Export_Handler,
		},
		{
			MethodName: "UploadURL",
			Handler:    _DataService_UploadURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/data_service.proto",
}
