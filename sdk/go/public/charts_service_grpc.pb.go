// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChartsServiceClient is the client API for ChartsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChartsServiceClient interface {
	// Charts returns information about specific chart related to the specific asset.
	Charts(ctx context.Context, in *common.ChartsRequest, opts ...grpc.CallOption) (*common.ChartsResponse, error)
	// ChartsCurrencies returns information about the chart related to specific currency pair.
	ChartsCurrencies(ctx context.Context, in *common.ChartsCurrenciesRequest, opts ...grpc.CallOption) (*common.ChartsCurrenciesResponse, error)
}

type chartsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChartsServiceClient(cc grpc.ClientConnInterface) ChartsServiceClient {
	return &chartsServiceClient{cc}
}

func (c *chartsServiceClient) Charts(ctx context.Context, in *common.ChartsRequest, opts ...grpc.CallOption) (*common.ChartsResponse, error) {
	out := new(common.ChartsResponse)
	err := c.cc.Invoke(ctx, "/titanium.ChartsService/Charts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartsServiceClient) ChartsCurrencies(ctx context.Context, in *common.ChartsCurrenciesRequest, opts ...grpc.CallOption) (*common.ChartsCurrenciesResponse, error) {
	out := new(common.ChartsCurrenciesResponse)
	err := c.cc.Invoke(ctx, "/titanium.ChartsService/ChartsCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChartsServiceServer is the server API for ChartsService service.
// All implementations must embed UnimplementedChartsServiceServer
// for forward compatibility
type ChartsServiceServer interface {
	// Charts returns information about specific chart related to the specific asset.
	Charts(context.Context, *common.ChartsRequest) (*common.ChartsResponse, error)
	// ChartsCurrencies returns information about the chart related to specific currency pair.
	ChartsCurrencies(context.Context, *common.ChartsCurrenciesRequest) (*common.ChartsCurrenciesResponse, error)
	mustEmbedUnimplementedChartsServiceServer()
}

// UnimplementedChartsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChartsServiceServer struct {
}

func (UnimplementedChartsServiceServer) Charts(context.Context, *common.ChartsRequest) (*common.ChartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Charts not implemented")
}
func (UnimplementedChartsServiceServer) ChartsCurrencies(context.Context, *common.ChartsCurrenciesRequest) (*common.ChartsCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChartsCurrencies not implemented")
}
func (UnimplementedChartsServiceServer) mustEmbedUnimplementedChartsServiceServer() {}

// UnsafeChartsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChartsServiceServer will
// result in compilation errors.
type UnsafeChartsServiceServer interface {
	mustEmbedUnimplementedChartsServiceServer()
}

func RegisterChartsServiceServer(s grpc.ServiceRegistrar, srv ChartsServiceServer) {
	s.RegisterService(&ChartsService_ServiceDesc, srv)
}

func _ChartsService_Charts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ChartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartsServiceServer).Charts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ChartsService/Charts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartsServiceServer).Charts(ctx, req.(*common.ChartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartsService_ChartsCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ChartsCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartsServiceServer).ChartsCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ChartsService/ChartsCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartsServiceServer).ChartsCurrencies(ctx, req.(*common.ChartsCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChartsService_ServiceDesc is the grpc.ServiceDesc for ChartsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChartsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.ChartsService",
	HandlerType: (*ChartsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Charts",
			Handler:    _ChartsService_Charts_Handler,
		},
		{
			MethodName: "ChartsCurrencies",
			Handler:    _ChartsService_ChartsCurrencies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/charts_service.proto",
}
