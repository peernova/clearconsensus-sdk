// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: public/consensus_service.proto

package public

import (
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConsensusExplorerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId               string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	TraceName             string `protobuf:"bytes,2,opt,name=trace_name,json=traceName,proto3" json:"trace_name,omitempty"`
	SubmittedDate         string `protobuf:"bytes,3,opt,name=submitted_date,json=submittedDate,proto3" json:"submitted_date,omitempty"`
	ConsensusRunTimestamp string `protobuf:"bytes,4,opt,name=consensus_run_timestamp,json=consensusRunTimestamp,proto3" json:"consensus_run_timestamp,omitempty"`
	// Types that are assignable to Id:
	//
	//	*ConsensusExplorerRequest_SubmissionId
	//	*ConsensusExplorerRequest_GroupKeys
	Id isConsensusExplorerRequest_Id `protobuf_oneof:"id"`
}

func (x *ConsensusExplorerRequest) Reset() {
	*x = ConsensusExplorerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusExplorerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusExplorerRequest) ProtoMessage() {}

func (x *ConsensusExplorerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusExplorerRequest.ProtoReflect.Descriptor instead.
func (*ConsensusExplorerRequest) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{0}
}

func (x *ConsensusExplorerRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ConsensusExplorerRequest) GetTraceName() string {
	if x != nil {
		return x.TraceName
	}
	return ""
}

func (x *ConsensusExplorerRequest) GetSubmittedDate() string {
	if x != nil {
		return x.SubmittedDate
	}
	return ""
}

func (x *ConsensusExplorerRequest) GetConsensusRunTimestamp() string {
	if x != nil {
		return x.ConsensusRunTimestamp
	}
	return ""
}

func (m *ConsensusExplorerRequest) GetId() isConsensusExplorerRequest_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *ConsensusExplorerRequest) GetSubmissionId() string {
	if x, ok := x.GetId().(*ConsensusExplorerRequest_SubmissionId); ok {
		return x.SubmissionId
	}
	return ""
}

func (x *ConsensusExplorerRequest) GetGroupKeys() *common.FilterPack {
	if x, ok := x.GetId().(*ConsensusExplorerRequest_GroupKeys); ok {
		return x.GroupKeys
	}
	return nil
}

type isConsensusExplorerRequest_Id interface {
	isConsensusExplorerRequest_Id()
}

type ConsensusExplorerRequest_SubmissionId struct {
	SubmissionId string `protobuf:"bytes,5,opt,name=submission_id,json=submissionId,proto3,oneof"`
}

type ConsensusExplorerRequest_GroupKeys struct {
	GroupKeys *common.FilterPack `protobuf:"bytes,6,opt,name=group_keys,json=groupKeys,proto3,oneof"`
}

func (*ConsensusExplorerRequest_SubmissionId) isConsensusExplorerRequest_Id() {}

func (*ConsensusExplorerRequest_GroupKeys) isConsensusExplorerRequest_Id() {}

type ConsensusExplorerInstrumentDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ConsensusExplorerInstrumentDetailsResponse_Data
	//	*ConsensusExplorerInstrumentDetailsResponse_Error
	Response isConsensusExplorerInstrumentDetailsResponse_Response `protobuf_oneof:"response"`
}

func (x *ConsensusExplorerInstrumentDetailsResponse) Reset() {
	*x = ConsensusExplorerInstrumentDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusExplorerInstrumentDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusExplorerInstrumentDetailsResponse) ProtoMessage() {}

func (x *ConsensusExplorerInstrumentDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusExplorerInstrumentDetailsResponse.ProtoReflect.Descriptor instead.
func (*ConsensusExplorerInstrumentDetailsResponse) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{1}
}

func (m *ConsensusExplorerInstrumentDetailsResponse) GetResponse() isConsensusExplorerInstrumentDetailsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ConsensusExplorerInstrumentDetailsResponse) GetData() *ConsensusExplorerInstrumentDetailsData {
	if x, ok := x.GetResponse().(*ConsensusExplorerInstrumentDetailsResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *ConsensusExplorerInstrumentDetailsResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*ConsensusExplorerInstrumentDetailsResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isConsensusExplorerInstrumentDetailsResponse_Response interface {
	isConsensusExplorerInstrumentDetailsResponse_Response()
}

type ConsensusExplorerInstrumentDetailsResponse_Data struct {
	Data *ConsensusExplorerInstrumentDetailsData `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type ConsensusExplorerInstrumentDetailsResponse_Error struct {
	Error *common.Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*ConsensusExplorerInstrumentDetailsResponse_Data) isConsensusExplorerInstrumentDetailsResponse_Response() {
}

func (*ConsensusExplorerInstrumentDetailsResponse_Error) isConsensusExplorerInstrumentDetailsResponse_Response() {
}

type ConsensusExplorerInstrumentDetailsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentDetails          []*common.StringKeyVal      `protobuf:"bytes,1,rep,name=instrument_details,json=instrumentDetails,proto3" json:"instrument_details,omitempty"`
	InstrumentSubmissionStatus *InstrumentSubmissionStatus `protobuf:"bytes,2,opt,name=instrument_submission_status,json=instrumentSubmissionStatus,proto3" json:"instrument_submission_status,omitempty"`
	ConsensusScores            *ConsensusScores            `protobuf:"bytes,3,opt,name=consensus_scores,json=consensusScores,proto3" json:"consensus_scores,omitempty"`
}

func (x *ConsensusExplorerInstrumentDetailsData) Reset() {
	*x = ConsensusExplorerInstrumentDetailsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusExplorerInstrumentDetailsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusExplorerInstrumentDetailsData) ProtoMessage() {}

func (x *ConsensusExplorerInstrumentDetailsData) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusExplorerInstrumentDetailsData.ProtoReflect.Descriptor instead.
func (*ConsensusExplorerInstrumentDetailsData) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{2}
}

func (x *ConsensusExplorerInstrumentDetailsData) GetInstrumentDetails() []*common.StringKeyVal {
	if x != nil {
		return x.InstrumentDetails
	}
	return nil
}

func (x *ConsensusExplorerInstrumentDetailsData) GetInstrumentSubmissionStatus() *InstrumentSubmissionStatus {
	if x != nil {
		return x.InstrumentSubmissionStatus
	}
	return nil
}

func (x *ConsensusExplorerInstrumentDetailsData) GetConsensusScores() *ConsensusScores {
	if x != nil {
		return x.ConsensusScores
	}
	return nil
}

type InstrumentSubmissionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighestDqe                                  string          `protobuf:"bytes,1,opt,name=highest_dqe,json=highestDqe,proto3" json:"highest_dqe,omitempty"`
	ConsensusStatus                             string          `protobuf:"bytes,2,opt,name=consensus_status,json=consensusStatus,proto3" json:"consensus_status,omitempty"`
	ConsensusStatusDetails                      string          `protobuf:"bytes,3,opt,name=consensus_status_details,json=consensusStatusDetails,proto3" json:"consensus_status_details,omitempty"`
	ParticipantCohortConsensusStatus            string          `protobuf:"bytes,4,opt,name=participant_cohort_consensus_status,json=participantCohortConsensusStatus,proto3" json:"participant_cohort_consensus_status,omitempty"`
	ParticipantSubmissionsEvidenceStatus        string          `protobuf:"bytes,5,opt,name=participant_submissions_evidence_status,json=participantSubmissionsEvidenceStatus,proto3" json:"participant_submissions_evidence_status,omitempty"`
	DqeHistory                                  []*DateAndValue `protobuf:"bytes,6,rep,name=dqe_history,json=dqeHistory,proto3" json:"dqe_history,omitempty"`
	ConsensusStatusHistory                      []*DateAndValue `protobuf:"bytes,7,rep,name=consensus_status_history,json=consensusStatusHistory,proto3" json:"consensus_status_history,omitempty"`
	ConsensusStatusDetailsHistory               []*DateAndValue `protobuf:"bytes,8,rep,name=consensus_status_details_history,json=consensusStatusDetailsHistory,proto3" json:"consensus_status_details_history,omitempty"`
	ParticipantCohortConsensusStatusHistory     []*DateAndValue `protobuf:"bytes,9,rep,name=participant_cohort_consensus_status_history,json=participantCohortConsensusStatusHistory,proto3" json:"participant_cohort_consensus_status_history,omitempty"`
	ParticipantSubmissionsEvidenceStatusHistory []*DateAndValue `protobuf:"bytes,10,rep,name=participant_submissions_evidence_status_history,json=participantSubmissionsEvidenceStatusHistory,proto3" json:"participant_submissions_evidence_status_history,omitempty"`
}

func (x *InstrumentSubmissionStatus) Reset() {
	*x = InstrumentSubmissionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentSubmissionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentSubmissionStatus) ProtoMessage() {}

func (x *InstrumentSubmissionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentSubmissionStatus.ProtoReflect.Descriptor instead.
func (*InstrumentSubmissionStatus) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{3}
}

func (x *InstrumentSubmissionStatus) GetHighestDqe() string {
	if x != nil {
		return x.HighestDqe
	}
	return ""
}

func (x *InstrumentSubmissionStatus) GetConsensusStatus() string {
	if x != nil {
		return x.ConsensusStatus
	}
	return ""
}

func (x *InstrumentSubmissionStatus) GetConsensusStatusDetails() string {
	if x != nil {
		return x.ConsensusStatusDetails
	}
	return ""
}

func (x *InstrumentSubmissionStatus) GetParticipantCohortConsensusStatus() string {
	if x != nil {
		return x.ParticipantCohortConsensusStatus
	}
	return ""
}

func (x *InstrumentSubmissionStatus) GetParticipantSubmissionsEvidenceStatus() string {
	if x != nil {
		return x.ParticipantSubmissionsEvidenceStatus
	}
	return ""
}

func (x *InstrumentSubmissionStatus) GetDqeHistory() []*DateAndValue {
	if x != nil {
		return x.DqeHistory
	}
	return nil
}

func (x *InstrumentSubmissionStatus) GetConsensusStatusHistory() []*DateAndValue {
	if x != nil {
		return x.ConsensusStatusHistory
	}
	return nil
}

func (x *InstrumentSubmissionStatus) GetConsensusStatusDetailsHistory() []*DateAndValue {
	if x != nil {
		return x.ConsensusStatusDetailsHistory
	}
	return nil
}

func (x *InstrumentSubmissionStatus) GetParticipantCohortConsensusStatusHistory() []*DateAndValue {
	if x != nil {
		return x.ParticipantCohortConsensusStatusHistory
	}
	return nil
}

func (x *InstrumentSubmissionStatus) GetParticipantSubmissionsEvidenceStatusHistory() []*DateAndValue {
	if x != nil {
		return x.ParticipantSubmissionsEvidenceStatusHistory
	}
	return nil
}

type DateAndValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date  string          `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Value *structpb.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DateAndValue) Reset() {
	*x = DateAndValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateAndValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateAndValue) ProtoMessage() {}

func (x *DateAndValue) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateAndValue.ProtoReflect.Descriptor instead.
func (*DateAndValue) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{4}
}

func (x *DateAndValue) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *DateAndValue) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type ConsensusScores struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpertiseRank         *ExpertiseRank         `protobuf:"bytes,1,opt,name=expertise_rank,json=expertiseRank,proto3" json:"expertise_rank,omitempty"`
	ConsensusDensityScore *ConsensusDensityScore `protobuf:"bytes,2,opt,name=consensus_density_score,json=consensusDensityScore,proto3" json:"consensus_density_score,omitempty"`
	TradeAlignmentScore   *TradeAlignmentScore   `protobuf:"bytes,3,opt,name=trade_alignment_score,json=tradeAlignmentScore,proto3" json:"trade_alignment_score,omitempty"`
	EvpAlignmentScore     *EvpAlignmentScore     `protobuf:"bytes,4,opt,name=evp_alignment_score,json=evpAlignmentScore,proto3" json:"evp_alignment_score,omitempty"`
	Bimodality            *Bimodality            `protobuf:"bytes,5,opt,name=bimodality,proto3" json:"bimodality,omitempty"`
	EvpQualityScore       *EvpQualityScore       `protobuf:"bytes,6,opt,name=evp_quality_score,json=evpQualityScore,proto3" json:"evp_quality_score,omitempty"`
}

func (x *ConsensusScores) Reset() {
	*x = ConsensusScores{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusScores) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusScores) ProtoMessage() {}

func (x *ConsensusScores) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusScores.ProtoReflect.Descriptor instead.
func (*ConsensusScores) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{5}
}

func (x *ConsensusScores) GetExpertiseRank() *ExpertiseRank {
	if x != nil {
		return x.ExpertiseRank
	}
	return nil
}

func (x *ConsensusScores) GetConsensusDensityScore() *ConsensusDensityScore {
	if x != nil {
		return x.ConsensusDensityScore
	}
	return nil
}

func (x *ConsensusScores) GetTradeAlignmentScore() *TradeAlignmentScore {
	if x != nil {
		return x.TradeAlignmentScore
	}
	return nil
}

func (x *ConsensusScores) GetEvpAlignmentScore() *EvpAlignmentScore {
	if x != nil {
		return x.EvpAlignmentScore
	}
	return nil
}

func (x *ConsensusScores) GetBimodality() *Bimodality {
	if x != nil {
		return x.Bimodality
	}
	return nil
}

func (x *ConsensusScores) GetEvpQualityScore() *EvpQualityScore {
	if x != nil {
		return x.EvpQualityScore
	}
	return nil
}

type ExpertiseRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank                *structpb.Value                `protobuf:"bytes,1,opt,name=rank,proto3" json:"rank,omitempty"`
	ExpertsCount        *structpb.Value                `protobuf:"bytes,2,opt,name=experts_count,json=expertsCount,proto3" json:"experts_count,omitempty"`
	SubmissionPrice     *structpb.Value                `protobuf:"bytes,3,opt,name=submission_price,json=submissionPrice,proto3" json:"submission_price,omitempty"`
	AnchorPrice         *structpb.Value                `protobuf:"bytes,4,opt,name=anchor_price,json=anchorPrice,proto3" json:"anchor_price,omitempty"`
	AbsDistanceToAnchor *structpb.Value                `protobuf:"bytes,5,opt,name=abs_distance_to_anchor,json=absDistanceToAnchor,proto3" json:"abs_distance_to_anchor,omitempty"`
	ExpertiseScore      *structpb.Value                `protobuf:"bytes,6,opt,name=expertise_score,json=expertiseScore,proto3" json:"expertise_score,omitempty"`
	History             []*ExpertiseRankHistoryElement `protobuf:"bytes,7,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *ExpertiseRank) Reset() {
	*x = ExpertiseRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpertiseRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpertiseRank) ProtoMessage() {}

func (x *ExpertiseRank) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpertiseRank.ProtoReflect.Descriptor instead.
func (*ExpertiseRank) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{6}
}

func (x *ExpertiseRank) GetRank() *structpb.Value {
	if x != nil {
		return x.Rank
	}
	return nil
}

func (x *ExpertiseRank) GetExpertsCount() *structpb.Value {
	if x != nil {
		return x.ExpertsCount
	}
	return nil
}

func (x *ExpertiseRank) GetSubmissionPrice() *structpb.Value {
	if x != nil {
		return x.SubmissionPrice
	}
	return nil
}

func (x *ExpertiseRank) GetAnchorPrice() *structpb.Value {
	if x != nil {
		return x.AnchorPrice
	}
	return nil
}

func (x *ExpertiseRank) GetAbsDistanceToAnchor() *structpb.Value {
	if x != nil {
		return x.AbsDistanceToAnchor
	}
	return nil
}

func (x *ExpertiseRank) GetExpertiseScore() *structpb.Value {
	if x != nil {
		return x.ExpertiseScore
	}
	return nil
}

func (x *ExpertiseRank) GetHistory() []*ExpertiseRankHistoryElement {
	if x != nil {
		return x.History
	}
	return nil
}

type ExpertiseRankHistoryElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date         string          `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Rank         *structpb.Value `protobuf:"bytes,2,opt,name=rank,proto3" json:"rank,omitempty"`
	ExpertsCount *structpb.Value `protobuf:"bytes,3,opt,name=experts_count,json=expertsCount,proto3" json:"experts_count,omitempty"`
}

func (x *ExpertiseRankHistoryElement) Reset() {
	*x = ExpertiseRankHistoryElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpertiseRankHistoryElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpertiseRankHistoryElement) ProtoMessage() {}

func (x *ExpertiseRankHistoryElement) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpertiseRankHistoryElement.ProtoReflect.Descriptor instead.
func (*ExpertiseRankHistoryElement) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{7}
}

func (x *ExpertiseRankHistoryElement) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ExpertiseRankHistoryElement) GetRank() *structpb.Value {
	if x != nil {
		return x.Rank
	}
	return nil
}

func (x *ExpertiseRankHistoryElement) GetExpertsCount() *structpb.Value {
	if x != nil {
		return x.ExpertsCount
	}
	return nil
}

type ConsensusDensityScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score               *structpb.Value `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
	BimodalityScore     *structpb.Value `protobuf:"bytes,2,opt,name=bimodality_score,json=bimodalityScore,proto3" json:"bimodality_score,omitempty"`
	TradeAlignmentScore *structpb.Value `protobuf:"bytes,3,opt,name=trade_alignment_score,json=tradeAlignmentScore,proto3" json:"trade_alignment_score,omitempty"`
	Dispersion          *structpb.Value `protobuf:"bytes,4,opt,name=dispersion,proto3" json:"dispersion,omitempty"`
	EvpAlignmentScore   *structpb.Value `protobuf:"bytes,5,opt,name=evp_alignment_score,json=evpAlignmentScore,proto3" json:"evp_alignment_score,omitempty"`
	History             []*DateAndValue `protobuf:"bytes,6,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *ConsensusDensityScore) Reset() {
	*x = ConsensusDensityScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusDensityScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusDensityScore) ProtoMessage() {}

func (x *ConsensusDensityScore) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusDensityScore.ProtoReflect.Descriptor instead.
func (*ConsensusDensityScore) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{8}
}

func (x *ConsensusDensityScore) GetScore() *structpb.Value {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *ConsensusDensityScore) GetBimodalityScore() *structpb.Value {
	if x != nil {
		return x.BimodalityScore
	}
	return nil
}

func (x *ConsensusDensityScore) GetTradeAlignmentScore() *structpb.Value {
	if x != nil {
		return x.TradeAlignmentScore
	}
	return nil
}

func (x *ConsensusDensityScore) GetDispersion() *structpb.Value {
	if x != nil {
		return x.Dispersion
	}
	return nil
}

func (x *ConsensusDensityScore) GetEvpAlignmentScore() *structpb.Value {
	if x != nil {
		return x.EvpAlignmentScore
	}
	return nil
}

func (x *ConsensusDensityScore) GetHistory() []*DateAndValue {
	if x != nil {
		return x.History
	}
	return nil
}

type TradeAlignmentScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score            *structpb.Value              `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
	ScoreStatus      string                       `protobuf:"bytes,2,opt,name=score_status,json=scoreStatus,proto3" json:"score_status,omitempty"`
	LatestTradePrice *structpb.Value              `protobuf:"bytes,3,opt,name=latest_trade_price,json=latestTradePrice,proto3" json:"latest_trade_price,omitempty"`
	Mean             *structpb.Value              `protobuf:"bytes,4,opt,name=mean,proto3" json:"mean,omitempty"`
	StdDev           *structpb.Value              `protobuf:"bytes,5,opt,name=std_dev,json=stdDev,proto3" json:"std_dev,omitempty"`
	History          []*TradeAligmentDateAndValue `protobuf:"bytes,6,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *TradeAlignmentScore) Reset() {
	*x = TradeAlignmentScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeAlignmentScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeAlignmentScore) ProtoMessage() {}

func (x *TradeAlignmentScore) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeAlignmentScore.ProtoReflect.Descriptor instead.
func (*TradeAlignmentScore) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{9}
}

func (x *TradeAlignmentScore) GetScore() *structpb.Value {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *TradeAlignmentScore) GetScoreStatus() string {
	if x != nil {
		return x.ScoreStatus
	}
	return ""
}

func (x *TradeAlignmentScore) GetLatestTradePrice() *structpb.Value {
	if x != nil {
		return x.LatestTradePrice
	}
	return nil
}

func (x *TradeAlignmentScore) GetMean() *structpb.Value {
	if x != nil {
		return x.Mean
	}
	return nil
}

func (x *TradeAlignmentScore) GetStdDev() *structpb.Value {
	if x != nil {
		return x.StdDev
	}
	return nil
}

func (x *TradeAlignmentScore) GetHistory() []*TradeAligmentDateAndValue {
	if x != nil {
		return x.History
	}
	return nil
}

type TradeAligmentDateAndValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date        string          `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Score       *structpb.Value `protobuf:"bytes,2,opt,name=score,proto3" json:"score,omitempty"`
	ScoreStatus string          `protobuf:"bytes,3,opt,name=score_status,json=scoreStatus,proto3" json:"score_status,omitempty"`
}

func (x *TradeAligmentDateAndValue) Reset() {
	*x = TradeAligmentDateAndValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeAligmentDateAndValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeAligmentDateAndValue) ProtoMessage() {}

func (x *TradeAligmentDateAndValue) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeAligmentDateAndValue.ProtoReflect.Descriptor instead.
func (*TradeAligmentDateAndValue) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{10}
}

func (x *TradeAligmentDateAndValue) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *TradeAligmentDateAndValue) GetScore() *structpb.Value {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *TradeAligmentDateAndValue) GetScoreStatus() string {
	if x != nil {
		return x.ScoreStatus
	}
	return ""
}

type EvpAlignmentScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score       *structpb.Value              `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
	ScoreStatus string                       `protobuf:"bytes,2,opt,name=score_status,json=scoreStatus,proto3" json:"score_status,omitempty"`
	EvpMid      *structpb.Value              `protobuf:"bytes,3,opt,name=evp_mid,json=evpMid,proto3" json:"evp_mid,omitempty"`
	Mean        *structpb.Value              `protobuf:"bytes,4,opt,name=mean,proto3" json:"mean,omitempty"`
	StdDev      *structpb.Value              `protobuf:"bytes,5,opt,name=std_dev,json=stdDev,proto3" json:"std_dev,omitempty"`
	History     []*TradeAligmentDateAndValue `protobuf:"bytes,6,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *EvpAlignmentScore) Reset() {
	*x = EvpAlignmentScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvpAlignmentScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvpAlignmentScore) ProtoMessage() {}

func (x *EvpAlignmentScore) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvpAlignmentScore.ProtoReflect.Descriptor instead.
func (*EvpAlignmentScore) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{11}
}

func (x *EvpAlignmentScore) GetScore() *structpb.Value {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *EvpAlignmentScore) GetScoreStatus() string {
	if x != nil {
		return x.ScoreStatus
	}
	return ""
}

func (x *EvpAlignmentScore) GetEvpMid() *structpb.Value {
	if x != nil {
		return x.EvpMid
	}
	return nil
}

func (x *EvpAlignmentScore) GetMean() *structpb.Value {
	if x != nil {
		return x.Mean
	}
	return nil
}

func (x *EvpAlignmentScore) GetStdDev() *structpb.Value {
	if x != nil {
		return x.StdDev
	}
	return nil
}

func (x *EvpAlignmentScore) GetHistory() []*TradeAligmentDateAndValue {
	if x != nil {
		return x.History
	}
	return nil
}

type Bimodality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value           string          `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	BimodalityIndex *structpb.Value `protobuf:"bytes,2,opt,name=bimodality_index,json=bimodalityIndex,proto3" json:"bimodality_index,omitempty"`
	History         []*DateAndValue `protobuf:"bytes,3,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *Bimodality) Reset() {
	*x = Bimodality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bimodality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bimodality) ProtoMessage() {}

func (x *Bimodality) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bimodality.ProtoReflect.Descriptor instead.
func (*Bimodality) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{12}
}

func (x *Bimodality) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Bimodality) GetBimodalityIndex() *structpb.Value {
	if x != nil {
		return x.BimodalityIndex
	}
	return nil
}

func (x *Bimodality) GetHistory() []*DateAndValue {
	if x != nil {
		return x.History
	}
	return nil
}

type EvpQualityScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score           *structpb.Value `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
	TradeCount      string          `protobuf:"bytes,2,opt,name=trade_count,json=tradeCount,proto3" json:"trade_count,omitempty"`
	OrderCount      string          `protobuf:"bytes,3,opt,name=order_count,json=orderCount,proto3" json:"order_count,omitempty"`
	IndicativeCount string          `protobuf:"bytes,4,opt,name=indicative_count,json=indicativeCount,proto3" json:"indicative_count,omitempty"`
	History         []*DateAndValue `protobuf:"bytes,5,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *EvpQualityScore) Reset() {
	*x = EvpQualityScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvpQualityScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvpQualityScore) ProtoMessage() {}

func (x *EvpQualityScore) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvpQualityScore.ProtoReflect.Descriptor instead.
func (*EvpQualityScore) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{13}
}

func (x *EvpQualityScore) GetScore() *structpb.Value {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *EvpQualityScore) GetTradeCount() string {
	if x != nil {
		return x.TradeCount
	}
	return ""
}

func (x *EvpQualityScore) GetOrderCount() string {
	if x != nil {
		return x.OrderCount
	}
	return ""
}

func (x *EvpQualityScore) GetIndicativeCount() string {
	if x != nil {
		return x.IndicativeCount
	}
	return ""
}

func (x *EvpQualityScore) GetHistory() []*DateAndValue {
	if x != nil {
		return x.History
	}
	return nil
}

type ConsensusExplorerRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ConsensusExplorerRangeResponse_Data
	//	*ConsensusExplorerRangeResponse_Error
	Response isConsensusExplorerRangeResponse_Response `protobuf_oneof:"response"`
}

func (x *ConsensusExplorerRangeResponse) Reset() {
	*x = ConsensusExplorerRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusExplorerRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusExplorerRangeResponse) ProtoMessage() {}

func (x *ConsensusExplorerRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusExplorerRangeResponse.ProtoReflect.Descriptor instead.
func (*ConsensusExplorerRangeResponse) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{14}
}

func (m *ConsensusExplorerRangeResponse) GetResponse() isConsensusExplorerRangeResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ConsensusExplorerRangeResponse) GetData() *ConsensusExplorerRangeData {
	if x, ok := x.GetResponse().(*ConsensusExplorerRangeResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *ConsensusExplorerRangeResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*ConsensusExplorerRangeResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isConsensusExplorerRangeResponse_Response interface {
	isConsensusExplorerRangeResponse_Response()
}

type ConsensusExplorerRangeResponse_Data struct {
	Data *ConsensusExplorerRangeData `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type ConsensusExplorerRangeResponse_Error struct {
	Error *common.Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*ConsensusExplorerRangeResponse_Data) isConsensusExplorerRangeResponse_Response() {}

func (*ConsensusExplorerRangeResponse_Error) isConsensusExplorerRangeResponse_Response() {}

type ConsensusExplorerRangeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChartRanges                 *ChartRanges                 `protobuf:"bytes,1,opt,name=chart_ranges,json=chartRanges,proto3" json:"chart_ranges,omitempty"`
	SubmissionPoint             *common.RangePoint           `protobuf:"bytes,2,opt,name=submission_point,json=submissionPoint,proto3" json:"submission_point,omitempty"`
	AnchorPoint                 *common.RangePoint           `protobuf:"bytes,3,opt,name=anchor_point,json=anchorPoint,proto3" json:"anchor_point,omitempty"`
	EvpMid                      *common.RangePoint           `protobuf:"bytes,4,opt,name=evp_mid,json=evpMid,proto3" json:"evp_mid,omitempty"`
	SubmissionEvidencePrice     *common.RangePoint           `protobuf:"bytes,5,opt,name=submission_evidence_price,json=submissionEvidencePrice,proto3" json:"submission_evidence_price,omitempty"`
	CohortConsensusPrice        *common.RangePoint           `protobuf:"bytes,6,opt,name=cohort_consensus_price,json=cohortConsensusPrice,proto3" json:"cohort_consensus_price,omitempty"`
	BimodalLeftMean             *common.RangePoint           `protobuf:"bytes,7,opt,name=bimodal_left_mean,json=bimodalLeftMean,proto3" json:"bimodal_left_mean,omitempty"`
	BimodalRightMean            *common.RangePoint           `protobuf:"bytes,8,opt,name=bimodal_right_mean,json=bimodalRightMean,proto3" json:"bimodal_right_mean,omitempty"`
	CohortConsensusRangeTabData *CohortConsensusRangeTabData `protobuf:"bytes,9,opt,name=cohort_consensus_range_tab_data,json=cohortConsensusRangeTabData,proto3" json:"cohort_consensus_range_tab_data,omitempty"`
}

func (x *ConsensusExplorerRangeData) Reset() {
	*x = ConsensusExplorerRangeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusExplorerRangeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusExplorerRangeData) ProtoMessage() {}

func (x *ConsensusExplorerRangeData) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusExplorerRangeData.ProtoReflect.Descriptor instead.
func (*ConsensusExplorerRangeData) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{15}
}

func (x *ConsensusExplorerRangeData) GetChartRanges() *ChartRanges {
	if x != nil {
		return x.ChartRanges
	}
	return nil
}

func (x *ConsensusExplorerRangeData) GetSubmissionPoint() *common.RangePoint {
	if x != nil {
		return x.SubmissionPoint
	}
	return nil
}

func (x *ConsensusExplorerRangeData) GetAnchorPoint() *common.RangePoint {
	if x != nil {
		return x.AnchorPoint
	}
	return nil
}

func (x *ConsensusExplorerRangeData) GetEvpMid() *common.RangePoint {
	if x != nil {
		return x.EvpMid
	}
	return nil
}

func (x *ConsensusExplorerRangeData) GetSubmissionEvidencePrice() *common.RangePoint {
	if x != nil {
		return x.SubmissionEvidencePrice
	}
	return nil
}

func (x *ConsensusExplorerRangeData) GetCohortConsensusPrice() *common.RangePoint {
	if x != nil {
		return x.CohortConsensusPrice
	}
	return nil
}

func (x *ConsensusExplorerRangeData) GetBimodalLeftMean() *common.RangePoint {
	if x != nil {
		return x.BimodalLeftMean
	}
	return nil
}

func (x *ConsensusExplorerRangeData) GetBimodalRightMean() *common.RangePoint {
	if x != nil {
		return x.BimodalRightMean
	}
	return nil
}

func (x *ConsensusExplorerRangeData) GetCohortConsensusRangeTabData() *CohortConsensusRangeTabData {
	if x != nil {
		return x.CohortConsensusRangeTabData
	}
	return nil
}

type ChartRanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmissionMinMax       *common.Range `protobuf:"bytes,1,opt,name=submission_min_max,json=submissionMinMax,proto3" json:"submission_min_max,omitempty"`
	Evp                    *common.Range `protobuf:"bytes,2,opt,name=evp,proto3" json:"evp,omitempty"`
	SubmissionEvidence     *common.Range `protobuf:"bytes,3,opt,name=submission_evidence,json=submissionEvidence,proto3" json:"submission_evidence,omitempty"`
	CohortConsensus        *common.Range `protobuf:"bytes,4,opt,name=cohort_consensus,json=cohortConsensus,proto3" json:"cohort_consensus,omitempty"`
	BimodalLeftPopulation  *common.Range `protobuf:"bytes,5,opt,name=bimodal_left_population,json=bimodalLeftPopulation,proto3" json:"bimodal_left_population,omitempty"`
	BimodalRightPopulation *common.Range `protobuf:"bytes,6,opt,name=bimodal_right_population,json=bimodalRightPopulation,proto3" json:"bimodal_right_population,omitempty"`
}

func (x *ChartRanges) Reset() {
	*x = ChartRanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartRanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartRanges) ProtoMessage() {}

func (x *ChartRanges) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartRanges.ProtoReflect.Descriptor instead.
func (*ChartRanges) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{16}
}

func (x *ChartRanges) GetSubmissionMinMax() *common.Range {
	if x != nil {
		return x.SubmissionMinMax
	}
	return nil
}

func (x *ChartRanges) GetEvp() *common.Range {
	if x != nil {
		return x.Evp
	}
	return nil
}

func (x *ChartRanges) GetSubmissionEvidence() *common.Range {
	if x != nil {
		return x.SubmissionEvidence
	}
	return nil
}

func (x *ChartRanges) GetCohortConsensus() *common.Range {
	if x != nil {
		return x.CohortConsensus
	}
	return nil
}

func (x *ChartRanges) GetBimodalLeftPopulation() *common.Range {
	if x != nil {
		return x.BimodalLeftPopulation
	}
	return nil
}

func (x *ChartRanges) GetBimodalRightPopulation() *common.Range {
	if x != nil {
		return x.BimodalRightPopulation
	}
	return nil
}

type CohortConsensusRangeTabData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpertiseRank           *structpb.Value          `protobuf:"bytes,1,opt,name=expertise_rank,json=expertiseRank,proto3" json:"expertise_rank,omitempty"`
	ExpertsCount            int32                    `protobuf:"varint,2,opt,name=experts_count,json=expertsCount,proto3" json:"experts_count,omitempty"`
	ExpertiseScore          *structpb.Value          `protobuf:"bytes,3,opt,name=expertise_score,json=expertiseScore,proto3" json:"expertise_score,omitempty"`
	DistanceToAnchor        *structpb.Value          `protobuf:"bytes,4,opt,name=distance_to_anchor,json=distanceToAnchor,proto3" json:"distance_to_anchor,omitempty"`
	DistanceToConsensus     *structpb.Value          `protobuf:"bytes,5,opt,name=distance_to_consensus,json=distanceToConsensus,proto3" json:"distance_to_consensus,omitempty"`
	TradePeriodsWithMetrics *TradePeriodsWithMetrics `protobuf:"bytes,6,opt,name=trade_periods_with_metrics,json=tradePeriodsWithMetrics,proto3" json:"trade_periods_with_metrics,omitempty"`
	// Types that are assignable to AnchorDetails:
	//
	//	*CohortConsensusRangeTabData_TradeAnchorDetails
	//	*CohortConsensusRangeTabData_EvpAnchorDetails
	//	*CohortConsensusRangeTabData_SubmissionEvidenceAnchorDetails
	AnchorDetails isCohortConsensusRangeTabData_AnchorDetails `protobuf_oneof:"anchor_details"`
}

func (x *CohortConsensusRangeTabData) Reset() {
	*x = CohortConsensusRangeTabData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CohortConsensusRangeTabData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CohortConsensusRangeTabData) ProtoMessage() {}

func (x *CohortConsensusRangeTabData) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CohortConsensusRangeTabData.ProtoReflect.Descriptor instead.
func (*CohortConsensusRangeTabData) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{17}
}

func (x *CohortConsensusRangeTabData) GetExpertiseRank() *structpb.Value {
	if x != nil {
		return x.ExpertiseRank
	}
	return nil
}

func (x *CohortConsensusRangeTabData) GetExpertsCount() int32 {
	if x != nil {
		return x.ExpertsCount
	}
	return 0
}

func (x *CohortConsensusRangeTabData) GetExpertiseScore() *structpb.Value {
	if x != nil {
		return x.ExpertiseScore
	}
	return nil
}

func (x *CohortConsensusRangeTabData) GetDistanceToAnchor() *structpb.Value {
	if x != nil {
		return x.DistanceToAnchor
	}
	return nil
}

func (x *CohortConsensusRangeTabData) GetDistanceToConsensus() *structpb.Value {
	if x != nil {
		return x.DistanceToConsensus
	}
	return nil
}

func (x *CohortConsensusRangeTabData) GetTradePeriodsWithMetrics() *TradePeriodsWithMetrics {
	if x != nil {
		return x.TradePeriodsWithMetrics
	}
	return nil
}

func (m *CohortConsensusRangeTabData) GetAnchorDetails() isCohortConsensusRangeTabData_AnchorDetails {
	if m != nil {
		return m.AnchorDetails
	}
	return nil
}

func (x *CohortConsensusRangeTabData) GetTradeAnchorDetails() *TradeAnchorDetails {
	if x, ok := x.GetAnchorDetails().(*CohortConsensusRangeTabData_TradeAnchorDetails); ok {
		return x.TradeAnchorDetails
	}
	return nil
}

func (x *CohortConsensusRangeTabData) GetEvpAnchorDetails() *EvpAnchorDetails {
	if x, ok := x.GetAnchorDetails().(*CohortConsensusRangeTabData_EvpAnchorDetails); ok {
		return x.EvpAnchorDetails
	}
	return nil
}

func (x *CohortConsensusRangeTabData) GetSubmissionEvidenceAnchorDetails() *SubmissionEvidenceAnchorDetails {
	if x, ok := x.GetAnchorDetails().(*CohortConsensusRangeTabData_SubmissionEvidenceAnchorDetails); ok {
		return x.SubmissionEvidenceAnchorDetails
	}
	return nil
}

type isCohortConsensusRangeTabData_AnchorDetails interface {
	isCohortConsensusRangeTabData_AnchorDetails()
}

type CohortConsensusRangeTabData_TradeAnchorDetails struct {
	TradeAnchorDetails *TradeAnchorDetails `protobuf:"bytes,7,opt,name=trade_anchor_details,json=tradeAnchorDetails,proto3,oneof"`
}

type CohortConsensusRangeTabData_EvpAnchorDetails struct {
	EvpAnchorDetails *EvpAnchorDetails `protobuf:"bytes,8,opt,name=evp_anchor_details,json=evpAnchorDetails,proto3,oneof"`
}

type CohortConsensusRangeTabData_SubmissionEvidenceAnchorDetails struct {
	SubmissionEvidenceAnchorDetails *SubmissionEvidenceAnchorDetails `protobuf:"bytes,9,opt,name=submission_evidence_anchor_details,json=submissionEvidenceAnchorDetails,proto3,oneof"`
}

func (*CohortConsensusRangeTabData_TradeAnchorDetails) isCohortConsensusRangeTabData_AnchorDetails() {
}

func (*CohortConsensusRangeTabData_EvpAnchorDetails) isCohortConsensusRangeTabData_AnchorDetails() {}

func (*CohortConsensusRangeTabData_SubmissionEvidenceAnchorDetails) isCohortConsensusRangeTabData_AnchorDetails() {
}

type TradeAnchorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatestTradePrice    float64 `protobuf:"fixed64,1,opt,name=latest_trade_price,json=latestTradePrice,proto3" json:"latest_trade_price,omitempty"`
	DistanceToConsensus float64 `protobuf:"fixed64,2,opt,name=distance_to_consensus,json=distanceToConsensus,proto3" json:"distance_to_consensus,omitempty"`
	Notional            float64 `protobuf:"fixed64,3,opt,name=notional,proto3" json:"notional,omitempty"`
	TradeExecutionTime  string  `protobuf:"bytes,4,opt,name=trade_execution_time,json=tradeExecutionTime,proto3" json:"trade_execution_time,omitempty"`
	PricingAge          string  `protobuf:"bytes,5,opt,name=pricing_age,json=pricingAge,proto3" json:"pricing_age,omitempty"`
	Source              string  `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *TradeAnchorDetails) Reset() {
	*x = TradeAnchorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeAnchorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeAnchorDetails) ProtoMessage() {}

func (x *TradeAnchorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeAnchorDetails.ProtoReflect.Descriptor instead.
func (*TradeAnchorDetails) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{18}
}

func (x *TradeAnchorDetails) GetLatestTradePrice() float64 {
	if x != nil {
		return x.LatestTradePrice
	}
	return 0
}

func (x *TradeAnchorDetails) GetDistanceToConsensus() float64 {
	if x != nil {
		return x.DistanceToConsensus
	}
	return 0
}

func (x *TradeAnchorDetails) GetNotional() float64 {
	if x != nil {
		return x.Notional
	}
	return 0
}

func (x *TradeAnchorDetails) GetTradeExecutionTime() string {
	if x != nil {
		return x.TradeExecutionTime
	}
	return ""
}

func (x *TradeAnchorDetails) GetPricingAge() string {
	if x != nil {
		return x.PricingAge
	}
	return ""
}

func (x *TradeAnchorDetails) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type EvpAnchorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid                 *structpb.Value `protobuf:"bytes,1,opt,name=mid,proto3" json:"mid,omitempty"`
	MidCalculated       *structpb.Value `protobuf:"bytes,2,opt,name=mid_calculated,json=midCalculated,proto3" json:"mid_calculated,omitempty"`
	DistanceToConsensus float64         `protobuf:"fixed64,3,opt,name=distance_to_consensus,json=distanceToConsensus,proto3" json:"distance_to_consensus,omitempty"`
}

func (x *EvpAnchorDetails) Reset() {
	*x = EvpAnchorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvpAnchorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvpAnchorDetails) ProtoMessage() {}

func (x *EvpAnchorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvpAnchorDetails.ProtoReflect.Descriptor instead.
func (*EvpAnchorDetails) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{19}
}

func (x *EvpAnchorDetails) GetMid() *structpb.Value {
	if x != nil {
		return x.Mid
	}
	return nil
}

func (x *EvpAnchorDetails) GetMidCalculated() *structpb.Value {
	if x != nil {
		return x.MidCalculated
	}
	return nil
}

func (x *EvpAnchorDetails) GetDistanceToConsensus() float64 {
	if x != nil {
		return x.DistanceToConsensus
	}
	return 0
}

type SubmissionEvidenceAnchorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmissionEvidence  float64 `protobuf:"fixed64,1,opt,name=submission_evidence,json=submissionEvidence,proto3" json:"submission_evidence,omitempty"`
	DistanceToConsensus float64 `protobuf:"fixed64,2,opt,name=distance_to_consensus,json=distanceToConsensus,proto3" json:"distance_to_consensus,omitempty"`
}

func (x *SubmissionEvidenceAnchorDetails) Reset() {
	*x = SubmissionEvidenceAnchorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmissionEvidenceAnchorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionEvidenceAnchorDetails) ProtoMessage() {}

func (x *SubmissionEvidenceAnchorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionEvidenceAnchorDetails.ProtoReflect.Descriptor instead.
func (*SubmissionEvidenceAnchorDetails) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{20}
}

func (x *SubmissionEvidenceAnchorDetails) GetSubmissionEvidence() float64 {
	if x != nil {
		return x.SubmissionEvidence
	}
	return 0
}

func (x *SubmissionEvidenceAnchorDetails) GetDistanceToConsensus() float64 {
	if x != nil {
		return x.DistanceToConsensus
	}
	return 0
}

type TradePeriodsWithMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LessDay   *TradePeriodMetrics `protobuf:"bytes,1,opt,name=less_day,json=lessDay,proto3" json:"less_day,omitempty"`
	LessWeek  *TradePeriodMetrics `protobuf:"bytes,2,opt,name=less_week,json=lessWeek,proto3" json:"less_week,omitempty"`
	LessMonth *TradePeriodMetrics `protobuf:"bytes,3,opt,name=less_month,json=lessMonth,proto3" json:"less_month,omitempty"`
}

func (x *TradePeriodsWithMetrics) Reset() {
	*x = TradePeriodsWithMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradePeriodsWithMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradePeriodsWithMetrics) ProtoMessage() {}

func (x *TradePeriodsWithMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradePeriodsWithMetrics.ProtoReflect.Descriptor instead.
func (*TradePeriodsWithMetrics) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{21}
}

func (x *TradePeriodsWithMetrics) GetLessDay() *TradePeriodMetrics {
	if x != nil {
		return x.LessDay
	}
	return nil
}

func (x *TradePeriodsWithMetrics) GetLessWeek() *TradePeriodMetrics {
	if x != nil {
		return x.LessWeek
	}
	return nil
}

func (x *TradePeriodsWithMetrics) GetLessMonth() *TradePeriodMetrics {
	if x != nil {
		return x.LessMonth
	}
	return nil
}

type TradePeriodMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCount        int64   `protobuf:"varint,1,opt,name=trade_count,json=tradeCount,proto3" json:"trade_count,omitempty"`
	MinNotionalAmount float64 `protobuf:"fixed64,2,opt,name=min_notional_amount,json=minNotionalAmount,proto3" json:"min_notional_amount,omitempty"`
	MaxNotionalAmount float64 `protobuf:"fixed64,3,opt,name=max_notional_amount,json=maxNotionalAmount,proto3" json:"max_notional_amount,omitempty"`
	TotalLiquidity    float64 `protobuf:"fixed64,4,opt,name=total_liquidity,json=totalLiquidity,proto3" json:"total_liquidity,omitempty"`
}

func (x *TradePeriodMetrics) Reset() {
	*x = TradePeriodMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradePeriodMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradePeriodMetrics) ProtoMessage() {}

func (x *TradePeriodMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradePeriodMetrics.ProtoReflect.Descriptor instead.
func (*TradePeriodMetrics) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{22}
}

func (x *TradePeriodMetrics) GetTradeCount() int64 {
	if x != nil {
		return x.TradeCount
	}
	return 0
}

func (x *TradePeriodMetrics) GetMinNotionalAmount() float64 {
	if x != nil {
		return x.MinNotionalAmount
	}
	return 0
}

func (x *TradePeriodMetrics) GetMaxNotionalAmount() float64 {
	if x != nil {
		return x.MaxNotionalAmount
	}
	return 0
}

func (x *TradePeriodMetrics) GetTotalLiquidity() float64 {
	if x != nil {
		return x.TotalLiquidity
	}
	return 0
}

type ConsensusExplorerTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ConsensusExplorerTableResponse_Data
	//	*ConsensusExplorerTableResponse_Error
	Response isConsensusExplorerTableResponse_Response `protobuf_oneof:"response"`
}

func (x *ConsensusExplorerTableResponse) Reset() {
	*x = ConsensusExplorerTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusExplorerTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusExplorerTableResponse) ProtoMessage() {}

func (x *ConsensusExplorerTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusExplorerTableResponse.ProtoReflect.Descriptor instead.
func (*ConsensusExplorerTableResponse) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{23}
}

func (m *ConsensusExplorerTableResponse) GetResponse() isConsensusExplorerTableResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ConsensusExplorerTableResponse) GetData() *ConsensusExplorerTableData {
	if x, ok := x.GetResponse().(*ConsensusExplorerTableResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *ConsensusExplorerTableResponse) GetError() *common.Error {
	if x, ok := x.GetResponse().(*ConsensusExplorerTableResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isConsensusExplorerTableResponse_Response interface {
	isConsensusExplorerTableResponse_Response()
}

type ConsensusExplorerTableResponse_Data struct {
	Data *ConsensusExplorerTableData `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type ConsensusExplorerTableResponse_Error struct {
	Error *common.Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*ConsensusExplorerTableResponse_Data) isConsensusExplorerTableResponse_Response() {}

func (*ConsensusExplorerTableResponse_Error) isConsensusExplorerTableResponse_Response() {}

type ConsensusExplorerTableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComparisonTable *ComparisonTable `protobuf:"bytes,1,opt,name=comparison_table,json=comparisonTable,proto3" json:"comparison_table,omitempty"`
}

func (x *ConsensusExplorerTableData) Reset() {
	*x = ConsensusExplorerTableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusExplorerTableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusExplorerTableData) ProtoMessage() {}

func (x *ConsensusExplorerTableData) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusExplorerTableData.ProtoReflect.Descriptor instead.
func (*ConsensusExplorerTableData) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{24}
}

func (x *ConsensusExplorerTableData) GetComparisonTable() *ComparisonTable {
	if x != nil {
		return x.ComparisonTable
	}
	return nil
}

type ComparisonTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CohortConsensusColumn *CohortConsensusColumn                   `protobuf:"bytes,1,opt,name=cohort_consensus_column,json=cohortConsensusColumn,proto3" json:"cohort_consensus_column,omitempty"`
	Submission            *SubmissionExplorerTableColumn           `protobuf:"bytes,2,opt,name=submission,proto3" json:"submission,omitempty"`
	SubmissionStatistics  *SubmissionStatisticsExplorerTableColumn `protobuf:"bytes,3,opt,name=submission_statistics,json=submissionStatistics,proto3" json:"submission_statistics,omitempty"`
	SubmissionEvidence    *SubmissionEvidenceTableColumn           `protobuf:"bytes,4,opt,name=submission_evidence,json=submissionEvidence,proto3" json:"submission_evidence,omitempty"`
	EvidentialPricing     *EvidentalPricing                        `protobuf:"bytes,5,opt,name=evidentialPricing,proto3" json:"evidentialPricing,omitempty"`
	AvailableTrades       *AvailableTrades                         `protobuf:"bytes,6,opt,name=available_trades,json=availableTrades,proto3" json:"available_trades,omitempty"`
}

func (x *ComparisonTable) Reset() {
	*x = ComparisonTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComparisonTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComparisonTable) ProtoMessage() {}

func (x *ComparisonTable) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComparisonTable.ProtoReflect.Descriptor instead.
func (*ComparisonTable) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{25}
}

func (x *ComparisonTable) GetCohortConsensusColumn() *CohortConsensusColumn {
	if x != nil {
		return x.CohortConsensusColumn
	}
	return nil
}

func (x *ComparisonTable) GetSubmission() *SubmissionExplorerTableColumn {
	if x != nil {
		return x.Submission
	}
	return nil
}

func (x *ComparisonTable) GetSubmissionStatistics() *SubmissionStatisticsExplorerTableColumn {
	if x != nil {
		return x.SubmissionStatistics
	}
	return nil
}

func (x *ComparisonTable) GetSubmissionEvidence() *SubmissionEvidenceTableColumn {
	if x != nil {
		return x.SubmissionEvidence
	}
	return nil
}

func (x *ComparisonTable) GetEvidentialPricing() *EvidentalPricing {
	if x != nil {
		return x.EvidentialPricing
	}
	return nil
}

func (x *ComparisonTable) GetAvailableTrades() *AvailableTrades {
	if x != nil {
		return x.AvailableTrades
	}
	return nil
}

type CohortConsensusColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CohortConsensusPrice *structpb.Value `protobuf:"bytes,1,opt,name=cohort_consensus_price,json=cohortConsensusPrice,proto3" json:"cohort_consensus_price,omitempty"`
	AbsDiffFromConsensus *structpb.Value `protobuf:"bytes,2,opt,name=abs_diff_from_consensus,json=absDiffFromConsensus,proto3" json:"abs_diff_from_consensus,omitempty"`
	SubPriceDiff         *structpb.Value `protobuf:"bytes,3,opt,name=sub_price_diff,json=subPriceDiff,proto3" json:"sub_price_diff,omitempty"`
	// Types that are assignable to AnchorDiff:
	//
	//	*CohortConsensusColumn_ConsAbsDiffFromAnchorTrade
	//	*CohortConsensusColumn_ConsAbsDiffFromAnchorEvpMid
	//	*CohortConsensusColumn_ConsAbsDiffFromAnchorEvpMidCalc
	//	*CohortConsensusColumn_ConsAbsDiffFromAnchorSub
	AnchorDiff          isCohortConsensusColumn_AnchorDiff `protobuf_oneof:"anchor_diff"`
	LowerBoundary       *structpb.Value                    `protobuf:"bytes,8,opt,name=lower_boundary,json=lowerBoundary,proto3" json:"lower_boundary,omitempty"`
	UpperBoundary       *structpb.Value                    `protobuf:"bytes,9,opt,name=upper_boundary,json=upperBoundary,proto3" json:"upper_boundary,omitempty"`
	NumberOfInstruments *structpb.Value                    `protobuf:"bytes,10,opt,name=number_of_instruments,json=numberOfInstruments,proto3" json:"number_of_instruments,omitempty"`
	StdDev              *structpb.Value                    `protobuf:"bytes,11,opt,name=std_dev,json=stdDev,proto3" json:"std_dev,omitempty"`
}

func (x *CohortConsensusColumn) Reset() {
	*x = CohortConsensusColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CohortConsensusColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CohortConsensusColumn) ProtoMessage() {}

func (x *CohortConsensusColumn) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CohortConsensusColumn.ProtoReflect.Descriptor instead.
func (*CohortConsensusColumn) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{26}
}

func (x *CohortConsensusColumn) GetCohortConsensusPrice() *structpb.Value {
	if x != nil {
		return x.CohortConsensusPrice
	}
	return nil
}

func (x *CohortConsensusColumn) GetAbsDiffFromConsensus() *structpb.Value {
	if x != nil {
		return x.AbsDiffFromConsensus
	}
	return nil
}

func (x *CohortConsensusColumn) GetSubPriceDiff() *structpb.Value {
	if x != nil {
		return x.SubPriceDiff
	}
	return nil
}

func (m *CohortConsensusColumn) GetAnchorDiff() isCohortConsensusColumn_AnchorDiff {
	if m != nil {
		return m.AnchorDiff
	}
	return nil
}

func (x *CohortConsensusColumn) GetConsAbsDiffFromAnchorTrade() *structpb.Value {
	if x, ok := x.GetAnchorDiff().(*CohortConsensusColumn_ConsAbsDiffFromAnchorTrade); ok {
		return x.ConsAbsDiffFromAnchorTrade
	}
	return nil
}

func (x *CohortConsensusColumn) GetConsAbsDiffFromAnchorEvpMid() *structpb.Value {
	if x, ok := x.GetAnchorDiff().(*CohortConsensusColumn_ConsAbsDiffFromAnchorEvpMid); ok {
		return x.ConsAbsDiffFromAnchorEvpMid
	}
	return nil
}

func (x *CohortConsensusColumn) GetConsAbsDiffFromAnchorEvpMidCalc() *structpb.Value {
	if x, ok := x.GetAnchorDiff().(*CohortConsensusColumn_ConsAbsDiffFromAnchorEvpMidCalc); ok {
		return x.ConsAbsDiffFromAnchorEvpMidCalc
	}
	return nil
}

func (x *CohortConsensusColumn) GetConsAbsDiffFromAnchorSub() *structpb.Value {
	if x, ok := x.GetAnchorDiff().(*CohortConsensusColumn_ConsAbsDiffFromAnchorSub); ok {
		return x.ConsAbsDiffFromAnchorSub
	}
	return nil
}

func (x *CohortConsensusColumn) GetLowerBoundary() *structpb.Value {
	if x != nil {
		return x.LowerBoundary
	}
	return nil
}

func (x *CohortConsensusColumn) GetUpperBoundary() *structpb.Value {
	if x != nil {
		return x.UpperBoundary
	}
	return nil
}

func (x *CohortConsensusColumn) GetNumberOfInstruments() *structpb.Value {
	if x != nil {
		return x.NumberOfInstruments
	}
	return nil
}

func (x *CohortConsensusColumn) GetStdDev() *structpb.Value {
	if x != nil {
		return x.StdDev
	}
	return nil
}

type isCohortConsensusColumn_AnchorDiff interface {
	isCohortConsensusColumn_AnchorDiff()
}

type CohortConsensusColumn_ConsAbsDiffFromAnchorTrade struct {
	ConsAbsDiffFromAnchorTrade *structpb.Value `protobuf:"bytes,4,opt,name=cons_abs_diff_from_anchor_trade,json=consAbsDiffFromAnchorTrade,proto3,oneof"`
}

type CohortConsensusColumn_ConsAbsDiffFromAnchorEvpMid struct {
	ConsAbsDiffFromAnchorEvpMid *structpb.Value `protobuf:"bytes,5,opt,name=cons_abs_diff_from_anchor_evp_mid,json=consAbsDiffFromAnchorEvpMid,proto3,oneof"`
}

type CohortConsensusColumn_ConsAbsDiffFromAnchorEvpMidCalc struct {
	ConsAbsDiffFromAnchorEvpMidCalc *structpb.Value `protobuf:"bytes,6,opt,name=cons_abs_diff_from_anchor_evp_mid_calc,json=consAbsDiffFromAnchorEvpMidCalc,proto3,oneof"`
}

type CohortConsensusColumn_ConsAbsDiffFromAnchorSub struct {
	ConsAbsDiffFromAnchorSub *structpb.Value `protobuf:"bytes,7,opt,name=cons_abs_diff_from_anchor_sub,json=consAbsDiffFromAnchorSub,proto3,oneof"`
}

func (*CohortConsensusColumn_ConsAbsDiffFromAnchorTrade) isCohortConsensusColumn_AnchorDiff() {}

func (*CohortConsensusColumn_ConsAbsDiffFromAnchorEvpMid) isCohortConsensusColumn_AnchorDiff() {}

func (*CohortConsensusColumn_ConsAbsDiffFromAnchorEvpMidCalc) isCohortConsensusColumn_AnchorDiff() {}

func (*CohortConsensusColumn_ConsAbsDiffFromAnchorSub) isCohortConsensusColumn_AnchorDiff() {}

type SubmissionExplorerTableColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmissionPrice *structpb.Value `protobuf:"bytes,1,opt,name=submission_price,json=submissionPrice,proto3" json:"submission_price,omitempty"`
}

func (x *SubmissionExplorerTableColumn) Reset() {
	*x = SubmissionExplorerTableColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmissionExplorerTableColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionExplorerTableColumn) ProtoMessage() {}

func (x *SubmissionExplorerTableColumn) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionExplorerTableColumn.ProtoReflect.Descriptor instead.
func (*SubmissionExplorerTableColumn) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{27}
}

func (x *SubmissionExplorerTableColumn) GetSubmissionPrice() *structpb.Value {
	if x != nil {
		return x.SubmissionPrice
	}
	return nil
}

type SubmissionStatisticsExplorerTableColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mean                           *structpb.Value `protobuf:"bytes,1,opt,name=mean,proto3" json:"mean,omitempty"`
	AbsDiffFromStatisticalMean     *structpb.Value `protobuf:"bytes,2,opt,name=abs_diff_from_statistical_mean,json=absDiffFromStatisticalMean,proto3" json:"abs_diff_from_statistical_mean,omitempty"`
	SubPriceDiff                   *structpb.Value `protobuf:"bytes,3,opt,name=sub_price_diff,json=subPriceDiff,proto3" json:"sub_price_diff,omitempty"`
	StatMeanAbsDiffFromLatestTrade *structpb.Value `protobuf:"bytes,4,opt,name=stat_mean_abs_diff_from_latest_trade,json=statMeanAbsDiffFromLatestTrade,proto3" json:"stat_mean_abs_diff_from_latest_trade,omitempty"`
	LowerBoundary                  *structpb.Value `protobuf:"bytes,5,opt,name=lower_boundary,json=lowerBoundary,proto3" json:"lower_boundary,omitempty"`
	UpperBoundary                  *structpb.Value `protobuf:"bytes,6,opt,name=upper_boundary,json=upperBoundary,proto3" json:"upper_boundary,omitempty"`
	SubValidPointsCount            *structpb.Value `protobuf:"bytes,7,opt,name=sub_valid_points_count,json=subValidPointsCount,proto3" json:"sub_valid_points_count,omitempty"`
	StdDev                         *structpb.Value `protobuf:"bytes,8,opt,name=std_dev,json=stdDev,proto3" json:"std_dev,omitempty"`
	Min                            *structpb.Value `protobuf:"bytes,9,opt,name=min,proto3" json:"min,omitempty"`
	Max                            *structpb.Value `protobuf:"bytes,10,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *SubmissionStatisticsExplorerTableColumn) Reset() {
	*x = SubmissionStatisticsExplorerTableColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmissionStatisticsExplorerTableColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionStatisticsExplorerTableColumn) ProtoMessage() {}

func (x *SubmissionStatisticsExplorerTableColumn) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionStatisticsExplorerTableColumn.ProtoReflect.Descriptor instead.
func (*SubmissionStatisticsExplorerTableColumn) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{28}
}

func (x *SubmissionStatisticsExplorerTableColumn) GetMean() *structpb.Value {
	if x != nil {
		return x.Mean
	}
	return nil
}

func (x *SubmissionStatisticsExplorerTableColumn) GetAbsDiffFromStatisticalMean() *structpb.Value {
	if x != nil {
		return x.AbsDiffFromStatisticalMean
	}
	return nil
}

func (x *SubmissionStatisticsExplorerTableColumn) GetSubPriceDiff() *structpb.Value {
	if x != nil {
		return x.SubPriceDiff
	}
	return nil
}

func (x *SubmissionStatisticsExplorerTableColumn) GetStatMeanAbsDiffFromLatestTrade() *structpb.Value {
	if x != nil {
		return x.StatMeanAbsDiffFromLatestTrade
	}
	return nil
}

func (x *SubmissionStatisticsExplorerTableColumn) GetLowerBoundary() *structpb.Value {
	if x != nil {
		return x.LowerBoundary
	}
	return nil
}

func (x *SubmissionStatisticsExplorerTableColumn) GetUpperBoundary() *structpb.Value {
	if x != nil {
		return x.UpperBoundary
	}
	return nil
}

func (x *SubmissionStatisticsExplorerTableColumn) GetSubValidPointsCount() *structpb.Value {
	if x != nil {
		return x.SubValidPointsCount
	}
	return nil
}

func (x *SubmissionStatisticsExplorerTableColumn) GetStdDev() *structpb.Value {
	if x != nil {
		return x.StdDev
	}
	return nil
}

func (x *SubmissionStatisticsExplorerTableColumn) GetMin() *structpb.Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *SubmissionStatisticsExplorerTableColumn) GetMax() *structpb.Value {
	if x != nil {
		return x.Max
	}
	return nil
}

type SubmissionEvidenceTableColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Evidence                       *structpb.Value `protobuf:"bytes,1,opt,name=evidence,proto3" json:"evidence,omitempty"`
	AbsDiffFromEvidence            *structpb.Value `protobuf:"bytes,2,opt,name=abs_diff_from_evidence,json=absDiffFromEvidence,proto3" json:"abs_diff_from_evidence,omitempty"`
	SubPriceDiff                   *structpb.Value `protobuf:"bytes,3,opt,name=sub_price_diff,json=subPriceDiff,proto3" json:"sub_price_diff,omitempty"`
	EviPriceAbsDiffFromLatestTrade *structpb.Value `protobuf:"bytes,4,opt,name=evi_price_abs_diff_from_latest_trade,json=eviPriceAbsDiffFromLatestTrade,proto3" json:"evi_price_abs_diff_from_latest_trade,omitempty"`
	LowerBoundary                  *structpb.Value `protobuf:"bytes,5,opt,name=lower_boundary,json=lowerBoundary,proto3" json:"lower_boundary,omitempty"`
	UpperBoundary                  *structpb.Value `protobuf:"bytes,6,opt,name=upper_boundary,json=upperBoundary,proto3" json:"upper_boundary,omitempty"`
	ParticipantsCount              *structpb.Value `protobuf:"bytes,7,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"`
	StdDev                         *structpb.Value `protobuf:"bytes,8,opt,name=std_dev,json=stdDev,proto3" json:"std_dev,omitempty"`
}

func (x *SubmissionEvidenceTableColumn) Reset() {
	*x = SubmissionEvidenceTableColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmissionEvidenceTableColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionEvidenceTableColumn) ProtoMessage() {}

func (x *SubmissionEvidenceTableColumn) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionEvidenceTableColumn.ProtoReflect.Descriptor instead.
func (*SubmissionEvidenceTableColumn) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{29}
}

func (x *SubmissionEvidenceTableColumn) GetEvidence() *structpb.Value {
	if x != nil {
		return x.Evidence
	}
	return nil
}

func (x *SubmissionEvidenceTableColumn) GetAbsDiffFromEvidence() *structpb.Value {
	if x != nil {
		return x.AbsDiffFromEvidence
	}
	return nil
}

func (x *SubmissionEvidenceTableColumn) GetSubPriceDiff() *structpb.Value {
	if x != nil {
		return x.SubPriceDiff
	}
	return nil
}

func (x *SubmissionEvidenceTableColumn) GetEviPriceAbsDiffFromLatestTrade() *structpb.Value {
	if x != nil {
		return x.EviPriceAbsDiffFromLatestTrade
	}
	return nil
}

func (x *SubmissionEvidenceTableColumn) GetLowerBoundary() *structpb.Value {
	if x != nil {
		return x.LowerBoundary
	}
	return nil
}

func (x *SubmissionEvidenceTableColumn) GetUpperBoundary() *structpb.Value {
	if x != nil {
		return x.UpperBoundary
	}
	return nil
}

func (x *SubmissionEvidenceTableColumn) GetParticipantsCount() *structpb.Value {
	if x != nil {
		return x.ParticipantsCount
	}
	return nil
}

func (x *SubmissionEvidenceTableColumn) GetStdDev() *structpb.Value {
	if x != nil {
		return x.StdDev
	}
	return nil
}

type EvidentalPricing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mid                          *structpb.Value `protobuf:"bytes,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Bid                          *structpb.Value `protobuf:"bytes,2,opt,name=bid,proto3" json:"bid,omitempty"`
	Ask                          *structpb.Value `protobuf:"bytes,3,opt,name=ask,proto3" json:"ask,omitempty"`
	AbsDiffFromEvpMid            *structpb.Value `protobuf:"bytes,4,opt,name=abs_diff_from_evp_mid,json=absDiffFromEvpMid,proto3" json:"abs_diff_from_evp_mid,omitempty"`
	SubPriceDiff                 *structpb.Value `protobuf:"bytes,5,opt,name=sub_price_diff,json=subPriceDiff,proto3" json:"sub_price_diff,omitempty"`
	EvpMidAbsDiffFromLatestTrade *structpb.Value `protobuf:"bytes,6,opt,name=evp_mid_abs_diff_from_latest_trade,json=evpMidAbsDiffFromLatestTrade,proto3" json:"evp_mid_abs_diff_from_latest_trade,omitempty"`
	EvpLowerBoundary             *structpb.Value `protobuf:"bytes,7,opt,name=evp_lower_boundary,json=evpLowerBoundary,proto3" json:"evp_lower_boundary,omitempty"`
	EvpUpperBoundary             *structpb.Value `protobuf:"bytes,8,opt,name=evp_upper_boundary,json=evpUpperBoundary,proto3" json:"evp_upper_boundary,omitempty"`
	TradesOrOrdersCount          *structpb.Value `protobuf:"bytes,9,opt,name=trades_or_orders_count,json=tradesOrOrdersCount,proto3" json:"trades_or_orders_count,omitempty"`
}

func (x *EvidentalPricing) Reset() {
	*x = EvidentalPricing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidentalPricing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidentalPricing) ProtoMessage() {}

func (x *EvidentalPricing) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidentalPricing.ProtoReflect.Descriptor instead.
func (*EvidentalPricing) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{30}
}

func (x *EvidentalPricing) GetMid() *structpb.Value {
	if x != nil {
		return x.Mid
	}
	return nil
}

func (x *EvidentalPricing) GetBid() *structpb.Value {
	if x != nil {
		return x.Bid
	}
	return nil
}

func (x *EvidentalPricing) GetAsk() *structpb.Value {
	if x != nil {
		return x.Ask
	}
	return nil
}

func (x *EvidentalPricing) GetAbsDiffFromEvpMid() *structpb.Value {
	if x != nil {
		return x.AbsDiffFromEvpMid
	}
	return nil
}

func (x *EvidentalPricing) GetSubPriceDiff() *structpb.Value {
	if x != nil {
		return x.SubPriceDiff
	}
	return nil
}

func (x *EvidentalPricing) GetEvpMidAbsDiffFromLatestTrade() *structpb.Value {
	if x != nil {
		return x.EvpMidAbsDiffFromLatestTrade
	}
	return nil
}

func (x *EvidentalPricing) GetEvpLowerBoundary() *structpb.Value {
	if x != nil {
		return x.EvpLowerBoundary
	}
	return nil
}

func (x *EvidentalPricing) GetEvpUpperBoundary() *structpb.Value {
	if x != nil {
		return x.EvpUpperBoundary
	}
	return nil
}

func (x *EvidentalPricing) GetTradesOrOrdersCount() *structpb.Value {
	if x != nil {
		return x.TradesOrOrdersCount
	}
	return nil
}

type AvailableTrades struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatestTradePrice               *structpb.Value `protobuf:"bytes,1,opt,name=latest_trade_price,json=latestTradePrice,proto3" json:"latest_trade_price,omitempty"`
	AbsDiffFromLatestTrade         *structpb.Value `protobuf:"bytes,2,opt,name=abs_diff_from_latest_trade,json=absDiffFromLatestTrade,proto3" json:"abs_diff_from_latest_trade,omitempty"`
	SubPriceDiff                   *structpb.Value `protobuf:"bytes,3,opt,name=sub_price_diff,json=subPriceDiff,proto3" json:"sub_price_diff,omitempty"`
	SubPriceAbsDiffFromLatestTrade *structpb.Value `protobuf:"bytes,4,opt,name=sub_price_abs_diff_from_latest_trade,json=subPriceAbsDiffFromLatestTrade,proto3" json:"sub_price_abs_diff_from_latest_trade,omitempty"`
	Min                            *structpb.Value `protobuf:"bytes,5,opt,name=min,proto3" json:"min,omitempty"`
	Max                            *structpb.Value `protobuf:"bytes,6,opt,name=max,proto3" json:"max,omitempty"`
	DayTradeNumber                 int64           `protobuf:"varint,7,opt,name=dayTradeNumber,proto3" json:"dayTradeNumber,omitempty"`
	WeekTradeNumber                int64           `protobuf:"varint,8,opt,name=weekTradeNumber,proto3" json:"weekTradeNumber,omitempty"`
	MonthTradeNumber               int64           `protobuf:"varint,9,opt,name=monthTradeNumber,proto3" json:"monthTradeNumber,omitempty"`
}

func (x *AvailableTrades) Reset() {
	*x = AvailableTrades{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableTrades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableTrades) ProtoMessage() {}

func (x *AvailableTrades) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableTrades.ProtoReflect.Descriptor instead.
func (*AvailableTrades) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{31}
}

func (x *AvailableTrades) GetLatestTradePrice() *structpb.Value {
	if x != nil {
		return x.LatestTradePrice
	}
	return nil
}

func (x *AvailableTrades) GetAbsDiffFromLatestTrade() *structpb.Value {
	if x != nil {
		return x.AbsDiffFromLatestTrade
	}
	return nil
}

func (x *AvailableTrades) GetSubPriceDiff() *structpb.Value {
	if x != nil {
		return x.SubPriceDiff
	}
	return nil
}

func (x *AvailableTrades) GetSubPriceAbsDiffFromLatestTrade() *structpb.Value {
	if x != nil {
		return x.SubPriceAbsDiffFromLatestTrade
	}
	return nil
}

func (x *AvailableTrades) GetMin() *structpb.Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *AvailableTrades) GetMax() *structpb.Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *AvailableTrades) GetDayTradeNumber() int64 {
	if x != nil {
		return x.DayTradeNumber
	}
	return 0
}

func (x *AvailableTrades) GetWeekTradeNumber() int64 {
	if x != nil {
		return x.WeekTradeNumber
	}
	return 0
}

func (x *AvailableTrades) GetMonthTradeNumber() int64 {
	if x != nil {
		return x.MonthTradeNumber
	}
	return 0
}

type ConsensusTabRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId               string             `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	TraceName             string             `protobuf:"bytes,2,opt,name=trace_name,json=traceName,proto3" json:"trace_name,omitempty"`
	ConsensusRunTimestamp string             `protobuf:"bytes,3,opt,name=consensus_run_timestamp,json=consensusRunTimestamp,proto3" json:"consensus_run_timestamp,omitempty"`
	FilterPack            *common.FilterPack `protobuf:"bytes,4,opt,name=filter_pack,json=filterPack,proto3" json:"filter_pack,omitempty"`
	OrderBy               *common.OrderBy    `protobuf:"bytes,5,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	Page                  *common.Page       `protobuf:"bytes,6,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ConsensusTabRequest) Reset() {
	*x = ConsensusTabRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_consensus_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusTabRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusTabRequest) ProtoMessage() {}

func (x *ConsensusTabRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_consensus_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusTabRequest.ProtoReflect.Descriptor instead.
func (*ConsensusTabRequest) Descriptor() ([]byte, []int) {
	return file_public_consensus_service_proto_rawDescGZIP(), []int{32}
}

func (x *ConsensusTabRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ConsensusTabRequest) GetTraceName() string {
	if x != nil {
		return x.TraceName
	}
	return ""
}

func (x *ConsensusTabRequest) GetConsensusRunTimestamp() string {
	if x != nil {
		return x.ConsensusRunTimestamp
	}
	return ""
}

func (x *ConsensusTabRequest) GetFilterPack() *common.FilterPack {
	if x != nil {
		return x.FilterPack
	}
	return nil
}

func (x *ConsensusTabRequest) GetOrderBy() *common.OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *ConsensusTabRequest) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

var File_public_consensus_service_proto protoreflect.FileDescriptor

var file_public_consensus_service_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x02, 0x0a, 0x18, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x25, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x69, 0x74,
	0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x04, 0x0a,
	0x02, 0x69, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x2a, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61,
	0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x9d, 0x02, 0x0a, 0x26, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70,
	0x6c, 0x6f, 0x72, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x12, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75,
	0x6d, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x52, 0x11,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x66, 0x0a, 0x1c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69,
	0x75, 0x6d, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1a, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x22,
	0xa8, 0x06, 0x0a, 0x1a, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x71, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x44, 0x71, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x4d, 0x0a, 0x23, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x27, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x24, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x64, 0x71,
	0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x41,
	0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x71, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x50, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x5f, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x41,
	0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x74, 0x0a, 0x2b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x69,
	0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x27, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x7c, 0x0a, 0x2f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x2b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x50, 0x0a, 0x0c, 0x44, 0x61,
	0x74, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc7, 0x03, 0x0a,
	0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x12, 0x3e, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e,
	0x69, 0x75, 0x6d, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x57, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x64, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x44, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x51, 0x0a, 0x15, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e,
	0x69, 0x75, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x13, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6c,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4b, 0x0a, 0x13,
	0x65, 0x76, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x69, 0x74, 0x61,
	0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x76, 0x70, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x11, 0x65, 0x76, 0x70, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x62, 0x69, 0x6d,
	0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x42, 0x69, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x0a, 0x62, 0x69, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x45, 0x0a, 0x11, 0x65, 0x76, 0x70, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x69, 0x74,
	0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x76, 0x70, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x0f, 0x65, 0x76, 0x70, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xc5, 0x03, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x2a, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x12, 0x3b, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x41, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x4b, 0x0a, 0x16, 0x61, 0x62, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x61, 0x62, 0x73, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0f,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3f, 0x0a,
	0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x9a,
	0x01, 0x0a, 0x1b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x6b,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x3b,
	0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x86, 0x03, 0x0a, 0x15,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x62, 0x69, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x62, 0x69, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4a, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x13, 0x65, 0x76,
	0x70, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x11, 0x65, 0x76, 0x70, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x22, 0xc8, 0x02, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6c,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a,
	0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12,
	0x2f, 0x0a, 0x07, 0x73, 0x74, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x64, 0x44, 0x65, 0x76,
	0x12, 0x3d, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22,
	0x80, 0x01, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xb1, 0x02, 0x0a, 0x11, 0x45, 0x76, 0x70, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x65, 0x76, 0x70,
	0x5f, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x65, 0x76, 0x70, 0x4d, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x65,
	0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x74, 0x64, 0x5f, 0x64, 0x65,
	0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x64, 0x44, 0x65, 0x76, 0x12, 0x3d, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e,
	0x69, 0x75, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x97, 0x01, 0x0a, 0x0a, 0x42, 0x69, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x62,
	0x69, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x62,
	0x69, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30,
	0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x41,
	0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x22, 0xde, 0x01, 0x0a, 0x0f, 0x45, 0x76, 0x70, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x22, 0x91, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x45,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x05, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x69, 0x74,
	0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x3f,
	0x0a, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e,
	0x69, 0x75, 0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0f,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x37, 0x0a, 0x0c, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x65, 0x76, 0x70, 0x5f,
	0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x69, 0x74, 0x61,
	0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x06, 0x65, 0x76, 0x70, 0x4d, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x19, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x69, 0x74,
	0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x17, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x16, 0x63, 0x6f, 0x68,
	0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x69, 0x74, 0x61,
	0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x14, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x11, 0x62, 0x69, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0f, 0x62, 0x69, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x4c,
	0x65, 0x66, 0x74, 0x4d, 0x65, 0x61, 0x6e, 0x12, 0x42, 0x0a, 0x12, 0x62, 0x69, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x10, 0x62, 0x69, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x65, 0x61, 0x6e, 0x12, 0x6b, 0x0a, 0x1f, 0x63,
	0x6f, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e,
	0x43, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x62, 0x44, 0x61, 0x74, 0x61, 0x52, 0x1b, 0x63, 0x6f, 0x68,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x61, 0x62, 0x44, 0x61, 0x74, 0x61, 0x22, 0x81, 0x03, 0x0a, 0x0b, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x21, 0x0a, 0x03, 0x65, 0x76, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x03, 0x65, 0x76, 0x70, 0x12, 0x40, 0x0a, 0x13, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69,
	0x75, 0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x12, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x10,
	0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75,
	0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x17, 0x62, 0x69, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61,
	0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x15, 0x62, 0x69, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x4c, 0x65, 0x66, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x49, 0x0a, 0x18, 0x62, 0x69, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x5f, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x16, 0x62, 0x69, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x05, 0x0a,
	0x1b, 0x43, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x0e,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3f, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x44, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f,
	0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x6f, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69,
	0x75, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x17, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x50, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48,
	0x00, 0x52, 0x12, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x65, 0x76, 0x70, 0x5f, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x76, 0x70,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52,
	0x10, 0x65, 0x76, 0x70, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x78, 0x0a, 0x22, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x1f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xfd, 0x01,
	0x0a, 0x12, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x13, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x74, 0x72, 0x61, 0x64, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x41, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xaf, 0x01,
	0x0a, 0x10, 0x45, 0x76, 0x70, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x28, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0e,
	0x6d, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6d, 0x69,
	0x64, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x22,
	0x86, 0x01, 0x0a, 0x1f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x12, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x13, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x17, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75,
	0x6d, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6c, 0x65, 0x73, 0x73, 0x44, 0x61, 0x79, 0x12, 0x39, 0x0a,
	0x09, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x08,
	0x6c, 0x65, 0x73, 0x73, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x3b, 0x0a, 0x0a, 0x6c, 0x65, 0x73, 0x73,
	0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74,
	0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x09, 0x6c, 0x65, 0x73, 0x73,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0xbe, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x4e,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x4e,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x22, 0x91, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69,
	0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c,
	0x6f, 0x72, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x0a, 0x1a, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x85,
	0x04, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x57, 0x0a, 0x17, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43,
	0x6f, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x15, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x47, 0x0a, 0x0a, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x14, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x58, 0x0a, 0x13,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x69, 0x74, 0x61,
	0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x12, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x65,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x12, 0x44, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x69, 0x74,
	0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x83, 0x07, 0x0a, 0x15, 0x43, 0x6f, 0x68, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x4c, 0x0a, 0x16, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x4d,
	0x0a, 0x17, 0x61, 0x62, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x61, 0x62, 0x73, 0x44, 0x69, 0x66, 0x66,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x12, 0x3c, 0x0a,
	0x0e, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73,
	0x75, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12, 0x5d, 0x0a, 0x1f, 0x63,
	0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x62, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x1a,
	0x63, 0x6f, 0x6e, 0x73, 0x41, 0x62, 0x73, 0x44, 0x69, 0x66, 0x66, 0x46, 0x72, 0x6f, 0x6d, 0x41,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x60, 0x0a, 0x21, 0x63, 0x6f,
	0x6e, 0x73, 0x5f, 0x61, 0x62, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x65, 0x76, 0x70, 0x5f, 0x6d, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x1b, 0x63, 0x6f, 0x6e, 0x73, 0x41, 0x62, 0x73, 0x44, 0x69, 0x66, 0x66, 0x46, 0x72, 0x6f, 0x6d,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x45, 0x76, 0x70, 0x4d, 0x69, 0x64, 0x12, 0x69, 0x0a, 0x26,
	0x63, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x62, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x65, 0x76, 0x70, 0x5f, 0x6d, 0x69,
	0x64, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x1f, 0x63, 0x6f, 0x6e, 0x73, 0x41, 0x62, 0x73, 0x44,
	0x69, 0x66, 0x66, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x45, 0x76, 0x70,
	0x4d, 0x69, 0x64, 0x43, 0x61, 0x6c, 0x63, 0x12, 0x59, 0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x73, 0x5f,
	0x61, 0x62, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x41, 0x62,
	0x73, 0x44, 0x69, 0x66, 0x66, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53,
	0x75, 0x62, 0x12, 0x3d, 0x0a, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x12, 0x3d, 0x0a, 0x0e, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x12, 0x4a, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x07,
	0x73, 0x74, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x64, 0x44, 0x65, 0x76, 0x42, 0x0d, 0x0a,
	0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x22, 0x62, 0x0a, 0x1d,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x41, 0x0a,
	0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x22, 0xa5, 0x05, 0x0a, 0x27, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2a, 0x0a, 0x04,
	0x6d, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12, 0x5a, 0x0a, 0x1e, 0x61, 0x62, 0x73, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x61, 0x62, 0x73, 0x44, 0x69, 0x66,
	0x66, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x4d, 0x65, 0x61, 0x6e, 0x12, 0x3c, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x69,
	0x66, 0x66, 0x12, 0x64, 0x0a, 0x24, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x5f,
	0x61, 0x62, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1e, 0x73, 0x74, 0x61, 0x74, 0x4d, 0x65,
	0x61, 0x6e, 0x41, 0x62, 0x73, 0x44, 0x69, 0x66, 0x66, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x0e, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x16, 0x73, 0x75, 0x62, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13,
	0x73, 0x75, 0x62, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x74, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x64, 0x44, 0x65, 0x76, 0x12, 0x28, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x28,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0xba, 0x04, 0x0a, 0x1d, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4b,
	0x0a, 0x16, 0x61, 0x62, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x61, 0x62, 0x73, 0x44, 0x69, 0x66, 0x66, 0x46,
	0x72, 0x6f, 0x6d, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x73,
	0x75, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12, 0x64, 0x0a, 0x24, 0x65, 0x76, 0x69,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x62, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x1e, 0x65, 0x76, 0x69, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x62, 0x73, 0x44, 0x69, 0x66, 0x66,
	0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x3d, 0x0a, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0d, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x3d,
	0x0a, 0x0e, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x45, 0x0a,
	0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x74, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x64, 0x44, 0x65, 0x76, 0x22, 0xd3, 0x04, 0x0a, 0x10, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x03, 0x6d, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x03, 0x6d, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x61, 0x73, 0x6b, 0x12, 0x48, 0x0a, 0x15, 0x61, 0x62, 0x73, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x76, 0x70, 0x5f, 0x6d, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x11, 0x61, 0x62, 0x73, 0x44, 0x69, 0x66, 0x66, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x76, 0x70, 0x4d,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x69, 0x66, 0x66,
	0x12, 0x60, 0x0a, 0x22, 0x65, 0x76, 0x70, 0x5f, 0x6d, 0x69, 0x64, 0x5f, 0x61, 0x62, 0x73, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x65, 0x76, 0x70, 0x4d, 0x69, 0x64, 0x41, 0x62, 0x73, 0x44,
	0x69, 0x66, 0x66, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x44, 0x0a, 0x12, 0x65, 0x76, 0x70, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x65, 0x76, 0x70, 0x4c, 0x6f, 0x77, 0x65, 0x72,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x12, 0x65, 0x76, 0x70, 0x5f,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x65, 0x76,
	0x70, 0x55, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x4b,
	0x0a, 0x16, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x4f, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa1, 0x04, 0x0a, 0x0f,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12,
	0x44, 0x0a, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x1a, 0x61, 0x62, 0x73, 0x5f, 0x64, 0x69, 0x66,
	0x66, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x16, 0x61, 0x62, 0x73, 0x44, 0x69, 0x66, 0x66, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x73, 0x75, 0x62,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12, 0x64, 0x0a, 0x24, 0x73, 0x75, 0x62, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x62, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1e, 0x73,
	0x75, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x62, 0x73, 0x44, 0x69, 0x66, 0x66, 0x46, 0x72,
	0x6f, 0x6d, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x28, 0x0a,
	0x03, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x61,
	0x78, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x61, 0x79, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x65, 0x65,
	0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x77, 0x65, 0x65, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x8f, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x61, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x75, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x63, 0x6b, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b,
	0x12, 0x2b, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x22, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x69,
	0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x32, 0x9b, 0x10, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x24,
	0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0x62, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x12, 0x1a, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x61, 0x0a, 0x0e, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x2e, 0x74, 0x69, 0x74,
	0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x56, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x45, 0x56, 0x50, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22,
	0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x64, 0x2d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a, 0x11, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x73,
	0x12, 0x1d, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x4f, 0x75, 0x74, 0x6c,
	0x69, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x65, 0x72, 0x73, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x3a, 0x01, 0x2a, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x74, 0x69, 0x74, 0x61,
	0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74,
	0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2d, 0x72, 0x75, 0x6e, 0x73,
	0x2d, 0x76, 0x69, 0x65, 0x77, 0x3a, 0x01, 0x2a, 0x12, 0xaa, 0x01, 0x0a, 0x22, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x22, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2d, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x22, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2d, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x72, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e,
	0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x45, 0x78, 0x70,
	0x6c, 0x6f, 0x72, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2d, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x8d, 0x01, 0x0a,
	0x12, 0x43, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x54, 0x61, 0x62, 0x12, 0x1d, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x61, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2d, 0x73, 0x65, 0x74, 0x2d, 0x76, 0x69, 0x65, 0x77, 0x3a, 0x01, 0x2a, 0x12, 0xa4, 0x01, 0x0a,
	0x15, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x54, 0x61, 0x62, 0x12, 0x1d, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75,
	0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x61, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x22, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2d, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2d, 0x73, 0x65, 0x74, 0x2d, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x84, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x20, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69,
	0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x69, 0x74, 0x61,
	0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x91, 0x01, 0x0a, 0x12, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x12, 0x23, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75,
	0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x6f, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x2f, 0x74, 0x6f, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0x7f,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x12, 0x21, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x3a, 0x01, 0x2a, 0x12,
	0x88, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69,
	0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x42,
	0x6f, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x61, 0x2e,
	0x74, 0x69, 0x74, 0x61, 0x6e, 0x69, 0x75, 0x6d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x42, 0x15, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x6e, 0x6f, 0x76, 0x61, 0x2f,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_public_consensus_service_proto_rawDescOnce sync.Once
	file_public_consensus_service_proto_rawDescData = file_public_consensus_service_proto_rawDesc
)

func file_public_consensus_service_proto_rawDescGZIP() []byte {
	file_public_consensus_service_proto_rawDescOnce.Do(func() {
		file_public_consensus_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_public_consensus_service_proto_rawDescData)
	})
	return file_public_consensus_service_proto_rawDescData
}

var file_public_consensus_service_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_public_consensus_service_proto_goTypes = []interface{}{
	(*ConsensusExplorerRequest)(nil),                   // 0: titanium.ConsensusExplorerRequest
	(*ConsensusExplorerInstrumentDetailsResponse)(nil), // 1: titanium.ConsensusExplorerInstrumentDetailsResponse
	(*ConsensusExplorerInstrumentDetailsData)(nil),     // 2: titanium.ConsensusExplorerInstrumentDetailsData
	(*InstrumentSubmissionStatus)(nil),                 // 3: titanium.InstrumentSubmissionStatus
	(*DateAndValue)(nil),                               // 4: titanium.DateAndValue
	(*ConsensusScores)(nil),                            // 5: titanium.ConsensusScores
	(*ExpertiseRank)(nil),                              // 6: titanium.ExpertiseRank
	(*ExpertiseRankHistoryElement)(nil),                // 7: titanium.ExpertiseRankHistoryElement
	(*ConsensusDensityScore)(nil),                      // 8: titanium.ConsensusDensityScore
	(*TradeAlignmentScore)(nil),                        // 9: titanium.TradeAlignmentScore
	(*TradeAligmentDateAndValue)(nil),                  // 10: titanium.TradeAligmentDateAndValue
	(*EvpAlignmentScore)(nil),                          // 11: titanium.EvpAlignmentScore
	(*Bimodality)(nil),                                 // 12: titanium.Bimodality
	(*EvpQualityScore)(nil),                            // 13: titanium.EvpQualityScore
	(*ConsensusExplorerRangeResponse)(nil),             // 14: titanium.ConsensusExplorerRangeResponse
	(*ConsensusExplorerRangeData)(nil),                 // 15: titanium.ConsensusExplorerRangeData
	(*ChartRanges)(nil),                                // 16: titanium.ChartRanges
	(*CohortConsensusRangeTabData)(nil),                // 17: titanium.CohortConsensusRangeTabData
	(*TradeAnchorDetails)(nil),                         // 18: titanium.TradeAnchorDetails
	(*EvpAnchorDetails)(nil),                           // 19: titanium.EvpAnchorDetails
	(*SubmissionEvidenceAnchorDetails)(nil),            // 20: titanium.SubmissionEvidenceAnchorDetails
	(*TradePeriodsWithMetrics)(nil),                    // 21: titanium.TradePeriodsWithMetrics
	(*TradePeriodMetrics)(nil),                         // 22: titanium.TradePeriodMetrics
	(*ConsensusExplorerTableResponse)(nil),             // 23: titanium.ConsensusExplorerTableResponse
	(*ConsensusExplorerTableData)(nil),                 // 24: titanium.ConsensusExplorerTableData
	(*ComparisonTable)(nil),                            // 25: titanium.ComparisonTable
	(*CohortConsensusColumn)(nil),                      // 26: titanium.CohortConsensusColumn
	(*SubmissionExplorerTableColumn)(nil),              // 27: titanium.SubmissionExplorerTableColumn
	(*SubmissionStatisticsExplorerTableColumn)(nil),    // 28: titanium.SubmissionStatisticsExplorerTableColumn
	(*SubmissionEvidenceTableColumn)(nil),              // 29: titanium.SubmissionEvidenceTableColumn
	(*EvidentalPricing)(nil),                           // 30: titanium.EvidentalPricing
	(*AvailableTrades)(nil),                            // 31: titanium.AvailableTrades
	(*ConsensusTabRequest)(nil),                        // 32: titanium.ConsensusTabRequest
	(*common.FilterPack)(nil),                          // 33: titanium.FilterPack
	(*common.Error)(nil),                               // 34: titanium.Error
	(*common.StringKeyVal)(nil),                        // 35: titanium.StringKeyVal
	(*structpb.Value)(nil),                             // 36: google.protobuf.Value
	(*common.RangePoint)(nil),                          // 37: titanium.RangePoint
	(*common.Range)(nil),                               // 38: titanium.Range
	(*common.OrderBy)(nil),                             // 39: titanium.OrderBy
	(*common.Page)(nil),                                // 40: titanium.Page
	(*common.ConsensusTimestampsRequest)(nil),          // 41: titanium.ConsensusTimestampsRequest
	(*common.ConsensusRequest)(nil),                    // 42: titanium.ConsensusRequest
	(*common.EVPRequest)(nil),                          // 43: titanium.EVPRequest
	(*common.OutliersListRequest)(nil),                 // 44: titanium.OutliersListRequest
	(*common.GetConsensusRunsRequest)(nil),             // 45: titanium.GetConsensusRunsRequest
	(*common.ConsensusActiveRequest)(nil),              // 46: titanium.ConsensusActiveRequest
	(*common.ConsensusToPublishRequest)(nil),           // 47: titanium.ConsensusToPublishRequest
	(*common.ConsensusPublishRequest)(nil),             // 48: titanium.ConsensusPublishRequest
	(*common.ConsensusHistoryRequest)(nil),             // 49: titanium.ConsensusHistoryRequest
	(*common.ConsensusDecisionRequest)(nil),            // 50: titanium.ConsensusDecisionRequest
	(*common.ConsensusTimestampsResponse)(nil),         // 51: titanium.ConsensusTimestampsResponse
	(*common.ConsensusResponse)(nil),                   // 52: titanium.ConsensusResponse
	(*common.EVPResponse)(nil),                         // 53: titanium.EVPResponse
	(*common.ConsensusActiveResponse)(nil),             // 54: titanium.ConsensusActiveResponse
	(*common.GetConsensusRunsResponse)(nil),            // 55: titanium.GetConsensusRunsResponse
	(*common.ConsensusResultSetValuesResponse)(nil),    // 56: titanium.ConsensusResultSetValuesResponse
	(*common.ConsensusToPublishResponse)(nil),          // 57: titanium.ConsensusToPublishResponse
	(*common.MessageResponse)(nil),                     // 58: titanium.MessageResponse
	(*common.ConsensusHistoryResponse)(nil),            // 59: titanium.ConsensusHistoryResponse
}
var file_public_consensus_service_proto_depIdxs = []int32{
	33,  // 0: titanium.ConsensusExplorerRequest.group_keys:type_name -> titanium.FilterPack
	2,   // 1: titanium.ConsensusExplorerInstrumentDetailsResponse.data:type_name -> titanium.ConsensusExplorerInstrumentDetailsData
	34,  // 2: titanium.ConsensusExplorerInstrumentDetailsResponse.error:type_name -> titanium.Error
	35,  // 3: titanium.ConsensusExplorerInstrumentDetailsData.instrument_details:type_name -> titanium.StringKeyVal
	3,   // 4: titanium.ConsensusExplorerInstrumentDetailsData.instrument_submission_status:type_name -> titanium.InstrumentSubmissionStatus
	5,   // 5: titanium.ConsensusExplorerInstrumentDetailsData.consensus_scores:type_name -> titanium.ConsensusScores
	4,   // 6: titanium.InstrumentSubmissionStatus.dqe_history:type_name -> titanium.DateAndValue
	4,   // 7: titanium.InstrumentSubmissionStatus.consensus_status_history:type_name -> titanium.DateAndValue
	4,   // 8: titanium.InstrumentSubmissionStatus.consensus_status_details_history:type_name -> titanium.DateAndValue
	4,   // 9: titanium.InstrumentSubmissionStatus.participant_cohort_consensus_status_history:type_name -> titanium.DateAndValue
	4,   // 10: titanium.InstrumentSubmissionStatus.participant_submissions_evidence_status_history:type_name -> titanium.DateAndValue
	36,  // 11: titanium.DateAndValue.value:type_name -> google.protobuf.Value
	6,   // 12: titanium.ConsensusScores.expertise_rank:type_name -> titanium.ExpertiseRank
	8,   // 13: titanium.ConsensusScores.consensus_density_score:type_name -> titanium.ConsensusDensityScore
	9,   // 14: titanium.ConsensusScores.trade_alignment_score:type_name -> titanium.TradeAlignmentScore
	11,  // 15: titanium.ConsensusScores.evp_alignment_score:type_name -> titanium.EvpAlignmentScore
	12,  // 16: titanium.ConsensusScores.bimodality:type_name -> titanium.Bimodality
	13,  // 17: titanium.ConsensusScores.evp_quality_score:type_name -> titanium.EvpQualityScore
	36,  // 18: titanium.ExpertiseRank.rank:type_name -> google.protobuf.Value
	36,  // 19: titanium.ExpertiseRank.experts_count:type_name -> google.protobuf.Value
	36,  // 20: titanium.ExpertiseRank.submission_price:type_name -> google.protobuf.Value
	36,  // 21: titanium.ExpertiseRank.anchor_price:type_name -> google.protobuf.Value
	36,  // 22: titanium.ExpertiseRank.abs_distance_to_anchor:type_name -> google.protobuf.Value
	36,  // 23: titanium.ExpertiseRank.expertise_score:type_name -> google.protobuf.Value
	7,   // 24: titanium.ExpertiseRank.history:type_name -> titanium.ExpertiseRankHistoryElement
	36,  // 25: titanium.ExpertiseRankHistoryElement.rank:type_name -> google.protobuf.Value
	36,  // 26: titanium.ExpertiseRankHistoryElement.experts_count:type_name -> google.protobuf.Value
	36,  // 27: titanium.ConsensusDensityScore.score:type_name -> google.protobuf.Value
	36,  // 28: titanium.ConsensusDensityScore.bimodality_score:type_name -> google.protobuf.Value
	36,  // 29: titanium.ConsensusDensityScore.trade_alignment_score:type_name -> google.protobuf.Value
	36,  // 30: titanium.ConsensusDensityScore.dispersion:type_name -> google.protobuf.Value
	36,  // 31: titanium.ConsensusDensityScore.evp_alignment_score:type_name -> google.protobuf.Value
	4,   // 32: titanium.ConsensusDensityScore.history:type_name -> titanium.DateAndValue
	36,  // 33: titanium.TradeAlignmentScore.score:type_name -> google.protobuf.Value
	36,  // 34: titanium.TradeAlignmentScore.latest_trade_price:type_name -> google.protobuf.Value
	36,  // 35: titanium.TradeAlignmentScore.mean:type_name -> google.protobuf.Value
	36,  // 36: titanium.TradeAlignmentScore.std_dev:type_name -> google.protobuf.Value
	10,  // 37: titanium.TradeAlignmentScore.history:type_name -> titanium.TradeAligmentDateAndValue
	36,  // 38: titanium.TradeAligmentDateAndValue.score:type_name -> google.protobuf.Value
	36,  // 39: titanium.EvpAlignmentScore.score:type_name -> google.protobuf.Value
	36,  // 40: titanium.EvpAlignmentScore.evp_mid:type_name -> google.protobuf.Value
	36,  // 41: titanium.EvpAlignmentScore.mean:type_name -> google.protobuf.Value
	36,  // 42: titanium.EvpAlignmentScore.std_dev:type_name -> google.protobuf.Value
	10,  // 43: titanium.EvpAlignmentScore.history:type_name -> titanium.TradeAligmentDateAndValue
	36,  // 44: titanium.Bimodality.bimodality_index:type_name -> google.protobuf.Value
	4,   // 45: titanium.Bimodality.history:type_name -> titanium.DateAndValue
	36,  // 46: titanium.EvpQualityScore.score:type_name -> google.protobuf.Value
	4,   // 47: titanium.EvpQualityScore.history:type_name -> titanium.DateAndValue
	15,  // 48: titanium.ConsensusExplorerRangeResponse.data:type_name -> titanium.ConsensusExplorerRangeData
	34,  // 49: titanium.ConsensusExplorerRangeResponse.error:type_name -> titanium.Error
	16,  // 50: titanium.ConsensusExplorerRangeData.chart_ranges:type_name -> titanium.ChartRanges
	37,  // 51: titanium.ConsensusExplorerRangeData.submission_point:type_name -> titanium.RangePoint
	37,  // 52: titanium.ConsensusExplorerRangeData.anchor_point:type_name -> titanium.RangePoint
	37,  // 53: titanium.ConsensusExplorerRangeData.evp_mid:type_name -> titanium.RangePoint
	37,  // 54: titanium.ConsensusExplorerRangeData.submission_evidence_price:type_name -> titanium.RangePoint
	37,  // 55: titanium.ConsensusExplorerRangeData.cohort_consensus_price:type_name -> titanium.RangePoint
	37,  // 56: titanium.ConsensusExplorerRangeData.bimodal_left_mean:type_name -> titanium.RangePoint
	37,  // 57: titanium.ConsensusExplorerRangeData.bimodal_right_mean:type_name -> titanium.RangePoint
	17,  // 58: titanium.ConsensusExplorerRangeData.cohort_consensus_range_tab_data:type_name -> titanium.CohortConsensusRangeTabData
	38,  // 59: titanium.ChartRanges.submission_min_max:type_name -> titanium.Range
	38,  // 60: titanium.ChartRanges.evp:type_name -> titanium.Range
	38,  // 61: titanium.ChartRanges.submission_evidence:type_name -> titanium.Range
	38,  // 62: titanium.ChartRanges.cohort_consensus:type_name -> titanium.Range
	38,  // 63: titanium.ChartRanges.bimodal_left_population:type_name -> titanium.Range
	38,  // 64: titanium.ChartRanges.bimodal_right_population:type_name -> titanium.Range
	36,  // 65: titanium.CohortConsensusRangeTabData.expertise_rank:type_name -> google.protobuf.Value
	36,  // 66: titanium.CohortConsensusRangeTabData.expertise_score:type_name -> google.protobuf.Value
	36,  // 67: titanium.CohortConsensusRangeTabData.distance_to_anchor:type_name -> google.protobuf.Value
	36,  // 68: titanium.CohortConsensusRangeTabData.distance_to_consensus:type_name -> google.protobuf.Value
	21,  // 69: titanium.CohortConsensusRangeTabData.trade_periods_with_metrics:type_name -> titanium.TradePeriodsWithMetrics
	18,  // 70: titanium.CohortConsensusRangeTabData.trade_anchor_details:type_name -> titanium.TradeAnchorDetails
	19,  // 71: titanium.CohortConsensusRangeTabData.evp_anchor_details:type_name -> titanium.EvpAnchorDetails
	20,  // 72: titanium.CohortConsensusRangeTabData.submission_evidence_anchor_details:type_name -> titanium.SubmissionEvidenceAnchorDetails
	36,  // 73: titanium.EvpAnchorDetails.mid:type_name -> google.protobuf.Value
	36,  // 74: titanium.EvpAnchorDetails.mid_calculated:type_name -> google.protobuf.Value
	22,  // 75: titanium.TradePeriodsWithMetrics.less_day:type_name -> titanium.TradePeriodMetrics
	22,  // 76: titanium.TradePeriodsWithMetrics.less_week:type_name -> titanium.TradePeriodMetrics
	22,  // 77: titanium.TradePeriodsWithMetrics.less_month:type_name -> titanium.TradePeriodMetrics
	24,  // 78: titanium.ConsensusExplorerTableResponse.data:type_name -> titanium.ConsensusExplorerTableData
	34,  // 79: titanium.ConsensusExplorerTableResponse.error:type_name -> titanium.Error
	25,  // 80: titanium.ConsensusExplorerTableData.comparison_table:type_name -> titanium.ComparisonTable
	26,  // 81: titanium.ComparisonTable.cohort_consensus_column:type_name -> titanium.CohortConsensusColumn
	27,  // 82: titanium.ComparisonTable.submission:type_name -> titanium.SubmissionExplorerTableColumn
	28,  // 83: titanium.ComparisonTable.submission_statistics:type_name -> titanium.SubmissionStatisticsExplorerTableColumn
	29,  // 84: titanium.ComparisonTable.submission_evidence:type_name -> titanium.SubmissionEvidenceTableColumn
	30,  // 85: titanium.ComparisonTable.evidentialPricing:type_name -> titanium.EvidentalPricing
	31,  // 86: titanium.ComparisonTable.available_trades:type_name -> titanium.AvailableTrades
	36,  // 87: titanium.CohortConsensusColumn.cohort_consensus_price:type_name -> google.protobuf.Value
	36,  // 88: titanium.CohortConsensusColumn.abs_diff_from_consensus:type_name -> google.protobuf.Value
	36,  // 89: titanium.CohortConsensusColumn.sub_price_diff:type_name -> google.protobuf.Value
	36,  // 90: titanium.CohortConsensusColumn.cons_abs_diff_from_anchor_trade:type_name -> google.protobuf.Value
	36,  // 91: titanium.CohortConsensusColumn.cons_abs_diff_from_anchor_evp_mid:type_name -> google.protobuf.Value
	36,  // 92: titanium.CohortConsensusColumn.cons_abs_diff_from_anchor_evp_mid_calc:type_name -> google.protobuf.Value
	36,  // 93: titanium.CohortConsensusColumn.cons_abs_diff_from_anchor_sub:type_name -> google.protobuf.Value
	36,  // 94: titanium.CohortConsensusColumn.lower_boundary:type_name -> google.protobuf.Value
	36,  // 95: titanium.CohortConsensusColumn.upper_boundary:type_name -> google.protobuf.Value
	36,  // 96: titanium.CohortConsensusColumn.number_of_instruments:type_name -> google.protobuf.Value
	36,  // 97: titanium.CohortConsensusColumn.std_dev:type_name -> google.protobuf.Value
	36,  // 98: titanium.SubmissionExplorerTableColumn.submission_price:type_name -> google.protobuf.Value
	36,  // 99: titanium.SubmissionStatisticsExplorerTableColumn.mean:type_name -> google.protobuf.Value
	36,  // 100: titanium.SubmissionStatisticsExplorerTableColumn.abs_diff_from_statistical_mean:type_name -> google.protobuf.Value
	36,  // 101: titanium.SubmissionStatisticsExplorerTableColumn.sub_price_diff:type_name -> google.protobuf.Value
	36,  // 102: titanium.SubmissionStatisticsExplorerTableColumn.stat_mean_abs_diff_from_latest_trade:type_name -> google.protobuf.Value
	36,  // 103: titanium.SubmissionStatisticsExplorerTableColumn.lower_boundary:type_name -> google.protobuf.Value
	36,  // 104: titanium.SubmissionStatisticsExplorerTableColumn.upper_boundary:type_name -> google.protobuf.Value
	36,  // 105: titanium.SubmissionStatisticsExplorerTableColumn.sub_valid_points_count:type_name -> google.protobuf.Value
	36,  // 106: titanium.SubmissionStatisticsExplorerTableColumn.std_dev:type_name -> google.protobuf.Value
	36,  // 107: titanium.SubmissionStatisticsExplorerTableColumn.min:type_name -> google.protobuf.Value
	36,  // 108: titanium.SubmissionStatisticsExplorerTableColumn.max:type_name -> google.protobuf.Value
	36,  // 109: titanium.SubmissionEvidenceTableColumn.evidence:type_name -> google.protobuf.Value
	36,  // 110: titanium.SubmissionEvidenceTableColumn.abs_diff_from_evidence:type_name -> google.protobuf.Value
	36,  // 111: titanium.SubmissionEvidenceTableColumn.sub_price_diff:type_name -> google.protobuf.Value
	36,  // 112: titanium.SubmissionEvidenceTableColumn.evi_price_abs_diff_from_latest_trade:type_name -> google.protobuf.Value
	36,  // 113: titanium.SubmissionEvidenceTableColumn.lower_boundary:type_name -> google.protobuf.Value
	36,  // 114: titanium.SubmissionEvidenceTableColumn.upper_boundary:type_name -> google.protobuf.Value
	36,  // 115: titanium.SubmissionEvidenceTableColumn.participants_count:type_name -> google.protobuf.Value
	36,  // 116: titanium.SubmissionEvidenceTableColumn.std_dev:type_name -> google.protobuf.Value
	36,  // 117: titanium.EvidentalPricing.mid:type_name -> google.protobuf.Value
	36,  // 118: titanium.EvidentalPricing.bid:type_name -> google.protobuf.Value
	36,  // 119: titanium.EvidentalPricing.ask:type_name -> google.protobuf.Value
	36,  // 120: titanium.EvidentalPricing.abs_diff_from_evp_mid:type_name -> google.protobuf.Value
	36,  // 121: titanium.EvidentalPricing.sub_price_diff:type_name -> google.protobuf.Value
	36,  // 122: titanium.EvidentalPricing.evp_mid_abs_diff_from_latest_trade:type_name -> google.protobuf.Value
	36,  // 123: titanium.EvidentalPricing.evp_lower_boundary:type_name -> google.protobuf.Value
	36,  // 124: titanium.EvidentalPricing.evp_upper_boundary:type_name -> google.protobuf.Value
	36,  // 125: titanium.EvidentalPricing.trades_or_orders_count:type_name -> google.protobuf.Value
	36,  // 126: titanium.AvailableTrades.latest_trade_price:type_name -> google.protobuf.Value
	36,  // 127: titanium.AvailableTrades.abs_diff_from_latest_trade:type_name -> google.protobuf.Value
	36,  // 128: titanium.AvailableTrades.sub_price_diff:type_name -> google.protobuf.Value
	36,  // 129: titanium.AvailableTrades.sub_price_abs_diff_from_latest_trade:type_name -> google.protobuf.Value
	36,  // 130: titanium.AvailableTrades.min:type_name -> google.protobuf.Value
	36,  // 131: titanium.AvailableTrades.max:type_name -> google.protobuf.Value
	33,  // 132: titanium.ConsensusTabRequest.filter_pack:type_name -> titanium.FilterPack
	39,  // 133: titanium.ConsensusTabRequest.orderBy:type_name -> titanium.OrderBy
	40,  // 134: titanium.ConsensusTabRequest.page:type_name -> titanium.Page
	41,  // 135: titanium.ConsensusService.ConsensusTimestamps:input_type -> titanium.ConsensusTimestampsRequest
	42,  // 136: titanium.ConsensusService.Consensus:input_type -> titanium.ConsensusRequest
	43,  // 137: titanium.ConsensusService.EvaluatedPrice:input_type -> titanium.EVPRequest
	44,  // 138: titanium.ConsensusService.ConsensusOutliers:input_type -> titanium.OutliersListRequest
	45,  // 139: titanium.ConsensusService.GetConsensusRuns:input_type -> titanium.GetConsensusRunsRequest
	0,   // 140: titanium.ConsensusService.ConsensusExplorerInstrumentDetails:input_type -> titanium.ConsensusExplorerRequest
	0,   // 141: titanium.ConsensusService.ConsensusExplorerTable:input_type -> titanium.ConsensusExplorerRequest
	0,   // 142: titanium.ConsensusService.ConsensusExplorerRanges:input_type -> titanium.ConsensusExplorerRequest
	32,  // 143: titanium.ConsensusService.CohortConsensusTab:input_type -> titanium.ConsensusTabRequest
	32,  // 144: titanium.ConsensusService.SubmissionEvidenceTab:input_type -> titanium.ConsensusTabRequest
	46,  // 145: titanium.ConsensusService.ConsensusActive:input_type -> titanium.ConsensusActiveRequest
	47,  // 146: titanium.ConsensusService.ConsensusToPublish:input_type -> titanium.ConsensusToPublishRequest
	48,  // 147: titanium.ConsensusService.ConsensusPublish:input_type -> titanium.ConsensusPublishRequest
	49,  // 148: titanium.ConsensusService.ConsensusHistory:input_type -> titanium.ConsensusHistoryRequest
	50,  // 149: titanium.ConsensusService.ConsensusDecision:input_type -> titanium.ConsensusDecisionRequest
	51,  // 150: titanium.ConsensusService.ConsensusTimestamps:output_type -> titanium.ConsensusTimestampsResponse
	52,  // 151: titanium.ConsensusService.Consensus:output_type -> titanium.ConsensusResponse
	53,  // 152: titanium.ConsensusService.EvaluatedPrice:output_type -> titanium.EVPResponse
	54,  // 153: titanium.ConsensusService.ConsensusOutliers:output_type -> titanium.ConsensusActiveResponse
	55,  // 154: titanium.ConsensusService.GetConsensusRuns:output_type -> titanium.GetConsensusRunsResponse
	1,   // 155: titanium.ConsensusService.ConsensusExplorerInstrumentDetails:output_type -> titanium.ConsensusExplorerInstrumentDetailsResponse
	23,  // 156: titanium.ConsensusService.ConsensusExplorerTable:output_type -> titanium.ConsensusExplorerTableResponse
	14,  // 157: titanium.ConsensusService.ConsensusExplorerRanges:output_type -> titanium.ConsensusExplorerRangeResponse
	56,  // 158: titanium.ConsensusService.CohortConsensusTab:output_type -> titanium.ConsensusResultSetValuesResponse
	56,  // 159: titanium.ConsensusService.SubmissionEvidenceTab:output_type -> titanium.ConsensusResultSetValuesResponse
	54,  // 160: titanium.ConsensusService.ConsensusActive:output_type -> titanium.ConsensusActiveResponse
	57,  // 161: titanium.ConsensusService.ConsensusToPublish:output_type -> titanium.ConsensusToPublishResponse
	58,  // 162: titanium.ConsensusService.ConsensusPublish:output_type -> titanium.MessageResponse
	59,  // 163: titanium.ConsensusService.ConsensusHistory:output_type -> titanium.ConsensusHistoryResponse
	58,  // 164: titanium.ConsensusService.ConsensusDecision:output_type -> titanium.MessageResponse
	150, // [150:165] is the sub-list for method output_type
	135, // [135:150] is the sub-list for method input_type
	135, // [135:135] is the sub-list for extension type_name
	135, // [135:135] is the sub-list for extension extendee
	0,   // [0:135] is the sub-list for field type_name
}

func init() { file_public_consensus_service_proto_init() }
func file_public_consensus_service_proto_init() {
	if File_public_consensus_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_public_consensus_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusExplorerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusExplorerInstrumentDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusExplorerInstrumentDetailsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentSubmissionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateAndValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusScores); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpertiseRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpertiseRankHistoryElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusDensityScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeAlignmentScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeAligmentDateAndValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvpAlignmentScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bimodality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvpQualityScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusExplorerRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusExplorerRangeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartRanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CohortConsensusRangeTabData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeAnchorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvpAnchorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmissionEvidenceAnchorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradePeriodsWithMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradePeriodMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusExplorerTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusExplorerTableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComparisonTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CohortConsensusColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmissionExplorerTableColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmissionStatisticsExplorerTableColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmissionEvidenceTableColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidentalPricing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableTrades); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_consensus_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusTabRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_public_consensus_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ConsensusExplorerRequest_SubmissionId)(nil),
		(*ConsensusExplorerRequest_GroupKeys)(nil),
	}
	file_public_consensus_service_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ConsensusExplorerInstrumentDetailsResponse_Data)(nil),
		(*ConsensusExplorerInstrumentDetailsResponse_Error)(nil),
	}
	file_public_consensus_service_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*ConsensusExplorerRangeResponse_Data)(nil),
		(*ConsensusExplorerRangeResponse_Error)(nil),
	}
	file_public_consensus_service_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*CohortConsensusRangeTabData_TradeAnchorDetails)(nil),
		(*CohortConsensusRangeTabData_EvpAnchorDetails)(nil),
		(*CohortConsensusRangeTabData_SubmissionEvidenceAnchorDetails)(nil),
	}
	file_public_consensus_service_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*ConsensusExplorerTableResponse_Data)(nil),
		(*ConsensusExplorerTableResponse_Error)(nil),
	}
	file_public_consensus_service_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*CohortConsensusColumn_ConsAbsDiffFromAnchorTrade)(nil),
		(*CohortConsensusColumn_ConsAbsDiffFromAnchorEvpMid)(nil),
		(*CohortConsensusColumn_ConsAbsDiffFromAnchorEvpMidCalc)(nil),
		(*CohortConsensusColumn_ConsAbsDiffFromAnchorSub)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_public_consensus_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_public_consensus_service_proto_goTypes,
		DependencyIndexes: file_public_consensus_service_proto_depIdxs,
		MessageInfos:      file_public_consensus_service_proto_msgTypes,
	}.Build()
	File_public_consensus_service_proto = out.File
	file_public_consensus_service_proto_rawDesc = nil
	file_public_consensus_service_proto_goTypes = nil
	file_public_consensus_service_proto_depIdxs = nil
}
