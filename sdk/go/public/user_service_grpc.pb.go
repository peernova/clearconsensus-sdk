// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUser(ctx context.Context, in *common.GetUserRequest, opts ...grpc.CallOption) (*common.UserResponse, error)
	GetUserPermissions(ctx context.Context, in *common.GetUserPermissionsRequest, opts ...grpc.CallOption) (*common.UserPermissionsResponse, error)
	GetUserNotifications(ctx context.Context, in *common.GetUserNotificationRequest, opts ...grpc.CallOption) (*common.UserNotificationsResponse, error)
	GetUserNotificationsByMarket(ctx context.Context, in *common.GetUserNotificationByMarketRequest, opts ...grpc.CallOption) (*common.UserNotificationsResponse, error)
	UpdateUserNotification(ctx context.Context, in *common.UserNotificationRequest, opts ...grpc.CallOption) (*common.UserNotificationResponse, error)
	AddUserNotification(ctx context.Context, in *common.UserNotificationRequest, opts ...grpc.CallOption) (*common.UserNotificationResponse, error)
	DeleteUserNotification(ctx context.Context, in *common.UserNotificationRequest, opts ...grpc.CallOption) (*common.UserNotificationResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUser(ctx context.Context, in *common.GetUserRequest, opts ...grpc.CallOption) (*common.UserResponse, error) {
	out := new(common.UserResponse)
	err := c.cc.Invoke(ctx, "/titanium.UserService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserPermissions(ctx context.Context, in *common.GetUserPermissionsRequest, opts ...grpc.CallOption) (*common.UserPermissionsResponse, error) {
	out := new(common.UserPermissionsResponse)
	err := c.cc.Invoke(ctx, "/titanium.UserService/GetUserPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserNotifications(ctx context.Context, in *common.GetUserNotificationRequest, opts ...grpc.CallOption) (*common.UserNotificationsResponse, error) {
	out := new(common.UserNotificationsResponse)
	err := c.cc.Invoke(ctx, "/titanium.UserService/GetUserNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserNotificationsByMarket(ctx context.Context, in *common.GetUserNotificationByMarketRequest, opts ...grpc.CallOption) (*common.UserNotificationsResponse, error) {
	out := new(common.UserNotificationsResponse)
	err := c.cc.Invoke(ctx, "/titanium.UserService/GetUserNotificationsByMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserNotification(ctx context.Context, in *common.UserNotificationRequest, opts ...grpc.CallOption) (*common.UserNotificationResponse, error) {
	out := new(common.UserNotificationResponse)
	err := c.cc.Invoke(ctx, "/titanium.UserService/UpdateUserNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddUserNotification(ctx context.Context, in *common.UserNotificationRequest, opts ...grpc.CallOption) (*common.UserNotificationResponse, error) {
	out := new(common.UserNotificationResponse)
	err := c.cc.Invoke(ctx, "/titanium.UserService/AddUserNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserNotification(ctx context.Context, in *common.UserNotificationRequest, opts ...grpc.CallOption) (*common.UserNotificationResponse, error) {
	out := new(common.UserNotificationResponse)
	err := c.cc.Invoke(ctx, "/titanium.UserService/DeleteUserNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	GetUser(context.Context, *common.GetUserRequest) (*common.UserResponse, error)
	GetUserPermissions(context.Context, *common.GetUserPermissionsRequest) (*common.UserPermissionsResponse, error)
	GetUserNotifications(context.Context, *common.GetUserNotificationRequest) (*common.UserNotificationsResponse, error)
	GetUserNotificationsByMarket(context.Context, *common.GetUserNotificationByMarketRequest) (*common.UserNotificationsResponse, error)
	UpdateUserNotification(context.Context, *common.UserNotificationRequest) (*common.UserNotificationResponse, error)
	AddUserNotification(context.Context, *common.UserNotificationRequest) (*common.UserNotificationResponse, error)
	DeleteUserNotification(context.Context, *common.UserNotificationRequest) (*common.UserNotificationResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetUser(context.Context, *common.GetUserRequest) (*common.UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) GetUserPermissions(context.Context, *common.GetUserPermissionsRequest) (*common.UserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissions not implemented")
}
func (UnimplementedUserServiceServer) GetUserNotifications(context.Context, *common.GetUserNotificationRequest) (*common.UserNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNotifications not implemented")
}
func (UnimplementedUserServiceServer) GetUserNotificationsByMarket(context.Context, *common.GetUserNotificationByMarketRequest) (*common.UserNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNotificationsByMarket not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserNotification(context.Context, *common.UserNotificationRequest) (*common.UserNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserNotification not implemented")
}
func (UnimplementedUserServiceServer) AddUserNotification(context.Context, *common.UserNotificationRequest) (*common.UserNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserNotification not implemented")
}
func (UnimplementedUserServiceServer) DeleteUserNotification(context.Context, *common.UserNotificationRequest) (*common.UserNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserNotification not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*common.GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.UserService/GetUserPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserPermissions(ctx, req.(*common.GetUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetUserNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.UserService/GetUserNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserNotifications(ctx, req.(*common.GetUserNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserNotificationsByMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetUserNotificationByMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserNotificationsByMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.UserService/GetUserNotificationsByMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserNotificationsByMarket(ctx, req.(*common.GetUserNotificationByMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UserNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.UserService/UpdateUserNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserNotification(ctx, req.(*common.UserNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddUserNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UserNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUserNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.UserService/AddUserNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUserNotification(ctx, req.(*common.UserNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUserNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UserNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUserNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.UserService/DeleteUserNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUserNotification(ctx, req.(*common.UserNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "GetUserPermissions",
			Handler:    _UserService_GetUserPermissions_Handler,
		},
		{
			MethodName: "GetUserNotifications",
			Handler:    _UserService_GetUserNotifications_Handler,
		},
		{
			MethodName: "GetUserNotificationsByMarket",
			Handler:    _UserService_GetUserNotificationsByMarket_Handler,
		},
		{
			MethodName: "UpdateUserNotification",
			Handler:    _UserService_UpdateUserNotification_Handler,
		},
		{
			MethodName: "AddUserNotification",
			Handler:    _UserService_AddUserNotification_Handler,
		},
		{
			MethodName: "DeleteUserNotification",
			Handler:    _UserService_DeleteUserNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/user_service.proto",
}
