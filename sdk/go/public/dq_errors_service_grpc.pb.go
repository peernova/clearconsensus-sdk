// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataQualityServiceClient is the client API for DataQualityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataQualityServiceClient interface {
	GetDataQualityErrors(ctx context.Context, in *common.GetDataQualityErrorsRequest, opts ...grpc.CallOption) (*common.GetDataQualityErrorsResponse, error)
	DQErrors(ctx context.Context, in *common.DQErrorsRequest, opts ...grpc.CallOption) (*common.DQErrorsResponse, error)
}

type dataQualityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataQualityServiceClient(cc grpc.ClientConnInterface) DataQualityServiceClient {
	return &dataQualityServiceClient{cc}
}

func (c *dataQualityServiceClient) GetDataQualityErrors(ctx context.Context, in *common.GetDataQualityErrorsRequest, opts ...grpc.CallOption) (*common.GetDataQualityErrorsResponse, error) {
	out := new(common.GetDataQualityErrorsResponse)
	err := c.cc.Invoke(ctx, "/titanium.DataQualityService/GetDataQualityErrors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataQualityServiceClient) DQErrors(ctx context.Context, in *common.DQErrorsRequest, opts ...grpc.CallOption) (*common.DQErrorsResponse, error) {
	out := new(common.DQErrorsResponse)
	err := c.cc.Invoke(ctx, "/titanium.DataQualityService/DQErrors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataQualityServiceServer is the server API for DataQualityService service.
// All implementations must embed UnimplementedDataQualityServiceServer
// for forward compatibility
type DataQualityServiceServer interface {
	GetDataQualityErrors(context.Context, *common.GetDataQualityErrorsRequest) (*common.GetDataQualityErrorsResponse, error)
	DQErrors(context.Context, *common.DQErrorsRequest) (*common.DQErrorsResponse, error)
	mustEmbedUnimplementedDataQualityServiceServer()
}

// UnimplementedDataQualityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataQualityServiceServer struct {
}

func (UnimplementedDataQualityServiceServer) GetDataQualityErrors(context.Context, *common.GetDataQualityErrorsRequest) (*common.GetDataQualityErrorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataQualityErrors not implemented")
}
func (UnimplementedDataQualityServiceServer) DQErrors(context.Context, *common.DQErrorsRequest) (*common.DQErrorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DQErrors not implemented")
}
func (UnimplementedDataQualityServiceServer) mustEmbedUnimplementedDataQualityServiceServer() {}

// UnsafeDataQualityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataQualityServiceServer will
// result in compilation errors.
type UnsafeDataQualityServiceServer interface {
	mustEmbedUnimplementedDataQualityServiceServer()
}

func RegisterDataQualityServiceServer(s grpc.ServiceRegistrar, srv DataQualityServiceServer) {
	s.RegisterService(&DataQualityService_ServiceDesc, srv)
}

func _DataQualityService_GetDataQualityErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetDataQualityErrorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataQualityServiceServer).GetDataQualityErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DataQualityService/GetDataQualityErrors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataQualityServiceServer).GetDataQualityErrors(ctx, req.(*common.GetDataQualityErrorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataQualityService_DQErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.DQErrorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataQualityServiceServer).DQErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DataQualityService/DQErrors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataQualityServiceServer).DQErrors(ctx, req.(*common.DQErrorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataQualityService_ServiceDesc is the grpc.ServiceDesc for DataQualityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataQualityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.DataQualityService",
	HandlerType: (*DataQualityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDataQualityErrors",
			Handler:    _DataQualityService_GetDataQualityErrors_Handler,
		},
		{
			MethodName: "DQErrors",
			Handler:    _DataQualityService_DQErrors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/dq_errors_service.proto",
}
