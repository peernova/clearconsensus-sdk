// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OperatorServicePrivateClient is the client API for OperatorServicePrivate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperatorServicePrivateClient interface {
	AddClient(ctx context.Context, in *ClientName, opts ...grpc.CallOption) (*common.MessageResponse, error)
	ListClients(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListClientsResponse, error)
	EvpStatuses(ctx context.Context, in *EvpStatusesRequest, opts ...grpc.CallOption) (*EvpStatusesResponse, error)
	UploadEVP(ctx context.Context, in *UploadEVPRequest, opts ...grpc.CallOption) (*common.UploadURLResponse, error)
	UploadDTCC(ctx context.Context, in *UploadDTCCRequest, opts ...grpc.CallOption) (*common.UploadURLResponse, error)
	OperatorOutliers(ctx context.Context, in *OperatorOutliersRequest, opts ...grpc.CallOption) (*OperatorOutliersResponse, error)
	Outliers(ctx context.Context, in *common.OutliersRequest, opts ...grpc.CallOption) (*common.OutliersResponse, error)
	CreateSupportedFields(ctx context.Context, in *SupportedFieldsValues, opts ...grpc.CallOption) (*common.MessageResponse, error)
	AddSupportedFields(ctx context.Context, in *SupportedFieldsValues, opts ...grpc.CallOption) (*common.MessageResponse, error)
	DeleteSupportedFields(ctx context.Context, in *SupportedFieldsValues, opts ...grpc.CallOption) (*common.MessageResponse, error)
	// ExportReport returns pre signed s3 urls which can be used for export report(and compression type)
	ExportReport(ctx context.Context, in *common.ExportReportRequest, opts ...grpc.CallOption) (*common.ExportResponse, error)
	// AddAsset adds asset to the system.
	AddAsset(ctx context.Context, in *AddAssetRequest, opts ...grpc.CallOption) (*common.MessageResponse, error)
	RecentAssets(ctx context.Context, in *common.RecentAssetsRequest, opts ...grpc.CallOption) (*common.RecentAssetsResponse, error)
	Assets(ctx context.Context, in *common.AssetsRequest, opts ...grpc.CallOption) (*common.AssetsResponse, error)
}

type operatorServicePrivateClient struct {
	cc grpc.ClientConnInterface
}

func NewOperatorServicePrivateClient(cc grpc.ClientConnInterface) OperatorServicePrivateClient {
	return &operatorServicePrivateClient{cc}
}

func (c *operatorServicePrivateClient) AddClient(ctx context.Context, in *ClientName, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/titanium.OperatorServicePrivate/AddClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServicePrivateClient) ListClients(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListClientsResponse, error) {
	out := new(ListClientsResponse)
	err := c.cc.Invoke(ctx, "/titanium.OperatorServicePrivate/ListClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServicePrivateClient) EvpStatuses(ctx context.Context, in *EvpStatusesRequest, opts ...grpc.CallOption) (*EvpStatusesResponse, error) {
	out := new(EvpStatusesResponse)
	err := c.cc.Invoke(ctx, "/titanium.OperatorServicePrivate/EvpStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServicePrivateClient) UploadEVP(ctx context.Context, in *UploadEVPRequest, opts ...grpc.CallOption) (*common.UploadURLResponse, error) {
	out := new(common.UploadURLResponse)
	err := c.cc.Invoke(ctx, "/titanium.OperatorServicePrivate/UploadEVP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServicePrivateClient) UploadDTCC(ctx context.Context, in *UploadDTCCRequest, opts ...grpc.CallOption) (*common.UploadURLResponse, error) {
	out := new(common.UploadURLResponse)
	err := c.cc.Invoke(ctx, "/titanium.OperatorServicePrivate/UploadDTCC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServicePrivateClient) OperatorOutliers(ctx context.Context, in *OperatorOutliersRequest, opts ...grpc.CallOption) (*OperatorOutliersResponse, error) {
	out := new(OperatorOutliersResponse)
	err := c.cc.Invoke(ctx, "/titanium.OperatorServicePrivate/OperatorOutliers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServicePrivateClient) Outliers(ctx context.Context, in *common.OutliersRequest, opts ...grpc.CallOption) (*common.OutliersResponse, error) {
	out := new(common.OutliersResponse)
	err := c.cc.Invoke(ctx, "/titanium.OperatorServicePrivate/Outliers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServicePrivateClient) CreateSupportedFields(ctx context.Context, in *SupportedFieldsValues, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/titanium.OperatorServicePrivate/CreateSupportedFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServicePrivateClient) AddSupportedFields(ctx context.Context, in *SupportedFieldsValues, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/titanium.OperatorServicePrivate/AddSupportedFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServicePrivateClient) DeleteSupportedFields(ctx context.Context, in *SupportedFieldsValues, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/titanium.OperatorServicePrivate/DeleteSupportedFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServicePrivateClient) ExportReport(ctx context.Context, in *common.ExportReportRequest, opts ...grpc.CallOption) (*common.ExportResponse, error) {
	out := new(common.ExportResponse)
	err := c.cc.Invoke(ctx, "/titanium.OperatorServicePrivate/ExportReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServicePrivateClient) AddAsset(ctx context.Context, in *AddAssetRequest, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/titanium.OperatorServicePrivate/AddAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServicePrivateClient) RecentAssets(ctx context.Context, in *common.RecentAssetsRequest, opts ...grpc.CallOption) (*common.RecentAssetsResponse, error) {
	out := new(common.RecentAssetsResponse)
	err := c.cc.Invoke(ctx, "/titanium.OperatorServicePrivate/RecentAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServicePrivateClient) Assets(ctx context.Context, in *common.AssetsRequest, opts ...grpc.CallOption) (*common.AssetsResponse, error) {
	out := new(common.AssetsResponse)
	err := c.cc.Invoke(ctx, "/titanium.OperatorServicePrivate/Assets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperatorServicePrivateServer is the server API for OperatorServicePrivate service.
// All implementations must embed UnimplementedOperatorServicePrivateServer
// for forward compatibility
type OperatorServicePrivateServer interface {
	AddClient(context.Context, *ClientName) (*common.MessageResponse, error)
	ListClients(context.Context, *emptypb.Empty) (*ListClientsResponse, error)
	EvpStatuses(context.Context, *EvpStatusesRequest) (*EvpStatusesResponse, error)
	UploadEVP(context.Context, *UploadEVPRequest) (*common.UploadURLResponse, error)
	UploadDTCC(context.Context, *UploadDTCCRequest) (*common.UploadURLResponse, error)
	OperatorOutliers(context.Context, *OperatorOutliersRequest) (*OperatorOutliersResponse, error)
	Outliers(context.Context, *common.OutliersRequest) (*common.OutliersResponse, error)
	CreateSupportedFields(context.Context, *SupportedFieldsValues) (*common.MessageResponse, error)
	AddSupportedFields(context.Context, *SupportedFieldsValues) (*common.MessageResponse, error)
	DeleteSupportedFields(context.Context, *SupportedFieldsValues) (*common.MessageResponse, error)
	// ExportReport returns pre signed s3 urls which can be used for export report(and compression type)
	ExportReport(context.Context, *common.ExportReportRequest) (*common.ExportResponse, error)
	// AddAsset adds asset to the system.
	AddAsset(context.Context, *AddAssetRequest) (*common.MessageResponse, error)
	RecentAssets(context.Context, *common.RecentAssetsRequest) (*common.RecentAssetsResponse, error)
	Assets(context.Context, *common.AssetsRequest) (*common.AssetsResponse, error)
	mustEmbedUnimplementedOperatorServicePrivateServer()
}

// UnimplementedOperatorServicePrivateServer must be embedded to have forward compatible implementations.
type UnimplementedOperatorServicePrivateServer struct {
}

func (UnimplementedOperatorServicePrivateServer) AddClient(context.Context, *ClientName) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClient not implemented")
}
func (UnimplementedOperatorServicePrivateServer) ListClients(context.Context, *emptypb.Empty) (*ListClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClients not implemented")
}
func (UnimplementedOperatorServicePrivateServer) EvpStatuses(context.Context, *EvpStatusesRequest) (*EvpStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvpStatuses not implemented")
}
func (UnimplementedOperatorServicePrivateServer) UploadEVP(context.Context, *UploadEVPRequest) (*common.UploadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadEVP not implemented")
}
func (UnimplementedOperatorServicePrivateServer) UploadDTCC(context.Context, *UploadDTCCRequest) (*common.UploadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDTCC not implemented")
}
func (UnimplementedOperatorServicePrivateServer) OperatorOutliers(context.Context, *OperatorOutliersRequest) (*OperatorOutliersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorOutliers not implemented")
}
func (UnimplementedOperatorServicePrivateServer) Outliers(context.Context, *common.OutliersRequest) (*common.OutliersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Outliers not implemented")
}
func (UnimplementedOperatorServicePrivateServer) CreateSupportedFields(context.Context, *SupportedFieldsValues) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupportedFields not implemented")
}
func (UnimplementedOperatorServicePrivateServer) AddSupportedFields(context.Context, *SupportedFieldsValues) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSupportedFields not implemented")
}
func (UnimplementedOperatorServicePrivateServer) DeleteSupportedFields(context.Context, *SupportedFieldsValues) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSupportedFields not implemented")
}
func (UnimplementedOperatorServicePrivateServer) ExportReport(context.Context, *common.ExportReportRequest) (*common.ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportReport not implemented")
}
func (UnimplementedOperatorServicePrivateServer) AddAsset(context.Context, *AddAssetRequest) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAsset not implemented")
}
func (UnimplementedOperatorServicePrivateServer) RecentAssets(context.Context, *common.RecentAssetsRequest) (*common.RecentAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecentAssets not implemented")
}
func (UnimplementedOperatorServicePrivateServer) Assets(context.Context, *common.AssetsRequest) (*common.AssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assets not implemented")
}
func (UnimplementedOperatorServicePrivateServer) mustEmbedUnimplementedOperatorServicePrivateServer() {
}

// UnsafeOperatorServicePrivateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperatorServicePrivateServer will
// result in compilation errors.
type UnsafeOperatorServicePrivateServer interface {
	mustEmbedUnimplementedOperatorServicePrivateServer()
}

func RegisterOperatorServicePrivateServer(s grpc.ServiceRegistrar, srv OperatorServicePrivateServer) {
	s.RegisterService(&OperatorServicePrivate_ServiceDesc, srv)
}

func _OperatorServicePrivate_AddClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServicePrivateServer).AddClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.OperatorServicePrivate/AddClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServicePrivateServer).AddClient(ctx, req.(*ClientName))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorServicePrivate_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServicePrivateServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.OperatorServicePrivate/ListClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServicePrivateServer).ListClients(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorServicePrivate_EvpStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvpStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServicePrivateServer).EvpStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.OperatorServicePrivate/EvpStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServicePrivateServer).EvpStatuses(ctx, req.(*EvpStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorServicePrivate_UploadEVP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadEVPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServicePrivateServer).UploadEVP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.OperatorServicePrivate/UploadEVP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServicePrivateServer).UploadEVP(ctx, req.(*UploadEVPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorServicePrivate_UploadDTCC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDTCCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServicePrivateServer).UploadDTCC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.OperatorServicePrivate/UploadDTCC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServicePrivateServer).UploadDTCC(ctx, req.(*UploadDTCCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorServicePrivate_OperatorOutliers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorOutliersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServicePrivateServer).OperatorOutliers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.OperatorServicePrivate/OperatorOutliers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServicePrivateServer).OperatorOutliers(ctx, req.(*OperatorOutliersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorServicePrivate_Outliers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.OutliersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServicePrivateServer).Outliers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.OperatorServicePrivate/Outliers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServicePrivateServer).Outliers(ctx, req.(*common.OutliersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorServicePrivate_CreateSupportedFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportedFieldsValues)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServicePrivateServer).CreateSupportedFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.OperatorServicePrivate/CreateSupportedFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServicePrivateServer).CreateSupportedFields(ctx, req.(*SupportedFieldsValues))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorServicePrivate_AddSupportedFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportedFieldsValues)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServicePrivateServer).AddSupportedFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.OperatorServicePrivate/AddSupportedFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServicePrivateServer).AddSupportedFields(ctx, req.(*SupportedFieldsValues))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorServicePrivate_DeleteSupportedFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportedFieldsValues)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServicePrivateServer).DeleteSupportedFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.OperatorServicePrivate/DeleteSupportedFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServicePrivateServer).DeleteSupportedFields(ctx, req.(*SupportedFieldsValues))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorServicePrivate_ExportReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ExportReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServicePrivateServer).ExportReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.OperatorServicePrivate/ExportReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServicePrivateServer).ExportReport(ctx, req.(*common.ExportReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorServicePrivate_AddAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServicePrivateServer).AddAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.OperatorServicePrivate/AddAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServicePrivateServer).AddAsset(ctx, req.(*AddAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorServicePrivate_RecentAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RecentAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServicePrivateServer).RecentAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.OperatorServicePrivate/RecentAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServicePrivateServer).RecentAssets(ctx, req.(*common.RecentAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorServicePrivate_Assets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.AssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServicePrivateServer).Assets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.OperatorServicePrivate/Assets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServicePrivateServer).Assets(ctx, req.(*common.AssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OperatorServicePrivate_ServiceDesc is the grpc.ServiceDesc for OperatorServicePrivate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperatorServicePrivate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.OperatorServicePrivate",
	HandlerType: (*OperatorServicePrivateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddClient",
			Handler:    _OperatorServicePrivate_AddClient_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _OperatorServicePrivate_ListClients_Handler,
		},
		{
			MethodName: "EvpStatuses",
			Handler:    _OperatorServicePrivate_EvpStatuses_Handler,
		},
		{
			MethodName: "UploadEVP",
			Handler:    _OperatorServicePrivate_UploadEVP_Handler,
		},
		{
			MethodName: "UploadDTCC",
			Handler:    _OperatorServicePrivate_UploadDTCC_Handler,
		},
		{
			MethodName: "OperatorOutliers",
			Handler:    _OperatorServicePrivate_OperatorOutliers_Handler,
		},
		{
			MethodName: "Outliers",
			Handler:    _OperatorServicePrivate_Outliers_Handler,
		},
		{
			MethodName: "CreateSupportedFields",
			Handler:    _OperatorServicePrivate_CreateSupportedFields_Handler,
		},
		{
			MethodName: "AddSupportedFields",
			Handler:    _OperatorServicePrivate_AddSupportedFields_Handler,
		},
		{
			MethodName: "DeleteSupportedFields",
			Handler:    _OperatorServicePrivate_DeleteSupportedFields_Handler,
		},
		{
			MethodName: "ExportReport",
			Handler:    _OperatorServicePrivate_ExportReport_Handler,
		},
		{
			MethodName: "AddAsset",
			Handler:    _OperatorServicePrivate_AddAsset_Handler,
		},
		{
			MethodName: "RecentAssets",
			Handler:    _OperatorServicePrivate_RecentAssets_Handler,
		},
		{
			MethodName: "Assets",
			Handler:    _OperatorServicePrivate_Assets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/operator_service.proto",
}
