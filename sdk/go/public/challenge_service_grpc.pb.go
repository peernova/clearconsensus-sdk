// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChallengeServiceClient is the client API for ChallengeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChallengeServiceClient interface {
	// ChallengeFormMeta is used to request information(template) about the form fields required to submit a challenge for a specific asset and evidence type.
	// Returns response with template with pre-filled data.
	ChallengeFormMeta(ctx context.Context, in *common.ChallengeFormMetaRequest, opts ...grpc.CallOption) (*common.ChallengeFormMetaResponse, error)
	// ChallengeCreate creates challenge in the system.(Initiate process by dealer)
	// To create "challenger" needs to be authorised and challenge can be created only if one of their own submitted data points has been declared an outlier in the published Consensus.
	// Need to specify asset and fill out evidence information.
	// Returns response that contains ticket ID of the Challenge or the Error.
	ChallengeCreate(ctx context.Context, in *common.ChallengeCreateRequest, opts ...grpc.CallOption) (*common.ChallengeCreateResponse, error)
	// ChallengeFreezeStatus returns StatusResponse that contains string that represents freeze status of challenges if the challenge process is stopped and nothing if the one is not.
	// Challenge can be stopped by operator.Dealer can see the freeze status using this method.
	// Need to specify consensus(where outliers exists) run timestamp.
	ChallengeFreezeStatus(ctx context.Context, in *common.ChallengeFreezeStatusRequest, opts ...grpc.CallOption) (*common.StatusResponse, error)
	GetChallengeDetails(ctx context.Context, in *common.GetChallengeDetailsRequest, opts ...grpc.CallOption) (*common.GetChallengeDetailsResponse, error)
	// GetChallengeAttachmentUploadUrl returns string that represents s3 URL that can be used to upload attachment for the challenge.
	// The file in attachment can be any file that provides additional information about the disputable outlier.
	// Need to specify asset ID, submitted ID and file name.
	GetChallengeAttachmentUploadUrl(ctx context.Context, in *common.GetAttachmentUploadUrlRequest, opts ...grpc.CallOption) (*common.GetAttachmentUploadUrlResponse, error)
}

type challengeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChallengeServiceClient(cc grpc.ClientConnInterface) ChallengeServiceClient {
	return &challengeServiceClient{cc}
}

func (c *challengeServiceClient) ChallengeFormMeta(ctx context.Context, in *common.ChallengeFormMetaRequest, opts ...grpc.CallOption) (*common.ChallengeFormMetaResponse, error) {
	out := new(common.ChallengeFormMetaResponse)
	err := c.cc.Invoke(ctx, "/titanium.ChallengeService/ChallengeFormMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengeServiceClient) ChallengeCreate(ctx context.Context, in *common.ChallengeCreateRequest, opts ...grpc.CallOption) (*common.ChallengeCreateResponse, error) {
	out := new(common.ChallengeCreateResponse)
	err := c.cc.Invoke(ctx, "/titanium.ChallengeService/ChallengeCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengeServiceClient) ChallengeFreezeStatus(ctx context.Context, in *common.ChallengeFreezeStatusRequest, opts ...grpc.CallOption) (*common.StatusResponse, error) {
	out := new(common.StatusResponse)
	err := c.cc.Invoke(ctx, "/titanium.ChallengeService/ChallengeFreezeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengeServiceClient) GetChallengeDetails(ctx context.Context, in *common.GetChallengeDetailsRequest, opts ...grpc.CallOption) (*common.GetChallengeDetailsResponse, error) {
	out := new(common.GetChallengeDetailsResponse)
	err := c.cc.Invoke(ctx, "/titanium.ChallengeService/GetChallengeDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengeServiceClient) GetChallengeAttachmentUploadUrl(ctx context.Context, in *common.GetAttachmentUploadUrlRequest, opts ...grpc.CallOption) (*common.GetAttachmentUploadUrlResponse, error) {
	out := new(common.GetAttachmentUploadUrlResponse)
	err := c.cc.Invoke(ctx, "/titanium.ChallengeService/GetChallengeAttachmentUploadUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChallengeServiceServer is the server API for ChallengeService service.
// All implementations must embed UnimplementedChallengeServiceServer
// for forward compatibility
type ChallengeServiceServer interface {
	// ChallengeFormMeta is used to request information(template) about the form fields required to submit a challenge for a specific asset and evidence type.
	// Returns response with template with pre-filled data.
	ChallengeFormMeta(context.Context, *common.ChallengeFormMetaRequest) (*common.ChallengeFormMetaResponse, error)
	// ChallengeCreate creates challenge in the system.(Initiate process by dealer)
	// To create "challenger" needs to be authorised and challenge can be created only if one of their own submitted data points has been declared an outlier in the published Consensus.
	// Need to specify asset and fill out evidence information.
	// Returns response that contains ticket ID of the Challenge or the Error.
	ChallengeCreate(context.Context, *common.ChallengeCreateRequest) (*common.ChallengeCreateResponse, error)
	// ChallengeFreezeStatus returns StatusResponse that contains string that represents freeze status of challenges if the challenge process is stopped and nothing if the one is not.
	// Challenge can be stopped by operator.Dealer can see the freeze status using this method.
	// Need to specify consensus(where outliers exists) run timestamp.
	ChallengeFreezeStatus(context.Context, *common.ChallengeFreezeStatusRequest) (*common.StatusResponse, error)
	GetChallengeDetails(context.Context, *common.GetChallengeDetailsRequest) (*common.GetChallengeDetailsResponse, error)
	// GetChallengeAttachmentUploadUrl returns string that represents s3 URL that can be used to upload attachment for the challenge.
	// The file in attachment can be any file that provides additional information about the disputable outlier.
	// Need to specify asset ID, submitted ID and file name.
	GetChallengeAttachmentUploadUrl(context.Context, *common.GetAttachmentUploadUrlRequest) (*common.GetAttachmentUploadUrlResponse, error)
	mustEmbedUnimplementedChallengeServiceServer()
}

// UnimplementedChallengeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChallengeServiceServer struct {
}

func (UnimplementedChallengeServiceServer) ChallengeFormMeta(context.Context, *common.ChallengeFormMetaRequest) (*common.ChallengeFormMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengeFormMeta not implemented")
}
func (UnimplementedChallengeServiceServer) ChallengeCreate(context.Context, *common.ChallengeCreateRequest) (*common.ChallengeCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengeCreate not implemented")
}
func (UnimplementedChallengeServiceServer) ChallengeFreezeStatus(context.Context, *common.ChallengeFreezeStatusRequest) (*common.StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengeFreezeStatus not implemented")
}
func (UnimplementedChallengeServiceServer) GetChallengeDetails(context.Context, *common.GetChallengeDetailsRequest) (*common.GetChallengeDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallengeDetails not implemented")
}
func (UnimplementedChallengeServiceServer) GetChallengeAttachmentUploadUrl(context.Context, *common.GetAttachmentUploadUrlRequest) (*common.GetAttachmentUploadUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallengeAttachmentUploadUrl not implemented")
}
func (UnimplementedChallengeServiceServer) mustEmbedUnimplementedChallengeServiceServer() {}

// UnsafeChallengeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChallengeServiceServer will
// result in compilation errors.
type UnsafeChallengeServiceServer interface {
	mustEmbedUnimplementedChallengeServiceServer()
}

func RegisterChallengeServiceServer(s grpc.ServiceRegistrar, srv ChallengeServiceServer) {
	s.RegisterService(&ChallengeService_ServiceDesc, srv)
}

func _ChallengeService_ChallengeFormMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ChallengeFormMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).ChallengeFormMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ChallengeService/ChallengeFormMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).ChallengeFormMeta(ctx, req.(*common.ChallengeFormMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChallengeService_ChallengeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ChallengeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).ChallengeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ChallengeService/ChallengeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).ChallengeCreate(ctx, req.(*common.ChallengeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChallengeService_ChallengeFreezeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ChallengeFreezeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).ChallengeFreezeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ChallengeService/ChallengeFreezeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).ChallengeFreezeStatus(ctx, req.(*common.ChallengeFreezeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChallengeService_GetChallengeDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetChallengeDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).GetChallengeDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ChallengeService/GetChallengeDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).GetChallengeDetails(ctx, req.(*common.GetChallengeDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChallengeService_GetChallengeAttachmentUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetAttachmentUploadUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).GetChallengeAttachmentUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ChallengeService/GetChallengeAttachmentUploadUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).GetChallengeAttachmentUploadUrl(ctx, req.(*common.GetAttachmentUploadUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChallengeService_ServiceDesc is the grpc.ServiceDesc for ChallengeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChallengeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.ChallengeService",
	HandlerType: (*ChallengeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChallengeFormMeta",
			Handler:    _ChallengeService_ChallengeFormMeta_Handler,
		},
		{
			MethodName: "ChallengeCreate",
			Handler:    _ChallengeService_ChallengeCreate_Handler,
		},
		{
			MethodName: "ChallengeFreezeStatus",
			Handler:    _ChallengeService_ChallengeFreezeStatus_Handler,
		},
		{
			MethodName: "GetChallengeDetails",
			Handler:    _ChallengeService_GetChallengeDetails_Handler,
		},
		{
			MethodName: "GetChallengeAttachmentUploadUrl",
			Handler:    _ChallengeService_GetChallengeAttachmentUploadUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/challenge_service.proto",
}
