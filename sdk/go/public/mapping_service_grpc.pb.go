// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MappingServiceClient is the client API for MappingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MappingServiceClient interface {
	// AddMappingRule AddMappingRule is an API used to add a specific mapping rule to the system.
	// The name provided for the mapping rule must match the asset class and descriptor names.
	// If a mapping rule with the same name already exists, it will be updated.
	// This API accepts a MappingRuleDefinition object as its parameter,which includes information about the mapping rule being added.
	// The response from this API is a DescriptorPairBasedAcknowledgeResponse,which acknowledges the addition of the mapping rule.
	//
	// Example of request for regular user :
	//
	//	{
	//	  "src_descriptor":"foreign_exchange-vanilla-forwards",
	//	  "dest_descriptor":"foreign_exchange-vanilla-forwards",
	//	  "transformations":[
	//	     {
	//	        "targetColumn":"submission_date",
	//	        "sourceColumn":"date"
	//	     },
	//	     {
	//	        "targetColumn":"submission_asset",
	//	        "rule":"{ \"$to_upper\": { \"$trim\" : \"fx_test_for_bank1.submission_asset\" }}",
	//	        "name": "upper case asset",
	//	        "description": "i am optional..."
	//	     }
	//	  ]
	//	}
	//
	// Example of request for Back Office :
	//
	//	{
	//	  "src_descriptor":"foreign_exchange-vanilla-forwards",
	//	  "dest_descriptor":"foreign_exchange-vanilla-forwards",
	//	  "scope":"global",
	//	  "transformations":[
	//	     {
	//	        "targetColumn":"submission_date",
	//	        "sourceColumn":"another_date"
	//	     },
	//	     {
	//	        "targetColumn":"submission_asset",
	//	        "rule":"{ \"$to_upper\": { \"$trim\" : \"fx_test_for_bank1.submission_asset\" }}",
	//	        "name": "upper case asset",
	//	        "description": "i am optional..."
	//	     }
	//	  ]
	//	}
	//
	// Example of response :
	//
	//	{
	//	  "data":{
	//	     "uid":"fc8b57b7-cc90-11ec-b784-8dfc726b351f",
	//	     "src_descriptor":"foreign_exchange-vanilla-forwards",
	//	     "dest_descriptor":"foreign_exchange-vanilla-forwards"
	//	  }
	//	}
	//
	// Example of error response :
	//
	//	{
	//	  "error":{
	//	     "code":70,
	//	     "message":"Missing argument: rule name."
	//	  }
	//	}
	AddMappingRule(ctx context.Context, in *common.MappingRuleDefinition, opts ...grpc.CallOption) (*common.DescriptorPairBasedAcknowledgeResponse, error)
	// GetMappingRule is used to retrieve a mapping rule for a given descriptor pair.
	// It accepts a DescriptorPairBasedGetDefinition object as its parameter, which specifies the source and destination descriptors for the mapping rule.
	// The response from this it is a MappingRuleResponse, which includes information about the retrieved mapping rule.
	//
	// Example of request for regular user :
	//
	//	{
	//	  "identifier":{
	//	     "uid":"fc8b57b7-cc90-11ec-b784-8dfc726b351f"
	//	  }
	//	}
	//
	// Or :
	//
	//	{
	//	     "src_descriptor":"foreign_exchange-vanilla-forwards",
	//	     "dest_descriptor":"foreign_exchange-vanilla-forwards"
	//	}
	//
	// Example of request for Back Office :
	//
	//	{
	//	  "identifier":{
	//	      "uid":"fc8b57b7-cc90-11ec-b784-8dfc726b351f"
	//	  },
	//	  "scope":"bank1"
	//	}
	//
	// Or :
	//
	//	{
	//	  "src_descriptor":"foreign_exchange-vanilla-forwards",
	//	  "dest_descriptor":"foreign_exchange-vanilla-forwards",
	//	  "scope":"bank1"
	//	}
	//
	// Example of response :
	// {
	//
	//	"data": {
	//	 "uid": "",
	//	 "srcDescriptor": "foreign_exchange-vanilla-options",
	//	 "destDescriptor": "foreign_exchange-vanilla-options",
	//	 "transformations": [
	//	  {
	//	   "name": "",
	//	   "targetColumn": "snap_date",
	//	   "sourceColumn": "submission_date",
	//	   "rule": "",
	//	   "description": ""
	//	  }
	//	 ],
	//	 "scope": ""
	//	}
	//
	// }
	//
	// Example of error response :
	//
	//	{
	//	  "error":{
	//	     "code":70,
	//	     "message":"Can't get mapping rule: [[empty] of service [MAPPINGRULESET] does not exist in namespace [bank1]]."
	//	  }
	//	}
	GetMappingRule(ctx context.Context, in *common.DescriptorPairBasedGetDefinition, opts ...grpc.CallOption) (*common.MappingRuleResponse, error)
	// EnableMappingRule is used to enable a mapping rule for a given descriptor pair.
	// It accepts a DescriptorPairBasedGetDefinition object as its parameter, which specifies the source and destination descriptors for the mapping rule.
	// The response from this it is a DescriptorPairBasedAcknowledgeResponse, which acknowledges the enablement of the mapping rule.
	//
	// Request:
	//
	//	{
	//	 "src_descriptor":"foreign_exchange-vanilla-options",
	//	 "dest_descriptor":"foreign_exchange-vanilla-options"
	//	 "scope": "Zbank1"
	//	}
	//
	// Response:
	//
	//	{
	//	   "data": {
	//	       "uid": "",
	//	       "src_descriptor":"foreign_exchange-vanilla-options",
	//	       "dest_descriptor":"foreign_exchange-vanilla-options"
	//	   }
	//	}
	EnableMappingRule(ctx context.Context, in *common.DescriptorPairBasedGetDefinition, opts ...grpc.CallOption) (*common.DescriptorPairBasedAcknowledgeResponse, error)
	// DisableMappingRule is used to disable a mapping rule for a given descriptor pair.
	// It accepts a DescriptorPairBasedGetDefinition object as its parameter, which specifies the source and destination descriptors for the mapping rule.
	// The response from this it is a DescriptorPairBasedAcknowledgeResponse, which acknowledges the disablement of the mapping rule.
	//
	// Request:
	//
	//	{
	//	 "src_descriptor":"foreign_exchange-vanilla-options",
	//	 "dest_descriptor":"foreign_exchange-vanilla-options"
	//	 "scope": "Zbank1"
	//	}
	//
	// Response:
	//
	//	{
	//	   "data": {
	//	       "uid": "",
	//	       "src_descriptor":"foreign_exchange-vanilla-options",
	//	       "dest_descriptor":"foreign_exchange-vanilla-options"
	//	   }
	//	}
	DisableMappingRule(ctx context.Context, in *common.DescriptorPairBasedGetDefinition, opts ...grpc.CallOption) (*common.DescriptorPairBasedAcknowledgeResponse, error)
	// ListMappingRules is used to retrieve a list of all mapping rules in the system.
	// It accepts a ListRequest object as its parameter, which includes optional parameters for filtering the results.
	// The response from this it is a MappingRuleList, which includes information about all mapping rules in the system that match the provided filter parameters.
	//
	// Example of request :
	//
	//	{
	//	  "scope":"global"
	//	}
	//
	// Or optionally use filter:
	//
	//	{
	//	  "scope":"global",
	//	  "filter": ".*vanilla.*__.*vanilla.*" // all mapping rules from any vanilla to any vanilla
	//	}
	//
	// Example of response :
	//
	//	{
	//	   "data": {
	//	       "results": [
	//	           {
	//	               "uid": "Djqreg7gTs7CV2rSyyucOWCFjK7ldgS9yQX0o0rEiV0=",
	//	               "src_descriptor": "foreign_exchange-vanilla-forwards",
	//	               "dest_descriptor": "foreign_exchange-vanilla-forwards"
	//
	//	           },
	//	           {
	//	               "uid": "Djqreg7gTs7CV2rSyyucOWCFjK7ldgS9yQX0o0rEiV0=",
	//	               "src_descriptor": "foreign_exchange-vanilla-options",
	//	               "dest_descriptor": "foreign_exchange-vanilla-options"
	//	           }
	//	       ]
	//	   }
	//	}
	ListMappingRules(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*common.MappingRuleList, error)
	// ListMappingRuleVersions is used to retrieve a list of all versions of a mapping rule for a given descriptor pair.
	// It accepts a DescriptorPairBasedGetDefinition object as its parameter, which specifies the source and destination descriptors for the mapping rule.
	// The response from this it is a ListVersionResponse, which includes information about all versions of the mapping rule.
	//
	// Example of request :
	//
	//	{
	//	 "scope": "global",
	//	 "src_descriptor":"foreign_exchange-vanilla-options",
	//	 "dest_descriptor":"foreign_exchange-vanilla-options"
	//	}
	//
	// Example of response :
	//
	//	{
	//	  "data":{
	//	     "versions":[
	//	        {
	//	           "versionId":"EKc9bpBGCbLJmBqOpP0FTqtNusxgZrgCheGXj_MTj7A=",
	//	           "createdAt":"2022-05-05 11:33:59.0"
	//	        },
	//	        {
	//	           "versionId":"JKLFLkhV3SC-fqO0L-WTswr5ttHLfnvF8rMlLnkafAc=",
	//	           "createdAt":"2022-05-05 11:32:42.0"
	//	        }
	//	     ]
	//	  }
	//	}
	ListMappingRuleVersions(ctx context.Context, in *common.DescriptorPairBasedGetDefinition, opts ...grpc.CallOption) (*common.ListVersionResponse, error)
	// GetMappingRuleVersion is used to retrieve a specific version of a mapping rule for a given descriptor pair.
	// It accepts a DescriptorPairBasedVersionRequest object as its parameter, which includes the scope, source descriptor, destination descriptor, and version ID for the mapping rule.
	// The response from it is a MappingRuleResponse, which includes information about the retrieved version of the mapping rule.
	//
	// Example of request : GET /api/v1/validation/rule/version/fx_fwd_1/fx_fwd_2/teTYb9Fs_lIOoPQJukM6dY3aJdiMqT-SdBPdvYfJAjk=
	//
	// Example of response :
	//
	//	{
	//	  "definition":"{\"src_descriptor\":\"foreign_exchange-vanilla-forwards\",\"dest_descriptor\":\"foreign_exchange-vanilla-forwards\",\"transformations\":[{\"targetColumnName\":\"submission_date\",\"sourceColumnName\":\"another_date\"},{\"rule\":\"{ \\\"$to_upper\\\": { \\\"$trim\\\" : \\\"fx_test_for_bank1.submission_asset\\\" }}\",\"targetColumnName\":\"submission_asset\", \"name\": \"upper case asset\", \"description\": \"i am optional...\"}]}"
	//	}
	GetMappingRuleVersion(ctx context.Context, in *common.DescriptorPairBasedVersionRequest, opts ...grpc.CallOption) (*common.MappingRuleResponse, error)
}

type mappingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMappingServiceClient(cc grpc.ClientConnInterface) MappingServiceClient {
	return &mappingServiceClient{cc}
}

func (c *mappingServiceClient) AddMappingRule(ctx context.Context, in *common.MappingRuleDefinition, opts ...grpc.CallOption) (*common.DescriptorPairBasedAcknowledgeResponse, error) {
	out := new(common.DescriptorPairBasedAcknowledgeResponse)
	err := c.cc.Invoke(ctx, "/titanium.MappingService/AddMappingRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mappingServiceClient) GetMappingRule(ctx context.Context, in *common.DescriptorPairBasedGetDefinition, opts ...grpc.CallOption) (*common.MappingRuleResponse, error) {
	out := new(common.MappingRuleResponse)
	err := c.cc.Invoke(ctx, "/titanium.MappingService/GetMappingRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mappingServiceClient) EnableMappingRule(ctx context.Context, in *common.DescriptorPairBasedGetDefinition, opts ...grpc.CallOption) (*common.DescriptorPairBasedAcknowledgeResponse, error) {
	out := new(common.DescriptorPairBasedAcknowledgeResponse)
	err := c.cc.Invoke(ctx, "/titanium.MappingService/EnableMappingRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mappingServiceClient) DisableMappingRule(ctx context.Context, in *common.DescriptorPairBasedGetDefinition, opts ...grpc.CallOption) (*common.DescriptorPairBasedAcknowledgeResponse, error) {
	out := new(common.DescriptorPairBasedAcknowledgeResponse)
	err := c.cc.Invoke(ctx, "/titanium.MappingService/DisableMappingRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mappingServiceClient) ListMappingRules(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*common.MappingRuleList, error) {
	out := new(common.MappingRuleList)
	err := c.cc.Invoke(ctx, "/titanium.MappingService/ListMappingRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mappingServiceClient) ListMappingRuleVersions(ctx context.Context, in *common.DescriptorPairBasedGetDefinition, opts ...grpc.CallOption) (*common.ListVersionResponse, error) {
	out := new(common.ListVersionResponse)
	err := c.cc.Invoke(ctx, "/titanium.MappingService/ListMappingRuleVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mappingServiceClient) GetMappingRuleVersion(ctx context.Context, in *common.DescriptorPairBasedVersionRequest, opts ...grpc.CallOption) (*common.MappingRuleResponse, error) {
	out := new(common.MappingRuleResponse)
	err := c.cc.Invoke(ctx, "/titanium.MappingService/GetMappingRuleVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MappingServiceServer is the server API for MappingService service.
// All implementations must embed UnimplementedMappingServiceServer
// for forward compatibility
type MappingServiceServer interface {
	// AddMappingRule AddMappingRule is an API used to add a specific mapping rule to the system.
	// The name provided for the mapping rule must match the asset class and descriptor names.
	// If a mapping rule with the same name already exists, it will be updated.
	// This API accepts a MappingRuleDefinition object as its parameter,which includes information about the mapping rule being added.
	// The response from this API is a DescriptorPairBasedAcknowledgeResponse,which acknowledges the addition of the mapping rule.
	//
	// Example of request for regular user :
	//
	//	{
	//	  "src_descriptor":"foreign_exchange-vanilla-forwards",
	//	  "dest_descriptor":"foreign_exchange-vanilla-forwards",
	//	  "transformations":[
	//	     {
	//	        "targetColumn":"submission_date",
	//	        "sourceColumn":"date"
	//	     },
	//	     {
	//	        "targetColumn":"submission_asset",
	//	        "rule":"{ \"$to_upper\": { \"$trim\" : \"fx_test_for_bank1.submission_asset\" }}",
	//	        "name": "upper case asset",
	//	        "description": "i am optional..."
	//	     }
	//	  ]
	//	}
	//
	// Example of request for Back Office :
	//
	//	{
	//	  "src_descriptor":"foreign_exchange-vanilla-forwards",
	//	  "dest_descriptor":"foreign_exchange-vanilla-forwards",
	//	  "scope":"global",
	//	  "transformations":[
	//	     {
	//	        "targetColumn":"submission_date",
	//	        "sourceColumn":"another_date"
	//	     },
	//	     {
	//	        "targetColumn":"submission_asset",
	//	        "rule":"{ \"$to_upper\": { \"$trim\" : \"fx_test_for_bank1.submission_asset\" }}",
	//	        "name": "upper case asset",
	//	        "description": "i am optional..."
	//	     }
	//	  ]
	//	}
	//
	// Example of response :
	//
	//	{
	//	  "data":{
	//	     "uid":"fc8b57b7-cc90-11ec-b784-8dfc726b351f",
	//	     "src_descriptor":"foreign_exchange-vanilla-forwards",
	//	     "dest_descriptor":"foreign_exchange-vanilla-forwards"
	//	  }
	//	}
	//
	// Example of error response :
	//
	//	{
	//	  "error":{
	//	     "code":70,
	//	     "message":"Missing argument: rule name."
	//	  }
	//	}
	AddMappingRule(context.Context, *common.MappingRuleDefinition) (*common.DescriptorPairBasedAcknowledgeResponse, error)
	// GetMappingRule is used to retrieve a mapping rule for a given descriptor pair.
	// It accepts a DescriptorPairBasedGetDefinition object as its parameter, which specifies the source and destination descriptors for the mapping rule.
	// The response from this it is a MappingRuleResponse, which includes information about the retrieved mapping rule.
	//
	// Example of request for regular user :
	//
	//	{
	//	  "identifier":{
	//	     "uid":"fc8b57b7-cc90-11ec-b784-8dfc726b351f"
	//	  }
	//	}
	//
	// Or :
	//
	//	{
	//	     "src_descriptor":"foreign_exchange-vanilla-forwards",
	//	     "dest_descriptor":"foreign_exchange-vanilla-forwards"
	//	}
	//
	// Example of request for Back Office :
	//
	//	{
	//	  "identifier":{
	//	      "uid":"fc8b57b7-cc90-11ec-b784-8dfc726b351f"
	//	  },
	//	  "scope":"bank1"
	//	}
	//
	// Or :
	//
	//	{
	//	  "src_descriptor":"foreign_exchange-vanilla-forwards",
	//	  "dest_descriptor":"foreign_exchange-vanilla-forwards",
	//	  "scope":"bank1"
	//	}
	//
	// Example of response :
	// {
	//
	//	"data": {
	//	 "uid": "",
	//	 "srcDescriptor": "foreign_exchange-vanilla-options",
	//	 "destDescriptor": "foreign_exchange-vanilla-options",
	//	 "transformations": [
	//	  {
	//	   "name": "",
	//	   "targetColumn": "snap_date",
	//	   "sourceColumn": "submission_date",
	//	   "rule": "",
	//	   "description": ""
	//	  }
	//	 ],
	//	 "scope": ""
	//	}
	//
	// }
	//
	// Example of error response :
	//
	//	{
	//	  "error":{
	//	     "code":70,
	//	     "message":"Can't get mapping rule: [[empty] of service [MAPPINGRULESET] does not exist in namespace [bank1]]."
	//	  }
	//	}
	GetMappingRule(context.Context, *common.DescriptorPairBasedGetDefinition) (*common.MappingRuleResponse, error)
	// EnableMappingRule is used to enable a mapping rule for a given descriptor pair.
	// It accepts a DescriptorPairBasedGetDefinition object as its parameter, which specifies the source and destination descriptors for the mapping rule.
	// The response from this it is a DescriptorPairBasedAcknowledgeResponse, which acknowledges the enablement of the mapping rule.
	//
	// Request:
	//
	//	{
	//	 "src_descriptor":"foreign_exchange-vanilla-options",
	//	 "dest_descriptor":"foreign_exchange-vanilla-options"
	//	 "scope": "Zbank1"
	//	}
	//
	// Response:
	//
	//	{
	//	   "data": {
	//	       "uid": "",
	//	       "src_descriptor":"foreign_exchange-vanilla-options",
	//	       "dest_descriptor":"foreign_exchange-vanilla-options"
	//	   }
	//	}
	EnableMappingRule(context.Context, *common.DescriptorPairBasedGetDefinition) (*common.DescriptorPairBasedAcknowledgeResponse, error)
	// DisableMappingRule is used to disable a mapping rule for a given descriptor pair.
	// It accepts a DescriptorPairBasedGetDefinition object as its parameter, which specifies the source and destination descriptors for the mapping rule.
	// The response from this it is a DescriptorPairBasedAcknowledgeResponse, which acknowledges the disablement of the mapping rule.
	//
	// Request:
	//
	//	{
	//	 "src_descriptor":"foreign_exchange-vanilla-options",
	//	 "dest_descriptor":"foreign_exchange-vanilla-options"
	//	 "scope": "Zbank1"
	//	}
	//
	// Response:
	//
	//	{
	//	   "data": {
	//	       "uid": "",
	//	       "src_descriptor":"foreign_exchange-vanilla-options",
	//	       "dest_descriptor":"foreign_exchange-vanilla-options"
	//	   }
	//	}
	DisableMappingRule(context.Context, *common.DescriptorPairBasedGetDefinition) (*common.DescriptorPairBasedAcknowledgeResponse, error)
	// ListMappingRules is used to retrieve a list of all mapping rules in the system.
	// It accepts a ListRequest object as its parameter, which includes optional parameters for filtering the results.
	// The response from this it is a MappingRuleList, which includes information about all mapping rules in the system that match the provided filter parameters.
	//
	// Example of request :
	//
	//	{
	//	  "scope":"global"
	//	}
	//
	// Or optionally use filter:
	//
	//	{
	//	  "scope":"global",
	//	  "filter": ".*vanilla.*__.*vanilla.*" // all mapping rules from any vanilla to any vanilla
	//	}
	//
	// Example of response :
	//
	//	{
	//	   "data": {
	//	       "results": [
	//	           {
	//	               "uid": "Djqreg7gTs7CV2rSyyucOWCFjK7ldgS9yQX0o0rEiV0=",
	//	               "src_descriptor": "foreign_exchange-vanilla-forwards",
	//	               "dest_descriptor": "foreign_exchange-vanilla-forwards"
	//
	//	           },
	//	           {
	//	               "uid": "Djqreg7gTs7CV2rSyyucOWCFjK7ldgS9yQX0o0rEiV0=",
	//	               "src_descriptor": "foreign_exchange-vanilla-options",
	//	               "dest_descriptor": "foreign_exchange-vanilla-options"
	//	           }
	//	       ]
	//	   }
	//	}
	ListMappingRules(context.Context, *common.ListRequest) (*common.MappingRuleList, error)
	// ListMappingRuleVersions is used to retrieve a list of all versions of a mapping rule for a given descriptor pair.
	// It accepts a DescriptorPairBasedGetDefinition object as its parameter, which specifies the source and destination descriptors for the mapping rule.
	// The response from this it is a ListVersionResponse, which includes information about all versions of the mapping rule.
	//
	// Example of request :
	//
	//	{
	//	 "scope": "global",
	//	 "src_descriptor":"foreign_exchange-vanilla-options",
	//	 "dest_descriptor":"foreign_exchange-vanilla-options"
	//	}
	//
	// Example of response :
	//
	//	{
	//	  "data":{
	//	     "versions":[
	//	        {
	//	           "versionId":"EKc9bpBGCbLJmBqOpP0FTqtNusxgZrgCheGXj_MTj7A=",
	//	           "createdAt":"2022-05-05 11:33:59.0"
	//	        },
	//	        {
	//	           "versionId":"JKLFLkhV3SC-fqO0L-WTswr5ttHLfnvF8rMlLnkafAc=",
	//	           "createdAt":"2022-05-05 11:32:42.0"
	//	        }
	//	     ]
	//	  }
	//	}
	ListMappingRuleVersions(context.Context, *common.DescriptorPairBasedGetDefinition) (*common.ListVersionResponse, error)
	// GetMappingRuleVersion is used to retrieve a specific version of a mapping rule for a given descriptor pair.
	// It accepts a DescriptorPairBasedVersionRequest object as its parameter, which includes the scope, source descriptor, destination descriptor, and version ID for the mapping rule.
	// The response from it is a MappingRuleResponse, which includes information about the retrieved version of the mapping rule.
	//
	// Example of request : GET /api/v1/validation/rule/version/fx_fwd_1/fx_fwd_2/teTYb9Fs_lIOoPQJukM6dY3aJdiMqT-SdBPdvYfJAjk=
	//
	// Example of response :
	//
	//	{
	//	  "definition":"{\"src_descriptor\":\"foreign_exchange-vanilla-forwards\",\"dest_descriptor\":\"foreign_exchange-vanilla-forwards\",\"transformations\":[{\"targetColumnName\":\"submission_date\",\"sourceColumnName\":\"another_date\"},{\"rule\":\"{ \\\"$to_upper\\\": { \\\"$trim\\\" : \\\"fx_test_for_bank1.submission_asset\\\" }}\",\"targetColumnName\":\"submission_asset\", \"name\": \"upper case asset\", \"description\": \"i am optional...\"}]}"
	//	}
	GetMappingRuleVersion(context.Context, *common.DescriptorPairBasedVersionRequest) (*common.MappingRuleResponse, error)
	mustEmbedUnimplementedMappingServiceServer()
}

// UnimplementedMappingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMappingServiceServer struct {
}

func (UnimplementedMappingServiceServer) AddMappingRule(context.Context, *common.MappingRuleDefinition) (*common.DescriptorPairBasedAcknowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMappingRule not implemented")
}
func (UnimplementedMappingServiceServer) GetMappingRule(context.Context, *common.DescriptorPairBasedGetDefinition) (*common.MappingRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMappingRule not implemented")
}
func (UnimplementedMappingServiceServer) EnableMappingRule(context.Context, *common.DescriptorPairBasedGetDefinition) (*common.DescriptorPairBasedAcknowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableMappingRule not implemented")
}
func (UnimplementedMappingServiceServer) DisableMappingRule(context.Context, *common.DescriptorPairBasedGetDefinition) (*common.DescriptorPairBasedAcknowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableMappingRule not implemented")
}
func (UnimplementedMappingServiceServer) ListMappingRules(context.Context, *common.ListRequest) (*common.MappingRuleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMappingRules not implemented")
}
func (UnimplementedMappingServiceServer) ListMappingRuleVersions(context.Context, *common.DescriptorPairBasedGetDefinition) (*common.ListVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMappingRuleVersions not implemented")
}
func (UnimplementedMappingServiceServer) GetMappingRuleVersion(context.Context, *common.DescriptorPairBasedVersionRequest) (*common.MappingRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMappingRuleVersion not implemented")
}
func (UnimplementedMappingServiceServer) mustEmbedUnimplementedMappingServiceServer() {}

// UnsafeMappingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MappingServiceServer will
// result in compilation errors.
type UnsafeMappingServiceServer interface {
	mustEmbedUnimplementedMappingServiceServer()
}

func RegisterMappingServiceServer(s grpc.ServiceRegistrar, srv MappingServiceServer) {
	s.RegisterService(&MappingService_ServiceDesc, srv)
}

func _MappingService_AddMappingRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.MappingRuleDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MappingServiceServer).AddMappingRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.MappingService/AddMappingRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MappingServiceServer).AddMappingRule(ctx, req.(*common.MappingRuleDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _MappingService_GetMappingRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.DescriptorPairBasedGetDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MappingServiceServer).GetMappingRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.MappingService/GetMappingRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MappingServiceServer).GetMappingRule(ctx, req.(*common.DescriptorPairBasedGetDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _MappingService_EnableMappingRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.DescriptorPairBasedGetDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MappingServiceServer).EnableMappingRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.MappingService/EnableMappingRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MappingServiceServer).EnableMappingRule(ctx, req.(*common.DescriptorPairBasedGetDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _MappingService_DisableMappingRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.DescriptorPairBasedGetDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MappingServiceServer).DisableMappingRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.MappingService/DisableMappingRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MappingServiceServer).DisableMappingRule(ctx, req.(*common.DescriptorPairBasedGetDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _MappingService_ListMappingRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MappingServiceServer).ListMappingRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.MappingService/ListMappingRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MappingServiceServer).ListMappingRules(ctx, req.(*common.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MappingService_ListMappingRuleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.DescriptorPairBasedGetDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MappingServiceServer).ListMappingRuleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.MappingService/ListMappingRuleVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MappingServiceServer).ListMappingRuleVersions(ctx, req.(*common.DescriptorPairBasedGetDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _MappingService_GetMappingRuleVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.DescriptorPairBasedVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MappingServiceServer).GetMappingRuleVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.MappingService/GetMappingRuleVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MappingServiceServer).GetMappingRuleVersion(ctx, req.(*common.DescriptorPairBasedVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MappingService_ServiceDesc is the grpc.ServiceDesc for MappingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MappingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.MappingService",
	HandlerType: (*MappingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMappingRule",
			Handler:    _MappingService_AddMappingRule_Handler,
		},
		{
			MethodName: "GetMappingRule",
			Handler:    _MappingService_GetMappingRule_Handler,
		},
		{
			MethodName: "EnableMappingRule",
			Handler:    _MappingService_EnableMappingRule_Handler,
		},
		{
			MethodName: "DisableMappingRule",
			Handler:    _MappingService_DisableMappingRule_Handler,
		},
		{
			MethodName: "ListMappingRules",
			Handler:    _MappingService_ListMappingRules_Handler,
		},
		{
			MethodName: "ListMappingRuleVersions",
			Handler:    _MappingService_ListMappingRuleVersions_Handler,
		},
		{
			MethodName: "GetMappingRuleVersion",
			Handler:    _MappingService_GetMappingRuleVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/mapping_service.proto",
}
