// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EntityServiceClient is the client API for EntityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntityServiceClient interface {
	Create(ctx context.Context, in *common.EntityDto, opts ...grpc.CallOption) (*common.EntityResponse, error)
	Update(ctx context.Context, in *common.EntityDto, opts ...grpc.CallOption) (*common.EntityResponse, error)
	GetById(ctx context.Context, in *common.EntityId, opts ...grpc.CallOption) (*common.EntityResponse, error)
	GetAllEnabledOnly(ctx context.Context, in *common.NoParameters, opts ...grpc.CallOption) (*common.EntitiesResponse, error)
	Find(ctx context.Context, in *common.SearchCriteria, opts ...grpc.CallOption) (*common.TableResponse, error)
}

type entityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityServiceClient(cc grpc.ClientConnInterface) EntityServiceClient {
	return &entityServiceClient{cc}
}

func (c *entityServiceClient) Create(ctx context.Context, in *common.EntityDto, opts ...grpc.CallOption) (*common.EntityResponse, error) {
	out := new(common.EntityResponse)
	err := c.cc.Invoke(ctx, "/com.peernova.titanium.casbin.management.grpc.service.EntityService/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) Update(ctx context.Context, in *common.EntityDto, opts ...grpc.CallOption) (*common.EntityResponse, error) {
	out := new(common.EntityResponse)
	err := c.cc.Invoke(ctx, "/com.peernova.titanium.casbin.management.grpc.service.EntityService/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetById(ctx context.Context, in *common.EntityId, opts ...grpc.CallOption) (*common.EntityResponse, error) {
	out := new(common.EntityResponse)
	err := c.cc.Invoke(ctx, "/com.peernova.titanium.casbin.management.grpc.service.EntityService/getById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetAllEnabledOnly(ctx context.Context, in *common.NoParameters, opts ...grpc.CallOption) (*common.EntitiesResponse, error) {
	out := new(common.EntitiesResponse)
	err := c.cc.Invoke(ctx, "/com.peernova.titanium.casbin.management.grpc.service.EntityService/getAllEnabledOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) Find(ctx context.Context, in *common.SearchCriteria, opts ...grpc.CallOption) (*common.TableResponse, error) {
	out := new(common.TableResponse)
	err := c.cc.Invoke(ctx, "/com.peernova.titanium.casbin.management.grpc.service.EntityService/find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityServiceServer is the server API for EntityService service.
// All implementations must embed UnimplementedEntityServiceServer
// for forward compatibility
type EntityServiceServer interface {
	Create(context.Context, *common.EntityDto) (*common.EntityResponse, error)
	Update(context.Context, *common.EntityDto) (*common.EntityResponse, error)
	GetById(context.Context, *common.EntityId) (*common.EntityResponse, error)
	GetAllEnabledOnly(context.Context, *common.NoParameters) (*common.EntitiesResponse, error)
	Find(context.Context, *common.SearchCriteria) (*common.TableResponse, error)
	mustEmbedUnimplementedEntityServiceServer()
}

// UnimplementedEntityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEntityServiceServer struct {
}

func (UnimplementedEntityServiceServer) Create(context.Context, *common.EntityDto) (*common.EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEntityServiceServer) Update(context.Context, *common.EntityDto) (*common.EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEntityServiceServer) GetById(context.Context, *common.EntityId) (*common.EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedEntityServiceServer) GetAllEnabledOnly(context.Context, *common.NoParameters) (*common.EntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEnabledOnly not implemented")
}
func (UnimplementedEntityServiceServer) Find(context.Context, *common.SearchCriteria) (*common.TableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedEntityServiceServer) mustEmbedUnimplementedEntityServiceServer() {}

// UnsafeEntityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityServiceServer will
// result in compilation errors.
type UnsafeEntityServiceServer interface {
	mustEmbedUnimplementedEntityServiceServer()
}

func RegisterEntityServiceServer(s grpc.ServiceRegistrar, srv EntityServiceServer) {
	s.RegisterService(&EntityService_ServiceDesc, srv)
}

func _EntityService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.EntityDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.peernova.titanium.casbin.management.grpc.service.EntityService/create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).Create(ctx, req.(*common.EntityDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.EntityDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.peernova.titanium.casbin.management.grpc.service.EntityService/update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).Update(ctx, req.(*common.EntityDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.EntityId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.peernova.titanium.casbin.management.grpc.service.EntityService/getById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetById(ctx, req.(*common.EntityId))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetAllEnabledOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NoParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetAllEnabledOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.peernova.titanium.casbin.management.grpc.service.EntityService/getAllEnabledOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetAllEnabledOnly(ctx, req.(*common.NoParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SearchCriteria)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.peernova.titanium.casbin.management.grpc.service.EntityService/find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).Find(ctx, req.(*common.SearchCriteria))
	}
	return interceptor(ctx, in, info, handler)
}

// EntityService_ServiceDesc is the grpc.ServiceDesc for EntityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.peernova.titanium.casbin.management.grpc.service.EntityService",
	HandlerType: (*EntityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _EntityService_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _EntityService_Update_Handler,
		},
		{
			MethodName: "getById",
			Handler:    _EntityService_GetById_Handler,
		},
		{
			MethodName: "getAllEnabledOnly",
			Handler:    _EntityService_GetAllEnabledOnly_Handler,
		},
		{
			MethodName: "find",
			Handler:    _EntityService_Find_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/usermanagement_entity_service.proto",
}
