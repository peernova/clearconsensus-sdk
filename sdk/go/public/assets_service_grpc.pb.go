// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssetsServiceClient is the client API for AssetsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetsServiceClient interface {
	// RecentAssets returns recent added assets according to request.
	RecentAssets(ctx context.Context, in *common.RecentAssetsRequest, opts ...grpc.CallOption) (*common.RecentAssetsResponse, error)
	// AssetsList return list of assets according to snap time.
	AssetsList(ctx context.Context, in *common.AssetsListRequest, opts ...grpc.CallOption) (*common.AssetsListResponse, error)
	// Assets returns asset from the system according to request.
	Assets(ctx context.Context, in *common.AssetsRequest, opts ...grpc.CallOption) (*common.AssetsResponse, error)
	SupportedAssets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.AssetsListResponse, error)
}

type assetsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetsServiceClient(cc grpc.ClientConnInterface) AssetsServiceClient {
	return &assetsServiceClient{cc}
}

func (c *assetsServiceClient) RecentAssets(ctx context.Context, in *common.RecentAssetsRequest, opts ...grpc.CallOption) (*common.RecentAssetsResponse, error) {
	out := new(common.RecentAssetsResponse)
	err := c.cc.Invoke(ctx, "/titanium.AssetsService/RecentAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) AssetsList(ctx context.Context, in *common.AssetsListRequest, opts ...grpc.CallOption) (*common.AssetsListResponse, error) {
	out := new(common.AssetsListResponse)
	err := c.cc.Invoke(ctx, "/titanium.AssetsService/AssetsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) Assets(ctx context.Context, in *common.AssetsRequest, opts ...grpc.CallOption) (*common.AssetsResponse, error) {
	out := new(common.AssetsResponse)
	err := c.cc.Invoke(ctx, "/titanium.AssetsService/Assets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) SupportedAssets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.AssetsListResponse, error) {
	out := new(common.AssetsListResponse)
	err := c.cc.Invoke(ctx, "/titanium.AssetsService/SupportedAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetsServiceServer is the server API for AssetsService service.
// All implementations must embed UnimplementedAssetsServiceServer
// for forward compatibility
type AssetsServiceServer interface {
	// RecentAssets returns recent added assets according to request.
	RecentAssets(context.Context, *common.RecentAssetsRequest) (*common.RecentAssetsResponse, error)
	// AssetsList return list of assets according to snap time.
	AssetsList(context.Context, *common.AssetsListRequest) (*common.AssetsListResponse, error)
	// Assets returns asset from the system according to request.
	Assets(context.Context, *common.AssetsRequest) (*common.AssetsResponse, error)
	SupportedAssets(context.Context, *emptypb.Empty) (*common.AssetsListResponse, error)
	mustEmbedUnimplementedAssetsServiceServer()
}

// UnimplementedAssetsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAssetsServiceServer struct {
}

func (UnimplementedAssetsServiceServer) RecentAssets(context.Context, *common.RecentAssetsRequest) (*common.RecentAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecentAssets not implemented")
}
func (UnimplementedAssetsServiceServer) AssetsList(context.Context, *common.AssetsListRequest) (*common.AssetsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetsList not implemented")
}
func (UnimplementedAssetsServiceServer) Assets(context.Context, *common.AssetsRequest) (*common.AssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assets not implemented")
}
func (UnimplementedAssetsServiceServer) SupportedAssets(context.Context, *emptypb.Empty) (*common.AssetsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupportedAssets not implemented")
}
func (UnimplementedAssetsServiceServer) mustEmbedUnimplementedAssetsServiceServer() {}

// UnsafeAssetsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetsServiceServer will
// result in compilation errors.
type UnsafeAssetsServiceServer interface {
	mustEmbedUnimplementedAssetsServiceServer()
}

func RegisterAssetsServiceServer(s grpc.ServiceRegistrar, srv AssetsServiceServer) {
	s.RegisterService(&AssetsService_ServiceDesc, srv)
}

func _AssetsService_RecentAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RecentAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).RecentAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.AssetsService/RecentAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).RecentAssets(ctx, req.(*common.RecentAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_AssetsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.AssetsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).AssetsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.AssetsService/AssetsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).AssetsList(ctx, req.(*common.AssetsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_Assets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.AssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).Assets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.AssetsService/Assets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).Assets(ctx, req.(*common.AssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_SupportedAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).SupportedAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.AssetsService/SupportedAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).SupportedAssets(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetsService_ServiceDesc is the grpc.ServiceDesc for AssetsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.AssetsService",
	HandlerType: (*AssetsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecentAssets",
			Handler:    _AssetsService_RecentAssets_Handler,
		},
		{
			MethodName: "AssetsList",
			Handler:    _AssetsService_AssetsList_Handler,
		},
		{
			MethodName: "Assets",
			Handler:    _AssetsService_Assets_Handler,
		},
		{
			MethodName: "SupportedAssets",
			Handler:    _AssetsService_SupportedAssets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/assets_service.proto",
}
