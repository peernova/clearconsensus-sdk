// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConsensusServiceClient is the client API for ConsensusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsensusServiceClient interface {
	// ConsensusTimestamps returns timestamps when it was submitted.
	// Need to specify asset ID and trace name.
	// Returns ConsensusTimestampsResponse that contains all the timestamps related to specified asset ID.
	//
	// This is a test to see how detailed we can make a RPC method's documentation using this commenting type:
	// Below we will be shown sample input for the ConsensusTimestamps endpoint.
	// **sample input**
	//
	// >`{`<br>
	// >`   "asset_id": "238917-2131-341ff",`<br>
	// >`   "trace_name": "placeholder value"`<br>
	// >`}`
	ConsensusTimestamps(ctx context.Context, in *common.ConsensusTimestampsRequest, opts ...grpc.CallOption) (*common.ConsensusTimestampsResponse, error)
	// Consensus return information about consensus according to request.
	// Need to specify consensus run timestamp, asset ID and etc.(See ConsensusRequest definition)
	// Returns ConsensusResponse that contains information about column and rows related to consensus.
	//
	// This is a test of a different commenting type:
	// Below we will be shown a placeholder for the Consensus RPC request.
	// *sample input**
	//
	// >`{`<br>
	// >`   "asset_id": "238917-2131-341ff",`<br>
	// >`   "trace_name": "placeholder value",`<br>
	// >`   "submitted_date": "238472301213"`<br>
	// >`}`
	Consensus(ctx context.Context, in *common.ConsensusRequest, opts ...grpc.CallOption) (*common.ConsensusResponse, error)
	EvaluatedPrice(ctx context.Context, in *common.EVPRequest, opts ...grpc.CallOption) (*common.EVPResponse, error)
	// ConsensusOutliers return list of outliers according to specified consensus.
	// Need to identify consensus tun timestamp and etc.(Described in OutliersListRequest)
	// Return ConsensusActiveResponse that contains active consensuses with specified run timestamp.
	ConsensusOutliers(ctx context.Context, in *common.OutliersListRequest, opts ...grpc.CallOption) (*common.ConsensusActiveResponse, error)
	// Get Consensus Run's consensus result sets
	GetConsensusRuns(ctx context.Context, in *common.GetConsensusRunsRequest, opts ...grpc.CallOption) (*common.GetConsensusRunsResponse, error)
	ConsensusExplorerInstrumentDetails(ctx context.Context, in *ConsensusExplorerRequest, opts ...grpc.CallOption) (*ConsensusExplorerInstrumentDetailsResponse, error)
	ConsensusExplorerTable(ctx context.Context, in *ConsensusExplorerRequest, opts ...grpc.CallOption) (*ConsensusExplorerTableResponse, error)
	ConsensusExplorerRanges(ctx context.Context, in *ConsensusExplorerRequest, opts ...grpc.CallOption) (*ConsensusExplorerRangeResponse, error)
	CohortConsensusTab(ctx context.Context, in *ConsensusTabRequest, opts ...grpc.CallOption) (*common.ConsensusResultSetValuesResponse, error)
	SubmissionEvidenceTab(ctx context.Context, in *ConsensusTabRequest, opts ...grpc.CallOption) (*common.ConsensusResultSetValuesResponse, error)
	ConsensusActive(ctx context.Context, in *common.ConsensusActiveRequest, opts ...grpc.CallOption) (*common.ConsensusActiveResponse, error)
	ConsensusToPublish(ctx context.Context, in *common.ConsensusToPublishRequest, opts ...grpc.CallOption) (*common.ConsensusToPublishResponse, error)
	ConsensusPublish(ctx context.Context, in *common.ConsensusPublishRequest, opts ...grpc.CallOption) (*common.MessageResponse, error)
	ConsensusHistory(ctx context.Context, in *common.ConsensusHistoryRequest, opts ...grpc.CallOption) (*common.ConsensusHistoryResponse, error)
	ConsensusDecision(ctx context.Context, in *common.ConsensusDecisionRequest, opts ...grpc.CallOption) (*common.MessageResponse, error)
}

type consensusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsensusServiceClient(cc grpc.ClientConnInterface) ConsensusServiceClient {
	return &consensusServiceClient{cc}
}

func (c *consensusServiceClient) ConsensusTimestamps(ctx context.Context, in *common.ConsensusTimestampsRequest, opts ...grpc.CallOption) (*common.ConsensusTimestampsResponse, error) {
	out := new(common.ConsensusTimestampsResponse)
	err := c.cc.Invoke(ctx, "/titanium.ConsensusService/ConsensusTimestamps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) Consensus(ctx context.Context, in *common.ConsensusRequest, opts ...grpc.CallOption) (*common.ConsensusResponse, error) {
	out := new(common.ConsensusResponse)
	err := c.cc.Invoke(ctx, "/titanium.ConsensusService/Consensus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) EvaluatedPrice(ctx context.Context, in *common.EVPRequest, opts ...grpc.CallOption) (*common.EVPResponse, error) {
	out := new(common.EVPResponse)
	err := c.cc.Invoke(ctx, "/titanium.ConsensusService/EvaluatedPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) ConsensusOutliers(ctx context.Context, in *common.OutliersListRequest, opts ...grpc.CallOption) (*common.ConsensusActiveResponse, error) {
	out := new(common.ConsensusActiveResponse)
	err := c.cc.Invoke(ctx, "/titanium.ConsensusService/ConsensusOutliers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) GetConsensusRuns(ctx context.Context, in *common.GetConsensusRunsRequest, opts ...grpc.CallOption) (*common.GetConsensusRunsResponse, error) {
	out := new(common.GetConsensusRunsResponse)
	err := c.cc.Invoke(ctx, "/titanium.ConsensusService/GetConsensusRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) ConsensusExplorerInstrumentDetails(ctx context.Context, in *ConsensusExplorerRequest, opts ...grpc.CallOption) (*ConsensusExplorerInstrumentDetailsResponse, error) {
	out := new(ConsensusExplorerInstrumentDetailsResponse)
	err := c.cc.Invoke(ctx, "/titanium.ConsensusService/ConsensusExplorerInstrumentDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) ConsensusExplorerTable(ctx context.Context, in *ConsensusExplorerRequest, opts ...grpc.CallOption) (*ConsensusExplorerTableResponse, error) {
	out := new(ConsensusExplorerTableResponse)
	err := c.cc.Invoke(ctx, "/titanium.ConsensusService/ConsensusExplorerTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) ConsensusExplorerRanges(ctx context.Context, in *ConsensusExplorerRequest, opts ...grpc.CallOption) (*ConsensusExplorerRangeResponse, error) {
	out := new(ConsensusExplorerRangeResponse)
	err := c.cc.Invoke(ctx, "/titanium.ConsensusService/ConsensusExplorerRanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) CohortConsensusTab(ctx context.Context, in *ConsensusTabRequest, opts ...grpc.CallOption) (*common.ConsensusResultSetValuesResponse, error) {
	out := new(common.ConsensusResultSetValuesResponse)
	err := c.cc.Invoke(ctx, "/titanium.ConsensusService/CohortConsensusTab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) SubmissionEvidenceTab(ctx context.Context, in *ConsensusTabRequest, opts ...grpc.CallOption) (*common.ConsensusResultSetValuesResponse, error) {
	out := new(common.ConsensusResultSetValuesResponse)
	err := c.cc.Invoke(ctx, "/titanium.ConsensusService/SubmissionEvidenceTab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) ConsensusActive(ctx context.Context, in *common.ConsensusActiveRequest, opts ...grpc.CallOption) (*common.ConsensusActiveResponse, error) {
	out := new(common.ConsensusActiveResponse)
	err := c.cc.Invoke(ctx, "/titanium.ConsensusService/ConsensusActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) ConsensusToPublish(ctx context.Context, in *common.ConsensusToPublishRequest, opts ...grpc.CallOption) (*common.ConsensusToPublishResponse, error) {
	out := new(common.ConsensusToPublishResponse)
	err := c.cc.Invoke(ctx, "/titanium.ConsensusService/ConsensusToPublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) ConsensusPublish(ctx context.Context, in *common.ConsensusPublishRequest, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/titanium.ConsensusService/ConsensusPublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) ConsensusHistory(ctx context.Context, in *common.ConsensusHistoryRequest, opts ...grpc.CallOption) (*common.ConsensusHistoryResponse, error) {
	out := new(common.ConsensusHistoryResponse)
	err := c.cc.Invoke(ctx, "/titanium.ConsensusService/ConsensusHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusServiceClient) ConsensusDecision(ctx context.Context, in *common.ConsensusDecisionRequest, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/titanium.ConsensusService/ConsensusDecision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsensusServiceServer is the server API for ConsensusService service.
// All implementations must embed UnimplementedConsensusServiceServer
// for forward compatibility
type ConsensusServiceServer interface {
	// ConsensusTimestamps returns timestamps when it was submitted.
	// Need to specify asset ID and trace name.
	// Returns ConsensusTimestampsResponse that contains all the timestamps related to specified asset ID.
	//
	// This is a test to see how detailed we can make a RPC method's documentation using this commenting type:
	// Below we will be shown sample input for the ConsensusTimestamps endpoint.
	// **sample input**
	//
	// >`{`<br>
	// >`   "asset_id": "238917-2131-341ff",`<br>
	// >`   "trace_name": "placeholder value"`<br>
	// >`}`
	ConsensusTimestamps(context.Context, *common.ConsensusTimestampsRequest) (*common.ConsensusTimestampsResponse, error)
	// Consensus return information about consensus according to request.
	// Need to specify consensus run timestamp, asset ID and etc.(See ConsensusRequest definition)
	// Returns ConsensusResponse that contains information about column and rows related to consensus.
	//
	// This is a test of a different commenting type:
	// Below we will be shown a placeholder for the Consensus RPC request.
	// *sample input**
	//
	// >`{`<br>
	// >`   "asset_id": "238917-2131-341ff",`<br>
	// >`   "trace_name": "placeholder value",`<br>
	// >`   "submitted_date": "238472301213"`<br>
	// >`}`
	Consensus(context.Context, *common.ConsensusRequest) (*common.ConsensusResponse, error)
	EvaluatedPrice(context.Context, *common.EVPRequest) (*common.EVPResponse, error)
	// ConsensusOutliers return list of outliers according to specified consensus.
	// Need to identify consensus tun timestamp and etc.(Described in OutliersListRequest)
	// Return ConsensusActiveResponse that contains active consensuses with specified run timestamp.
	ConsensusOutliers(context.Context, *common.OutliersListRequest) (*common.ConsensusActiveResponse, error)
	// Get Consensus Run's consensus result sets
	GetConsensusRuns(context.Context, *common.GetConsensusRunsRequest) (*common.GetConsensusRunsResponse, error)
	ConsensusExplorerInstrumentDetails(context.Context, *ConsensusExplorerRequest) (*ConsensusExplorerInstrumentDetailsResponse, error)
	ConsensusExplorerTable(context.Context, *ConsensusExplorerRequest) (*ConsensusExplorerTableResponse, error)
	ConsensusExplorerRanges(context.Context, *ConsensusExplorerRequest) (*ConsensusExplorerRangeResponse, error)
	CohortConsensusTab(context.Context, *ConsensusTabRequest) (*common.ConsensusResultSetValuesResponse, error)
	SubmissionEvidenceTab(context.Context, *ConsensusTabRequest) (*common.ConsensusResultSetValuesResponse, error)
	ConsensusActive(context.Context, *common.ConsensusActiveRequest) (*common.ConsensusActiveResponse, error)
	ConsensusToPublish(context.Context, *common.ConsensusToPublishRequest) (*common.ConsensusToPublishResponse, error)
	ConsensusPublish(context.Context, *common.ConsensusPublishRequest) (*common.MessageResponse, error)
	ConsensusHistory(context.Context, *common.ConsensusHistoryRequest) (*common.ConsensusHistoryResponse, error)
	ConsensusDecision(context.Context, *common.ConsensusDecisionRequest) (*common.MessageResponse, error)
	mustEmbedUnimplementedConsensusServiceServer()
}

// UnimplementedConsensusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConsensusServiceServer struct {
}

func (UnimplementedConsensusServiceServer) ConsensusTimestamps(context.Context, *common.ConsensusTimestampsRequest) (*common.ConsensusTimestampsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsensusTimestamps not implemented")
}
func (UnimplementedConsensusServiceServer) Consensus(context.Context, *common.ConsensusRequest) (*common.ConsensusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Consensus not implemented")
}
func (UnimplementedConsensusServiceServer) EvaluatedPrice(context.Context, *common.EVPRequest) (*common.EVPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluatedPrice not implemented")
}
func (UnimplementedConsensusServiceServer) ConsensusOutliers(context.Context, *common.OutliersListRequest) (*common.ConsensusActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsensusOutliers not implemented")
}
func (UnimplementedConsensusServiceServer) GetConsensusRuns(context.Context, *common.GetConsensusRunsRequest) (*common.GetConsensusRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsensusRuns not implemented")
}
func (UnimplementedConsensusServiceServer) ConsensusExplorerInstrumentDetails(context.Context, *ConsensusExplorerRequest) (*ConsensusExplorerInstrumentDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsensusExplorerInstrumentDetails not implemented")
}
func (UnimplementedConsensusServiceServer) ConsensusExplorerTable(context.Context, *ConsensusExplorerRequest) (*ConsensusExplorerTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsensusExplorerTable not implemented")
}
func (UnimplementedConsensusServiceServer) ConsensusExplorerRanges(context.Context, *ConsensusExplorerRequest) (*ConsensusExplorerRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsensusExplorerRanges not implemented")
}
func (UnimplementedConsensusServiceServer) CohortConsensusTab(context.Context, *ConsensusTabRequest) (*common.ConsensusResultSetValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CohortConsensusTab not implemented")
}
func (UnimplementedConsensusServiceServer) SubmissionEvidenceTab(context.Context, *ConsensusTabRequest) (*common.ConsensusResultSetValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmissionEvidenceTab not implemented")
}
func (UnimplementedConsensusServiceServer) ConsensusActive(context.Context, *common.ConsensusActiveRequest) (*common.ConsensusActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsensusActive not implemented")
}
func (UnimplementedConsensusServiceServer) ConsensusToPublish(context.Context, *common.ConsensusToPublishRequest) (*common.ConsensusToPublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsensusToPublish not implemented")
}
func (UnimplementedConsensusServiceServer) ConsensusPublish(context.Context, *common.ConsensusPublishRequest) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsensusPublish not implemented")
}
func (UnimplementedConsensusServiceServer) ConsensusHistory(context.Context, *common.ConsensusHistoryRequest) (*common.ConsensusHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsensusHistory not implemented")
}
func (UnimplementedConsensusServiceServer) ConsensusDecision(context.Context, *common.ConsensusDecisionRequest) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsensusDecision not implemented")
}
func (UnimplementedConsensusServiceServer) mustEmbedUnimplementedConsensusServiceServer() {}

// UnsafeConsensusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsensusServiceServer will
// result in compilation errors.
type UnsafeConsensusServiceServer interface {
	mustEmbedUnimplementedConsensusServiceServer()
}

func RegisterConsensusServiceServer(s grpc.ServiceRegistrar, srv ConsensusServiceServer) {
	s.RegisterService(&ConsensusService_ServiceDesc, srv)
}

func _ConsensusService_ConsensusTimestamps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ConsensusTimestampsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).ConsensusTimestamps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ConsensusService/ConsensusTimestamps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).ConsensusTimestamps(ctx, req.(*common.ConsensusTimestampsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_Consensus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ConsensusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).Consensus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ConsensusService/Consensus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).Consensus(ctx, req.(*common.ConsensusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_EvaluatedPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.EVPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).EvaluatedPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ConsensusService/EvaluatedPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).EvaluatedPrice(ctx, req.(*common.EVPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_ConsensusOutliers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.OutliersListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).ConsensusOutliers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ConsensusService/ConsensusOutliers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).ConsensusOutliers(ctx, req.(*common.OutliersListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_GetConsensusRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetConsensusRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).GetConsensusRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ConsensusService/GetConsensusRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).GetConsensusRuns(ctx, req.(*common.GetConsensusRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_ConsensusExplorerInstrumentDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsensusExplorerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).ConsensusExplorerInstrumentDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ConsensusService/ConsensusExplorerInstrumentDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).ConsensusExplorerInstrumentDetails(ctx, req.(*ConsensusExplorerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_ConsensusExplorerTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsensusExplorerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).ConsensusExplorerTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ConsensusService/ConsensusExplorerTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).ConsensusExplorerTable(ctx, req.(*ConsensusExplorerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_ConsensusExplorerRanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsensusExplorerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).ConsensusExplorerRanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ConsensusService/ConsensusExplorerRanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).ConsensusExplorerRanges(ctx, req.(*ConsensusExplorerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_CohortConsensusTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsensusTabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).CohortConsensusTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ConsensusService/CohortConsensusTab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).CohortConsensusTab(ctx, req.(*ConsensusTabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_SubmissionEvidenceTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsensusTabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).SubmissionEvidenceTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ConsensusService/SubmissionEvidenceTab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).SubmissionEvidenceTab(ctx, req.(*ConsensusTabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_ConsensusActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ConsensusActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).ConsensusActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ConsensusService/ConsensusActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).ConsensusActive(ctx, req.(*common.ConsensusActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_ConsensusToPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ConsensusToPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).ConsensusToPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ConsensusService/ConsensusToPublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).ConsensusToPublish(ctx, req.(*common.ConsensusToPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_ConsensusPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ConsensusPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).ConsensusPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ConsensusService/ConsensusPublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).ConsensusPublish(ctx, req.(*common.ConsensusPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_ConsensusHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ConsensusHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).ConsensusHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ConsensusService/ConsensusHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).ConsensusHistory(ctx, req.(*common.ConsensusHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsensusService_ConsensusDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ConsensusDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServiceServer).ConsensusDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ConsensusService/ConsensusDecision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServiceServer).ConsensusDecision(ctx, req.(*common.ConsensusDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsensusService_ServiceDesc is the grpc.ServiceDesc for ConsensusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsensusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.ConsensusService",
	HandlerType: (*ConsensusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConsensusTimestamps",
			Handler:    _ConsensusService_ConsensusTimestamps_Handler,
		},
		{
			MethodName: "Consensus",
			Handler:    _ConsensusService_Consensus_Handler,
		},
		{
			MethodName: "EvaluatedPrice",
			Handler:    _ConsensusService_EvaluatedPrice_Handler,
		},
		{
			MethodName: "ConsensusOutliers",
			Handler:    _ConsensusService_ConsensusOutliers_Handler,
		},
		{
			MethodName: "GetConsensusRuns",
			Handler:    _ConsensusService_GetConsensusRuns_Handler,
		},
		{
			MethodName: "ConsensusExplorerInstrumentDetails",
			Handler:    _ConsensusService_ConsensusExplorerInstrumentDetails_Handler,
		},
		{
			MethodName: "ConsensusExplorerTable",
			Handler:    _ConsensusService_ConsensusExplorerTable_Handler,
		},
		{
			MethodName: "ConsensusExplorerRanges",
			Handler:    _ConsensusService_ConsensusExplorerRanges_Handler,
		},
		{
			MethodName: "CohortConsensusTab",
			Handler:    _ConsensusService_CohortConsensusTab_Handler,
		},
		{
			MethodName: "SubmissionEvidenceTab",
			Handler:    _ConsensusService_SubmissionEvidenceTab_Handler,
		},
		{
			MethodName: "ConsensusActive",
			Handler:    _ConsensusService_ConsensusActive_Handler,
		},
		{
			MethodName: "ConsensusToPublish",
			Handler:    _ConsensusService_ConsensusToPublish_Handler,
		},
		{
			MethodName: "ConsensusPublish",
			Handler:    _ConsensusService_ConsensusPublish_Handler,
		},
		{
			MethodName: "ConsensusHistory",
			Handler:    _ConsensusService_ConsensusHistory_Handler,
		},
		{
			MethodName: "ConsensusDecision",
			Handler:    _ConsensusService_ConsensusDecision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/consensus_service.proto",
}
