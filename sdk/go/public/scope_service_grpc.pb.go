// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScopeServiceClient is the client API for ScopeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScopeServiceClient interface {
	// AddScope creates scope in the system.
	AddScope(ctx context.Context, in *common.ScopeIdentifier, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error)
	// ExistScope return boolean value about existence of scope according to request.
	ExistScope(ctx context.Context, in *common.ScopeIdentifier, opts ...grpc.CallOption) (*common.ScopeExistResponse, error)
	// ListScope returns list of all existing scopes.
	ListScope(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.ScopeListResponse, error)
}

type scopeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScopeServiceClient(cc grpc.ClientConnInterface) ScopeServiceClient {
	return &scopeServiceClient{cc}
}

func (c *scopeServiceClient) AddScope(ctx context.Context, in *common.ScopeIdentifier, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error) {
	out := new(common.AcknowledgeResponse)
	err := c.cc.Invoke(ctx, "/titanium.ScopeService/AddScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopeServiceClient) ExistScope(ctx context.Context, in *common.ScopeIdentifier, opts ...grpc.CallOption) (*common.ScopeExistResponse, error) {
	out := new(common.ScopeExistResponse)
	err := c.cc.Invoke(ctx, "/titanium.ScopeService/ExistScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopeServiceClient) ListScope(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.ScopeListResponse, error) {
	out := new(common.ScopeListResponse)
	err := c.cc.Invoke(ctx, "/titanium.ScopeService/ListScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScopeServiceServer is the server API for ScopeService service.
// All implementations must embed UnimplementedScopeServiceServer
// for forward compatibility
type ScopeServiceServer interface {
	// AddScope creates scope in the system.
	AddScope(context.Context, *common.ScopeIdentifier) (*common.AcknowledgeResponse, error)
	// ExistScope return boolean value about existence of scope according to request.
	ExistScope(context.Context, *common.ScopeIdentifier) (*common.ScopeExistResponse, error)
	// ListScope returns list of all existing scopes.
	ListScope(context.Context, *emptypb.Empty) (*common.ScopeListResponse, error)
	mustEmbedUnimplementedScopeServiceServer()
}

// UnimplementedScopeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScopeServiceServer struct {
}

func (UnimplementedScopeServiceServer) AddScope(context.Context, *common.ScopeIdentifier) (*common.AcknowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScope not implemented")
}
func (UnimplementedScopeServiceServer) ExistScope(context.Context, *common.ScopeIdentifier) (*common.ScopeExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistScope not implemented")
}
func (UnimplementedScopeServiceServer) ListScope(context.Context, *emptypb.Empty) (*common.ScopeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScope not implemented")
}
func (UnimplementedScopeServiceServer) mustEmbedUnimplementedScopeServiceServer() {}

// UnsafeScopeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScopeServiceServer will
// result in compilation errors.
type UnsafeScopeServiceServer interface {
	mustEmbedUnimplementedScopeServiceServer()
}

func RegisterScopeServiceServer(s grpc.ServiceRegistrar, srv ScopeServiceServer) {
	s.RegisterService(&ScopeService_ServiceDesc, srv)
}

func _ScopeService_AddScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ScopeIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopeServiceServer).AddScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ScopeService/AddScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopeServiceServer).AddScope(ctx, req.(*common.ScopeIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopeService_ExistScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ScopeIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopeServiceServer).ExistScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ScopeService/ExistScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopeServiceServer).ExistScope(ctx, req.(*common.ScopeIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopeService_ListScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopeServiceServer).ListScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.ScopeService/ListScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopeServiceServer).ListScope(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ScopeService_ServiceDesc is the grpc.ServiceDesc for ScopeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScopeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.ScopeService",
	HandlerType: (*ScopeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddScope",
			Handler:    _ScopeService_AddScope_Handler,
		},
		{
			MethodName: "ExistScope",
			Handler:    _ScopeService_ExistScope_Handler,
		},
		{
			MethodName: "ListScope",
			Handler:    _ScopeService_ListScope_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/scope_service.proto",
}
