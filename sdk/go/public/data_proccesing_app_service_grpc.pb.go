// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataProcessingAppServiceClient is the client API for DataProcessingAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataProcessingAppServiceClient interface {
	// RunDataProcessingApp triggers jobs that are responsible to processing of received data.
	RunDataProcessingApp(ctx context.Context, in *common.RunDataProcessingAppRequest, opts ...grpc.CallOption) (*common.RunDataProcessingAppResponse, error)
}

type dataProcessingAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataProcessingAppServiceClient(cc grpc.ClientConnInterface) DataProcessingAppServiceClient {
	return &dataProcessingAppServiceClient{cc}
}

func (c *dataProcessingAppServiceClient) RunDataProcessingApp(ctx context.Context, in *common.RunDataProcessingAppRequest, opts ...grpc.CallOption) (*common.RunDataProcessingAppResponse, error) {
	out := new(common.RunDataProcessingAppResponse)
	err := c.cc.Invoke(ctx, "/titanium.DataProcessingAppService/RunDataProcessingApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataProcessingAppServiceServer is the server API for DataProcessingAppService service.
// All implementations must embed UnimplementedDataProcessingAppServiceServer
// for forward compatibility
type DataProcessingAppServiceServer interface {
	// RunDataProcessingApp triggers jobs that are responsible to processing of received data.
	RunDataProcessingApp(context.Context, *common.RunDataProcessingAppRequest) (*common.RunDataProcessingAppResponse, error)
	mustEmbedUnimplementedDataProcessingAppServiceServer()
}

// UnimplementedDataProcessingAppServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataProcessingAppServiceServer struct {
}

func (UnimplementedDataProcessingAppServiceServer) RunDataProcessingApp(context.Context, *common.RunDataProcessingAppRequest) (*common.RunDataProcessingAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunDataProcessingApp not implemented")
}
func (UnimplementedDataProcessingAppServiceServer) mustEmbedUnimplementedDataProcessingAppServiceServer() {
}

// UnsafeDataProcessingAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataProcessingAppServiceServer will
// result in compilation errors.
type UnsafeDataProcessingAppServiceServer interface {
	mustEmbedUnimplementedDataProcessingAppServiceServer()
}

func RegisterDataProcessingAppServiceServer(s grpc.ServiceRegistrar, srv DataProcessingAppServiceServer) {
	s.RegisterService(&DataProcessingAppService_ServiceDesc, srv)
}

func _DataProcessingAppService_RunDataProcessingApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RunDataProcessingAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataProcessingAppServiceServer).RunDataProcessingApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DataProcessingAppService/RunDataProcessingApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataProcessingAppServiceServer).RunDataProcessingApp(ctx, req.(*common.RunDataProcessingAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataProcessingAppService_ServiceDesc is the grpc.ServiceDesc for DataProcessingAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataProcessingAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.DataProcessingAppService",
	HandlerType: (*DataProcessingAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunDataProcessingApp",
			Handler:    _DataProcessingAppService_RunDataProcessingApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/data_proccesing_app_service.proto",
}
