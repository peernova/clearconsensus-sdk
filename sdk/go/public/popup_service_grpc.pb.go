// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PopUpServiceClient is the client API for PopUpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PopUpServiceClient interface {
	// PopUpView returns information according to request for the popup view.
	PopUpView(ctx context.Context, in *common.PopUpViewRequest, opts ...grpc.CallOption) (*common.PopUpViewResponse, error)
}

type popUpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPopUpServiceClient(cc grpc.ClientConnInterface) PopUpServiceClient {
	return &popUpServiceClient{cc}
}

func (c *popUpServiceClient) PopUpView(ctx context.Context, in *common.PopUpViewRequest, opts ...grpc.CallOption) (*common.PopUpViewResponse, error) {
	out := new(common.PopUpViewResponse)
	err := c.cc.Invoke(ctx, "/titanium.PopUpService/PopUpView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PopUpServiceServer is the server API for PopUpService service.
// All implementations must embed UnimplementedPopUpServiceServer
// for forward compatibility
type PopUpServiceServer interface {
	// PopUpView returns information according to request for the popup view.
	PopUpView(context.Context, *common.PopUpViewRequest) (*common.PopUpViewResponse, error)
	mustEmbedUnimplementedPopUpServiceServer()
}

// UnimplementedPopUpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPopUpServiceServer struct {
}

func (UnimplementedPopUpServiceServer) PopUpView(context.Context, *common.PopUpViewRequest) (*common.PopUpViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopUpView not implemented")
}
func (UnimplementedPopUpServiceServer) mustEmbedUnimplementedPopUpServiceServer() {}

// UnsafePopUpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PopUpServiceServer will
// result in compilation errors.
type UnsafePopUpServiceServer interface {
	mustEmbedUnimplementedPopUpServiceServer()
}

func RegisterPopUpServiceServer(s grpc.ServiceRegistrar, srv PopUpServiceServer) {
	s.RegisterService(&PopUpService_ServiceDesc, srv)
}

func _PopUpService_PopUpView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PopUpViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PopUpServiceServer).PopUpView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.PopUpService/PopUpView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PopUpServiceServer).PopUpView(ctx, req.(*common.PopUpViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PopUpService_ServiceDesc is the grpc.ServiceDesc for PopUpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PopUpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.PopUpService",
	HandlerType: (*PopUpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PopUpView",
			Handler:    _PopUpService_PopUpView_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/popup_service.proto",
}
