// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DescriptorServiceClient is the client API for DescriptorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DescriptorServiceClient interface {
	// AddDescriptor is used to add specific descriptor with specific definition to the system.
	// Regular users can store a descriptor within their own scope, and any attempts to push it to a different scope will be declined.
	// Back office users can store descriptors in any scope, provided that a scope key is provided.
	// The name of the descriptor must match the name of the asset class to be mapped correctly.
	// If a descriptor with the same name already exists, it will be updated.
	//
	// Example of request for regular user :
	//
	//	{
	//	  "name":"foreign_exchange-vanilla-forwards",
	//	  "fields":[
	//	     {
	//
	// [data]="typeEnumToDisplayName[cellData]"v        "name":"submission_date",
	//
	//	        "nullable":true,
	//	        "type":"string"
	//	     },
	//	     {
	//	        "name":"submission_asset",
	//	        "nullable":true,
	//	        "type":"string"
	//	     }
	//	  ]
	//	}
	//
	// Example of request for Back Office :
	//
	//	{
	//	  "name":"foreign_exchange-vanilla-forwards",
	//	  "scope": "global",
	//	  "fields":[
	//	     {
	//	        "name":"snap_date",
	//	        "alias":"snap_date",
	//	        "type":"date",
	//	        "options":{
	//	           "format":"MM/dd/yy"
	//	        }
	//	     },
	//	     {
	//	        "name":"asset",
	//	        "alias":"asset",
	//	        "type":"string"
	//	     },
	//	     {
	//	       "name": "sub-asset",
	//	       "alias": "sub-asset",
	//	       "type": "string"
	//	     }
	//	  ]
	//	}
	//
	// Example of response :
	//
	//	{
	//	  "data":{
	//	     "uid":"98fd0526-cc88-11ec-b784-0fe7a41b45e0",
	//	     "name":"foreign_exchange-vanilla-forwards"
	//	  }
	//	}
	//
	// Example of error response :
	//
	//	{
	//	  "error":{
	//	     "code":70,
	//	     "message":"Can't add descriptor: [com.peernova.api.searchmetadata.metadata.exceptions.MetaDataServiceException: Namespace [bank11] is not valid]."
	//	  }
	//	}
	AddDescriptor(ctx context.Context, in *common.DescriptorDefinition, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error)
	// GetDescriptor is used to get specific descriptor definition based on get definition.
	// Regular users can retrieve only their own descriptors and descriptors associated with asset classes.
	// Back office users can retrieve any of the existing descriptors.
	//
	// Example of request :
	//
	//	{
	//	  "identifier":{
	//	     "name":"foreign_exchange-vanilla-forwards"
	//	  },
	//	  "scope":"global"
	//	}
	//
	// Example of response :
	//
	//	{
	//	   "data": "{\"name\":\"foreign_exchange-vanilla-forwards\",\"fields\":[{\"name\":\"snap_date\",\"type\":\"date\",\"options\":{\"format\":\"MM/dd/yy\"},\"alias\":\"snap_date\"},{\"name\":\"asset\",\"type\":\"string\",\"alias\":\"asset\"},{\"name\":\"sub-asset\",\"type\":\"string\",\"alias\":\"sub-asset\"},{\"name\":\"service\",\"type\":\"string\",\"nullable\":true,\"alias\":\"service\"},{\"name\":\"snap_time\",\"type\":\"string\",\"alias\":\"snap_time\"},{\"name\":\"curr_1\",\"type\":\"string\",\"alias\":\"curr_1\"},{\"name\":\"curr_2\",\"type\":\"string\",\"alias\":\"curr_2\"},{\"name\":\"onshore_offshore_curr_1\",\"type\":\"string\",\"nullable\":true,\"alias\":\"onshore_offshore_curr_1\"},{\"name\":\"onshore_offshore_curr_2\",\"type\":\"string\",\"nullable\":true,\"alias\":\"onshore_offshore_curr_2\"},{\"name\":\"instrument_type\",\"type\":\"string\",\"alias\":\"instrument_type\"},{\"name\":\"tenor\",\"type\":\"string\",\"nullable\":true,\"alias\":\"tenor\"},{\"name\":\"value_source\",\"type\":\"string\",\"nullable\":true,\"alias\":\"value_source\"},{\"name\":\"fwrd_conversion_factor\",\"type\":\"double\",\"nullable\":true,\"alias\":\"fwrd_conversion_factor\"},{\"name\":\"mid_fwrd_outright\",\"type\":\"double\",\"nullable\":true,\"alias\":\"mid_fwrd_outright\"},{\"name\":\"value_source_ref_id\",\"type\":\"string\",\"nullable\":true,\"alias\":\"value_source_ref_id\"},{\"name\":\"client\",\"type\":\"string\",\"alias\":\"client\"},{\"name\":\"spot_reference_price\",\"type\":\"double\",\"nullable\":true,\"alias\":\"spot_reference_price\"},{\"name\":\"mid_fwrd_points\",\"type\":\"double\",\"alias\":\"mid_fwrd_points\"}]}"
	//	}
	//
	// Example of error response :
	//
	//	{
	//	   "error": {
	//	       "code": 70,
	//	       "message": "Can't get descriptor: [[foreign_exchange-vanilla-forwards1] of service [DESCRIPTOR] does not exist in namespace [global]]."
	//	   }
	//	}
	GetDescriptor(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.DescriptorDefinitionResponse, error)
	// EnableDescriptor is used to enable specific descriptor.
	//
	// Example of request :
	//
	//	{
	//	 "name" : "foreign_exchange-vanilla-forwards",
	//	 "scope": "global"
	//	}
	//
	// Example of response :
	//
	//	{
	//	   "data": {
	//	       "uid": "",
	//	       "name": "foreign_exchange-vanilla-forwards"
	//	   }
	//	}
	EnableDescriptor(ctx context.Context, in *common.EnableDisableRequest, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error)
	// DisableDescriptor is used to disable specific descriptor.
	// Example of response :
	//
	//	{
	//	   "data": {
	//	       "uid": "",
	//	       "name": "foreign_exchange-vanilla-forwards"
	//	   }
	//	}
	DisableDescriptor(ctx context.Context, in *common.EnableDisableRequest, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error)
	// ListDescriptors returns list of specific descriptors according to request.
	//
	// Example of request :
	//
	//	{
	//	  "scope":"global"
	//	}
	//
	// Example of response :
	//
	//	{
	//	   "data": {
	//	       "results": [
	//	           {
	//	               "uid": "",
	//	               "name": "foreign_exchange-vanilla-options"
	//	           },
	//	           {
	//	               "uid": "",
	//	               "name": "foreign_exchange-exotics-barriers_and_digitals"
	//	           },
	//	           {
	//	               "uid": "",
	//	               "name": "foreign_exchange-exotics-tarfs"
	//	           }
	//	       ]
	//	   }
	//	}
	ListDescriptors(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*common.DescriptorList, error)
	// ListDescriptorVersions returns list of version of the specific descriptor versions.
	//
	// Example of request :
	//
	//	{
	//	  "scope":"global",
	//	  "identifier":{
	//	     "name":"foreign_exchange-vanilla-forwards"
	//	  }
	//	}
	//
	//	Example of response : {
	//	   "data": {
	//	       "versions": [
	//	           {
	//	               "versionId": "fM9AukEqTJXKOcbW_tQ7Sfr4Clp5qinKq_liXZYzyiI=",
	//	               "createdAt": "2022-06-14 10:57:42.0"
	//	           },
	//	           {
	//	               "versionId": "LmVlkPbnsUKFBw8qIbUHEzBsRrcnG_BSMnopA5Ptd7I=",
	//	               "createdAt": "2022-06-14 10:20:48.0"
	//	           }
	//	       ]
	//	   }
	//	}
	ListDescriptorVersions(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.ListVersionResponse, error)
	// GetDescriptorVersion returns current version of the specific descriptor.
	//
	// Example of response :
	// {
	// "data":"{\"name\":\"fx_test_for_bank1\",\"fields\":[{\"name\":\"submission_date\",\"type\":\"date\",\"options\":{\"format\":\"MM/dd/yyyy\"},\"alias\":\"date12\"},{\"name\":\"submission_asset\",\"type\":\"string\",\"nullable\":true}],\"options\":{\"DEDUPLICATION\":{\"GROUP_BY\":[\"submission_date\",\"submission_asset\"]}}}"
	// }
	GetDescriptorVersion(ctx context.Context, in *common.VersionRequest, opts ...grpc.CallOption) (*common.DescriptorDefinitionResponse, error)
}

type descriptorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDescriptorServiceClient(cc grpc.ClientConnInterface) DescriptorServiceClient {
	return &descriptorServiceClient{cc}
}

func (c *descriptorServiceClient) AddDescriptor(ctx context.Context, in *common.DescriptorDefinition, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error) {
	out := new(common.AcknowledgeResponse)
	err := c.cc.Invoke(ctx, "/titanium.DescriptorService/AddDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *descriptorServiceClient) GetDescriptor(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.DescriptorDefinitionResponse, error) {
	out := new(common.DescriptorDefinitionResponse)
	err := c.cc.Invoke(ctx, "/titanium.DescriptorService/GetDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *descriptorServiceClient) EnableDescriptor(ctx context.Context, in *common.EnableDisableRequest, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error) {
	out := new(common.AcknowledgeResponse)
	err := c.cc.Invoke(ctx, "/titanium.DescriptorService/EnableDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *descriptorServiceClient) DisableDescriptor(ctx context.Context, in *common.EnableDisableRequest, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error) {
	out := new(common.AcknowledgeResponse)
	err := c.cc.Invoke(ctx, "/titanium.DescriptorService/DisableDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *descriptorServiceClient) ListDescriptors(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*common.DescriptorList, error) {
	out := new(common.DescriptorList)
	err := c.cc.Invoke(ctx, "/titanium.DescriptorService/ListDescriptors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *descriptorServiceClient) ListDescriptorVersions(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.ListVersionResponse, error) {
	out := new(common.ListVersionResponse)
	err := c.cc.Invoke(ctx, "/titanium.DescriptorService/ListDescriptorVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *descriptorServiceClient) GetDescriptorVersion(ctx context.Context, in *common.VersionRequest, opts ...grpc.CallOption) (*common.DescriptorDefinitionResponse, error) {
	out := new(common.DescriptorDefinitionResponse)
	err := c.cc.Invoke(ctx, "/titanium.DescriptorService/GetDescriptorVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DescriptorServiceServer is the server API for DescriptorService service.
// All implementations must embed UnimplementedDescriptorServiceServer
// for forward compatibility
type DescriptorServiceServer interface {
	// AddDescriptor is used to add specific descriptor with specific definition to the system.
	// Regular users can store a descriptor within their own scope, and any attempts to push it to a different scope will be declined.
	// Back office users can store descriptors in any scope, provided that a scope key is provided.
	// The name of the descriptor must match the name of the asset class to be mapped correctly.
	// If a descriptor with the same name already exists, it will be updated.
	//
	// Example of request for regular user :
	//
	//	{
	//	  "name":"foreign_exchange-vanilla-forwards",
	//	  "fields":[
	//	     {
	//
	// [data]="typeEnumToDisplayName[cellData]"v        "name":"submission_date",
	//
	//	        "nullable":true,
	//	        "type":"string"
	//	     },
	//	     {
	//	        "name":"submission_asset",
	//	        "nullable":true,
	//	        "type":"string"
	//	     }
	//	  ]
	//	}
	//
	// Example of request for Back Office :
	//
	//	{
	//	  "name":"foreign_exchange-vanilla-forwards",
	//	  "scope": "global",
	//	  "fields":[
	//	     {
	//	        "name":"snap_date",
	//	        "alias":"snap_date",
	//	        "type":"date",
	//	        "options":{
	//	           "format":"MM/dd/yy"
	//	        }
	//	     },
	//	     {
	//	        "name":"asset",
	//	        "alias":"asset",
	//	        "type":"string"
	//	     },
	//	     {
	//	       "name": "sub-asset",
	//	       "alias": "sub-asset",
	//	       "type": "string"
	//	     }
	//	  ]
	//	}
	//
	// Example of response :
	//
	//	{
	//	  "data":{
	//	     "uid":"98fd0526-cc88-11ec-b784-0fe7a41b45e0",
	//	     "name":"foreign_exchange-vanilla-forwards"
	//	  }
	//	}
	//
	// Example of error response :
	//
	//	{
	//	  "error":{
	//	     "code":70,
	//	     "message":"Can't add descriptor: [com.peernova.api.searchmetadata.metadata.exceptions.MetaDataServiceException: Namespace [bank11] is not valid]."
	//	  }
	//	}
	AddDescriptor(context.Context, *common.DescriptorDefinition) (*common.AcknowledgeResponse, error)
	// GetDescriptor is used to get specific descriptor definition based on get definition.
	// Regular users can retrieve only their own descriptors and descriptors associated with asset classes.
	// Back office users can retrieve any of the existing descriptors.
	//
	// Example of request :
	//
	//	{
	//	  "identifier":{
	//	     "name":"foreign_exchange-vanilla-forwards"
	//	  },
	//	  "scope":"global"
	//	}
	//
	// Example of response :
	//
	//	{
	//	   "data": "{\"name\":\"foreign_exchange-vanilla-forwards\",\"fields\":[{\"name\":\"snap_date\",\"type\":\"date\",\"options\":{\"format\":\"MM/dd/yy\"},\"alias\":\"snap_date\"},{\"name\":\"asset\",\"type\":\"string\",\"alias\":\"asset\"},{\"name\":\"sub-asset\",\"type\":\"string\",\"alias\":\"sub-asset\"},{\"name\":\"service\",\"type\":\"string\",\"nullable\":true,\"alias\":\"service\"},{\"name\":\"snap_time\",\"type\":\"string\",\"alias\":\"snap_time\"},{\"name\":\"curr_1\",\"type\":\"string\",\"alias\":\"curr_1\"},{\"name\":\"curr_2\",\"type\":\"string\",\"alias\":\"curr_2\"},{\"name\":\"onshore_offshore_curr_1\",\"type\":\"string\",\"nullable\":true,\"alias\":\"onshore_offshore_curr_1\"},{\"name\":\"onshore_offshore_curr_2\",\"type\":\"string\",\"nullable\":true,\"alias\":\"onshore_offshore_curr_2\"},{\"name\":\"instrument_type\",\"type\":\"string\",\"alias\":\"instrument_type\"},{\"name\":\"tenor\",\"type\":\"string\",\"nullable\":true,\"alias\":\"tenor\"},{\"name\":\"value_source\",\"type\":\"string\",\"nullable\":true,\"alias\":\"value_source\"},{\"name\":\"fwrd_conversion_factor\",\"type\":\"double\",\"nullable\":true,\"alias\":\"fwrd_conversion_factor\"},{\"name\":\"mid_fwrd_outright\",\"type\":\"double\",\"nullable\":true,\"alias\":\"mid_fwrd_outright\"},{\"name\":\"value_source_ref_id\",\"type\":\"string\",\"nullable\":true,\"alias\":\"value_source_ref_id\"},{\"name\":\"client\",\"type\":\"string\",\"alias\":\"client\"},{\"name\":\"spot_reference_price\",\"type\":\"double\",\"nullable\":true,\"alias\":\"spot_reference_price\"},{\"name\":\"mid_fwrd_points\",\"type\":\"double\",\"alias\":\"mid_fwrd_points\"}]}"
	//	}
	//
	// Example of error response :
	//
	//	{
	//	   "error": {
	//	       "code": 70,
	//	       "message": "Can't get descriptor: [[foreign_exchange-vanilla-forwards1] of service [DESCRIPTOR] does not exist in namespace [global]]."
	//	   }
	//	}
	GetDescriptor(context.Context, *common.GetDefinition) (*common.DescriptorDefinitionResponse, error)
	// EnableDescriptor is used to enable specific descriptor.
	//
	// Example of request :
	//
	//	{
	//	 "name" : "foreign_exchange-vanilla-forwards",
	//	 "scope": "global"
	//	}
	//
	// Example of response :
	//
	//	{
	//	   "data": {
	//	       "uid": "",
	//	       "name": "foreign_exchange-vanilla-forwards"
	//	   }
	//	}
	EnableDescriptor(context.Context, *common.EnableDisableRequest) (*common.AcknowledgeResponse, error)
	// DisableDescriptor is used to disable specific descriptor.
	// Example of response :
	//
	//	{
	//	   "data": {
	//	       "uid": "",
	//	       "name": "foreign_exchange-vanilla-forwards"
	//	   }
	//	}
	DisableDescriptor(context.Context, *common.EnableDisableRequest) (*common.AcknowledgeResponse, error)
	// ListDescriptors returns list of specific descriptors according to request.
	//
	// Example of request :
	//
	//	{
	//	  "scope":"global"
	//	}
	//
	// Example of response :
	//
	//	{
	//	   "data": {
	//	       "results": [
	//	           {
	//	               "uid": "",
	//	               "name": "foreign_exchange-vanilla-options"
	//	           },
	//	           {
	//	               "uid": "",
	//	               "name": "foreign_exchange-exotics-barriers_and_digitals"
	//	           },
	//	           {
	//	               "uid": "",
	//	               "name": "foreign_exchange-exotics-tarfs"
	//	           }
	//	       ]
	//	   }
	//	}
	ListDescriptors(context.Context, *common.ListRequest) (*common.DescriptorList, error)
	// ListDescriptorVersions returns list of version of the specific descriptor versions.
	//
	// Example of request :
	//
	//	{
	//	  "scope":"global",
	//	  "identifier":{
	//	     "name":"foreign_exchange-vanilla-forwards"
	//	  }
	//	}
	//
	//	Example of response : {
	//	   "data": {
	//	       "versions": [
	//	           {
	//	               "versionId": "fM9AukEqTJXKOcbW_tQ7Sfr4Clp5qinKq_liXZYzyiI=",
	//	               "createdAt": "2022-06-14 10:57:42.0"
	//	           },
	//	           {
	//	               "versionId": "LmVlkPbnsUKFBw8qIbUHEzBsRrcnG_BSMnopA5Ptd7I=",
	//	               "createdAt": "2022-06-14 10:20:48.0"
	//	           }
	//	       ]
	//	   }
	//	}
	ListDescriptorVersions(context.Context, *common.GetDefinition) (*common.ListVersionResponse, error)
	// GetDescriptorVersion returns current version of the specific descriptor.
	//
	// Example of response :
	// {
	// "data":"{\"name\":\"fx_test_for_bank1\",\"fields\":[{\"name\":\"submission_date\",\"type\":\"date\",\"options\":{\"format\":\"MM/dd/yyyy\"},\"alias\":\"date12\"},{\"name\":\"submission_asset\",\"type\":\"string\",\"nullable\":true}],\"options\":{\"DEDUPLICATION\":{\"GROUP_BY\":[\"submission_date\",\"submission_asset\"]}}}"
	// }
	GetDescriptorVersion(context.Context, *common.VersionRequest) (*common.DescriptorDefinitionResponse, error)
	mustEmbedUnimplementedDescriptorServiceServer()
}

// UnimplementedDescriptorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDescriptorServiceServer struct {
}

func (UnimplementedDescriptorServiceServer) AddDescriptor(context.Context, *common.DescriptorDefinition) (*common.AcknowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDescriptor not implemented")
}
func (UnimplementedDescriptorServiceServer) GetDescriptor(context.Context, *common.GetDefinition) (*common.DescriptorDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDescriptor not implemented")
}
func (UnimplementedDescriptorServiceServer) EnableDescriptor(context.Context, *common.EnableDisableRequest) (*common.AcknowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableDescriptor not implemented")
}
func (UnimplementedDescriptorServiceServer) DisableDescriptor(context.Context, *common.EnableDisableRequest) (*common.AcknowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableDescriptor not implemented")
}
func (UnimplementedDescriptorServiceServer) ListDescriptors(context.Context, *common.ListRequest) (*common.DescriptorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDescriptors not implemented")
}
func (UnimplementedDescriptorServiceServer) ListDescriptorVersions(context.Context, *common.GetDefinition) (*common.ListVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDescriptorVersions not implemented")
}
func (UnimplementedDescriptorServiceServer) GetDescriptorVersion(context.Context, *common.VersionRequest) (*common.DescriptorDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDescriptorVersion not implemented")
}
func (UnimplementedDescriptorServiceServer) mustEmbedUnimplementedDescriptorServiceServer() {}

// UnsafeDescriptorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DescriptorServiceServer will
// result in compilation errors.
type UnsafeDescriptorServiceServer interface {
	mustEmbedUnimplementedDescriptorServiceServer()
}

func RegisterDescriptorServiceServer(s grpc.ServiceRegistrar, srv DescriptorServiceServer) {
	s.RegisterService(&DescriptorService_ServiceDesc, srv)
}

func _DescriptorService_AddDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.DescriptorDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DescriptorServiceServer).AddDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DescriptorService/AddDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DescriptorServiceServer).AddDescriptor(ctx, req.(*common.DescriptorDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _DescriptorService_GetDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DescriptorServiceServer).GetDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DescriptorService/GetDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DescriptorServiceServer).GetDescriptor(ctx, req.(*common.GetDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _DescriptorService_EnableDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.EnableDisableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DescriptorServiceServer).EnableDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DescriptorService/EnableDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DescriptorServiceServer).EnableDescriptor(ctx, req.(*common.EnableDisableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DescriptorService_DisableDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.EnableDisableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DescriptorServiceServer).DisableDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DescriptorService/DisableDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DescriptorServiceServer).DisableDescriptor(ctx, req.(*common.EnableDisableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DescriptorService_ListDescriptors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DescriptorServiceServer).ListDescriptors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DescriptorService/ListDescriptors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DescriptorServiceServer).ListDescriptors(ctx, req.(*common.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DescriptorService_ListDescriptorVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DescriptorServiceServer).ListDescriptorVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DescriptorService/ListDescriptorVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DescriptorServiceServer).ListDescriptorVersions(ctx, req.(*common.GetDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _DescriptorService_GetDescriptorVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DescriptorServiceServer).GetDescriptorVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DescriptorService/GetDescriptorVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DescriptorServiceServer).GetDescriptorVersion(ctx, req.(*common.VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DescriptorService_ServiceDesc is the grpc.ServiceDesc for DescriptorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DescriptorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.DescriptorService",
	HandlerType: (*DescriptorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDescriptor",
			Handler:    _DescriptorService_AddDescriptor_Handler,
		},
		{
			MethodName: "GetDescriptor",
			Handler:    _DescriptorService_GetDescriptor_Handler,
		},
		{
			MethodName: "EnableDescriptor",
			Handler:    _DescriptorService_EnableDescriptor_Handler,
		},
		{
			MethodName: "DisableDescriptor",
			Handler:    _DescriptorService_DisableDescriptor_Handler,
		},
		{
			MethodName: "ListDescriptors",
			Handler:    _DescriptorService_ListDescriptors_Handler,
		},
		{
			MethodName: "ListDescriptorVersions",
			Handler:    _DescriptorService_ListDescriptorVersions_Handler,
		},
		{
			MethodName: "GetDescriptorVersion",
			Handler:    _DescriptorService_GetDescriptorVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/descriptor_service.proto",
}

// DbDescriptorServiceClient is the client API for DbDescriptorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DbDescriptorServiceClient interface {
	AddDbDescriptor(ctx context.Context, in *common.DescriptorDefinition, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error)
	GetDbDescriptor(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.DescriptorDefinitionResponse, error)
	EnableDbDescriptor(ctx context.Context, in *common.EnableDisableRequest, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error)
	DisableDbDescriptor(ctx context.Context, in *common.EnableDisableRequest, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error)
	ListDbDescriptors(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*common.DescriptorList, error)
	ListDbDescriptorVersions(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.ListVersionResponse, error)
	GetDbDescriptorVersion(ctx context.Context, in *common.VersionRequest, opts ...grpc.CallOption) (*common.DescriptorDefinitionResponse, error)
}

type dbDescriptorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDbDescriptorServiceClient(cc grpc.ClientConnInterface) DbDescriptorServiceClient {
	return &dbDescriptorServiceClient{cc}
}

func (c *dbDescriptorServiceClient) AddDbDescriptor(ctx context.Context, in *common.DescriptorDefinition, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error) {
	out := new(common.AcknowledgeResponse)
	err := c.cc.Invoke(ctx, "/titanium.DbDescriptorService/AddDbDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbDescriptorServiceClient) GetDbDescriptor(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.DescriptorDefinitionResponse, error) {
	out := new(common.DescriptorDefinitionResponse)
	err := c.cc.Invoke(ctx, "/titanium.DbDescriptorService/GetDbDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbDescriptorServiceClient) EnableDbDescriptor(ctx context.Context, in *common.EnableDisableRequest, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error) {
	out := new(common.AcknowledgeResponse)
	err := c.cc.Invoke(ctx, "/titanium.DbDescriptorService/EnableDbDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbDescriptorServiceClient) DisableDbDescriptor(ctx context.Context, in *common.EnableDisableRequest, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error) {
	out := new(common.AcknowledgeResponse)
	err := c.cc.Invoke(ctx, "/titanium.DbDescriptorService/DisableDbDescriptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbDescriptorServiceClient) ListDbDescriptors(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*common.DescriptorList, error) {
	out := new(common.DescriptorList)
	err := c.cc.Invoke(ctx, "/titanium.DbDescriptorService/ListDbDescriptors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbDescriptorServiceClient) ListDbDescriptorVersions(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.ListVersionResponse, error) {
	out := new(common.ListVersionResponse)
	err := c.cc.Invoke(ctx, "/titanium.DbDescriptorService/ListDbDescriptorVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbDescriptorServiceClient) GetDbDescriptorVersion(ctx context.Context, in *common.VersionRequest, opts ...grpc.CallOption) (*common.DescriptorDefinitionResponse, error) {
	out := new(common.DescriptorDefinitionResponse)
	err := c.cc.Invoke(ctx, "/titanium.DbDescriptorService/GetDbDescriptorVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DbDescriptorServiceServer is the server API for DbDescriptorService service.
// All implementations must embed UnimplementedDbDescriptorServiceServer
// for forward compatibility
type DbDescriptorServiceServer interface {
	AddDbDescriptor(context.Context, *common.DescriptorDefinition) (*common.AcknowledgeResponse, error)
	GetDbDescriptor(context.Context, *common.GetDefinition) (*common.DescriptorDefinitionResponse, error)
	EnableDbDescriptor(context.Context, *common.EnableDisableRequest) (*common.AcknowledgeResponse, error)
	DisableDbDescriptor(context.Context, *common.EnableDisableRequest) (*common.AcknowledgeResponse, error)
	ListDbDescriptors(context.Context, *common.ListRequest) (*common.DescriptorList, error)
	ListDbDescriptorVersions(context.Context, *common.GetDefinition) (*common.ListVersionResponse, error)
	GetDbDescriptorVersion(context.Context, *common.VersionRequest) (*common.DescriptorDefinitionResponse, error)
	mustEmbedUnimplementedDbDescriptorServiceServer()
}

// UnimplementedDbDescriptorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDbDescriptorServiceServer struct {
}

func (UnimplementedDbDescriptorServiceServer) AddDbDescriptor(context.Context, *common.DescriptorDefinition) (*common.AcknowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDbDescriptor not implemented")
}
func (UnimplementedDbDescriptorServiceServer) GetDbDescriptor(context.Context, *common.GetDefinition) (*common.DescriptorDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDbDescriptor not implemented")
}
func (UnimplementedDbDescriptorServiceServer) EnableDbDescriptor(context.Context, *common.EnableDisableRequest) (*common.AcknowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableDbDescriptor not implemented")
}
func (UnimplementedDbDescriptorServiceServer) DisableDbDescriptor(context.Context, *common.EnableDisableRequest) (*common.AcknowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableDbDescriptor not implemented")
}
func (UnimplementedDbDescriptorServiceServer) ListDbDescriptors(context.Context, *common.ListRequest) (*common.DescriptorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDbDescriptors not implemented")
}
func (UnimplementedDbDescriptorServiceServer) ListDbDescriptorVersions(context.Context, *common.GetDefinition) (*common.ListVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDbDescriptorVersions not implemented")
}
func (UnimplementedDbDescriptorServiceServer) GetDbDescriptorVersion(context.Context, *common.VersionRequest) (*common.DescriptorDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDbDescriptorVersion not implemented")
}
func (UnimplementedDbDescriptorServiceServer) mustEmbedUnimplementedDbDescriptorServiceServer() {}

// UnsafeDbDescriptorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DbDescriptorServiceServer will
// result in compilation errors.
type UnsafeDbDescriptorServiceServer interface {
	mustEmbedUnimplementedDbDescriptorServiceServer()
}

func RegisterDbDescriptorServiceServer(s grpc.ServiceRegistrar, srv DbDescriptorServiceServer) {
	s.RegisterService(&DbDescriptorService_ServiceDesc, srv)
}

func _DbDescriptorService_AddDbDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.DescriptorDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbDescriptorServiceServer).AddDbDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DbDescriptorService/AddDbDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbDescriptorServiceServer).AddDbDescriptor(ctx, req.(*common.DescriptorDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbDescriptorService_GetDbDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbDescriptorServiceServer).GetDbDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DbDescriptorService/GetDbDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbDescriptorServiceServer).GetDbDescriptor(ctx, req.(*common.GetDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbDescriptorService_EnableDbDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.EnableDisableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbDescriptorServiceServer).EnableDbDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DbDescriptorService/EnableDbDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbDescriptorServiceServer).EnableDbDescriptor(ctx, req.(*common.EnableDisableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbDescriptorService_DisableDbDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.EnableDisableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbDescriptorServiceServer).DisableDbDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DbDescriptorService/DisableDbDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbDescriptorServiceServer).DisableDbDescriptor(ctx, req.(*common.EnableDisableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbDescriptorService_ListDbDescriptors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbDescriptorServiceServer).ListDbDescriptors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DbDescriptorService/ListDbDescriptors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbDescriptorServiceServer).ListDbDescriptors(ctx, req.(*common.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbDescriptorService_ListDbDescriptorVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbDescriptorServiceServer).ListDbDescriptorVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DbDescriptorService/ListDbDescriptorVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbDescriptorServiceServer).ListDbDescriptorVersions(ctx, req.(*common.GetDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbDescriptorService_GetDbDescriptorVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbDescriptorServiceServer).GetDbDescriptorVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.DbDescriptorService/GetDbDescriptorVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbDescriptorServiceServer).GetDbDescriptorVersion(ctx, req.(*common.VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DbDescriptorService_ServiceDesc is the grpc.ServiceDesc for DbDescriptorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DbDescriptorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.DbDescriptorService",
	HandlerType: (*DbDescriptorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDbDescriptor",
			Handler:    _DbDescriptorService_AddDbDescriptor_Handler,
		},
		{
			MethodName: "GetDbDescriptor",
			Handler:    _DbDescriptorService_GetDbDescriptor_Handler,
		},
		{
			MethodName: "EnableDbDescriptor",
			Handler:    _DbDescriptorService_EnableDbDescriptor_Handler,
		},
		{
			MethodName: "DisableDbDescriptor",
			Handler:    _DbDescriptorService_DisableDbDescriptor_Handler,
		},
		{
			MethodName: "ListDbDescriptors",
			Handler:    _DbDescriptorService_ListDbDescriptors_Handler,
		},
		{
			MethodName: "ListDbDescriptorVersions",
			Handler:    _DbDescriptorService_ListDbDescriptorVersions_Handler,
		},
		{
			MethodName: "GetDbDescriptorVersion",
			Handler:    _DbDescriptorService_GetDbDescriptorVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/descriptor_service.proto",
}
