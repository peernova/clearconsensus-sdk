// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UniqueKeyServiceClient is the client API for UniqueKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UniqueKeyServiceClient interface {
	// AddUniqueKey is used to add a new unique key definition to the system.
	//
	// Example of request :
	//
	//	{
	//	  "name":"foreign_exchange-vanilla-forwards",
	//	  "scope":"global",
	//	  "uniqueKey":[
	//	     "snap_date",
	//	     "asset",
	//	     "service",
	//	     "client",
	//	     "service",
	//	     "tenor",
	//	     "snap_time",
	//	     "instrument_type",
	//	     "spot_reference_price",
	//	     "mid_fwrd_outright",
	//	     "mid_fwrd_points",
	//	     "onshore_offshore_curr_1",
	//	     "onshore_offshore_curr_2"
	//	  ]
	//	}
	AddUniqueKey(ctx context.Context, in *common.UniqueKeyDefinition, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error)
	// GetUniqueKey is used to retrieve a unique key definition by its scope and name.
	// Request:
	//
	//	{
	//	  "identifier":{
	//	     "name":"foreign_exchange-vanilla-forwards"
	//	  },
	//	  "scope":"global"
	//	}
	//
	// Response:
	//
	//	{
	//	   "data": {
	//	       "name": "foreign_exchange-vanilla-forwards",
	//	       "scope": "global",
	//	       "uniqueKey": [
	//	           "snap_date",
	//	           "asset",
	//	           "service",
	//	           "client",
	//	           "service",
	//	           "tenor",
	//	           "snap_time",
	//	           "instrument_type",
	//	           "spot_reference_price",
	//	           "mid_fwrd_outright",
	//	           "mid_fwrd_points",
	//	           "onshore_offshore_curr_1",
	//	           "onshore_offshore_curr_2"
	//	       ],
	//	       "orderBy": [
	//	           "__input_row_num"
	//	       ],
	//	       "order": "ASC"
	//	   }
	//	}
	GetUniqueKey(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.UniqueKeyDefinitionResponse, error)
	// ListUniqueKeys is used to retrieve a list of all unique key definitions in the system.
	// Request:
	//
	//	{
	//	  "scope":"global"
	//	}
	//
	// Response:
	//
	//	{
	//	   "data": {
	//	       "results": [
	//	           {
	//	               "name": "foreign_exchange-vanilla-forwards",
	//	               "scope": "global",
	//	               "uniqueKey": [
	//	                   "asset",
	//	                   "service",
	//	                   "sub-asset",
	//	                   "instrument_type",
	//	                   "tenor",
	//	                   "snap_date",
	//	                   "snap_time",
	//	                   "curr_1",
	//	                   "curr_2",
	//	                   "onshore_offshore_curr_1",
	//	                   "onshore_offshore_curr_2"
	//	               ],
	//	               "orderBy": [
	//	                   "__input_row_num"
	//	               ],
	//	               "order": "ASC"
	//	           },
	//	           {
	//	               "name": "foreign_exchange-vanilla-options",
	//	               "scope": "global",
	//	               "uniqueKey": [
	//	                   "snap_date",
	//	                   "asset",
	//	                   "service",
	//	                   "snap_time",
	//	                   "instrument_type",
	//	                   "option_instrument_parameter",
	//	                   "exercise_style",
	//	                   "option_execution_cut_time",
	//	                   "curr_1",
	//	                   "curr_2",
	//	                   "tenor",
	//	                   "delta",
	//	                   "vol_format",
	//	                   "instrument_convention",
	//	                   "delta_convention",
	//	                   "premium_currency",
	//	                   "settlement_convention"
	//	               ],
	//	               "orderBy": [
	//	                   "__input_row_num"
	//	               ],
	//	               "order": "ASC"
	//	           }
	//	       ]
	//	   }
	//	}
	ListUniqueKeys(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*common.ListUniqueKeysResponse, error)
	// ListUniqueKeyVersions is used to retrieve a list of all versions of a specific unique key definition by its scope and name.
	// Request:
	//
	//	{
	//	  "scope":"global",
	//	  "identifier": {
	//	       "name": "foreign_exchange-vanilla-forwards"
	//	   }
	//	}
	//
	// Response:
	//
	//	{
	//	   "data": {
	//	       "versions": [
	//	           {
	//	               "versionId":"0bmhRR-7hISwkb_H2MvIqafpJCAoy3YgEySZjntZF9o=",
	//	               "createdAt": "2022-08-22 15:23:44.0"
	//	           }
	//	       ]
	//	   }
	//	}
	ListUniqueKeyVersions(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.ListVersionResponse, error)
	// GetUniqueKeyVersion is used to retrieve a specific version of a unique key definition by its scope, name, and version ID.
	// Response:
	//
	//	{
	//	   "data": {
	//	       "name": "foreign_exchange-vanilla-forwards",
	//	       "scope": "global",
	//	       "uniqueKey": [
	//	           "asset",
	//	           "service",
	//	           "sub-asset",
	//	           "instrument_type",
	//	           "tenor",
	//	           "snap_date",
	//	           "snap_time",
	//	           "curr_1",
	//	           "curr_2",
	//	           "onshore_offshore_curr_1",
	//	           "onshore_offshore_curr_2"
	//	       ],
	//	       "orderBy": [
	//	           "__input_row_num"
	//	       ],
	//	       "order": "ASC"
	//	   }
	//	}
	GetUniqueKeyVersion(ctx context.Context, in *common.VersionRequest, opts ...grpc.CallOption) (*common.UniqueKeyDefinitionResponse, error)
}

type uniqueKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUniqueKeyServiceClient(cc grpc.ClientConnInterface) UniqueKeyServiceClient {
	return &uniqueKeyServiceClient{cc}
}

func (c *uniqueKeyServiceClient) AddUniqueKey(ctx context.Context, in *common.UniqueKeyDefinition, opts ...grpc.CallOption) (*common.AcknowledgeResponse, error) {
	out := new(common.AcknowledgeResponse)
	err := c.cc.Invoke(ctx, "/titanium.UniqueKeyService/AddUniqueKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uniqueKeyServiceClient) GetUniqueKey(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.UniqueKeyDefinitionResponse, error) {
	out := new(common.UniqueKeyDefinitionResponse)
	err := c.cc.Invoke(ctx, "/titanium.UniqueKeyService/GetUniqueKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uniqueKeyServiceClient) ListUniqueKeys(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*common.ListUniqueKeysResponse, error) {
	out := new(common.ListUniqueKeysResponse)
	err := c.cc.Invoke(ctx, "/titanium.UniqueKeyService/ListUniqueKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uniqueKeyServiceClient) ListUniqueKeyVersions(ctx context.Context, in *common.GetDefinition, opts ...grpc.CallOption) (*common.ListVersionResponse, error) {
	out := new(common.ListVersionResponse)
	err := c.cc.Invoke(ctx, "/titanium.UniqueKeyService/ListUniqueKeyVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uniqueKeyServiceClient) GetUniqueKeyVersion(ctx context.Context, in *common.VersionRequest, opts ...grpc.CallOption) (*common.UniqueKeyDefinitionResponse, error) {
	out := new(common.UniqueKeyDefinitionResponse)
	err := c.cc.Invoke(ctx, "/titanium.UniqueKeyService/GetUniqueKeyVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UniqueKeyServiceServer is the server API for UniqueKeyService service.
// All implementations must embed UnimplementedUniqueKeyServiceServer
// for forward compatibility
type UniqueKeyServiceServer interface {
	// AddUniqueKey is used to add a new unique key definition to the system.
	//
	// Example of request :
	//
	//	{
	//	  "name":"foreign_exchange-vanilla-forwards",
	//	  "scope":"global",
	//	  "uniqueKey":[
	//	     "snap_date",
	//	     "asset",
	//	     "service",
	//	     "client",
	//	     "service",
	//	     "tenor",
	//	     "snap_time",
	//	     "instrument_type",
	//	     "spot_reference_price",
	//	     "mid_fwrd_outright",
	//	     "mid_fwrd_points",
	//	     "onshore_offshore_curr_1",
	//	     "onshore_offshore_curr_2"
	//	  ]
	//	}
	AddUniqueKey(context.Context, *common.UniqueKeyDefinition) (*common.AcknowledgeResponse, error)
	// GetUniqueKey is used to retrieve a unique key definition by its scope and name.
	// Request:
	//
	//	{
	//	  "identifier":{
	//	     "name":"foreign_exchange-vanilla-forwards"
	//	  },
	//	  "scope":"global"
	//	}
	//
	// Response:
	//
	//	{
	//	   "data": {
	//	       "name": "foreign_exchange-vanilla-forwards",
	//	       "scope": "global",
	//	       "uniqueKey": [
	//	           "snap_date",
	//	           "asset",
	//	           "service",
	//	           "client",
	//	           "service",
	//	           "tenor",
	//	           "snap_time",
	//	           "instrument_type",
	//	           "spot_reference_price",
	//	           "mid_fwrd_outright",
	//	           "mid_fwrd_points",
	//	           "onshore_offshore_curr_1",
	//	           "onshore_offshore_curr_2"
	//	       ],
	//	       "orderBy": [
	//	           "__input_row_num"
	//	       ],
	//	       "order": "ASC"
	//	   }
	//	}
	GetUniqueKey(context.Context, *common.GetDefinition) (*common.UniqueKeyDefinitionResponse, error)
	// ListUniqueKeys is used to retrieve a list of all unique key definitions in the system.
	// Request:
	//
	//	{
	//	  "scope":"global"
	//	}
	//
	// Response:
	//
	//	{
	//	   "data": {
	//	       "results": [
	//	           {
	//	               "name": "foreign_exchange-vanilla-forwards",
	//	               "scope": "global",
	//	               "uniqueKey": [
	//	                   "asset",
	//	                   "service",
	//	                   "sub-asset",
	//	                   "instrument_type",
	//	                   "tenor",
	//	                   "snap_date",
	//	                   "snap_time",
	//	                   "curr_1",
	//	                   "curr_2",
	//	                   "onshore_offshore_curr_1",
	//	                   "onshore_offshore_curr_2"
	//	               ],
	//	               "orderBy": [
	//	                   "__input_row_num"
	//	               ],
	//	               "order": "ASC"
	//	           },
	//	           {
	//	               "name": "foreign_exchange-vanilla-options",
	//	               "scope": "global",
	//	               "uniqueKey": [
	//	                   "snap_date",
	//	                   "asset",
	//	                   "service",
	//	                   "snap_time",
	//	                   "instrument_type",
	//	                   "option_instrument_parameter",
	//	                   "exercise_style",
	//	                   "option_execution_cut_time",
	//	                   "curr_1",
	//	                   "curr_2",
	//	                   "tenor",
	//	                   "delta",
	//	                   "vol_format",
	//	                   "instrument_convention",
	//	                   "delta_convention",
	//	                   "premium_currency",
	//	                   "settlement_convention"
	//	               ],
	//	               "orderBy": [
	//	                   "__input_row_num"
	//	               ],
	//	               "order": "ASC"
	//	           }
	//	       ]
	//	   }
	//	}
	ListUniqueKeys(context.Context, *common.ListRequest) (*common.ListUniqueKeysResponse, error)
	// ListUniqueKeyVersions is used to retrieve a list of all versions of a specific unique key definition by its scope and name.
	// Request:
	//
	//	{
	//	  "scope":"global",
	//	  "identifier": {
	//	       "name": "foreign_exchange-vanilla-forwards"
	//	   }
	//	}
	//
	// Response:
	//
	//	{
	//	   "data": {
	//	       "versions": [
	//	           {
	//	               "versionId":"0bmhRR-7hISwkb_H2MvIqafpJCAoy3YgEySZjntZF9o=",
	//	               "createdAt": "2022-08-22 15:23:44.0"
	//	           }
	//	       ]
	//	   }
	//	}
	ListUniqueKeyVersions(context.Context, *common.GetDefinition) (*common.ListVersionResponse, error)
	// GetUniqueKeyVersion is used to retrieve a specific version of a unique key definition by its scope, name, and version ID.
	// Response:
	//
	//	{
	//	   "data": {
	//	       "name": "foreign_exchange-vanilla-forwards",
	//	       "scope": "global",
	//	       "uniqueKey": [
	//	           "asset",
	//	           "service",
	//	           "sub-asset",
	//	           "instrument_type",
	//	           "tenor",
	//	           "snap_date",
	//	           "snap_time",
	//	           "curr_1",
	//	           "curr_2",
	//	           "onshore_offshore_curr_1",
	//	           "onshore_offshore_curr_2"
	//	       ],
	//	       "orderBy": [
	//	           "__input_row_num"
	//	       ],
	//	       "order": "ASC"
	//	   }
	//	}
	GetUniqueKeyVersion(context.Context, *common.VersionRequest) (*common.UniqueKeyDefinitionResponse, error)
	mustEmbedUnimplementedUniqueKeyServiceServer()
}

// UnimplementedUniqueKeyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUniqueKeyServiceServer struct {
}

func (UnimplementedUniqueKeyServiceServer) AddUniqueKey(context.Context, *common.UniqueKeyDefinition) (*common.AcknowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUniqueKey not implemented")
}
func (UnimplementedUniqueKeyServiceServer) GetUniqueKey(context.Context, *common.GetDefinition) (*common.UniqueKeyDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniqueKey not implemented")
}
func (UnimplementedUniqueKeyServiceServer) ListUniqueKeys(context.Context, *common.ListRequest) (*common.ListUniqueKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUniqueKeys not implemented")
}
func (UnimplementedUniqueKeyServiceServer) ListUniqueKeyVersions(context.Context, *common.GetDefinition) (*common.ListVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUniqueKeyVersions not implemented")
}
func (UnimplementedUniqueKeyServiceServer) GetUniqueKeyVersion(context.Context, *common.VersionRequest) (*common.UniqueKeyDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniqueKeyVersion not implemented")
}
func (UnimplementedUniqueKeyServiceServer) mustEmbedUnimplementedUniqueKeyServiceServer() {}

// UnsafeUniqueKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UniqueKeyServiceServer will
// result in compilation errors.
type UnsafeUniqueKeyServiceServer interface {
	mustEmbedUnimplementedUniqueKeyServiceServer()
}

func RegisterUniqueKeyServiceServer(s grpc.ServiceRegistrar, srv UniqueKeyServiceServer) {
	s.RegisterService(&UniqueKeyService_ServiceDesc, srv)
}

func _UniqueKeyService_AddUniqueKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UniqueKeyDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniqueKeyServiceServer).AddUniqueKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.UniqueKeyService/AddUniqueKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniqueKeyServiceServer).AddUniqueKey(ctx, req.(*common.UniqueKeyDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniqueKeyService_GetUniqueKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniqueKeyServiceServer).GetUniqueKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.UniqueKeyService/GetUniqueKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniqueKeyServiceServer).GetUniqueKey(ctx, req.(*common.GetDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniqueKeyService_ListUniqueKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniqueKeyServiceServer).ListUniqueKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.UniqueKeyService/ListUniqueKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniqueKeyServiceServer).ListUniqueKeys(ctx, req.(*common.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniqueKeyService_ListUniqueKeyVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniqueKeyServiceServer).ListUniqueKeyVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.UniqueKeyService/ListUniqueKeyVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniqueKeyServiceServer).ListUniqueKeyVersions(ctx, req.(*common.GetDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniqueKeyService_GetUniqueKeyVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniqueKeyServiceServer).GetUniqueKeyVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.UniqueKeyService/GetUniqueKeyVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniqueKeyServiceServer).GetUniqueKeyVersion(ctx, req.(*common.VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UniqueKeyService_ServiceDesc is the grpc.ServiceDesc for UniqueKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UniqueKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.UniqueKeyService",
	HandlerType: (*UniqueKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUniqueKey",
			Handler:    _UniqueKeyService_AddUniqueKey_Handler,
		},
		{
			MethodName: "GetUniqueKey",
			Handler:    _UniqueKeyService_GetUniqueKey_Handler,
		},
		{
			MethodName: "ListUniqueKeys",
			Handler:    _UniqueKeyService_ListUniqueKeys_Handler,
		},
		{
			MethodName: "ListUniqueKeyVersions",
			Handler:    _UniqueKeyService_ListUniqueKeyVersions_Handler,
		},
		{
			MethodName: "GetUniqueKeyVersion",
			Handler:    _UniqueKeyService_GetUniqueKeyVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/unique_key_service.proto",
}
