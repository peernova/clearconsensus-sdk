// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package public

import (
	context "context"
	common "github.com/peernova/clearconsensus-sdk/sdk/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	OnBoard(ctx context.Context, in *OnBoardRequest, opts ...grpc.CallOption) (*common.MessageResponse, error)
	RunCalculator(ctx context.Context, in *RunCalculatorRequest, opts ...grpc.CallOption) (*common.MessageResponse, error)
	UploadEvaluatedPrice(ctx context.Context, in *UploadEvaluatedPriceRequest, opts ...grpc.CallOption) (*common.MessageResponse, error)
	RunConsensus(ctx context.Context, in *RunConsensusRequest, opts ...grpc.CallOption) (*common.MessageResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) OnBoard(ctx context.Context, in *OnBoardRequest, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/titanium.AdminService/OnBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RunCalculator(ctx context.Context, in *RunCalculatorRequest, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/titanium.AdminService/RunCalculator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UploadEvaluatedPrice(ctx context.Context, in *UploadEvaluatedPriceRequest, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/titanium.AdminService/UploadEvaluatedPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RunConsensus(ctx context.Context, in *RunConsensusRequest, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/titanium.AdminService/RunConsensus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	OnBoard(context.Context, *OnBoardRequest) (*common.MessageResponse, error)
	RunCalculator(context.Context, *RunCalculatorRequest) (*common.MessageResponse, error)
	UploadEvaluatedPrice(context.Context, *UploadEvaluatedPriceRequest) (*common.MessageResponse, error)
	RunConsensus(context.Context, *RunConsensusRequest) (*common.MessageResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) OnBoard(context.Context, *OnBoardRequest) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnBoard not implemented")
}
func (UnimplementedAdminServiceServer) RunCalculator(context.Context, *RunCalculatorRequest) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCalculator not implemented")
}
func (UnimplementedAdminServiceServer) UploadEvaluatedPrice(context.Context, *UploadEvaluatedPriceRequest) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadEvaluatedPrice not implemented")
}
func (UnimplementedAdminServiceServer) RunConsensus(context.Context, *RunConsensusRequest) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunConsensus not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_OnBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).OnBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.AdminService/OnBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).OnBoard(ctx, req.(*OnBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RunCalculator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCalculatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RunCalculator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.AdminService/RunCalculator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RunCalculator(ctx, req.(*RunCalculatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UploadEvaluatedPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadEvaluatedPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UploadEvaluatedPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.AdminService/UploadEvaluatedPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UploadEvaluatedPrice(ctx, req.(*UploadEvaluatedPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RunConsensus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunConsensusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RunConsensus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/titanium.AdminService/RunConsensus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RunConsensus(ctx, req.(*RunConsensusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "titanium.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnBoard",
			Handler:    _AdminService_OnBoard_Handler,
		},
		{
			MethodName: "RunCalculator",
			Handler:    _AdminService_RunCalculator_Handler,
		},
		{
			MethodName: "UploadEvaluatedPrice",
			Handler:    _AdminService_UploadEvaluatedPrice_Handler,
		},
		{
			MethodName: "RunConsensus",
			Handler:    _AdminService_RunConsensus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/admin_service.proto",
}
