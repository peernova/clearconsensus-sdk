/*
 * clearconsensus-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RpcStatus;
import org.openapitools.client.model.TitaniumDescriptorPairBasedAcknowledgeResponse;
import org.openapitools.client.model.TitaniumDescriptorPairBasedGetDefinition;
import org.openapitools.client.model.TitaniumListRequest;
import org.openapitools.client.model.TitaniumListVersionResponse;
import org.openapitools.client.model.TitaniumMappingRuleDefinition;
import org.openapitools.client.model.TitaniumMappingRuleList;
import org.openapitools.client.model.TitaniumMappingRuleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MappingServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MappingServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MappingServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for mappingServiceAddMappingRule
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mappingServiceAddMappingRuleCall(TitaniumMappingRuleDefinition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/mapping/rule/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mappingServiceAddMappingRuleValidateBeforeCall(TitaniumMappingRuleDefinition body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling mappingServiceAddMappingRule(Async)");
        }
        

        okhttp3.Call localVarCall = mappingServiceAddMappingRuleCall(body, _callback);
        return localVarCall;

    }

    /**
     * AddMappingRule AddMappingRule is an API used to add a specific mapping rule to the system. The name provided for the mapping rule must match the asset class and descriptor names. If a mapping rule with the same name already exists, it will be updated. This API accepts a MappingRuleDefinition object as its parameter,which includes information about the mapping rule being added. The response from this API is a DescriptorPairBasedAcknowledgeResponse,which acknowledges the addition of the mapping rule.
     * Example of request for regular user : {   \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;transformations\&quot;:[      {         \&quot;targetColumn\&quot;:\&quot;submission_date\&quot;,         \&quot;sourceColumn\&quot;:\&quot;date\&quot;      },      {         \&quot;targetColumn\&quot;:\&quot;submission_asset\&quot;,         \&quot;rule\&quot;:\&quot;{ \\\&quot;$to_upper\\\&quot;: { \\\&quot;$trim\\\&quot; : \\\&quot;fx_test_for_bank1.submission_asset\\\&quot; }}\&quot;,         \&quot;name\&quot;: \&quot;upper case asset\&quot;,         \&quot;description\&quot;: \&quot;i am optional...\&quot;      }   ] }  Example of request for Back Office : {   \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;scope\&quot;:\&quot;global\&quot;,   \&quot;transformations\&quot;:[      {         \&quot;targetColumn\&quot;:\&quot;submission_date\&quot;,         \&quot;sourceColumn\&quot;:\&quot;another_date\&quot;      },      {         \&quot;targetColumn\&quot;:\&quot;submission_asset\&quot;,         \&quot;rule\&quot;:\&quot;{ \\\&quot;$to_upper\\\&quot;: { \\\&quot;$trim\\\&quot; : \\\&quot;fx_test_for_bank1.submission_asset\\\&quot; }}\&quot;,         \&quot;name\&quot;: \&quot;upper case asset\&quot;,         \&quot;description\&quot;: \&quot;i am optional...\&quot;      }   ] }  Example of response : {   \&quot;data\&quot;:{      \&quot;uid\&quot;:\&quot;fc8b57b7-cc90-11ec-b784-8dfc726b351f\&quot;,      \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,      \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;   } }  Example of error response : {   \&quot;error\&quot;:{      \&quot;code\&quot;:70,      \&quot;message\&quot;:\&quot;Missing argument: rule name.\&quot;   } }
     * @param body  (required)
     * @return TitaniumDescriptorPairBasedAcknowledgeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumDescriptorPairBasedAcknowledgeResponse mappingServiceAddMappingRule(TitaniumMappingRuleDefinition body) throws ApiException {
        ApiResponse<TitaniumDescriptorPairBasedAcknowledgeResponse> localVarResp = mappingServiceAddMappingRuleWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * AddMappingRule AddMappingRule is an API used to add a specific mapping rule to the system. The name provided for the mapping rule must match the asset class and descriptor names. If a mapping rule with the same name already exists, it will be updated. This API accepts a MappingRuleDefinition object as its parameter,which includes information about the mapping rule being added. The response from this API is a DescriptorPairBasedAcknowledgeResponse,which acknowledges the addition of the mapping rule.
     * Example of request for regular user : {   \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;transformations\&quot;:[      {         \&quot;targetColumn\&quot;:\&quot;submission_date\&quot;,         \&quot;sourceColumn\&quot;:\&quot;date\&quot;      },      {         \&quot;targetColumn\&quot;:\&quot;submission_asset\&quot;,         \&quot;rule\&quot;:\&quot;{ \\\&quot;$to_upper\\\&quot;: { \\\&quot;$trim\\\&quot; : \\\&quot;fx_test_for_bank1.submission_asset\\\&quot; }}\&quot;,         \&quot;name\&quot;: \&quot;upper case asset\&quot;,         \&quot;description\&quot;: \&quot;i am optional...\&quot;      }   ] }  Example of request for Back Office : {   \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;scope\&quot;:\&quot;global\&quot;,   \&quot;transformations\&quot;:[      {         \&quot;targetColumn\&quot;:\&quot;submission_date\&quot;,         \&quot;sourceColumn\&quot;:\&quot;another_date\&quot;      },      {         \&quot;targetColumn\&quot;:\&quot;submission_asset\&quot;,         \&quot;rule\&quot;:\&quot;{ \\\&quot;$to_upper\\\&quot;: { \\\&quot;$trim\\\&quot; : \\\&quot;fx_test_for_bank1.submission_asset\\\&quot; }}\&quot;,         \&quot;name\&quot;: \&quot;upper case asset\&quot;,         \&quot;description\&quot;: \&quot;i am optional...\&quot;      }   ] }  Example of response : {   \&quot;data\&quot;:{      \&quot;uid\&quot;:\&quot;fc8b57b7-cc90-11ec-b784-8dfc726b351f\&quot;,      \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,      \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;   } }  Example of error response : {   \&quot;error\&quot;:{      \&quot;code\&quot;:70,      \&quot;message\&quot;:\&quot;Missing argument: rule name.\&quot;   } }
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumDescriptorPairBasedAcknowledgeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumDescriptorPairBasedAcknowledgeResponse> mappingServiceAddMappingRuleWithHttpInfo(TitaniumMappingRuleDefinition body) throws ApiException {
        okhttp3.Call localVarCall = mappingServiceAddMappingRuleValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumDescriptorPairBasedAcknowledgeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * AddMappingRule AddMappingRule is an API used to add a specific mapping rule to the system. The name provided for the mapping rule must match the asset class and descriptor names. If a mapping rule with the same name already exists, it will be updated. This API accepts a MappingRuleDefinition object as its parameter,which includes information about the mapping rule being added. The response from this API is a DescriptorPairBasedAcknowledgeResponse,which acknowledges the addition of the mapping rule. (asynchronously)
     * Example of request for regular user : {   \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;transformations\&quot;:[      {         \&quot;targetColumn\&quot;:\&quot;submission_date\&quot;,         \&quot;sourceColumn\&quot;:\&quot;date\&quot;      },      {         \&quot;targetColumn\&quot;:\&quot;submission_asset\&quot;,         \&quot;rule\&quot;:\&quot;{ \\\&quot;$to_upper\\\&quot;: { \\\&quot;$trim\\\&quot; : \\\&quot;fx_test_for_bank1.submission_asset\\\&quot; }}\&quot;,         \&quot;name\&quot;: \&quot;upper case asset\&quot;,         \&quot;description\&quot;: \&quot;i am optional...\&quot;      }   ] }  Example of request for Back Office : {   \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;scope\&quot;:\&quot;global\&quot;,   \&quot;transformations\&quot;:[      {         \&quot;targetColumn\&quot;:\&quot;submission_date\&quot;,         \&quot;sourceColumn\&quot;:\&quot;another_date\&quot;      },      {         \&quot;targetColumn\&quot;:\&quot;submission_asset\&quot;,         \&quot;rule\&quot;:\&quot;{ \\\&quot;$to_upper\\\&quot;: { \\\&quot;$trim\\\&quot; : \\\&quot;fx_test_for_bank1.submission_asset\\\&quot; }}\&quot;,         \&quot;name\&quot;: \&quot;upper case asset\&quot;,         \&quot;description\&quot;: \&quot;i am optional...\&quot;      }   ] }  Example of response : {   \&quot;data\&quot;:{      \&quot;uid\&quot;:\&quot;fc8b57b7-cc90-11ec-b784-8dfc726b351f\&quot;,      \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,      \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;   } }  Example of error response : {   \&quot;error\&quot;:{      \&quot;code\&quot;:70,      \&quot;message\&quot;:\&quot;Missing argument: rule name.\&quot;   } }
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mappingServiceAddMappingRuleAsync(TitaniumMappingRuleDefinition body, final ApiCallback<TitaniumDescriptorPairBasedAcknowledgeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = mappingServiceAddMappingRuleValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumDescriptorPairBasedAcknowledgeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mappingServiceDisableMappingRule
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mappingServiceDisableMappingRuleCall(TitaniumDescriptorPairBasedGetDefinition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/mapping/rule/disable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mappingServiceDisableMappingRuleValidateBeforeCall(TitaniumDescriptorPairBasedGetDefinition body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling mappingServiceDisableMappingRule(Async)");
        }
        

        okhttp3.Call localVarCall = mappingServiceDisableMappingRuleCall(body, _callback);
        return localVarCall;

    }

    /**
     * DisableMappingRule is used to disable a mapping rule for a given descriptor pair. It accepts a DescriptorPairBasedGetDefinition object as its parameter, which specifies the source and destination descriptors for the mapping rule. The response from this it is a DescriptorPairBasedAcknowledgeResponse, which acknowledges the disablement of the mapping rule.
     * Request: {  \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;,  \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;  \&quot;scope\&quot;: \&quot;Zbank1\&quot; }  Response: {    \&quot;data\&quot;: {        \&quot;uid\&quot;: \&quot;\&quot;,        \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;,        \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;    } }
     * @param body  (required)
     * @return TitaniumDescriptorPairBasedAcknowledgeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumDescriptorPairBasedAcknowledgeResponse mappingServiceDisableMappingRule(TitaniumDescriptorPairBasedGetDefinition body) throws ApiException {
        ApiResponse<TitaniumDescriptorPairBasedAcknowledgeResponse> localVarResp = mappingServiceDisableMappingRuleWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * DisableMappingRule is used to disable a mapping rule for a given descriptor pair. It accepts a DescriptorPairBasedGetDefinition object as its parameter, which specifies the source and destination descriptors for the mapping rule. The response from this it is a DescriptorPairBasedAcknowledgeResponse, which acknowledges the disablement of the mapping rule.
     * Request: {  \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;,  \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;  \&quot;scope\&quot;: \&quot;Zbank1\&quot; }  Response: {    \&quot;data\&quot;: {        \&quot;uid\&quot;: \&quot;\&quot;,        \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;,        \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;    } }
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumDescriptorPairBasedAcknowledgeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumDescriptorPairBasedAcknowledgeResponse> mappingServiceDisableMappingRuleWithHttpInfo(TitaniumDescriptorPairBasedGetDefinition body) throws ApiException {
        okhttp3.Call localVarCall = mappingServiceDisableMappingRuleValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumDescriptorPairBasedAcknowledgeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DisableMappingRule is used to disable a mapping rule for a given descriptor pair. It accepts a DescriptorPairBasedGetDefinition object as its parameter, which specifies the source and destination descriptors for the mapping rule. The response from this it is a DescriptorPairBasedAcknowledgeResponse, which acknowledges the disablement of the mapping rule. (asynchronously)
     * Request: {  \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;,  \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;  \&quot;scope\&quot;: \&quot;Zbank1\&quot; }  Response: {    \&quot;data\&quot;: {        \&quot;uid\&quot;: \&quot;\&quot;,        \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;,        \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;    } }
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mappingServiceDisableMappingRuleAsync(TitaniumDescriptorPairBasedGetDefinition body, final ApiCallback<TitaniumDescriptorPairBasedAcknowledgeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = mappingServiceDisableMappingRuleValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumDescriptorPairBasedAcknowledgeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mappingServiceEnableMappingRule
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mappingServiceEnableMappingRuleCall(TitaniumDescriptorPairBasedGetDefinition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/mapping/rule/enable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mappingServiceEnableMappingRuleValidateBeforeCall(TitaniumDescriptorPairBasedGetDefinition body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling mappingServiceEnableMappingRule(Async)");
        }
        

        okhttp3.Call localVarCall = mappingServiceEnableMappingRuleCall(body, _callback);
        return localVarCall;

    }

    /**
     * EnableMappingRule is used to enable a mapping rule for a given descriptor pair. It accepts a DescriptorPairBasedGetDefinition object as its parameter, which specifies the source and destination descriptors for the mapping rule. The response from this it is a DescriptorPairBasedAcknowledgeResponse, which acknowledges the enablement of the mapping rule.
     * Request: {  \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;,  \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;  \&quot;scope\&quot;: \&quot;Zbank1\&quot; }  Response: {    \&quot;data\&quot;: {        \&quot;uid\&quot;: \&quot;\&quot;,        \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;,        \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;    } }
     * @param body  (required)
     * @return TitaniumDescriptorPairBasedAcknowledgeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumDescriptorPairBasedAcknowledgeResponse mappingServiceEnableMappingRule(TitaniumDescriptorPairBasedGetDefinition body) throws ApiException {
        ApiResponse<TitaniumDescriptorPairBasedAcknowledgeResponse> localVarResp = mappingServiceEnableMappingRuleWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * EnableMappingRule is used to enable a mapping rule for a given descriptor pair. It accepts a DescriptorPairBasedGetDefinition object as its parameter, which specifies the source and destination descriptors for the mapping rule. The response from this it is a DescriptorPairBasedAcknowledgeResponse, which acknowledges the enablement of the mapping rule.
     * Request: {  \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;,  \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;  \&quot;scope\&quot;: \&quot;Zbank1\&quot; }  Response: {    \&quot;data\&quot;: {        \&quot;uid\&quot;: \&quot;\&quot;,        \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;,        \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;    } }
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumDescriptorPairBasedAcknowledgeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumDescriptorPairBasedAcknowledgeResponse> mappingServiceEnableMappingRuleWithHttpInfo(TitaniumDescriptorPairBasedGetDefinition body) throws ApiException {
        okhttp3.Call localVarCall = mappingServiceEnableMappingRuleValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumDescriptorPairBasedAcknowledgeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * EnableMappingRule is used to enable a mapping rule for a given descriptor pair. It accepts a DescriptorPairBasedGetDefinition object as its parameter, which specifies the source and destination descriptors for the mapping rule. The response from this it is a DescriptorPairBasedAcknowledgeResponse, which acknowledges the enablement of the mapping rule. (asynchronously)
     * Request: {  \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;,  \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;  \&quot;scope\&quot;: \&quot;Zbank1\&quot; }  Response: {    \&quot;data\&quot;: {        \&quot;uid\&quot;: \&quot;\&quot;,        \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;,        \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;    } }
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mappingServiceEnableMappingRuleAsync(TitaniumDescriptorPairBasedGetDefinition body, final ApiCallback<TitaniumDescriptorPairBasedAcknowledgeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = mappingServiceEnableMappingRuleValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumDescriptorPairBasedAcknowledgeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mappingServiceGetMappingRule
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mappingServiceGetMappingRuleCall(TitaniumDescriptorPairBasedGetDefinition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/mapping/rule/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mappingServiceGetMappingRuleValidateBeforeCall(TitaniumDescriptorPairBasedGetDefinition body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling mappingServiceGetMappingRule(Async)");
        }
        

        okhttp3.Call localVarCall = mappingServiceGetMappingRuleCall(body, _callback);
        return localVarCall;

    }

    /**
     * GetMappingRule is used to retrieve a mapping rule for a given descriptor pair. It accepts a DescriptorPairBasedGetDefinition object as its parameter, which specifies the source and destination descriptors for the mapping rule. The response from this it is a MappingRuleResponse, which includes information about the retrieved mapping rule.
     * Example of request for regular user : {   \&quot;identifier\&quot;:{      \&quot;uid\&quot;:\&quot;fc8b57b7-cc90-11ec-b784-8dfc726b351f\&quot;   } } Or : {      \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,      \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot; }  Example of request for Back Office : {   \&quot;identifier\&quot;:{       \&quot;uid\&quot;:\&quot;fc8b57b7-cc90-11ec-b784-8dfc726b351f\&quot;   },   \&quot;scope\&quot;:\&quot;bank1\&quot; } Or : {   \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;scope\&quot;:\&quot;bank1\&quot; }  Example of response : { \&quot;data\&quot;: {  \&quot;uid\&quot;: \&quot;\&quot;,  \&quot;srcDescriptor\&quot;: \&quot;foreign_exchange-vanilla-options\&quot;,  \&quot;destDescriptor\&quot;: \&quot;foreign_exchange-vanilla-options\&quot;,  \&quot;transformations\&quot;: [   {    \&quot;name\&quot;: \&quot;\&quot;,    \&quot;targetColumn\&quot;: \&quot;snap_date\&quot;,    \&quot;sourceColumn\&quot;: \&quot;submission_date\&quot;,    \&quot;rule\&quot;: \&quot;\&quot;,    \&quot;description\&quot;: \&quot;\&quot;   }  ],  \&quot;scope\&quot;: \&quot;\&quot; } }  Example of error response : {   \&quot;error\&quot;:{      \&quot;code\&quot;:70,      \&quot;message\&quot;:\&quot;Can&#39;t get mapping rule: [[empty] of service [MAPPINGRULESET] does not exist in namespace [bank1]].\&quot;   } }
     * @param body  (required)
     * @return TitaniumMappingRuleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumMappingRuleResponse mappingServiceGetMappingRule(TitaniumDescriptorPairBasedGetDefinition body) throws ApiException {
        ApiResponse<TitaniumMappingRuleResponse> localVarResp = mappingServiceGetMappingRuleWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * GetMappingRule is used to retrieve a mapping rule for a given descriptor pair. It accepts a DescriptorPairBasedGetDefinition object as its parameter, which specifies the source and destination descriptors for the mapping rule. The response from this it is a MappingRuleResponse, which includes information about the retrieved mapping rule.
     * Example of request for regular user : {   \&quot;identifier\&quot;:{      \&quot;uid\&quot;:\&quot;fc8b57b7-cc90-11ec-b784-8dfc726b351f\&quot;   } } Or : {      \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,      \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot; }  Example of request for Back Office : {   \&quot;identifier\&quot;:{       \&quot;uid\&quot;:\&quot;fc8b57b7-cc90-11ec-b784-8dfc726b351f\&quot;   },   \&quot;scope\&quot;:\&quot;bank1\&quot; } Or : {   \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;scope\&quot;:\&quot;bank1\&quot; }  Example of response : { \&quot;data\&quot;: {  \&quot;uid\&quot;: \&quot;\&quot;,  \&quot;srcDescriptor\&quot;: \&quot;foreign_exchange-vanilla-options\&quot;,  \&quot;destDescriptor\&quot;: \&quot;foreign_exchange-vanilla-options\&quot;,  \&quot;transformations\&quot;: [   {    \&quot;name\&quot;: \&quot;\&quot;,    \&quot;targetColumn\&quot;: \&quot;snap_date\&quot;,    \&quot;sourceColumn\&quot;: \&quot;submission_date\&quot;,    \&quot;rule\&quot;: \&quot;\&quot;,    \&quot;description\&quot;: \&quot;\&quot;   }  ],  \&quot;scope\&quot;: \&quot;\&quot; } }  Example of error response : {   \&quot;error\&quot;:{      \&quot;code\&quot;:70,      \&quot;message\&quot;:\&quot;Can&#39;t get mapping rule: [[empty] of service [MAPPINGRULESET] does not exist in namespace [bank1]].\&quot;   } }
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumMappingRuleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumMappingRuleResponse> mappingServiceGetMappingRuleWithHttpInfo(TitaniumDescriptorPairBasedGetDefinition body) throws ApiException {
        okhttp3.Call localVarCall = mappingServiceGetMappingRuleValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumMappingRuleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetMappingRule is used to retrieve a mapping rule for a given descriptor pair. It accepts a DescriptorPairBasedGetDefinition object as its parameter, which specifies the source and destination descriptors for the mapping rule. The response from this it is a MappingRuleResponse, which includes information about the retrieved mapping rule. (asynchronously)
     * Example of request for regular user : {   \&quot;identifier\&quot;:{      \&quot;uid\&quot;:\&quot;fc8b57b7-cc90-11ec-b784-8dfc726b351f\&quot;   } } Or : {      \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,      \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot; }  Example of request for Back Office : {   \&quot;identifier\&quot;:{       \&quot;uid\&quot;:\&quot;fc8b57b7-cc90-11ec-b784-8dfc726b351f\&quot;   },   \&quot;scope\&quot;:\&quot;bank1\&quot; } Or : {   \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;scope\&quot;:\&quot;bank1\&quot; }  Example of response : { \&quot;data\&quot;: {  \&quot;uid\&quot;: \&quot;\&quot;,  \&quot;srcDescriptor\&quot;: \&quot;foreign_exchange-vanilla-options\&quot;,  \&quot;destDescriptor\&quot;: \&quot;foreign_exchange-vanilla-options\&quot;,  \&quot;transformations\&quot;: [   {    \&quot;name\&quot;: \&quot;\&quot;,    \&quot;targetColumn\&quot;: \&quot;snap_date\&quot;,    \&quot;sourceColumn\&quot;: \&quot;submission_date\&quot;,    \&quot;rule\&quot;: \&quot;\&quot;,    \&quot;description\&quot;: \&quot;\&quot;   }  ],  \&quot;scope\&quot;: \&quot;\&quot; } }  Example of error response : {   \&quot;error\&quot;:{      \&quot;code\&quot;:70,      \&quot;message\&quot;:\&quot;Can&#39;t get mapping rule: [[empty] of service [MAPPINGRULESET] does not exist in namespace [bank1]].\&quot;   } }
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mappingServiceGetMappingRuleAsync(TitaniumDescriptorPairBasedGetDefinition body, final ApiCallback<TitaniumMappingRuleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = mappingServiceGetMappingRuleValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumMappingRuleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mappingServiceGetMappingRuleVersion
     * @param scope  (required)
     * @param srcDescriptor  (required)
     * @param destDescriptor  (required)
     * @param versionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mappingServiceGetMappingRuleVersionCall(String scope, String srcDescriptor, String destDescriptor, String versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/mapping/rule/version/{scope}/{srcDescriptor}/{destDescriptor}/{versionId}"
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "srcDescriptor" + "\\}", localVarApiClient.escapeString(srcDescriptor.toString()))
            .replaceAll("\\{" + "destDescriptor" + "\\}", localVarApiClient.escapeString(destDescriptor.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mappingServiceGetMappingRuleVersionValidateBeforeCall(String scope, String srcDescriptor, String destDescriptor, String versionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling mappingServiceGetMappingRuleVersion(Async)");
        }
        
        // verify the required parameter 'srcDescriptor' is set
        if (srcDescriptor == null) {
            throw new ApiException("Missing the required parameter 'srcDescriptor' when calling mappingServiceGetMappingRuleVersion(Async)");
        }
        
        // verify the required parameter 'destDescriptor' is set
        if (destDescriptor == null) {
            throw new ApiException("Missing the required parameter 'destDescriptor' when calling mappingServiceGetMappingRuleVersion(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling mappingServiceGetMappingRuleVersion(Async)");
        }
        

        okhttp3.Call localVarCall = mappingServiceGetMappingRuleVersionCall(scope, srcDescriptor, destDescriptor, versionId, _callback);
        return localVarCall;

    }

    /**
     * GetMappingRuleVersion is used to retrieve a specific version of a mapping rule for a given descriptor pair. It accepts a DescriptorPairBasedVersionRequest object as its parameter, which includes the scope, source descriptor, destination descriptor, and version ID for the mapping rule. The response from it is a MappingRuleResponse, which includes information about the retrieved version of the mapping rule.
     * Example of request : GET /api/v1/validation/rule/version/fx_fwd_1/fx_fwd_2/teTYb9Fs_lIOoPQJukM6dY3aJdiMqT-SdBPdvYfJAjk&#x3D;  Example of response : {   \&quot;definition\&quot;:\&quot;{\\\&quot;src_descriptor\\\&quot;:\\\&quot;foreign_exchange-vanilla-forwards\\\&quot;,\\\&quot;dest_descriptor\\\&quot;:\\\&quot;foreign_exchange-vanilla-forwards\\\&quot;,\\\&quot;transformations\\\&quot;:[{\\\&quot;targetColumnName\\\&quot;:\\\&quot;submission_date\\\&quot;,\\\&quot;sourceColumnName\\\&quot;:\\\&quot;another_date\\\&quot;},{\\\&quot;rule\\\&quot;:\\\&quot;{ \\\\\\\&quot;$to_upper\\\\\\\&quot;: { \\\\\\\&quot;$trim\\\\\\\&quot; : \\\\\\\&quot;fx_test_for_bank1.submission_asset\\\\\\\&quot; }}\\\&quot;,\\\&quot;targetColumnName\\\&quot;:\\\&quot;submission_asset\\\&quot;, \\\&quot;name\\\&quot;: \\\&quot;upper case asset\\\&quot;, \\\&quot;description\\\&quot;: \\\&quot;i am optional...\\\&quot;}]}\&quot; }
     * @param scope  (required)
     * @param srcDescriptor  (required)
     * @param destDescriptor  (required)
     * @param versionId  (required)
     * @return TitaniumMappingRuleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumMappingRuleResponse mappingServiceGetMappingRuleVersion(String scope, String srcDescriptor, String destDescriptor, String versionId) throws ApiException {
        ApiResponse<TitaniumMappingRuleResponse> localVarResp = mappingServiceGetMappingRuleVersionWithHttpInfo(scope, srcDescriptor, destDescriptor, versionId);
        return localVarResp.getData();
    }

    /**
     * GetMappingRuleVersion is used to retrieve a specific version of a mapping rule for a given descriptor pair. It accepts a DescriptorPairBasedVersionRequest object as its parameter, which includes the scope, source descriptor, destination descriptor, and version ID for the mapping rule. The response from it is a MappingRuleResponse, which includes information about the retrieved version of the mapping rule.
     * Example of request : GET /api/v1/validation/rule/version/fx_fwd_1/fx_fwd_2/teTYb9Fs_lIOoPQJukM6dY3aJdiMqT-SdBPdvYfJAjk&#x3D;  Example of response : {   \&quot;definition\&quot;:\&quot;{\\\&quot;src_descriptor\\\&quot;:\\\&quot;foreign_exchange-vanilla-forwards\\\&quot;,\\\&quot;dest_descriptor\\\&quot;:\\\&quot;foreign_exchange-vanilla-forwards\\\&quot;,\\\&quot;transformations\\\&quot;:[{\\\&quot;targetColumnName\\\&quot;:\\\&quot;submission_date\\\&quot;,\\\&quot;sourceColumnName\\\&quot;:\\\&quot;another_date\\\&quot;},{\\\&quot;rule\\\&quot;:\\\&quot;{ \\\\\\\&quot;$to_upper\\\\\\\&quot;: { \\\\\\\&quot;$trim\\\\\\\&quot; : \\\\\\\&quot;fx_test_for_bank1.submission_asset\\\\\\\&quot; }}\\\&quot;,\\\&quot;targetColumnName\\\&quot;:\\\&quot;submission_asset\\\&quot;, \\\&quot;name\\\&quot;: \\\&quot;upper case asset\\\&quot;, \\\&quot;description\\\&quot;: \\\&quot;i am optional...\\\&quot;}]}\&quot; }
     * @param scope  (required)
     * @param srcDescriptor  (required)
     * @param destDescriptor  (required)
     * @param versionId  (required)
     * @return ApiResponse&lt;TitaniumMappingRuleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumMappingRuleResponse> mappingServiceGetMappingRuleVersionWithHttpInfo(String scope, String srcDescriptor, String destDescriptor, String versionId) throws ApiException {
        okhttp3.Call localVarCall = mappingServiceGetMappingRuleVersionValidateBeforeCall(scope, srcDescriptor, destDescriptor, versionId, null);
        Type localVarReturnType = new TypeToken<TitaniumMappingRuleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetMappingRuleVersion is used to retrieve a specific version of a mapping rule for a given descriptor pair. It accepts a DescriptorPairBasedVersionRequest object as its parameter, which includes the scope, source descriptor, destination descriptor, and version ID for the mapping rule. The response from it is a MappingRuleResponse, which includes information about the retrieved version of the mapping rule. (asynchronously)
     * Example of request : GET /api/v1/validation/rule/version/fx_fwd_1/fx_fwd_2/teTYb9Fs_lIOoPQJukM6dY3aJdiMqT-SdBPdvYfJAjk&#x3D;  Example of response : {   \&quot;definition\&quot;:\&quot;{\\\&quot;src_descriptor\\\&quot;:\\\&quot;foreign_exchange-vanilla-forwards\\\&quot;,\\\&quot;dest_descriptor\\\&quot;:\\\&quot;foreign_exchange-vanilla-forwards\\\&quot;,\\\&quot;transformations\\\&quot;:[{\\\&quot;targetColumnName\\\&quot;:\\\&quot;submission_date\\\&quot;,\\\&quot;sourceColumnName\\\&quot;:\\\&quot;another_date\\\&quot;},{\\\&quot;rule\\\&quot;:\\\&quot;{ \\\\\\\&quot;$to_upper\\\\\\\&quot;: { \\\\\\\&quot;$trim\\\\\\\&quot; : \\\\\\\&quot;fx_test_for_bank1.submission_asset\\\\\\\&quot; }}\\\&quot;,\\\&quot;targetColumnName\\\&quot;:\\\&quot;submission_asset\\\&quot;, \\\&quot;name\\\&quot;: \\\&quot;upper case asset\\\&quot;, \\\&quot;description\\\&quot;: \\\&quot;i am optional...\\\&quot;}]}\&quot; }
     * @param scope  (required)
     * @param srcDescriptor  (required)
     * @param destDescriptor  (required)
     * @param versionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mappingServiceGetMappingRuleVersionAsync(String scope, String srcDescriptor, String destDescriptor, String versionId, final ApiCallback<TitaniumMappingRuleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = mappingServiceGetMappingRuleVersionValidateBeforeCall(scope, srcDescriptor, destDescriptor, versionId, _callback);
        Type localVarReturnType = new TypeToken<TitaniumMappingRuleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mappingServiceListMappingRuleVersions
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mappingServiceListMappingRuleVersionsCall(TitaniumDescriptorPairBasedGetDefinition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/mapping/rule/versions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mappingServiceListMappingRuleVersionsValidateBeforeCall(TitaniumDescriptorPairBasedGetDefinition body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling mappingServiceListMappingRuleVersions(Async)");
        }
        

        okhttp3.Call localVarCall = mappingServiceListMappingRuleVersionsCall(body, _callback);
        return localVarCall;

    }

    /**
     * ListMappingRuleVersions is used to retrieve a list of all versions of a mapping rule for a given descriptor pair. It accepts a DescriptorPairBasedGetDefinition object as its parameter, which specifies the source and destination descriptors for the mapping rule. The response from this it is a ListVersionResponse, which includes information about all versions of the mapping rule.
     * Example of request : {  \&quot;scope\&quot;: \&quot;global\&quot;,  \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;,  \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot; }  Example of response : {   \&quot;data\&quot;:{      \&quot;versions\&quot;:[         {            \&quot;versionId\&quot;:\&quot;EKc9bpBGCbLJmBqOpP0FTqtNusxgZrgCheGXj_MTj7A&#x3D;\&quot;,            \&quot;createdAt\&quot;:\&quot;2022-05-05 11:33:59.0\&quot;         },         {            \&quot;versionId\&quot;:\&quot;JKLFLkhV3SC-fqO0L-WTswr5ttHLfnvF8rMlLnkafAc&#x3D;\&quot;,            \&quot;createdAt\&quot;:\&quot;2022-05-05 11:32:42.0\&quot;         }      ]   } }
     * @param body  (required)
     * @return TitaniumListVersionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumListVersionResponse mappingServiceListMappingRuleVersions(TitaniumDescriptorPairBasedGetDefinition body) throws ApiException {
        ApiResponse<TitaniumListVersionResponse> localVarResp = mappingServiceListMappingRuleVersionsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * ListMappingRuleVersions is used to retrieve a list of all versions of a mapping rule for a given descriptor pair. It accepts a DescriptorPairBasedGetDefinition object as its parameter, which specifies the source and destination descriptors for the mapping rule. The response from this it is a ListVersionResponse, which includes information about all versions of the mapping rule.
     * Example of request : {  \&quot;scope\&quot;: \&quot;global\&quot;,  \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;,  \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot; }  Example of response : {   \&quot;data\&quot;:{      \&quot;versions\&quot;:[         {            \&quot;versionId\&quot;:\&quot;EKc9bpBGCbLJmBqOpP0FTqtNusxgZrgCheGXj_MTj7A&#x3D;\&quot;,            \&quot;createdAt\&quot;:\&quot;2022-05-05 11:33:59.0\&quot;         },         {            \&quot;versionId\&quot;:\&quot;JKLFLkhV3SC-fqO0L-WTswr5ttHLfnvF8rMlLnkafAc&#x3D;\&quot;,            \&quot;createdAt\&quot;:\&quot;2022-05-05 11:32:42.0\&quot;         }      ]   } }
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumListVersionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumListVersionResponse> mappingServiceListMappingRuleVersionsWithHttpInfo(TitaniumDescriptorPairBasedGetDefinition body) throws ApiException {
        okhttp3.Call localVarCall = mappingServiceListMappingRuleVersionsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumListVersionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListMappingRuleVersions is used to retrieve a list of all versions of a mapping rule for a given descriptor pair. It accepts a DescriptorPairBasedGetDefinition object as its parameter, which specifies the source and destination descriptors for the mapping rule. The response from this it is a ListVersionResponse, which includes information about all versions of the mapping rule. (asynchronously)
     * Example of request : {  \&quot;scope\&quot;: \&quot;global\&quot;,  \&quot;src_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot;,  \&quot;dest_descriptor\&quot;:\&quot;foreign_exchange-vanilla-options\&quot; }  Example of response : {   \&quot;data\&quot;:{      \&quot;versions\&quot;:[         {            \&quot;versionId\&quot;:\&quot;EKc9bpBGCbLJmBqOpP0FTqtNusxgZrgCheGXj_MTj7A&#x3D;\&quot;,            \&quot;createdAt\&quot;:\&quot;2022-05-05 11:33:59.0\&quot;         },         {            \&quot;versionId\&quot;:\&quot;JKLFLkhV3SC-fqO0L-WTswr5ttHLfnvF8rMlLnkafAc&#x3D;\&quot;,            \&quot;createdAt\&quot;:\&quot;2022-05-05 11:32:42.0\&quot;         }      ]   } }
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mappingServiceListMappingRuleVersionsAsync(TitaniumDescriptorPairBasedGetDefinition body, final ApiCallback<TitaniumListVersionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = mappingServiceListMappingRuleVersionsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumListVersionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mappingServiceListMappingRules
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mappingServiceListMappingRulesCall(TitaniumListRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/mapping/rule/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mappingServiceListMappingRulesValidateBeforeCall(TitaniumListRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling mappingServiceListMappingRules(Async)");
        }
        

        okhttp3.Call localVarCall = mappingServiceListMappingRulesCall(body, _callback);
        return localVarCall;

    }

    /**
     * ListMappingRules is used to retrieve a list of all mapping rules in the system. It accepts a ListRequest object as its parameter, which includes optional parameters for filtering the results. The response from this it is a MappingRuleList, which includes information about all mapping rules in the system that match the provided filter parameters.
     * Example of request : {   \&quot;scope\&quot;:\&quot;global\&quot; } Or optionally use filter: {   \&quot;scope\&quot;:\&quot;global\&quot;,   \&quot;filter\&quot;: \&quot;.*vanilla.*__.*vanilla.*\&quot; // all mapping rules from any vanilla to any vanilla }  Example of response : {    \&quot;data\&quot;: {        \&quot;results\&quot;: [            {                \&quot;uid\&quot;: \&quot;Djqreg7gTs7CV2rSyyucOWCFjK7ldgS9yQX0o0rEiV0&#x3D;\&quot;,                \&quot;src_descriptor\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;,                \&quot;dest_descriptor\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;             },            {                \&quot;uid\&quot;: \&quot;Djqreg7gTs7CV2rSyyucOWCFjK7ldgS9yQX0o0rEiV0&#x3D;\&quot;,                \&quot;src_descriptor\&quot;: \&quot;foreign_exchange-vanilla-options\&quot;,                \&quot;dest_descriptor\&quot;: \&quot;foreign_exchange-vanilla-options\&quot;            }        ]    } }
     * @param body  (required)
     * @return TitaniumMappingRuleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumMappingRuleList mappingServiceListMappingRules(TitaniumListRequest body) throws ApiException {
        ApiResponse<TitaniumMappingRuleList> localVarResp = mappingServiceListMappingRulesWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * ListMappingRules is used to retrieve a list of all mapping rules in the system. It accepts a ListRequest object as its parameter, which includes optional parameters for filtering the results. The response from this it is a MappingRuleList, which includes information about all mapping rules in the system that match the provided filter parameters.
     * Example of request : {   \&quot;scope\&quot;:\&quot;global\&quot; } Or optionally use filter: {   \&quot;scope\&quot;:\&quot;global\&quot;,   \&quot;filter\&quot;: \&quot;.*vanilla.*__.*vanilla.*\&quot; // all mapping rules from any vanilla to any vanilla }  Example of response : {    \&quot;data\&quot;: {        \&quot;results\&quot;: [            {                \&quot;uid\&quot;: \&quot;Djqreg7gTs7CV2rSyyucOWCFjK7ldgS9yQX0o0rEiV0&#x3D;\&quot;,                \&quot;src_descriptor\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;,                \&quot;dest_descriptor\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;             },            {                \&quot;uid\&quot;: \&quot;Djqreg7gTs7CV2rSyyucOWCFjK7ldgS9yQX0o0rEiV0&#x3D;\&quot;,                \&quot;src_descriptor\&quot;: \&quot;foreign_exchange-vanilla-options\&quot;,                \&quot;dest_descriptor\&quot;: \&quot;foreign_exchange-vanilla-options\&quot;            }        ]    } }
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumMappingRuleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumMappingRuleList> mappingServiceListMappingRulesWithHttpInfo(TitaniumListRequest body) throws ApiException {
        okhttp3.Call localVarCall = mappingServiceListMappingRulesValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumMappingRuleList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListMappingRules is used to retrieve a list of all mapping rules in the system. It accepts a ListRequest object as its parameter, which includes optional parameters for filtering the results. The response from this it is a MappingRuleList, which includes information about all mapping rules in the system that match the provided filter parameters. (asynchronously)
     * Example of request : {   \&quot;scope\&quot;:\&quot;global\&quot; } Or optionally use filter: {   \&quot;scope\&quot;:\&quot;global\&quot;,   \&quot;filter\&quot;: \&quot;.*vanilla.*__.*vanilla.*\&quot; // all mapping rules from any vanilla to any vanilla }  Example of response : {    \&quot;data\&quot;: {        \&quot;results\&quot;: [            {                \&quot;uid\&quot;: \&quot;Djqreg7gTs7CV2rSyyucOWCFjK7ldgS9yQX0o0rEiV0&#x3D;\&quot;,                \&quot;src_descriptor\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;,                \&quot;dest_descriptor\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;             },            {                \&quot;uid\&quot;: \&quot;Djqreg7gTs7CV2rSyyucOWCFjK7ldgS9yQX0o0rEiV0&#x3D;\&quot;,                \&quot;src_descriptor\&quot;: \&quot;foreign_exchange-vanilla-options\&quot;,                \&quot;dest_descriptor\&quot;: \&quot;foreign_exchange-vanilla-options\&quot;            }        ]    } }
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mappingServiceListMappingRulesAsync(TitaniumListRequest body, final ApiCallback<TitaniumMappingRuleList> _callback) throws ApiException {

        okhttp3.Call localVarCall = mappingServiceListMappingRulesValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumMappingRuleList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
