/*
 * clearconsensus-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RpcStatus;
import org.openapitools.client.model.TitaniumAcknowledgeResponse;
import org.openapitools.client.model.TitaniumEnableDisableRequest;
import org.openapitools.client.model.TitaniumGetDefinition;
import org.openapitools.client.model.TitaniumListRequest;
import org.openapitools.client.model.TitaniumListUniqueKeysResponse;
import org.openapitools.client.model.TitaniumListVersionResponse;
import org.openapitools.client.model.TitaniumUniqueKeyDefinition;
import org.openapitools.client.model.TitaniumUniqueKeyDefinitionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UniqueKeyServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UniqueKeyServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UniqueKeyServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for uniqueKeyServiceAddUniqueKey
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uniqueKeyServiceAddUniqueKeyCall(TitaniumUniqueKeyDefinition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/uniquekey/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uniqueKeyServiceAddUniqueKeyValidateBeforeCall(TitaniumUniqueKeyDefinition body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling uniqueKeyServiceAddUniqueKey(Async)");
        }
        

        okhttp3.Call localVarCall = uniqueKeyServiceAddUniqueKeyCall(body, _callback);
        return localVarCall;

    }

    /**
     * AddUniqueKey is used to add a new unique key definition to the system.
     * Example of request : {   \&quot;name\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;scope\&quot;:\&quot;global\&quot;,   \&quot;uniqueKey\&quot;:[      \&quot;snap_date\&quot;,      \&quot;asset\&quot;,      \&quot;service\&quot;,      \&quot;client\&quot;,      \&quot;service\&quot;,      \&quot;tenor\&quot;,      \&quot;snap_time\&quot;,      \&quot;instrument_type\&quot;,      \&quot;spot_reference_price\&quot;,      \&quot;mid_fwrd_outright\&quot;,      \&quot;mid_fwrd_points\&quot;,      \&quot;onshore_offshore_curr_1\&quot;,      \&quot;onshore_offshore_curr_2\&quot;   ] }
     * @param body  (required)
     * @return TitaniumAcknowledgeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumAcknowledgeResponse uniqueKeyServiceAddUniqueKey(TitaniumUniqueKeyDefinition body) throws ApiException {
        ApiResponse<TitaniumAcknowledgeResponse> localVarResp = uniqueKeyServiceAddUniqueKeyWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * AddUniqueKey is used to add a new unique key definition to the system.
     * Example of request : {   \&quot;name\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;scope\&quot;:\&quot;global\&quot;,   \&quot;uniqueKey\&quot;:[      \&quot;snap_date\&quot;,      \&quot;asset\&quot;,      \&quot;service\&quot;,      \&quot;client\&quot;,      \&quot;service\&quot;,      \&quot;tenor\&quot;,      \&quot;snap_time\&quot;,      \&quot;instrument_type\&quot;,      \&quot;spot_reference_price\&quot;,      \&quot;mid_fwrd_outright\&quot;,      \&quot;mid_fwrd_points\&quot;,      \&quot;onshore_offshore_curr_1\&quot;,      \&quot;onshore_offshore_curr_2\&quot;   ] }
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumAcknowledgeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumAcknowledgeResponse> uniqueKeyServiceAddUniqueKeyWithHttpInfo(TitaniumUniqueKeyDefinition body) throws ApiException {
        okhttp3.Call localVarCall = uniqueKeyServiceAddUniqueKeyValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumAcknowledgeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * AddUniqueKey is used to add a new unique key definition to the system. (asynchronously)
     * Example of request : {   \&quot;name\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;scope\&quot;:\&quot;global\&quot;,   \&quot;uniqueKey\&quot;:[      \&quot;snap_date\&quot;,      \&quot;asset\&quot;,      \&quot;service\&quot;,      \&quot;client\&quot;,      \&quot;service\&quot;,      \&quot;tenor\&quot;,      \&quot;snap_time\&quot;,      \&quot;instrument_type\&quot;,      \&quot;spot_reference_price\&quot;,      \&quot;mid_fwrd_outright\&quot;,      \&quot;mid_fwrd_points\&quot;,      \&quot;onshore_offshore_curr_1\&quot;,      \&quot;onshore_offshore_curr_2\&quot;   ] }
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uniqueKeyServiceAddUniqueKeyAsync(TitaniumUniqueKeyDefinition body, final ApiCallback<TitaniumAcknowledgeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uniqueKeyServiceAddUniqueKeyValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumAcknowledgeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uniqueKeyServiceDisableUniqueKey
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uniqueKeyServiceDisableUniqueKeyCall(TitaniumEnableDisableRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/uniquekey/disable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uniqueKeyServiceDisableUniqueKeyValidateBeforeCall(TitaniumEnableDisableRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling uniqueKeyServiceDisableUniqueKey(Async)");
        }
        

        okhttp3.Call localVarCall = uniqueKeyServiceDisableUniqueKeyCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return TitaniumAcknowledgeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumAcknowledgeResponse uniqueKeyServiceDisableUniqueKey(TitaniumEnableDisableRequest body) throws ApiException {
        ApiResponse<TitaniumAcknowledgeResponse> localVarResp = uniqueKeyServiceDisableUniqueKeyWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumAcknowledgeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumAcknowledgeResponse> uniqueKeyServiceDisableUniqueKeyWithHttpInfo(TitaniumEnableDisableRequest body) throws ApiException {
        okhttp3.Call localVarCall = uniqueKeyServiceDisableUniqueKeyValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumAcknowledgeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uniqueKeyServiceDisableUniqueKeyAsync(TitaniumEnableDisableRequest body, final ApiCallback<TitaniumAcknowledgeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uniqueKeyServiceDisableUniqueKeyValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumAcknowledgeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uniqueKeyServiceEnableUniqueKey
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uniqueKeyServiceEnableUniqueKeyCall(TitaniumEnableDisableRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/uniquekey/enable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uniqueKeyServiceEnableUniqueKeyValidateBeforeCall(TitaniumEnableDisableRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling uniqueKeyServiceEnableUniqueKey(Async)");
        }
        

        okhttp3.Call localVarCall = uniqueKeyServiceEnableUniqueKeyCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return TitaniumAcknowledgeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumAcknowledgeResponse uniqueKeyServiceEnableUniqueKey(TitaniumEnableDisableRequest body) throws ApiException {
        ApiResponse<TitaniumAcknowledgeResponse> localVarResp = uniqueKeyServiceEnableUniqueKeyWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumAcknowledgeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumAcknowledgeResponse> uniqueKeyServiceEnableUniqueKeyWithHttpInfo(TitaniumEnableDisableRequest body) throws ApiException {
        okhttp3.Call localVarCall = uniqueKeyServiceEnableUniqueKeyValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumAcknowledgeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uniqueKeyServiceEnableUniqueKeyAsync(TitaniumEnableDisableRequest body, final ApiCallback<TitaniumAcknowledgeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uniqueKeyServiceEnableUniqueKeyValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumAcknowledgeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uniqueKeyServiceGetUniqueKey
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uniqueKeyServiceGetUniqueKeyCall(TitaniumGetDefinition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/uniquekey/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uniqueKeyServiceGetUniqueKeyValidateBeforeCall(TitaniumGetDefinition body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling uniqueKeyServiceGetUniqueKey(Async)");
        }
        

        okhttp3.Call localVarCall = uniqueKeyServiceGetUniqueKeyCall(body, _callback);
        return localVarCall;

    }

    /**
     * GetUniqueKey is used to retrieve a unique key definition by its scope and name. Request: {   \&quot;identifier\&quot;:{      \&quot;name\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;   },   \&quot;scope\&quot;:\&quot;global\&quot; }
     * Response: {    \&quot;data\&quot;: {        \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;,        \&quot;scope\&quot;: \&quot;global\&quot;,        \&quot;uniqueKey\&quot;: [            \&quot;snap_date\&quot;,            \&quot;asset\&quot;,            \&quot;service\&quot;,            \&quot;client\&quot;,            \&quot;service\&quot;,            \&quot;tenor\&quot;,            \&quot;snap_time\&quot;,            \&quot;instrument_type\&quot;,            \&quot;spot_reference_price\&quot;,            \&quot;mid_fwrd_outright\&quot;,            \&quot;mid_fwrd_points\&quot;,            \&quot;onshore_offshore_curr_1\&quot;,            \&quot;onshore_offshore_curr_2\&quot;        ],        \&quot;orderBy\&quot;: [            \&quot;__input_row_num\&quot;        ],        \&quot;order\&quot;: \&quot;ASC\&quot;    } }
     * @param body  (required)
     * @return TitaniumUniqueKeyDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumUniqueKeyDefinitionResponse uniqueKeyServiceGetUniqueKey(TitaniumGetDefinition body) throws ApiException {
        ApiResponse<TitaniumUniqueKeyDefinitionResponse> localVarResp = uniqueKeyServiceGetUniqueKeyWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * GetUniqueKey is used to retrieve a unique key definition by its scope and name. Request: {   \&quot;identifier\&quot;:{      \&quot;name\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;   },   \&quot;scope\&quot;:\&quot;global\&quot; }
     * Response: {    \&quot;data\&quot;: {        \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;,        \&quot;scope\&quot;: \&quot;global\&quot;,        \&quot;uniqueKey\&quot;: [            \&quot;snap_date\&quot;,            \&quot;asset\&quot;,            \&quot;service\&quot;,            \&quot;client\&quot;,            \&quot;service\&quot;,            \&quot;tenor\&quot;,            \&quot;snap_time\&quot;,            \&quot;instrument_type\&quot;,            \&quot;spot_reference_price\&quot;,            \&quot;mid_fwrd_outright\&quot;,            \&quot;mid_fwrd_points\&quot;,            \&quot;onshore_offshore_curr_1\&quot;,            \&quot;onshore_offshore_curr_2\&quot;        ],        \&quot;orderBy\&quot;: [            \&quot;__input_row_num\&quot;        ],        \&quot;order\&quot;: \&quot;ASC\&quot;    } }
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumUniqueKeyDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumUniqueKeyDefinitionResponse> uniqueKeyServiceGetUniqueKeyWithHttpInfo(TitaniumGetDefinition body) throws ApiException {
        okhttp3.Call localVarCall = uniqueKeyServiceGetUniqueKeyValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumUniqueKeyDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetUniqueKey is used to retrieve a unique key definition by its scope and name. Request: {   \&quot;identifier\&quot;:{      \&quot;name\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;   },   \&quot;scope\&quot;:\&quot;global\&quot; } (asynchronously)
     * Response: {    \&quot;data\&quot;: {        \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;,        \&quot;scope\&quot;: \&quot;global\&quot;,        \&quot;uniqueKey\&quot;: [            \&quot;snap_date\&quot;,            \&quot;asset\&quot;,            \&quot;service\&quot;,            \&quot;client\&quot;,            \&quot;service\&quot;,            \&quot;tenor\&quot;,            \&quot;snap_time\&quot;,            \&quot;instrument_type\&quot;,            \&quot;spot_reference_price\&quot;,            \&quot;mid_fwrd_outright\&quot;,            \&quot;mid_fwrd_points\&quot;,            \&quot;onshore_offshore_curr_1\&quot;,            \&quot;onshore_offshore_curr_2\&quot;        ],        \&quot;orderBy\&quot;: [            \&quot;__input_row_num\&quot;        ],        \&quot;order\&quot;: \&quot;ASC\&quot;    } }
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uniqueKeyServiceGetUniqueKeyAsync(TitaniumGetDefinition body, final ApiCallback<TitaniumUniqueKeyDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uniqueKeyServiceGetUniqueKeyValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumUniqueKeyDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uniqueKeyServiceGetUniqueKeyVersion
     * @param scope  (required)
     * @param name  (required)
     * @param versionId  (required)
     * @param descriptorName  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uniqueKeyServiceGetUniqueKeyVersionCall(String scope, String name, String versionId, String descriptorName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/uniquekey/version/{scope}/{name}/{versionId}"
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (descriptorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("descriptorName", descriptorName));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uniqueKeyServiceGetUniqueKeyVersionValidateBeforeCall(String scope, String name, String versionId, String descriptorName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling uniqueKeyServiceGetUniqueKeyVersion(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling uniqueKeyServiceGetUniqueKeyVersion(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling uniqueKeyServiceGetUniqueKeyVersion(Async)");
        }
        

        okhttp3.Call localVarCall = uniqueKeyServiceGetUniqueKeyVersionCall(scope, name, versionId, descriptorName, _callback);
        return localVarCall;

    }

    /**
     * GetUniqueKeyVersion is used to retrieve a specific version of a unique key definition by its scope, name, and version ID. Response: {    \&quot;data\&quot;: {        \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;,        \&quot;scope\&quot;: \&quot;global\&quot;,        \&quot;uniqueKey\&quot;: [            \&quot;asset\&quot;,            \&quot;service\&quot;,            \&quot;sub-asset\&quot;,            \&quot;instrument_type\&quot;,            \&quot;tenor\&quot;,            \&quot;snap_date\&quot;,            \&quot;snap_time\&quot;,            \&quot;curr_1\&quot;,            \&quot;curr_2\&quot;,            \&quot;onshore_offshore_curr_1\&quot;,            \&quot;onshore_offshore_curr_2\&quot;        ],        \&quot;orderBy\&quot;: [            \&quot;__input_row_num\&quot;        ],        \&quot;order\&quot;: \&quot;ASC\&quot;    } }
     * 
     * @param scope  (required)
     * @param name  (required)
     * @param versionId  (required)
     * @param descriptorName  (optional)
     * @return TitaniumUniqueKeyDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumUniqueKeyDefinitionResponse uniqueKeyServiceGetUniqueKeyVersion(String scope, String name, String versionId, String descriptorName) throws ApiException {
        ApiResponse<TitaniumUniqueKeyDefinitionResponse> localVarResp = uniqueKeyServiceGetUniqueKeyVersionWithHttpInfo(scope, name, versionId, descriptorName);
        return localVarResp.getData();
    }

    /**
     * GetUniqueKeyVersion is used to retrieve a specific version of a unique key definition by its scope, name, and version ID. Response: {    \&quot;data\&quot;: {        \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;,        \&quot;scope\&quot;: \&quot;global\&quot;,        \&quot;uniqueKey\&quot;: [            \&quot;asset\&quot;,            \&quot;service\&quot;,            \&quot;sub-asset\&quot;,            \&quot;instrument_type\&quot;,            \&quot;tenor\&quot;,            \&quot;snap_date\&quot;,            \&quot;snap_time\&quot;,            \&quot;curr_1\&quot;,            \&quot;curr_2\&quot;,            \&quot;onshore_offshore_curr_1\&quot;,            \&quot;onshore_offshore_curr_2\&quot;        ],        \&quot;orderBy\&quot;: [            \&quot;__input_row_num\&quot;        ],        \&quot;order\&quot;: \&quot;ASC\&quot;    } }
     * 
     * @param scope  (required)
     * @param name  (required)
     * @param versionId  (required)
     * @param descriptorName  (optional)
     * @return ApiResponse&lt;TitaniumUniqueKeyDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumUniqueKeyDefinitionResponse> uniqueKeyServiceGetUniqueKeyVersionWithHttpInfo(String scope, String name, String versionId, String descriptorName) throws ApiException {
        okhttp3.Call localVarCall = uniqueKeyServiceGetUniqueKeyVersionValidateBeforeCall(scope, name, versionId, descriptorName, null);
        Type localVarReturnType = new TypeToken<TitaniumUniqueKeyDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetUniqueKeyVersion is used to retrieve a specific version of a unique key definition by its scope, name, and version ID. Response: {    \&quot;data\&quot;: {        \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;,        \&quot;scope\&quot;: \&quot;global\&quot;,        \&quot;uniqueKey\&quot;: [            \&quot;asset\&quot;,            \&quot;service\&quot;,            \&quot;sub-asset\&quot;,            \&quot;instrument_type\&quot;,            \&quot;tenor\&quot;,            \&quot;snap_date\&quot;,            \&quot;snap_time\&quot;,            \&quot;curr_1\&quot;,            \&quot;curr_2\&quot;,            \&quot;onshore_offshore_curr_1\&quot;,            \&quot;onshore_offshore_curr_2\&quot;        ],        \&quot;orderBy\&quot;: [            \&quot;__input_row_num\&quot;        ],        \&quot;order\&quot;: \&quot;ASC\&quot;    } } (asynchronously)
     * 
     * @param scope  (required)
     * @param name  (required)
     * @param versionId  (required)
     * @param descriptorName  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uniqueKeyServiceGetUniqueKeyVersionAsync(String scope, String name, String versionId, String descriptorName, final ApiCallback<TitaniumUniqueKeyDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uniqueKeyServiceGetUniqueKeyVersionValidateBeforeCall(scope, name, versionId, descriptorName, _callback);
        Type localVarReturnType = new TypeToken<TitaniumUniqueKeyDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uniqueKeyServiceListUniqueKeyVersions
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uniqueKeyServiceListUniqueKeyVersionsCall(TitaniumGetDefinition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/uniquekey/versions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uniqueKeyServiceListUniqueKeyVersionsValidateBeforeCall(TitaniumGetDefinition body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling uniqueKeyServiceListUniqueKeyVersions(Async)");
        }
        

        okhttp3.Call localVarCall = uniqueKeyServiceListUniqueKeyVersionsCall(body, _callback);
        return localVarCall;

    }

    /**
     * ListUniqueKeyVersions is used to retrieve a list of all versions of a specific unique key definition by its scope and name. Request: {   \&quot;scope\&quot;:\&quot;global\&quot;,   \&quot;identifier\&quot;: {        \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;    } }
     * Response: {    \&quot;data\&quot;: {        \&quot;versions\&quot;: [            {                \&quot;versionId\&quot;:\&quot;0bmhRR-7hISwkb_H2MvIqafpJCAoy3YgEySZjntZF9o&#x3D;\&quot;,                \&quot;createdAt\&quot;: \&quot;2022-08-22 15:23:44.0\&quot;            }        ]    } }
     * @param body  (required)
     * @return TitaniumListVersionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumListVersionResponse uniqueKeyServiceListUniqueKeyVersions(TitaniumGetDefinition body) throws ApiException {
        ApiResponse<TitaniumListVersionResponse> localVarResp = uniqueKeyServiceListUniqueKeyVersionsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * ListUniqueKeyVersions is used to retrieve a list of all versions of a specific unique key definition by its scope and name. Request: {   \&quot;scope\&quot;:\&quot;global\&quot;,   \&quot;identifier\&quot;: {        \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;    } }
     * Response: {    \&quot;data\&quot;: {        \&quot;versions\&quot;: [            {                \&quot;versionId\&quot;:\&quot;0bmhRR-7hISwkb_H2MvIqafpJCAoy3YgEySZjntZF9o&#x3D;\&quot;,                \&quot;createdAt\&quot;: \&quot;2022-08-22 15:23:44.0\&quot;            }        ]    } }
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumListVersionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumListVersionResponse> uniqueKeyServiceListUniqueKeyVersionsWithHttpInfo(TitaniumGetDefinition body) throws ApiException {
        okhttp3.Call localVarCall = uniqueKeyServiceListUniqueKeyVersionsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumListVersionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListUniqueKeyVersions is used to retrieve a list of all versions of a specific unique key definition by its scope and name. Request: {   \&quot;scope\&quot;:\&quot;global\&quot;,   \&quot;identifier\&quot;: {        \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;    } } (asynchronously)
     * Response: {    \&quot;data\&quot;: {        \&quot;versions\&quot;: [            {                \&quot;versionId\&quot;:\&quot;0bmhRR-7hISwkb_H2MvIqafpJCAoy3YgEySZjntZF9o&#x3D;\&quot;,                \&quot;createdAt\&quot;: \&quot;2022-08-22 15:23:44.0\&quot;            }        ]    } }
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uniqueKeyServiceListUniqueKeyVersionsAsync(TitaniumGetDefinition body, final ApiCallback<TitaniumListVersionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uniqueKeyServiceListUniqueKeyVersionsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumListVersionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uniqueKeyServiceListUniqueKeys
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uniqueKeyServiceListUniqueKeysCall(TitaniumListRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/uniquekey/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uniqueKeyServiceListUniqueKeysValidateBeforeCall(TitaniumListRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling uniqueKeyServiceListUniqueKeys(Async)");
        }
        

        okhttp3.Call localVarCall = uniqueKeyServiceListUniqueKeysCall(body, _callback);
        return localVarCall;

    }

    /**
     * ListUniqueKeys is used to retrieve a list of all unique key definitions in the system. Request: {   \&quot;scope\&quot;:\&quot;global\&quot; }
     * Response: {    \&quot;data\&quot;: {        \&quot;results\&quot;: [            {                \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;,                \&quot;scope\&quot;: \&quot;global\&quot;,                \&quot;uniqueKey\&quot;: [                    \&quot;asset\&quot;,                    \&quot;service\&quot;,                    \&quot;sub-asset\&quot;,                    \&quot;instrument_type\&quot;,                    \&quot;tenor\&quot;,                    \&quot;snap_date\&quot;,                    \&quot;snap_time\&quot;,                    \&quot;curr_1\&quot;,                    \&quot;curr_2\&quot;,                    \&quot;onshore_offshore_curr_1\&quot;,                    \&quot;onshore_offshore_curr_2\&quot;                ],                \&quot;orderBy\&quot;: [                    \&quot;__input_row_num\&quot;                ],                \&quot;order\&quot;: \&quot;ASC\&quot;            },            {                \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-options\&quot;,                \&quot;scope\&quot;: \&quot;global\&quot;,                \&quot;uniqueKey\&quot;: [                    \&quot;snap_date\&quot;,                    \&quot;asset\&quot;,                    \&quot;service\&quot;,                    \&quot;snap_time\&quot;,                    \&quot;instrument_type\&quot;,                    \&quot;option_instrument_parameter\&quot;,                    \&quot;exercise_style\&quot;,                    \&quot;option_execution_cut_time\&quot;,                    \&quot;curr_1\&quot;,                    \&quot;curr_2\&quot;,                    \&quot;tenor\&quot;,                    \&quot;delta\&quot;,                    \&quot;vol_format\&quot;,                    \&quot;instrument_convention\&quot;,                    \&quot;delta_convention\&quot;,                    \&quot;premium_currency\&quot;,                    \&quot;settlement_convention\&quot;                ],                \&quot;orderBy\&quot;: [                    \&quot;__input_row_num\&quot;                ],                \&quot;order\&quot;: \&quot;ASC\&quot;            }        ]    } }
     * @param body  (required)
     * @return TitaniumListUniqueKeysResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumListUniqueKeysResponse uniqueKeyServiceListUniqueKeys(TitaniumListRequest body) throws ApiException {
        ApiResponse<TitaniumListUniqueKeysResponse> localVarResp = uniqueKeyServiceListUniqueKeysWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * ListUniqueKeys is used to retrieve a list of all unique key definitions in the system. Request: {   \&quot;scope\&quot;:\&quot;global\&quot; }
     * Response: {    \&quot;data\&quot;: {        \&quot;results\&quot;: [            {                \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;,                \&quot;scope\&quot;: \&quot;global\&quot;,                \&quot;uniqueKey\&quot;: [                    \&quot;asset\&quot;,                    \&quot;service\&quot;,                    \&quot;sub-asset\&quot;,                    \&quot;instrument_type\&quot;,                    \&quot;tenor\&quot;,                    \&quot;snap_date\&quot;,                    \&quot;snap_time\&quot;,                    \&quot;curr_1\&quot;,                    \&quot;curr_2\&quot;,                    \&quot;onshore_offshore_curr_1\&quot;,                    \&quot;onshore_offshore_curr_2\&quot;                ],                \&quot;orderBy\&quot;: [                    \&quot;__input_row_num\&quot;                ],                \&quot;order\&quot;: \&quot;ASC\&quot;            },            {                \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-options\&quot;,                \&quot;scope\&quot;: \&quot;global\&quot;,                \&quot;uniqueKey\&quot;: [                    \&quot;snap_date\&quot;,                    \&quot;asset\&quot;,                    \&quot;service\&quot;,                    \&quot;snap_time\&quot;,                    \&quot;instrument_type\&quot;,                    \&quot;option_instrument_parameter\&quot;,                    \&quot;exercise_style\&quot;,                    \&quot;option_execution_cut_time\&quot;,                    \&quot;curr_1\&quot;,                    \&quot;curr_2\&quot;,                    \&quot;tenor\&quot;,                    \&quot;delta\&quot;,                    \&quot;vol_format\&quot;,                    \&quot;instrument_convention\&quot;,                    \&quot;delta_convention\&quot;,                    \&quot;premium_currency\&quot;,                    \&quot;settlement_convention\&quot;                ],                \&quot;orderBy\&quot;: [                    \&quot;__input_row_num\&quot;                ],                \&quot;order\&quot;: \&quot;ASC\&quot;            }        ]    } }
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumListUniqueKeysResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumListUniqueKeysResponse> uniqueKeyServiceListUniqueKeysWithHttpInfo(TitaniumListRequest body) throws ApiException {
        okhttp3.Call localVarCall = uniqueKeyServiceListUniqueKeysValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumListUniqueKeysResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListUniqueKeys is used to retrieve a list of all unique key definitions in the system. Request: {   \&quot;scope\&quot;:\&quot;global\&quot; } (asynchronously)
     * Response: {    \&quot;data\&quot;: {        \&quot;results\&quot;: [            {                \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;,                \&quot;scope\&quot;: \&quot;global\&quot;,                \&quot;uniqueKey\&quot;: [                    \&quot;asset\&quot;,                    \&quot;service\&quot;,                    \&quot;sub-asset\&quot;,                    \&quot;instrument_type\&quot;,                    \&quot;tenor\&quot;,                    \&quot;snap_date\&quot;,                    \&quot;snap_time\&quot;,                    \&quot;curr_1\&quot;,                    \&quot;curr_2\&quot;,                    \&quot;onshore_offshore_curr_1\&quot;,                    \&quot;onshore_offshore_curr_2\&quot;                ],                \&quot;orderBy\&quot;: [                    \&quot;__input_row_num\&quot;                ],                \&quot;order\&quot;: \&quot;ASC\&quot;            },            {                \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-options\&quot;,                \&quot;scope\&quot;: \&quot;global\&quot;,                \&quot;uniqueKey\&quot;: [                    \&quot;snap_date\&quot;,                    \&quot;asset\&quot;,                    \&quot;service\&quot;,                    \&quot;snap_time\&quot;,                    \&quot;instrument_type\&quot;,                    \&quot;option_instrument_parameter\&quot;,                    \&quot;exercise_style\&quot;,                    \&quot;option_execution_cut_time\&quot;,                    \&quot;curr_1\&quot;,                    \&quot;curr_2\&quot;,                    \&quot;tenor\&quot;,                    \&quot;delta\&quot;,                    \&quot;vol_format\&quot;,                    \&quot;instrument_convention\&quot;,                    \&quot;delta_convention\&quot;,                    \&quot;premium_currency\&quot;,                    \&quot;settlement_convention\&quot;                ],                \&quot;orderBy\&quot;: [                    \&quot;__input_row_num\&quot;                ],                \&quot;order\&quot;: \&quot;ASC\&quot;            }        ]    } }
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uniqueKeyServiceListUniqueKeysAsync(TitaniumListRequest body, final ApiCallback<TitaniumListUniqueKeysResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uniqueKeyServiceListUniqueKeysValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumListUniqueKeysResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
