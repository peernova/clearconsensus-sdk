/*
 * clearconsensus-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.FileServiceGetFilePreviewRequest;
import org.openapitools.client.model.RpcStatus;
import org.openapitools.client.model.TitaniumFileDelimiterSetting;
import org.openapitools.client.model.TitaniumFileDescriptorSetting;
import org.openapitools.client.model.TitaniumFileHistoryRequest;
import org.openapitools.client.model.TitaniumFileHistoryResponse;
import org.openapitools.client.model.TitaniumFileList;
import org.openapitools.client.model.TitaniumFilePreview;
import org.openapitools.client.model.TitaniumFileSubmissionRequest;
import org.openapitools.client.model.TitaniumGetFileExportUrlRequest;
import org.openapitools.client.model.TitaniumGetFileExportUrlResponse;
import org.openapitools.client.model.TitaniumListRequest;
import org.openapitools.client.model.TitaniumMessageResponse;
import org.openapitools.client.model.TitaniumSetFileDelimiterRequest;
import org.openapitools.client.model.TitaniumSetFileDescriptorRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FileServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FileServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FileServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fileServiceFileHistory
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceFileHistoryCall(TitaniumFileHistoryRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/file-history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileServiceFileHistoryValidateBeforeCall(TitaniumFileHistoryRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling fileServiceFileHistory(Async)");
        }
        

        okhttp3.Call localVarCall = fileServiceFileHistoryCall(body, _callback);
        return localVarCall;

    }

    /**
     * FileHistory retrieves the history for a specified file.
     * 
     * @param body  (required)
     * @return TitaniumFileHistoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumFileHistoryResponse fileServiceFileHistory(TitaniumFileHistoryRequest body) throws ApiException {
        ApiResponse<TitaniumFileHistoryResponse> localVarResp = fileServiceFileHistoryWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * FileHistory retrieves the history for a specified file.
     * 
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumFileHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumFileHistoryResponse> fileServiceFileHistoryWithHttpInfo(TitaniumFileHistoryRequest body) throws ApiException {
        okhttp3.Call localVarCall = fileServiceFileHistoryValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumFileHistoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * FileHistory retrieves the history for a specified file. (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceFileHistoryAsync(TitaniumFileHistoryRequest body, final ApiCallback<TitaniumFileHistoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileServiceFileHistoryValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumFileHistoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileServiceFileSubmission
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceFileSubmissionCall(TitaniumFileSubmissionRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/file-submission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileServiceFileSubmissionValidateBeforeCall(TitaniumFileSubmissionRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling fileServiceFileSubmission(Async)");
        }
        

        okhttp3.Call localVarCall = fileServiceFileSubmissionCall(body, _callback);
        return localVarCall;

    }

    /**
     * FileSubmission submits a file for processing.
     * 
     * @param body  (required)
     * @return TitaniumMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumMessageResponse fileServiceFileSubmission(TitaniumFileSubmissionRequest body) throws ApiException {
        ApiResponse<TitaniumMessageResponse> localVarResp = fileServiceFileSubmissionWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * FileSubmission submits a file for processing.
     * 
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumMessageResponse> fileServiceFileSubmissionWithHttpInfo(TitaniumFileSubmissionRequest body) throws ApiException {
        okhttp3.Call localVarCall = fileServiceFileSubmissionValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * FileSubmission submits a file for processing. (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceFileSubmissionAsync(TitaniumFileSubmissionRequest body, final ApiCallback<TitaniumMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileServiceFileSubmissionValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileServiceGetFileDelimiter
     * @param filename  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceGetFileDelimiterCall(String filename, FileServiceGetFilePreviewRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/import/{filename}/delimiter"
            .replaceAll("\\{" + "filename" + "\\}", localVarApiClient.escapeString(filename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileServiceGetFileDelimiterValidateBeforeCall(String filename, FileServiceGetFilePreviewRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling fileServiceGetFileDelimiter(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling fileServiceGetFileDelimiter(Async)");
        }
        

        okhttp3.Call localVarCall = fileServiceGetFileDelimiterCall(filename, body, _callback);
        return localVarCall;

    }

    /**
     * GetFileDelimiter retrieves the delimiter for a specified file.
     * 
     * @param filename  (required)
     * @param body  (required)
     * @return TitaniumFileDelimiterSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumFileDelimiterSetting fileServiceGetFileDelimiter(String filename, FileServiceGetFilePreviewRequest body) throws ApiException {
        ApiResponse<TitaniumFileDelimiterSetting> localVarResp = fileServiceGetFileDelimiterWithHttpInfo(filename, body);
        return localVarResp.getData();
    }

    /**
     * GetFileDelimiter retrieves the delimiter for a specified file.
     * 
     * @param filename  (required)
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumFileDelimiterSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumFileDelimiterSetting> fileServiceGetFileDelimiterWithHttpInfo(String filename, FileServiceGetFilePreviewRequest body) throws ApiException {
        okhttp3.Call localVarCall = fileServiceGetFileDelimiterValidateBeforeCall(filename, body, null);
        Type localVarReturnType = new TypeToken<TitaniumFileDelimiterSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetFileDelimiter retrieves the delimiter for a specified file. (asynchronously)
     * 
     * @param filename  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceGetFileDelimiterAsync(String filename, FileServiceGetFilePreviewRequest body, final ApiCallback<TitaniumFileDelimiterSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileServiceGetFileDelimiterValidateBeforeCall(filename, body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumFileDelimiterSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileServiceGetFileDescriptor
     * @param filename  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceGetFileDescriptorCall(String filename, FileServiceGetFilePreviewRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/import/{filename}/descriptor"
            .replaceAll("\\{" + "filename" + "\\}", localVarApiClient.escapeString(filename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileServiceGetFileDescriptorValidateBeforeCall(String filename, FileServiceGetFilePreviewRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling fileServiceGetFileDescriptor(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling fileServiceGetFileDescriptor(Async)");
        }
        

        okhttp3.Call localVarCall = fileServiceGetFileDescriptorCall(filename, body, _callback);
        return localVarCall;

    }

    /**
     * GetFileDescriptor retrieves the descriptor for a specified file.
     * 
     * @param filename  (required)
     * @param body  (required)
     * @return TitaniumFileDescriptorSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumFileDescriptorSetting fileServiceGetFileDescriptor(String filename, FileServiceGetFilePreviewRequest body) throws ApiException {
        ApiResponse<TitaniumFileDescriptorSetting> localVarResp = fileServiceGetFileDescriptorWithHttpInfo(filename, body);
        return localVarResp.getData();
    }

    /**
     * GetFileDescriptor retrieves the descriptor for a specified file.
     * 
     * @param filename  (required)
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumFileDescriptorSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumFileDescriptorSetting> fileServiceGetFileDescriptorWithHttpInfo(String filename, FileServiceGetFilePreviewRequest body) throws ApiException {
        okhttp3.Call localVarCall = fileServiceGetFileDescriptorValidateBeforeCall(filename, body, null);
        Type localVarReturnType = new TypeToken<TitaniumFileDescriptorSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetFileDescriptor retrieves the descriptor for a specified file. (asynchronously)
     * 
     * @param filename  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceGetFileDescriptorAsync(String filename, FileServiceGetFilePreviewRequest body, final ApiCallback<TitaniumFileDescriptorSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileServiceGetFileDescriptorValidateBeforeCall(filename, body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumFileDescriptorSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileServiceGetFileExportUrl
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceGetFileExportUrlCall(TitaniumGetFileExportUrlRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/raw-file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileServiceGetFileExportUrlValidateBeforeCall(TitaniumGetFileExportUrlRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling fileServiceGetFileExportUrl(Async)");
        }
        

        okhttp3.Call localVarCall = fileServiceGetFileExportUrlCall(body, _callback);
        return localVarCall;

    }

    /**
     * GetFileExportUrl retrieves the export URL for a specified file.
     * 
     * @param body  (required)
     * @return TitaniumGetFileExportUrlResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumGetFileExportUrlResponse fileServiceGetFileExportUrl(TitaniumGetFileExportUrlRequest body) throws ApiException {
        ApiResponse<TitaniumGetFileExportUrlResponse> localVarResp = fileServiceGetFileExportUrlWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * GetFileExportUrl retrieves the export URL for a specified file.
     * 
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumGetFileExportUrlResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumGetFileExportUrlResponse> fileServiceGetFileExportUrlWithHttpInfo(TitaniumGetFileExportUrlRequest body) throws ApiException {
        okhttp3.Call localVarCall = fileServiceGetFileExportUrlValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumGetFileExportUrlResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetFileExportUrl retrieves the export URL for a specified file. (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceGetFileExportUrlAsync(TitaniumGetFileExportUrlRequest body, final ApiCallback<TitaniumGetFileExportUrlResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileServiceGetFileExportUrlValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumGetFileExportUrlResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileServiceGetFilePreview
     * @param filename  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceGetFilePreviewCall(String filename, FileServiceGetFilePreviewRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/import/{filename}"
            .replaceAll("\\{" + "filename" + "\\}", localVarApiClient.escapeString(filename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileServiceGetFilePreviewValidateBeforeCall(String filename, FileServiceGetFilePreviewRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling fileServiceGetFilePreview(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling fileServiceGetFilePreview(Async)");
        }
        

        okhttp3.Call localVarCall = fileServiceGetFilePreviewCall(filename, body, _callback);
        return localVarCall;

    }

    /**
     * GetFilePreview retrieves a preview of a specified file.
     * 
     * @param filename  (required)
     * @param body  (required)
     * @return TitaniumFilePreview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumFilePreview fileServiceGetFilePreview(String filename, FileServiceGetFilePreviewRequest body) throws ApiException {
        ApiResponse<TitaniumFilePreview> localVarResp = fileServiceGetFilePreviewWithHttpInfo(filename, body);
        return localVarResp.getData();
    }

    /**
     * GetFilePreview retrieves a preview of a specified file.
     * 
     * @param filename  (required)
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumFilePreview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumFilePreview> fileServiceGetFilePreviewWithHttpInfo(String filename, FileServiceGetFilePreviewRequest body) throws ApiException {
        okhttp3.Call localVarCall = fileServiceGetFilePreviewValidateBeforeCall(filename, body, null);
        Type localVarReturnType = new TypeToken<TitaniumFilePreview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetFilePreview retrieves a preview of a specified file. (asynchronously)
     * 
     * @param filename  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceGetFilePreviewAsync(String filename, FileServiceGetFilePreviewRequest body, final ApiCallback<TitaniumFilePreview> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileServiceGetFilePreviewValidateBeforeCall(filename, body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumFilePreview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileServiceListFiles
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceListFilesCall(TitaniumListRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/import/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileServiceListFilesValidateBeforeCall(TitaniumListRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling fileServiceListFiles(Async)");
        }
        

        okhttp3.Call localVarCall = fileServiceListFilesCall(body, _callback);
        return localVarCall;

    }

    /**
     * ListFiles retrieves a list of files.
     * 
     * @param body  (required)
     * @return TitaniumFileList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumFileList fileServiceListFiles(TitaniumListRequest body) throws ApiException {
        ApiResponse<TitaniumFileList> localVarResp = fileServiceListFilesWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * ListFiles retrieves a list of files.
     * 
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumFileList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumFileList> fileServiceListFilesWithHttpInfo(TitaniumListRequest body) throws ApiException {
        okhttp3.Call localVarCall = fileServiceListFilesValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumFileList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListFiles retrieves a list of files. (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceListFilesAsync(TitaniumListRequest body, final ApiCallback<TitaniumFileList> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileServiceListFilesValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumFileList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileServiceSetFileDelimiter
     * @param fileIdentifierFilename  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceSetFileDelimiterCall(String fileIdentifierFilename, TitaniumSetFileDelimiterRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/import/{fileIdentifier.filename}/delimiter"
            .replaceAll("\\{" + "fileIdentifier.filename" + "\\}", localVarApiClient.escapeString(fileIdentifierFilename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileServiceSetFileDelimiterValidateBeforeCall(String fileIdentifierFilename, TitaniumSetFileDelimiterRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileIdentifierFilename' is set
        if (fileIdentifierFilename == null) {
            throw new ApiException("Missing the required parameter 'fileIdentifierFilename' when calling fileServiceSetFileDelimiter(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling fileServiceSetFileDelimiter(Async)");
        }
        

        okhttp3.Call localVarCall = fileServiceSetFileDelimiterCall(fileIdentifierFilename, body, _callback);
        return localVarCall;

    }

    /**
     * SetFileDelimiter sets the delimiter for a specified file.
     * 
     * @param fileIdentifierFilename  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object fileServiceSetFileDelimiter(String fileIdentifierFilename, TitaniumSetFileDelimiterRequest body) throws ApiException {
        ApiResponse<Object> localVarResp = fileServiceSetFileDelimiterWithHttpInfo(fileIdentifierFilename, body);
        return localVarResp.getData();
    }

    /**
     * SetFileDelimiter sets the delimiter for a specified file.
     * 
     * @param fileIdentifierFilename  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> fileServiceSetFileDelimiterWithHttpInfo(String fileIdentifierFilename, TitaniumSetFileDelimiterRequest body) throws ApiException {
        okhttp3.Call localVarCall = fileServiceSetFileDelimiterValidateBeforeCall(fileIdentifierFilename, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SetFileDelimiter sets the delimiter for a specified file. (asynchronously)
     * 
     * @param fileIdentifierFilename  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceSetFileDelimiterAsync(String fileIdentifierFilename, TitaniumSetFileDelimiterRequest body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileServiceSetFileDelimiterValidateBeforeCall(fileIdentifierFilename, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileServiceSetFileDescriptor
     * @param fileIdentifierFilename  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceSetFileDescriptorCall(String fileIdentifierFilename, TitaniumSetFileDescriptorRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/import/{fileIdentifier.filename}/descriptor"
            .replaceAll("\\{" + "fileIdentifier.filename" + "\\}", localVarApiClient.escapeString(fileIdentifierFilename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileServiceSetFileDescriptorValidateBeforeCall(String fileIdentifierFilename, TitaniumSetFileDescriptorRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileIdentifierFilename' is set
        if (fileIdentifierFilename == null) {
            throw new ApiException("Missing the required parameter 'fileIdentifierFilename' when calling fileServiceSetFileDescriptor(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling fileServiceSetFileDescriptor(Async)");
        }
        

        okhttp3.Call localVarCall = fileServiceSetFileDescriptorCall(fileIdentifierFilename, body, _callback);
        return localVarCall;

    }

    /**
     * SetFileDescriptor sets the descriptor for a specified file.
     * 
     * @param fileIdentifierFilename  (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object fileServiceSetFileDescriptor(String fileIdentifierFilename, TitaniumSetFileDescriptorRequest body) throws ApiException {
        ApiResponse<Object> localVarResp = fileServiceSetFileDescriptorWithHttpInfo(fileIdentifierFilename, body);
        return localVarResp.getData();
    }

    /**
     * SetFileDescriptor sets the descriptor for a specified file.
     * 
     * @param fileIdentifierFilename  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> fileServiceSetFileDescriptorWithHttpInfo(String fileIdentifierFilename, TitaniumSetFileDescriptorRequest body) throws ApiException {
        okhttp3.Call localVarCall = fileServiceSetFileDescriptorValidateBeforeCall(fileIdentifierFilename, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SetFileDescriptor sets the descriptor for a specified file. (asynchronously)
     * 
     * @param fileIdentifierFilename  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceSetFileDescriptorAsync(String fileIdentifierFilename, TitaniumSetFileDescriptorRequest body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileServiceSetFileDescriptorValidateBeforeCall(fileIdentifierFilename, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
