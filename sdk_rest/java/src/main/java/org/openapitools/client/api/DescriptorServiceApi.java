/*
 * clearconsensus-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RpcStatus;
import org.openapitools.client.model.TitaniumAcknowledgeResponse;
import org.openapitools.client.model.TitaniumDescriptorDefinition;
import org.openapitools.client.model.TitaniumDescriptorDefinitionResponse;
import org.openapitools.client.model.TitaniumDescriptorDependenciesResponse;
import org.openapitools.client.model.TitaniumDescriptorList;
import org.openapitools.client.model.TitaniumEnableDisableRequest;
import org.openapitools.client.model.TitaniumGetDefinition;
import org.openapitools.client.model.TitaniumListRequest;
import org.openapitools.client.model.TitaniumListVersionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DescriptorServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DescriptorServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DescriptorServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for descriptorServiceAddDescriptor
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call descriptorServiceAddDescriptorCall(TitaniumDescriptorDefinition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/descriptor/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call descriptorServiceAddDescriptorValidateBeforeCall(TitaniumDescriptorDefinition body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling descriptorServiceAddDescriptor(Async)");
        }
        

        okhttp3.Call localVarCall = descriptorServiceAddDescriptorCall(body, _callback);
        return localVarCall;

    }

    /**
     * AddDescriptor is used to add specific descriptor with specific definition to the system. Regular users can store a descriptor within their own scope, and any attempts to push it to a different scope will be declined. Back office users can store descriptors in any scope, provided that a scope key is provided. The name of the descriptor must match the name of the asset class to be mapped correctly. If a descriptor with the same name already exists, it will be updated.
     * Example of request for regular user : {   \&quot;name\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;fields\&quot;:[      { [data]&#x3D;\&quot;typeEnumToDisplayName[cellData]\&quot;v        \&quot;name\&quot;:\&quot;submission_date\&quot;,         \&quot;nullable\&quot;:true,         \&quot;type\&quot;:\&quot;string\&quot;      },      {         \&quot;name\&quot;:\&quot;submission_asset\&quot;,         \&quot;nullable\&quot;:true,         \&quot;type\&quot;:\&quot;string\&quot;      }   ] }  Example of request for Back Office : {   \&quot;name\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;scope\&quot;: \&quot;global\&quot;,   \&quot;fields\&quot;:[      {         \&quot;name\&quot;:\&quot;snap_date\&quot;,         \&quot;alias\&quot;:\&quot;snap_date\&quot;,         \&quot;type\&quot;:\&quot;date\&quot;,         \&quot;options\&quot;:{            \&quot;format\&quot;:\&quot;MM/dd/yy\&quot;         }      },      {         \&quot;name\&quot;:\&quot;asset\&quot;,         \&quot;alias\&quot;:\&quot;asset\&quot;,         \&quot;type\&quot;:\&quot;string\&quot;      },      {        \&quot;name\&quot;: \&quot;sub-asset\&quot;,        \&quot;alias\&quot;: \&quot;sub-asset\&quot;,        \&quot;type\&quot;: \&quot;string\&quot;      }   ] }  Example of response : {   \&quot;data\&quot;:{      \&quot;uid\&quot;:\&quot;98fd0526-cc88-11ec-b784-0fe7a41b45e0\&quot;,      \&quot;name\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;   } }  Example of error response : {   \&quot;error\&quot;:{      \&quot;code\&quot;:70,      \&quot;message\&quot;:\&quot;Can&#39;t add descriptor: [com.peernova.api.searchmetadata.metadata.exceptions.MetaDataServiceException: Namespace [bank11] is not valid].\&quot;   } }
     * @param body  (required)
     * @return TitaniumAcknowledgeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumAcknowledgeResponse descriptorServiceAddDescriptor(TitaniumDescriptorDefinition body) throws ApiException {
        ApiResponse<TitaniumAcknowledgeResponse> localVarResp = descriptorServiceAddDescriptorWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * AddDescriptor is used to add specific descriptor with specific definition to the system. Regular users can store a descriptor within their own scope, and any attempts to push it to a different scope will be declined. Back office users can store descriptors in any scope, provided that a scope key is provided. The name of the descriptor must match the name of the asset class to be mapped correctly. If a descriptor with the same name already exists, it will be updated.
     * Example of request for regular user : {   \&quot;name\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;fields\&quot;:[      { [data]&#x3D;\&quot;typeEnumToDisplayName[cellData]\&quot;v        \&quot;name\&quot;:\&quot;submission_date\&quot;,         \&quot;nullable\&quot;:true,         \&quot;type\&quot;:\&quot;string\&quot;      },      {         \&quot;name\&quot;:\&quot;submission_asset\&quot;,         \&quot;nullable\&quot;:true,         \&quot;type\&quot;:\&quot;string\&quot;      }   ] }  Example of request for Back Office : {   \&quot;name\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;scope\&quot;: \&quot;global\&quot;,   \&quot;fields\&quot;:[      {         \&quot;name\&quot;:\&quot;snap_date\&quot;,         \&quot;alias\&quot;:\&quot;snap_date\&quot;,         \&quot;type\&quot;:\&quot;date\&quot;,         \&quot;options\&quot;:{            \&quot;format\&quot;:\&quot;MM/dd/yy\&quot;         }      },      {         \&quot;name\&quot;:\&quot;asset\&quot;,         \&quot;alias\&quot;:\&quot;asset\&quot;,         \&quot;type\&quot;:\&quot;string\&quot;      },      {        \&quot;name\&quot;: \&quot;sub-asset\&quot;,        \&quot;alias\&quot;: \&quot;sub-asset\&quot;,        \&quot;type\&quot;: \&quot;string\&quot;      }   ] }  Example of response : {   \&quot;data\&quot;:{      \&quot;uid\&quot;:\&quot;98fd0526-cc88-11ec-b784-0fe7a41b45e0\&quot;,      \&quot;name\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;   } }  Example of error response : {   \&quot;error\&quot;:{      \&quot;code\&quot;:70,      \&quot;message\&quot;:\&quot;Can&#39;t add descriptor: [com.peernova.api.searchmetadata.metadata.exceptions.MetaDataServiceException: Namespace [bank11] is not valid].\&quot;   } }
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumAcknowledgeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumAcknowledgeResponse> descriptorServiceAddDescriptorWithHttpInfo(TitaniumDescriptorDefinition body) throws ApiException {
        okhttp3.Call localVarCall = descriptorServiceAddDescriptorValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumAcknowledgeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * AddDescriptor is used to add specific descriptor with specific definition to the system. Regular users can store a descriptor within their own scope, and any attempts to push it to a different scope will be declined. Back office users can store descriptors in any scope, provided that a scope key is provided. The name of the descriptor must match the name of the asset class to be mapped correctly. If a descriptor with the same name already exists, it will be updated. (asynchronously)
     * Example of request for regular user : {   \&quot;name\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;fields\&quot;:[      { [data]&#x3D;\&quot;typeEnumToDisplayName[cellData]\&quot;v        \&quot;name\&quot;:\&quot;submission_date\&quot;,         \&quot;nullable\&quot;:true,         \&quot;type\&quot;:\&quot;string\&quot;      },      {         \&quot;name\&quot;:\&quot;submission_asset\&quot;,         \&quot;nullable\&quot;:true,         \&quot;type\&quot;:\&quot;string\&quot;      }   ] }  Example of request for Back Office : {   \&quot;name\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;,   \&quot;scope\&quot;: \&quot;global\&quot;,   \&quot;fields\&quot;:[      {         \&quot;name\&quot;:\&quot;snap_date\&quot;,         \&quot;alias\&quot;:\&quot;snap_date\&quot;,         \&quot;type\&quot;:\&quot;date\&quot;,         \&quot;options\&quot;:{            \&quot;format\&quot;:\&quot;MM/dd/yy\&quot;         }      },      {         \&quot;name\&quot;:\&quot;asset\&quot;,         \&quot;alias\&quot;:\&quot;asset\&quot;,         \&quot;type\&quot;:\&quot;string\&quot;      },      {        \&quot;name\&quot;: \&quot;sub-asset\&quot;,        \&quot;alias\&quot;: \&quot;sub-asset\&quot;,        \&quot;type\&quot;: \&quot;string\&quot;      }   ] }  Example of response : {   \&quot;data\&quot;:{      \&quot;uid\&quot;:\&quot;98fd0526-cc88-11ec-b784-0fe7a41b45e0\&quot;,      \&quot;name\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;   } }  Example of error response : {   \&quot;error\&quot;:{      \&quot;code\&quot;:70,      \&quot;message\&quot;:\&quot;Can&#39;t add descriptor: [com.peernova.api.searchmetadata.metadata.exceptions.MetaDataServiceException: Namespace [bank11] is not valid].\&quot;   } }
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call descriptorServiceAddDescriptorAsync(TitaniumDescriptorDefinition body, final ApiCallback<TitaniumAcknowledgeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = descriptorServiceAddDescriptorValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumAcknowledgeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for descriptorServiceDescriptorDependencies
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call descriptorServiceDescriptorDependenciesCall(TitaniumGetDefinition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/descriptor/dependencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call descriptorServiceDescriptorDependenciesValidateBeforeCall(TitaniumGetDefinition body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling descriptorServiceDescriptorDependencies(Async)");
        }
        

        okhttp3.Call localVarCall = descriptorServiceDescriptorDependenciesCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return TitaniumDescriptorDependenciesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumDescriptorDependenciesResponse descriptorServiceDescriptorDependencies(TitaniumGetDefinition body) throws ApiException {
        ApiResponse<TitaniumDescriptorDependenciesResponse> localVarResp = descriptorServiceDescriptorDependenciesWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumDescriptorDependenciesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumDescriptorDependenciesResponse> descriptorServiceDescriptorDependenciesWithHttpInfo(TitaniumGetDefinition body) throws ApiException {
        okhttp3.Call localVarCall = descriptorServiceDescriptorDependenciesValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumDescriptorDependenciesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call descriptorServiceDescriptorDependenciesAsync(TitaniumGetDefinition body, final ApiCallback<TitaniumDescriptorDependenciesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = descriptorServiceDescriptorDependenciesValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumDescriptorDependenciesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for descriptorServiceDisableDescriptor
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call descriptorServiceDisableDescriptorCall(TitaniumEnableDisableRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/descriptor/disable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call descriptorServiceDisableDescriptorValidateBeforeCall(TitaniumEnableDisableRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling descriptorServiceDisableDescriptor(Async)");
        }
        

        okhttp3.Call localVarCall = descriptorServiceDisableDescriptorCall(body, _callback);
        return localVarCall;

    }

    /**
     * DisableDescriptor is used to disable specific descriptor. Example of response : {    \&quot;data\&quot;: {        \&quot;uid\&quot;: \&quot;\&quot;,        \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;    } }
     * 
     * @param body  (required)
     * @return TitaniumAcknowledgeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumAcknowledgeResponse descriptorServiceDisableDescriptor(TitaniumEnableDisableRequest body) throws ApiException {
        ApiResponse<TitaniumAcknowledgeResponse> localVarResp = descriptorServiceDisableDescriptorWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * DisableDescriptor is used to disable specific descriptor. Example of response : {    \&quot;data\&quot;: {        \&quot;uid\&quot;: \&quot;\&quot;,        \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;    } }
     * 
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumAcknowledgeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumAcknowledgeResponse> descriptorServiceDisableDescriptorWithHttpInfo(TitaniumEnableDisableRequest body) throws ApiException {
        okhttp3.Call localVarCall = descriptorServiceDisableDescriptorValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumAcknowledgeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DisableDescriptor is used to disable specific descriptor. Example of response : {    \&quot;data\&quot;: {        \&quot;uid\&quot;: \&quot;\&quot;,        \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;    } } (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call descriptorServiceDisableDescriptorAsync(TitaniumEnableDisableRequest body, final ApiCallback<TitaniumAcknowledgeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = descriptorServiceDisableDescriptorValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumAcknowledgeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for descriptorServiceEnableDescriptor
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call descriptorServiceEnableDescriptorCall(TitaniumEnableDisableRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/descriptor/enable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call descriptorServiceEnableDescriptorValidateBeforeCall(TitaniumEnableDisableRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling descriptorServiceEnableDescriptor(Async)");
        }
        

        okhttp3.Call localVarCall = descriptorServiceEnableDescriptorCall(body, _callback);
        return localVarCall;

    }

    /**
     * EnableDescriptor is used to enable specific descriptor.
     * Example of request : {  \&quot;name\&quot; : \&quot;foreign_exchange-vanilla-forwards\&quot;,  \&quot;scope\&quot;: \&quot;global\&quot; }  Example of response : {    \&quot;data\&quot;: {        \&quot;uid\&quot;: \&quot;\&quot;,        \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;    } }
     * @param body  (required)
     * @return TitaniumAcknowledgeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumAcknowledgeResponse descriptorServiceEnableDescriptor(TitaniumEnableDisableRequest body) throws ApiException {
        ApiResponse<TitaniumAcknowledgeResponse> localVarResp = descriptorServiceEnableDescriptorWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * EnableDescriptor is used to enable specific descriptor.
     * Example of request : {  \&quot;name\&quot; : \&quot;foreign_exchange-vanilla-forwards\&quot;,  \&quot;scope\&quot;: \&quot;global\&quot; }  Example of response : {    \&quot;data\&quot;: {        \&quot;uid\&quot;: \&quot;\&quot;,        \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;    } }
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumAcknowledgeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumAcknowledgeResponse> descriptorServiceEnableDescriptorWithHttpInfo(TitaniumEnableDisableRequest body) throws ApiException {
        okhttp3.Call localVarCall = descriptorServiceEnableDescriptorValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumAcknowledgeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * EnableDescriptor is used to enable specific descriptor. (asynchronously)
     * Example of request : {  \&quot;name\&quot; : \&quot;foreign_exchange-vanilla-forwards\&quot;,  \&quot;scope\&quot;: \&quot;global\&quot; }  Example of response : {    \&quot;data\&quot;: {        \&quot;uid\&quot;: \&quot;\&quot;,        \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-forwards\&quot;    } }
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call descriptorServiceEnableDescriptorAsync(TitaniumEnableDisableRequest body, final ApiCallback<TitaniumAcknowledgeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = descriptorServiceEnableDescriptorValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumAcknowledgeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for descriptorServiceGetDescriptor
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call descriptorServiceGetDescriptorCall(TitaniumGetDefinition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/descriptor/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call descriptorServiceGetDescriptorValidateBeforeCall(TitaniumGetDefinition body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling descriptorServiceGetDescriptor(Async)");
        }
        

        okhttp3.Call localVarCall = descriptorServiceGetDescriptorCall(body, _callback);
        return localVarCall;

    }

    /**
     * GetDescriptor is used to get specific descriptor definition based on get definition. Regular users can retrieve only their own descriptors and descriptors associated with asset classes. Back office users can retrieve any of the existing descriptors.
     * Example of request : {   \&quot;identifier\&quot;:{      \&quot;name\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;   },   \&quot;scope\&quot;:\&quot;global\&quot; }  Example of response : {    \&quot;data\&quot;: \&quot;{\\\&quot;name\\\&quot;:\\\&quot;foreign_exchange-vanilla-forwards\\\&quot;,\\\&quot;fields\\\&quot;:[{\\\&quot;name\\\&quot;:\\\&quot;snap_date\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;date\\\&quot;,\\\&quot;options\\\&quot;:{\\\&quot;format\\\&quot;:\\\&quot;MM/dd/yy\\\&quot;},\\\&quot;alias\\\&quot;:\\\&quot;snap_date\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;asset\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;asset\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;sub-asset\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;sub-asset\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;service\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;service\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;snap_time\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;snap_time\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;curr_1\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;curr_1\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;curr_2\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;curr_2\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;onshore_offshore_curr_1\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;onshore_offshore_curr_1\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;onshore_offshore_curr_2\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;onshore_offshore_curr_2\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;instrument_type\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;instrument_type\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;tenor\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;tenor\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;value_source\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;value_source\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;fwrd_conversion_factor\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;double\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;fwrd_conversion_factor\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;mid_fwrd_outright\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;double\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;mid_fwrd_outright\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;value_source_ref_id\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;value_source_ref_id\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;client\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;client\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;spot_reference_price\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;double\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;spot_reference_price\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;mid_fwrd_points\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;double\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;mid_fwrd_points\\\&quot;}]}\&quot; }  Example of error response : {    \&quot;error\&quot;: {        \&quot;code\&quot;: 70,        \&quot;message\&quot;: \&quot;Can&#39;t get descriptor: [[foreign_exchange-vanilla-forwards1] of service [DESCRIPTOR] does not exist in namespace [global]].\&quot;    } }
     * @param body  (required)
     * @return TitaniumDescriptorDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumDescriptorDefinitionResponse descriptorServiceGetDescriptor(TitaniumGetDefinition body) throws ApiException {
        ApiResponse<TitaniumDescriptorDefinitionResponse> localVarResp = descriptorServiceGetDescriptorWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * GetDescriptor is used to get specific descriptor definition based on get definition. Regular users can retrieve only their own descriptors and descriptors associated with asset classes. Back office users can retrieve any of the existing descriptors.
     * Example of request : {   \&quot;identifier\&quot;:{      \&quot;name\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;   },   \&quot;scope\&quot;:\&quot;global\&quot; }  Example of response : {    \&quot;data\&quot;: \&quot;{\\\&quot;name\\\&quot;:\\\&quot;foreign_exchange-vanilla-forwards\\\&quot;,\\\&quot;fields\\\&quot;:[{\\\&quot;name\\\&quot;:\\\&quot;snap_date\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;date\\\&quot;,\\\&quot;options\\\&quot;:{\\\&quot;format\\\&quot;:\\\&quot;MM/dd/yy\\\&quot;},\\\&quot;alias\\\&quot;:\\\&quot;snap_date\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;asset\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;asset\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;sub-asset\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;sub-asset\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;service\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;service\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;snap_time\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;snap_time\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;curr_1\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;curr_1\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;curr_2\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;curr_2\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;onshore_offshore_curr_1\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;onshore_offshore_curr_1\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;onshore_offshore_curr_2\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;onshore_offshore_curr_2\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;instrument_type\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;instrument_type\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;tenor\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;tenor\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;value_source\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;value_source\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;fwrd_conversion_factor\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;double\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;fwrd_conversion_factor\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;mid_fwrd_outright\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;double\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;mid_fwrd_outright\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;value_source_ref_id\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;value_source_ref_id\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;client\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;client\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;spot_reference_price\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;double\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;spot_reference_price\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;mid_fwrd_points\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;double\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;mid_fwrd_points\\\&quot;}]}\&quot; }  Example of error response : {    \&quot;error\&quot;: {        \&quot;code\&quot;: 70,        \&quot;message\&quot;: \&quot;Can&#39;t get descriptor: [[foreign_exchange-vanilla-forwards1] of service [DESCRIPTOR] does not exist in namespace [global]].\&quot;    } }
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumDescriptorDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumDescriptorDefinitionResponse> descriptorServiceGetDescriptorWithHttpInfo(TitaniumGetDefinition body) throws ApiException {
        okhttp3.Call localVarCall = descriptorServiceGetDescriptorValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumDescriptorDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetDescriptor is used to get specific descriptor definition based on get definition. Regular users can retrieve only their own descriptors and descriptors associated with asset classes. Back office users can retrieve any of the existing descriptors. (asynchronously)
     * Example of request : {   \&quot;identifier\&quot;:{      \&quot;name\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;   },   \&quot;scope\&quot;:\&quot;global\&quot; }  Example of response : {    \&quot;data\&quot;: \&quot;{\\\&quot;name\\\&quot;:\\\&quot;foreign_exchange-vanilla-forwards\\\&quot;,\\\&quot;fields\\\&quot;:[{\\\&quot;name\\\&quot;:\\\&quot;snap_date\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;date\\\&quot;,\\\&quot;options\\\&quot;:{\\\&quot;format\\\&quot;:\\\&quot;MM/dd/yy\\\&quot;},\\\&quot;alias\\\&quot;:\\\&quot;snap_date\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;asset\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;asset\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;sub-asset\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;sub-asset\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;service\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;service\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;snap_time\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;snap_time\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;curr_1\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;curr_1\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;curr_2\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;curr_2\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;onshore_offshore_curr_1\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;onshore_offshore_curr_1\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;onshore_offshore_curr_2\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;onshore_offshore_curr_2\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;instrument_type\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;instrument_type\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;tenor\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;tenor\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;value_source\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;value_source\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;fwrd_conversion_factor\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;double\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;fwrd_conversion_factor\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;mid_fwrd_outright\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;double\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;mid_fwrd_outright\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;value_source_ref_id\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;value_source_ref_id\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;client\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;client\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;spot_reference_price\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;double\\\&quot;,\\\&quot;nullable\\\&quot;:true,\\\&quot;alias\\\&quot;:\\\&quot;spot_reference_price\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;mid_fwrd_points\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;double\\\&quot;,\\\&quot;alias\\\&quot;:\\\&quot;mid_fwrd_points\\\&quot;}]}\&quot; }  Example of error response : {    \&quot;error\&quot;: {        \&quot;code\&quot;: 70,        \&quot;message\&quot;: \&quot;Can&#39;t get descriptor: [[foreign_exchange-vanilla-forwards1] of service [DESCRIPTOR] does not exist in namespace [global]].\&quot;    } }
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call descriptorServiceGetDescriptorAsync(TitaniumGetDefinition body, final ApiCallback<TitaniumDescriptorDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = descriptorServiceGetDescriptorValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumDescriptorDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for descriptorServiceGetDescriptorVersion
     * @param scope  (required)
     * @param name  (required)
     * @param versionId  (required)
     * @param descriptorName  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call descriptorServiceGetDescriptorVersionCall(String scope, String name, String versionId, String descriptorName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/descriptor/version/{scope}/{name}/{versionId}"
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "versionId" + "\\}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (descriptorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("descriptorName", descriptorName));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call descriptorServiceGetDescriptorVersionValidateBeforeCall(String scope, String name, String versionId, String descriptorName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling descriptorServiceGetDescriptorVersion(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling descriptorServiceGetDescriptorVersion(Async)");
        }
        
        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling descriptorServiceGetDescriptorVersion(Async)");
        }
        

        okhttp3.Call localVarCall = descriptorServiceGetDescriptorVersionCall(scope, name, versionId, descriptorName, _callback);
        return localVarCall;

    }

    /**
     * GetDescriptorVersion returns current version of the specific descriptor.
     * Example of response : { \&quot;data\&quot;:\&quot;{\\\&quot;name\\\&quot;:\\\&quot;fx_test_for_bank1\\\&quot;,\\\&quot;fields\\\&quot;:[{\\\&quot;name\\\&quot;:\\\&quot;submission_date\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;date\\\&quot;,\\\&quot;options\\\&quot;:{\\\&quot;format\\\&quot;:\\\&quot;MM/dd/yyyy\\\&quot;},\\\&quot;alias\\\&quot;:\\\&quot;date12\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;submission_asset\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;nullable\\\&quot;:true}],\\\&quot;options\\\&quot;:{\\\&quot;DEDUPLICATION\\\&quot;:{\\\&quot;GROUP_BY\\\&quot;:[\\\&quot;submission_date\\\&quot;,\\\&quot;submission_asset\\\&quot;]}}}\&quot; }
     * @param scope  (required)
     * @param name  (required)
     * @param versionId  (required)
     * @param descriptorName  (optional)
     * @return TitaniumDescriptorDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumDescriptorDefinitionResponse descriptorServiceGetDescriptorVersion(String scope, String name, String versionId, String descriptorName) throws ApiException {
        ApiResponse<TitaniumDescriptorDefinitionResponse> localVarResp = descriptorServiceGetDescriptorVersionWithHttpInfo(scope, name, versionId, descriptorName);
        return localVarResp.getData();
    }

    /**
     * GetDescriptorVersion returns current version of the specific descriptor.
     * Example of response : { \&quot;data\&quot;:\&quot;{\\\&quot;name\\\&quot;:\\\&quot;fx_test_for_bank1\\\&quot;,\\\&quot;fields\\\&quot;:[{\\\&quot;name\\\&quot;:\\\&quot;submission_date\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;date\\\&quot;,\\\&quot;options\\\&quot;:{\\\&quot;format\\\&quot;:\\\&quot;MM/dd/yyyy\\\&quot;},\\\&quot;alias\\\&quot;:\\\&quot;date12\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;submission_asset\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;nullable\\\&quot;:true}],\\\&quot;options\\\&quot;:{\\\&quot;DEDUPLICATION\\\&quot;:{\\\&quot;GROUP_BY\\\&quot;:[\\\&quot;submission_date\\\&quot;,\\\&quot;submission_asset\\\&quot;]}}}\&quot; }
     * @param scope  (required)
     * @param name  (required)
     * @param versionId  (required)
     * @param descriptorName  (optional)
     * @return ApiResponse&lt;TitaniumDescriptorDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumDescriptorDefinitionResponse> descriptorServiceGetDescriptorVersionWithHttpInfo(String scope, String name, String versionId, String descriptorName) throws ApiException {
        okhttp3.Call localVarCall = descriptorServiceGetDescriptorVersionValidateBeforeCall(scope, name, versionId, descriptorName, null);
        Type localVarReturnType = new TypeToken<TitaniumDescriptorDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetDescriptorVersion returns current version of the specific descriptor. (asynchronously)
     * Example of response : { \&quot;data\&quot;:\&quot;{\\\&quot;name\\\&quot;:\\\&quot;fx_test_for_bank1\\\&quot;,\\\&quot;fields\\\&quot;:[{\\\&quot;name\\\&quot;:\\\&quot;submission_date\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;date\\\&quot;,\\\&quot;options\\\&quot;:{\\\&quot;format\\\&quot;:\\\&quot;MM/dd/yyyy\\\&quot;},\\\&quot;alias\\\&quot;:\\\&quot;date12\\\&quot;},{\\\&quot;name\\\&quot;:\\\&quot;submission_asset\\\&quot;,\\\&quot;type\\\&quot;:\\\&quot;string\\\&quot;,\\\&quot;nullable\\\&quot;:true}],\\\&quot;options\\\&quot;:{\\\&quot;DEDUPLICATION\\\&quot;:{\\\&quot;GROUP_BY\\\&quot;:[\\\&quot;submission_date\\\&quot;,\\\&quot;submission_asset\\\&quot;]}}}\&quot; }
     * @param scope  (required)
     * @param name  (required)
     * @param versionId  (required)
     * @param descriptorName  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call descriptorServiceGetDescriptorVersionAsync(String scope, String name, String versionId, String descriptorName, final ApiCallback<TitaniumDescriptorDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = descriptorServiceGetDescriptorVersionValidateBeforeCall(scope, name, versionId, descriptorName, _callback);
        Type localVarReturnType = new TypeToken<TitaniumDescriptorDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for descriptorServiceListDescriptorVersions
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call descriptorServiceListDescriptorVersionsCall(TitaniumGetDefinition body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/descriptor/versions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call descriptorServiceListDescriptorVersionsValidateBeforeCall(TitaniumGetDefinition body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling descriptorServiceListDescriptorVersions(Async)");
        }
        

        okhttp3.Call localVarCall = descriptorServiceListDescriptorVersionsCall(body, _callback);
        return localVarCall;

    }

    /**
     * ListDescriptorVersions returns list of version of the specific descriptor versions.
     * Example of request : {   \&quot;scope\&quot;:\&quot;global\&quot;,   \&quot;identifier\&quot;:{      \&quot;name\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;   } }  Example of response : {    \&quot;data\&quot;: {        \&quot;versions\&quot;: [            {                \&quot;versionId\&quot;: \&quot;fM9AukEqTJXKOcbW_tQ7Sfr4Clp5qinKq_liXZYzyiI&#x3D;\&quot;,                \&quot;createdAt\&quot;: \&quot;2022-06-14 10:57:42.0\&quot;            },            {                \&quot;versionId\&quot;: \&quot;LmVlkPbnsUKFBw8qIbUHEzBsRrcnG_BSMnopA5Ptd7I&#x3D;\&quot;,                \&quot;createdAt\&quot;: \&quot;2022-06-14 10:20:48.0\&quot;            }        ]    } }
     * @param body  (required)
     * @return TitaniumListVersionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumListVersionResponse descriptorServiceListDescriptorVersions(TitaniumGetDefinition body) throws ApiException {
        ApiResponse<TitaniumListVersionResponse> localVarResp = descriptorServiceListDescriptorVersionsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * ListDescriptorVersions returns list of version of the specific descriptor versions.
     * Example of request : {   \&quot;scope\&quot;:\&quot;global\&quot;,   \&quot;identifier\&quot;:{      \&quot;name\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;   } }  Example of response : {    \&quot;data\&quot;: {        \&quot;versions\&quot;: [            {                \&quot;versionId\&quot;: \&quot;fM9AukEqTJXKOcbW_tQ7Sfr4Clp5qinKq_liXZYzyiI&#x3D;\&quot;,                \&quot;createdAt\&quot;: \&quot;2022-06-14 10:57:42.0\&quot;            },            {                \&quot;versionId\&quot;: \&quot;LmVlkPbnsUKFBw8qIbUHEzBsRrcnG_BSMnopA5Ptd7I&#x3D;\&quot;,                \&quot;createdAt\&quot;: \&quot;2022-06-14 10:20:48.0\&quot;            }        ]    } }
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumListVersionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumListVersionResponse> descriptorServiceListDescriptorVersionsWithHttpInfo(TitaniumGetDefinition body) throws ApiException {
        okhttp3.Call localVarCall = descriptorServiceListDescriptorVersionsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumListVersionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListDescriptorVersions returns list of version of the specific descriptor versions. (asynchronously)
     * Example of request : {   \&quot;scope\&quot;:\&quot;global\&quot;,   \&quot;identifier\&quot;:{      \&quot;name\&quot;:\&quot;foreign_exchange-vanilla-forwards\&quot;   } }  Example of response : {    \&quot;data\&quot;: {        \&quot;versions\&quot;: [            {                \&quot;versionId\&quot;: \&quot;fM9AukEqTJXKOcbW_tQ7Sfr4Clp5qinKq_liXZYzyiI&#x3D;\&quot;,                \&quot;createdAt\&quot;: \&quot;2022-06-14 10:57:42.0\&quot;            },            {                \&quot;versionId\&quot;: \&quot;LmVlkPbnsUKFBw8qIbUHEzBsRrcnG_BSMnopA5Ptd7I&#x3D;\&quot;,                \&quot;createdAt\&quot;: \&quot;2022-06-14 10:20:48.0\&quot;            }        ]    } }
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call descriptorServiceListDescriptorVersionsAsync(TitaniumGetDefinition body, final ApiCallback<TitaniumListVersionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = descriptorServiceListDescriptorVersionsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumListVersionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for descriptorServiceListDescriptors
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call descriptorServiceListDescriptorsCall(TitaniumListRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/descriptor/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call descriptorServiceListDescriptorsValidateBeforeCall(TitaniumListRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling descriptorServiceListDescriptors(Async)");
        }
        

        okhttp3.Call localVarCall = descriptorServiceListDescriptorsCall(body, _callback);
        return localVarCall;

    }

    /**
     * ListDescriptors returns list of specific descriptors according to request.
     * Example of request : {   \&quot;scope\&quot;:\&quot;global\&quot; }  Example of response : {    \&quot;data\&quot;: {        \&quot;results\&quot;: [            {                \&quot;uid\&quot;: \&quot;\&quot;,                \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-options\&quot;            },            {                \&quot;uid\&quot;: \&quot;\&quot;,                \&quot;name\&quot;: \&quot;foreign_exchange-exotics-barriers_and_digitals\&quot;            },            {                \&quot;uid\&quot;: \&quot;\&quot;,                \&quot;name\&quot;: \&quot;foreign_exchange-exotics-tarfs\&quot;            }        ]    } }
     * @param body  (required)
     * @return TitaniumDescriptorList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public TitaniumDescriptorList descriptorServiceListDescriptors(TitaniumListRequest body) throws ApiException {
        ApiResponse<TitaniumDescriptorList> localVarResp = descriptorServiceListDescriptorsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * ListDescriptors returns list of specific descriptors according to request.
     * Example of request : {   \&quot;scope\&quot;:\&quot;global\&quot; }  Example of response : {    \&quot;data\&quot;: {        \&quot;results\&quot;: [            {                \&quot;uid\&quot;: \&quot;\&quot;,                \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-options\&quot;            },            {                \&quot;uid\&quot;: \&quot;\&quot;,                \&quot;name\&quot;: \&quot;foreign_exchange-exotics-barriers_and_digitals\&quot;            },            {                \&quot;uid\&quot;: \&quot;\&quot;,                \&quot;name\&quot;: \&quot;foreign_exchange-exotics-tarfs\&quot;            }        ]    } }
     * @param body  (required)
     * @return ApiResponse&lt;TitaniumDescriptorList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitaniumDescriptorList> descriptorServiceListDescriptorsWithHttpInfo(TitaniumListRequest body) throws ApiException {
        okhttp3.Call localVarCall = descriptorServiceListDescriptorsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TitaniumDescriptorList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListDescriptors returns list of specific descriptors according to request. (asynchronously)
     * Example of request : {   \&quot;scope\&quot;:\&quot;global\&quot; }  Example of response : {    \&quot;data\&quot;: {        \&quot;results\&quot;: [            {                \&quot;uid\&quot;: \&quot;\&quot;,                \&quot;name\&quot;: \&quot;foreign_exchange-vanilla-options\&quot;            },            {                \&quot;uid\&quot;: \&quot;\&quot;,                \&quot;name\&quot;: \&quot;foreign_exchange-exotics-barriers_and_digitals\&quot;            },            {                \&quot;uid\&quot;: \&quot;\&quot;,                \&quot;name\&quot;: \&quot;foreign_exchange-exotics-tarfs\&quot;            }        ]    } }
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call descriptorServiceListDescriptorsAsync(TitaniumListRequest body, final ApiCallback<TitaniumDescriptorList> _callback) throws ApiException {

        okhttp3.Call localVarCall = descriptorServiceListDescriptorsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TitaniumDescriptorList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
