# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.titanium_trade_alignment_score import TitaniumTradeAlignmentScore  # noqa: E501
from openapi_client.rest import ApiException

class TestTitaniumTradeAlignmentScore(unittest.TestCase):
    """TitaniumTradeAlignmentScore unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test TitaniumTradeAlignmentScore
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.titanium_trade_alignment_score.TitaniumTradeAlignmentScore()  # noqa: E501
        if include_optional :
            return TitaniumTradeAlignmentScore(
                history = [
                    openapi_client.models.titanium_trade_aligment_date_and_value.titaniumTradeAligmentDateAndValue(
                        date = '', 
                        score = openapi_client.models.score.score(), 
                        score_status = '', )
                    ], 
                latest_trade_price = openapi_client.models.latest_trade_price.latestTradePrice(), 
                score = openapi_client.models.score.score(), 
                score_status = '', 
                std_dev = openapi_client.models.std_dev.stdDev(), 
                submission_mean = openapi_client.models.submission_mean.submissionMean()
            )
        else :
            return TitaniumTradeAlignmentScore(
        )

    def testTitaniumTradeAlignmentScore(self):
        """Test TitaniumTradeAlignmentScore"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
