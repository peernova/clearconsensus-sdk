# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.titanium_expertise_score import TitaniumExpertiseScore  # noqa: E501
from openapi_client.rest import ApiException

class TestTitaniumExpertiseScore(unittest.TestCase):
    """TitaniumExpertiseScore unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test TitaniumExpertiseScore
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.titanium_expertise_score.TitaniumExpertiseScore()  # noqa: E501
        if include_optional :
            return TitaniumExpertiseScore(
                challenge_score = openapi_client.models.challenge_score.challengeScore(), 
                consensus_distance_score = openapi_client.models.consensus_distance_score.consensusDistanceScore(), 
                consensus_score = openapi_client.models.consensus_score.consensusScore(), 
                dimension_credit_score = openapi_client.models.dimension_credit_score.dimensionCreditScore(), 
                expertise_rank = openapi_client.models.expertise_rank.expertiseRank(), 
                experts_count = openapi_client.models.experts_count.expertsCount(), 
                proximity_to_post_challenge_consensus_mean = openapi_client.models.proximity_to_post_challenge_consensus_mean.proximityToPostChallengeConsensusMean(), 
                score = openapi_client.models.score.score(), 
                submitted_score = openapi_client.models.submitted_score.submittedScore()
            )
        else :
            return TitaniumExpertiseScore(
        )

    def testTitaniumExpertiseScore(self):
        """Test TitaniumExpertiseScore"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
