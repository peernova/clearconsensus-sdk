# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DescriptorServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def descriptor_service_add_descriptor(self, body, **kwargs):  # noqa: E501
        """AddDescriptor is used to add specific descriptor with specific definition to the system. Regular users can store a descriptor within their own scope, and any attempts to push it to a different scope will be declined. Back office users can store descriptors in any scope, provided that a scope key is provided. The name of the descriptor must match the name of the asset class to be mapped correctly. If a descriptor with the same name already exists, it will be updated.  # noqa: E501

        Example of request for regular user : {   \"name\":\"foreign_exchange-vanilla-forwards\",   \"fields\":[      { [data]=\"typeEnumToDisplayName[cellData]\"v        \"name\":\"submission_date\",         \"nullable\":true,         \"type\":\"string\"      },      {         \"name\":\"submission_asset\",         \"nullable\":true,         \"type\":\"string\"      }   ] }  Example of request for Back Office : {   \"name\":\"foreign_exchange-vanilla-forwards\",   \"scope\": \"global\",   \"fields\":[      {         \"name\":\"snap_date\",         \"alias\":\"snap_date\",         \"type\":\"date\",         \"options\":{            \"format\":\"MM/dd/yy\"         }      },      {         \"name\":\"asset\",         \"alias\":\"asset\",         \"type\":\"string\"      },      {        \"name\": \"sub-asset\",        \"alias\": \"sub-asset\",        \"type\": \"string\"      }   ] }  Example of response : {   \"data\":{      \"uid\":\"98fd0526-cc88-11ec-b784-0fe7a41b45e0\",      \"name\":\"foreign_exchange-vanilla-forwards\"   } }  Example of error response : {   \"error\":{      \"code\":70,      \"message\":\"Can't add descriptor: [com.peernova.api.searchmetadata.metadata.exceptions.MetaDataServiceException: Namespace [bank11] is not valid].\"   } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_add_descriptor(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumDescriptorDefinition
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TitaniumAcknowledgeResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.descriptor_service_add_descriptor_with_http_info(body, **kwargs)  # noqa: E501

    def descriptor_service_add_descriptor_with_http_info(self, body, **kwargs):  # noqa: E501
        """AddDescriptor is used to add specific descriptor with specific definition to the system. Regular users can store a descriptor within their own scope, and any attempts to push it to a different scope will be declined. Back office users can store descriptors in any scope, provided that a scope key is provided. The name of the descriptor must match the name of the asset class to be mapped correctly. If a descriptor with the same name already exists, it will be updated.  # noqa: E501

        Example of request for regular user : {   \"name\":\"foreign_exchange-vanilla-forwards\",   \"fields\":[      { [data]=\"typeEnumToDisplayName[cellData]\"v        \"name\":\"submission_date\",         \"nullable\":true,         \"type\":\"string\"      },      {         \"name\":\"submission_asset\",         \"nullable\":true,         \"type\":\"string\"      }   ] }  Example of request for Back Office : {   \"name\":\"foreign_exchange-vanilla-forwards\",   \"scope\": \"global\",   \"fields\":[      {         \"name\":\"snap_date\",         \"alias\":\"snap_date\",         \"type\":\"date\",         \"options\":{            \"format\":\"MM/dd/yy\"         }      },      {         \"name\":\"asset\",         \"alias\":\"asset\",         \"type\":\"string\"      },      {        \"name\": \"sub-asset\",        \"alias\": \"sub-asset\",        \"type\": \"string\"      }   ] }  Example of response : {   \"data\":{      \"uid\":\"98fd0526-cc88-11ec-b784-0fe7a41b45e0\",      \"name\":\"foreign_exchange-vanilla-forwards\"   } }  Example of error response : {   \"error\":{      \"code\":70,      \"message\":\"Can't add descriptor: [com.peernova.api.searchmetadata.metadata.exceptions.MetaDataServiceException: Namespace [bank11] is not valid].\"   } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_add_descriptor_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumDescriptorDefinition
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TitaniumAcknowledgeResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method descriptor_service_add_descriptor" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and local_var_params.get('body') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `descriptor_service_add_descriptor`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "TitaniumAcknowledgeResponse",
        }

        return self.api_client.call_api(
            '/api/v1/descriptor/add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def descriptor_service_descriptor_dependencies(self, body, **kwargs):  # noqa: E501
        """descriptor_service_descriptor_dependencies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_descriptor_dependencies(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumGetDefinition
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TitaniumDescriptorDependenciesResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.descriptor_service_descriptor_dependencies_with_http_info(body, **kwargs)  # noqa: E501

    def descriptor_service_descriptor_dependencies_with_http_info(self, body, **kwargs):  # noqa: E501
        """descriptor_service_descriptor_dependencies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_descriptor_dependencies_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumGetDefinition
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TitaniumDescriptorDependenciesResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method descriptor_service_descriptor_dependencies" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and local_var_params.get('body') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `descriptor_service_descriptor_dependencies`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "TitaniumDescriptorDependenciesResponse",
        }

        return self.api_client.call_api(
            '/api/v1/descriptor/dependencies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def descriptor_service_disable_descriptor(self, body, **kwargs):  # noqa: E501
        """DisableDescriptor is used to disable specific descriptor. Example of response : {    \"data\": {        \"uid\": \"\",        \"name\": \"foreign_exchange-vanilla-forwards\"    } }  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_disable_descriptor(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumEnableDisableRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TitaniumAcknowledgeResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.descriptor_service_disable_descriptor_with_http_info(body, **kwargs)  # noqa: E501

    def descriptor_service_disable_descriptor_with_http_info(self, body, **kwargs):  # noqa: E501
        """DisableDescriptor is used to disable specific descriptor. Example of response : {    \"data\": {        \"uid\": \"\",        \"name\": \"foreign_exchange-vanilla-forwards\"    } }  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_disable_descriptor_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumEnableDisableRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TitaniumAcknowledgeResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method descriptor_service_disable_descriptor" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and local_var_params.get('body') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `descriptor_service_disable_descriptor`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "TitaniumAcknowledgeResponse",
        }

        return self.api_client.call_api(
            '/api/v1/descriptor/disable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def descriptor_service_enable_descriptor(self, body, **kwargs):  # noqa: E501
        """EnableDescriptor is used to enable specific descriptor.  # noqa: E501

        Example of request : {  \"name\" : \"foreign_exchange-vanilla-forwards\",  \"scope\": \"global\" }  Example of response : {    \"data\": {        \"uid\": \"\",        \"name\": \"foreign_exchange-vanilla-forwards\"    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_enable_descriptor(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumEnableDisableRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TitaniumAcknowledgeResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.descriptor_service_enable_descriptor_with_http_info(body, **kwargs)  # noqa: E501

    def descriptor_service_enable_descriptor_with_http_info(self, body, **kwargs):  # noqa: E501
        """EnableDescriptor is used to enable specific descriptor.  # noqa: E501

        Example of request : {  \"name\" : \"foreign_exchange-vanilla-forwards\",  \"scope\": \"global\" }  Example of response : {    \"data\": {        \"uid\": \"\",        \"name\": \"foreign_exchange-vanilla-forwards\"    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_enable_descriptor_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumEnableDisableRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TitaniumAcknowledgeResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method descriptor_service_enable_descriptor" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and local_var_params.get('body') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `descriptor_service_enable_descriptor`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "TitaniumAcknowledgeResponse",
        }

        return self.api_client.call_api(
            '/api/v1/descriptor/enable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def descriptor_service_get_descriptor(self, body, **kwargs):  # noqa: E501
        """GetDescriptor is used to get specific descriptor definition based on get definition. Regular users can retrieve only their own descriptors and descriptors associated with asset classes. Back office users can retrieve any of the existing descriptors.  # noqa: E501

        Example of request : {   \"identifier\":{      \"name\":\"foreign_exchange-vanilla-forwards\"   },   \"scope\":\"global\" }  Example of response : {    \"data\": \"{\\\"name\\\":\\\"foreign_exchange-vanilla-forwards\\\",\\\"fields\\\":[{\\\"name\\\":\\\"snap_date\\\",\\\"type\\\":\\\"date\\\",\\\"options\\\":{\\\"format\\\":\\\"MM/dd/yy\\\"},\\\"alias\\\":\\\"snap_date\\\"},{\\\"name\\\":\\\"asset\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"asset\\\"},{\\\"name\\\":\\\"sub-asset\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"sub-asset\\\"},{\\\"name\\\":\\\"service\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"service\\\"},{\\\"name\\\":\\\"snap_time\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"snap_time\\\"},{\\\"name\\\":\\\"curr_1\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"curr_1\\\"},{\\\"name\\\":\\\"curr_2\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"curr_2\\\"},{\\\"name\\\":\\\"onshore_offshore_curr_1\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"onshore_offshore_curr_1\\\"},{\\\"name\\\":\\\"onshore_offshore_curr_2\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"onshore_offshore_curr_2\\\"},{\\\"name\\\":\\\"instrument_type\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"instrument_type\\\"},{\\\"name\\\":\\\"tenor\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"tenor\\\"},{\\\"name\\\":\\\"value_source\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"value_source\\\"},{\\\"name\\\":\\\"fwrd_conversion_factor\\\",\\\"type\\\":\\\"double\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"fwrd_conversion_factor\\\"},{\\\"name\\\":\\\"mid_fwrd_outright\\\",\\\"type\\\":\\\"double\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"mid_fwrd_outright\\\"},{\\\"name\\\":\\\"value_source_ref_id\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"value_source_ref_id\\\"},{\\\"name\\\":\\\"client\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"client\\\"},{\\\"name\\\":\\\"spot_reference_price\\\",\\\"type\\\":\\\"double\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"spot_reference_price\\\"},{\\\"name\\\":\\\"mid_fwrd_points\\\",\\\"type\\\":\\\"double\\\",\\\"alias\\\":\\\"mid_fwrd_points\\\"}]}\" }  Example of error response : {    \"error\": {        \"code\": 70,        \"message\": \"Can't get descriptor: [[foreign_exchange-vanilla-forwards1] of service [DESCRIPTOR] does not exist in namespace [global]].\"    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_get_descriptor(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumGetDefinition
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TitaniumDescriptorDefinitionResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.descriptor_service_get_descriptor_with_http_info(body, **kwargs)  # noqa: E501

    def descriptor_service_get_descriptor_with_http_info(self, body, **kwargs):  # noqa: E501
        """GetDescriptor is used to get specific descriptor definition based on get definition. Regular users can retrieve only their own descriptors and descriptors associated with asset classes. Back office users can retrieve any of the existing descriptors.  # noqa: E501

        Example of request : {   \"identifier\":{      \"name\":\"foreign_exchange-vanilla-forwards\"   },   \"scope\":\"global\" }  Example of response : {    \"data\": \"{\\\"name\\\":\\\"foreign_exchange-vanilla-forwards\\\",\\\"fields\\\":[{\\\"name\\\":\\\"snap_date\\\",\\\"type\\\":\\\"date\\\",\\\"options\\\":{\\\"format\\\":\\\"MM/dd/yy\\\"},\\\"alias\\\":\\\"snap_date\\\"},{\\\"name\\\":\\\"asset\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"asset\\\"},{\\\"name\\\":\\\"sub-asset\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"sub-asset\\\"},{\\\"name\\\":\\\"service\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"service\\\"},{\\\"name\\\":\\\"snap_time\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"snap_time\\\"},{\\\"name\\\":\\\"curr_1\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"curr_1\\\"},{\\\"name\\\":\\\"curr_2\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"curr_2\\\"},{\\\"name\\\":\\\"onshore_offshore_curr_1\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"onshore_offshore_curr_1\\\"},{\\\"name\\\":\\\"onshore_offshore_curr_2\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"onshore_offshore_curr_2\\\"},{\\\"name\\\":\\\"instrument_type\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"instrument_type\\\"},{\\\"name\\\":\\\"tenor\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"tenor\\\"},{\\\"name\\\":\\\"value_source\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"value_source\\\"},{\\\"name\\\":\\\"fwrd_conversion_factor\\\",\\\"type\\\":\\\"double\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"fwrd_conversion_factor\\\"},{\\\"name\\\":\\\"mid_fwrd_outright\\\",\\\"type\\\":\\\"double\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"mid_fwrd_outright\\\"},{\\\"name\\\":\\\"value_source_ref_id\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"value_source_ref_id\\\"},{\\\"name\\\":\\\"client\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"client\\\"},{\\\"name\\\":\\\"spot_reference_price\\\",\\\"type\\\":\\\"double\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"spot_reference_price\\\"},{\\\"name\\\":\\\"mid_fwrd_points\\\",\\\"type\\\":\\\"double\\\",\\\"alias\\\":\\\"mid_fwrd_points\\\"}]}\" }  Example of error response : {    \"error\": {        \"code\": 70,        \"message\": \"Can't get descriptor: [[foreign_exchange-vanilla-forwards1] of service [DESCRIPTOR] does not exist in namespace [global]].\"    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_get_descriptor_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumGetDefinition
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TitaniumDescriptorDefinitionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method descriptor_service_get_descriptor" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and local_var_params.get('body') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `descriptor_service_get_descriptor`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "TitaniumDescriptorDefinitionResponse",
        }

        return self.api_client.call_api(
            '/api/v1/descriptor/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def descriptor_service_get_descriptor_version(self, scope, name, version_id, **kwargs):  # noqa: E501
        """GetDescriptorVersion returns current version of the specific descriptor.  # noqa: E501

        Example of response : { \"data\":\"{\\\"name\\\":\\\"fx_test_for_bank1\\\",\\\"fields\\\":[{\\\"name\\\":\\\"submission_date\\\",\\\"type\\\":\\\"date\\\",\\\"options\\\":{\\\"format\\\":\\\"MM/dd/yyyy\\\"},\\\"alias\\\":\\\"date12\\\"},{\\\"name\\\":\\\"submission_asset\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true}],\\\"options\\\":{\\\"DEDUPLICATION\\\":{\\\"GROUP_BY\\\":[\\\"submission_date\\\",\\\"submission_asset\\\"]}}}\" }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_get_descriptor_version(scope, name, version_id, async_req=True)
        >>> result = thread.get()

        :param scope: (required)
        :type scope: str
        :param name: (required)
        :type name: str
        :param version_id: (required)
        :type version_id: str
        :param descriptor_name:
        :type descriptor_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TitaniumDescriptorDefinitionResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.descriptor_service_get_descriptor_version_with_http_info(scope, name, version_id, **kwargs)  # noqa: E501

    def descriptor_service_get_descriptor_version_with_http_info(self, scope, name, version_id, **kwargs):  # noqa: E501
        """GetDescriptorVersion returns current version of the specific descriptor.  # noqa: E501

        Example of response : { \"data\":\"{\\\"name\\\":\\\"fx_test_for_bank1\\\",\\\"fields\\\":[{\\\"name\\\":\\\"submission_date\\\",\\\"type\\\":\\\"date\\\",\\\"options\\\":{\\\"format\\\":\\\"MM/dd/yyyy\\\"},\\\"alias\\\":\\\"date12\\\"},{\\\"name\\\":\\\"submission_asset\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true}],\\\"options\\\":{\\\"DEDUPLICATION\\\":{\\\"GROUP_BY\\\":[\\\"submission_date\\\",\\\"submission_asset\\\"]}}}\" }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_get_descriptor_version_with_http_info(scope, name, version_id, async_req=True)
        >>> result = thread.get()

        :param scope: (required)
        :type scope: str
        :param name: (required)
        :type name: str
        :param version_id: (required)
        :type version_id: str
        :param descriptor_name:
        :type descriptor_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TitaniumDescriptorDefinitionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'scope',
            'name',
            'version_id',
            'descriptor_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method descriptor_service_get_descriptor_version" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'scope' is set
        if self.api_client.client_side_validation and local_var_params.get('scope') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `scope` when calling `descriptor_service_get_descriptor_version`")  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and local_var_params.get('name') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `name` when calling `descriptor_service_get_descriptor_version`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and local_var_params.get('version_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `version_id` when calling `descriptor_service_get_descriptor_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope' in local_var_params:
            path_params['scope'] = local_var_params['scope']  # noqa: E501
        if 'name' in local_var_params:
            path_params['name'] = local_var_params['name']  # noqa: E501
        if 'version_id' in local_var_params:
            path_params['versionId'] = local_var_params['version_id']  # noqa: E501

        query_params = []
        if local_var_params.get('descriptor_name') is not None:  # noqa: E501
            query_params.append(('descriptorName', local_var_params['descriptor_name']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "TitaniumDescriptorDefinitionResponse",
        }

        return self.api_client.call_api(
            '/api/v1/descriptor/version/{scope}/{name}/{versionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def descriptor_service_list_descriptor_versions(self, body, **kwargs):  # noqa: E501
        """ListDescriptorVersions returns list of version of the specific descriptor versions.  # noqa: E501

        Example of request : {   \"scope\":\"global\",   \"identifier\":{      \"name\":\"foreign_exchange-vanilla-forwards\"   } }  Example of response : {    \"data\": {        \"versions\": [            {                \"versionId\": \"fM9AukEqTJXKOcbW_tQ7Sfr4Clp5qinKq_liXZYzyiI=\",                \"createdAt\": \"2022-06-14 10:57:42.0\"            },            {                \"versionId\": \"LmVlkPbnsUKFBw8qIbUHEzBsRrcnG_BSMnopA5Ptd7I=\",                \"createdAt\": \"2022-06-14 10:20:48.0\"            }        ]    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_list_descriptor_versions(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumGetDefinition
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TitaniumListVersionResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.descriptor_service_list_descriptor_versions_with_http_info(body, **kwargs)  # noqa: E501

    def descriptor_service_list_descriptor_versions_with_http_info(self, body, **kwargs):  # noqa: E501
        """ListDescriptorVersions returns list of version of the specific descriptor versions.  # noqa: E501

        Example of request : {   \"scope\":\"global\",   \"identifier\":{      \"name\":\"foreign_exchange-vanilla-forwards\"   } }  Example of response : {    \"data\": {        \"versions\": [            {                \"versionId\": \"fM9AukEqTJXKOcbW_tQ7Sfr4Clp5qinKq_liXZYzyiI=\",                \"createdAt\": \"2022-06-14 10:57:42.0\"            },            {                \"versionId\": \"LmVlkPbnsUKFBw8qIbUHEzBsRrcnG_BSMnopA5Ptd7I=\",                \"createdAt\": \"2022-06-14 10:20:48.0\"            }        ]    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_list_descriptor_versions_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumGetDefinition
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TitaniumListVersionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method descriptor_service_list_descriptor_versions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and local_var_params.get('body') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `descriptor_service_list_descriptor_versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "TitaniumListVersionResponse",
        }

        return self.api_client.call_api(
            '/api/v1/descriptor/versions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def descriptor_service_list_descriptors(self, body, **kwargs):  # noqa: E501
        """ListDescriptors returns list of specific descriptors according to request.  # noqa: E501

        Example of request : {   \"scope\":\"global\" }  Example of response : {    \"data\": {        \"results\": [            {                \"uid\": \"\",                \"name\": \"foreign_exchange-vanilla-options\"            },            {                \"uid\": \"\",                \"name\": \"foreign_exchange-exotics-barriers_and_digitals\"            },            {                \"uid\": \"\",                \"name\": \"foreign_exchange-exotics-tarfs\"            }        ]    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_list_descriptors(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumListRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TitaniumDescriptorList
        """
        kwargs['_return_http_data_only'] = True
        return self.descriptor_service_list_descriptors_with_http_info(body, **kwargs)  # noqa: E501

    def descriptor_service_list_descriptors_with_http_info(self, body, **kwargs):  # noqa: E501
        """ListDescriptors returns list of specific descriptors according to request.  # noqa: E501

        Example of request : {   \"scope\":\"global\" }  Example of response : {    \"data\": {        \"results\": [            {                \"uid\": \"\",                \"name\": \"foreign_exchange-vanilla-options\"            },            {                \"uid\": \"\",                \"name\": \"foreign_exchange-exotics-barriers_and_digitals\"            },            {                \"uid\": \"\",                \"name\": \"foreign_exchange-exotics-tarfs\"            }        ]    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_list_descriptors_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumListRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TitaniumDescriptorList, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method descriptor_service_list_descriptors" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and local_var_params.get('body') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `descriptor_service_list_descriptors`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "TitaniumDescriptorList",
        }

        return self.api_client.call_api(
            '/api/v1/descriptor/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
