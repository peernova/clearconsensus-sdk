# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class UniqueKeyServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def unique_key_service_add_unique_key(self, body, **kwargs):  # noqa: E501
        """AddUniqueKey is used to add a new unique key definition to the system.  # noqa: E501

        Example of request : {   \"name\":\"foreign_exchange-vanilla-forwards\",   \"scope\":\"global\",   \"uniqueKey\":[      \"snap_date\",      \"asset\",      \"service\",      \"client\",      \"service\",      \"tenor\",      \"snap_time\",      \"instrument_type\",      \"spot_reference_price\",      \"mid_fwrd_outright\",      \"mid_fwrd_points\",      \"onshore_offshore_curr_1\",      \"onshore_offshore_curr_2\"   ] }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unique_key_service_add_unique_key(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumUniqueKeyDefinition
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TitaniumAcknowledgeResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.unique_key_service_add_unique_key_with_http_info(body, **kwargs)  # noqa: E501

    def unique_key_service_add_unique_key_with_http_info(self, body, **kwargs):  # noqa: E501
        """AddUniqueKey is used to add a new unique key definition to the system.  # noqa: E501

        Example of request : {   \"name\":\"foreign_exchange-vanilla-forwards\",   \"scope\":\"global\",   \"uniqueKey\":[      \"snap_date\",      \"asset\",      \"service\",      \"client\",      \"service\",      \"tenor\",      \"snap_time\",      \"instrument_type\",      \"spot_reference_price\",      \"mid_fwrd_outright\",      \"mid_fwrd_points\",      \"onshore_offshore_curr_1\",      \"onshore_offshore_curr_2\"   ] }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unique_key_service_add_unique_key_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumUniqueKeyDefinition
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TitaniumAcknowledgeResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unique_key_service_add_unique_key" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and local_var_params.get('body') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `unique_key_service_add_unique_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "TitaniumAcknowledgeResponse",
        }

        return self.api_client.call_api(
            '/api/v1/uniquekey/add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def unique_key_service_disable_unique_key(self, body, **kwargs):  # noqa: E501
        """unique_key_service_disable_unique_key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unique_key_service_disable_unique_key(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumEnableDisableRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TitaniumAcknowledgeResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.unique_key_service_disable_unique_key_with_http_info(body, **kwargs)  # noqa: E501

    def unique_key_service_disable_unique_key_with_http_info(self, body, **kwargs):  # noqa: E501
        """unique_key_service_disable_unique_key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unique_key_service_disable_unique_key_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumEnableDisableRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TitaniumAcknowledgeResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unique_key_service_disable_unique_key" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and local_var_params.get('body') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `unique_key_service_disable_unique_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "TitaniumAcknowledgeResponse",
        }

        return self.api_client.call_api(
            '/api/v1/uniquekey/disable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def unique_key_service_enable_unique_key(self, body, **kwargs):  # noqa: E501
        """unique_key_service_enable_unique_key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unique_key_service_enable_unique_key(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumEnableDisableRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TitaniumAcknowledgeResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.unique_key_service_enable_unique_key_with_http_info(body, **kwargs)  # noqa: E501

    def unique_key_service_enable_unique_key_with_http_info(self, body, **kwargs):  # noqa: E501
        """unique_key_service_enable_unique_key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unique_key_service_enable_unique_key_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumEnableDisableRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TitaniumAcknowledgeResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unique_key_service_enable_unique_key" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and local_var_params.get('body') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `unique_key_service_enable_unique_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "TitaniumAcknowledgeResponse",
        }

        return self.api_client.call_api(
            '/api/v1/uniquekey/enable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def unique_key_service_get_unique_key(self, body, **kwargs):  # noqa: E501
        """GetUniqueKey is used to retrieve a unique key definition by its scope and name. Request: {   \"identifier\":{      \"name\":\"foreign_exchange-vanilla-forwards\"   },   \"scope\":\"global\" }  # noqa: E501

        Response: {    \"data\": {        \"name\": \"foreign_exchange-vanilla-forwards\",        \"scope\": \"global\",        \"uniqueKey\": [            \"snap_date\",            \"asset\",            \"service\",            \"client\",            \"service\",            \"tenor\",            \"snap_time\",            \"instrument_type\",            \"spot_reference_price\",            \"mid_fwrd_outright\",            \"mid_fwrd_points\",            \"onshore_offshore_curr_1\",            \"onshore_offshore_curr_2\"        ],        \"orderBy\": [            \"__input_row_num\"        ],        \"order\": \"ASC\"    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unique_key_service_get_unique_key(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumGetDefinition
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TitaniumUniqueKeyDefinitionResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.unique_key_service_get_unique_key_with_http_info(body, **kwargs)  # noqa: E501

    def unique_key_service_get_unique_key_with_http_info(self, body, **kwargs):  # noqa: E501
        """GetUniqueKey is used to retrieve a unique key definition by its scope and name. Request: {   \"identifier\":{      \"name\":\"foreign_exchange-vanilla-forwards\"   },   \"scope\":\"global\" }  # noqa: E501

        Response: {    \"data\": {        \"name\": \"foreign_exchange-vanilla-forwards\",        \"scope\": \"global\",        \"uniqueKey\": [            \"snap_date\",            \"asset\",            \"service\",            \"client\",            \"service\",            \"tenor\",            \"snap_time\",            \"instrument_type\",            \"spot_reference_price\",            \"mid_fwrd_outright\",            \"mid_fwrd_points\",            \"onshore_offshore_curr_1\",            \"onshore_offshore_curr_2\"        ],        \"orderBy\": [            \"__input_row_num\"        ],        \"order\": \"ASC\"    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unique_key_service_get_unique_key_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumGetDefinition
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TitaniumUniqueKeyDefinitionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unique_key_service_get_unique_key" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and local_var_params.get('body') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `unique_key_service_get_unique_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "TitaniumUniqueKeyDefinitionResponse",
        }

        return self.api_client.call_api(
            '/api/v1/uniquekey/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def unique_key_service_get_unique_key_version(self, scope, name, version_id, **kwargs):  # noqa: E501
        """GetUniqueKeyVersion is used to retrieve a specific version of a unique key definition by its scope, name, and version ID. Response: {    \"data\": {        \"name\": \"foreign_exchange-vanilla-forwards\",        \"scope\": \"global\",        \"uniqueKey\": [            \"asset\",            \"service\",            \"sub-asset\",            \"instrument_type\",            \"tenor\",            \"snap_date\",            \"snap_time\",            \"curr_1\",            \"curr_2\",            \"onshore_offshore_curr_1\",            \"onshore_offshore_curr_2\"        ],        \"orderBy\": [            \"__input_row_num\"        ],        \"order\": \"ASC\"    } }  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unique_key_service_get_unique_key_version(scope, name, version_id, async_req=True)
        >>> result = thread.get()

        :param scope: (required)
        :type scope: str
        :param name: (required)
        :type name: str
        :param version_id: (required)
        :type version_id: str
        :param descriptor_name:
        :type descriptor_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TitaniumUniqueKeyDefinitionResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.unique_key_service_get_unique_key_version_with_http_info(scope, name, version_id, **kwargs)  # noqa: E501

    def unique_key_service_get_unique_key_version_with_http_info(self, scope, name, version_id, **kwargs):  # noqa: E501
        """GetUniqueKeyVersion is used to retrieve a specific version of a unique key definition by its scope, name, and version ID. Response: {    \"data\": {        \"name\": \"foreign_exchange-vanilla-forwards\",        \"scope\": \"global\",        \"uniqueKey\": [            \"asset\",            \"service\",            \"sub-asset\",            \"instrument_type\",            \"tenor\",            \"snap_date\",            \"snap_time\",            \"curr_1\",            \"curr_2\",            \"onshore_offshore_curr_1\",            \"onshore_offshore_curr_2\"        ],        \"orderBy\": [            \"__input_row_num\"        ],        \"order\": \"ASC\"    } }  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unique_key_service_get_unique_key_version_with_http_info(scope, name, version_id, async_req=True)
        >>> result = thread.get()

        :param scope: (required)
        :type scope: str
        :param name: (required)
        :type name: str
        :param version_id: (required)
        :type version_id: str
        :param descriptor_name:
        :type descriptor_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TitaniumUniqueKeyDefinitionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'scope',
            'name',
            'version_id',
            'descriptor_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unique_key_service_get_unique_key_version" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'scope' is set
        if self.api_client.client_side_validation and local_var_params.get('scope') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `scope` when calling `unique_key_service_get_unique_key_version`")  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and local_var_params.get('name') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `name` when calling `unique_key_service_get_unique_key_version`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and local_var_params.get('version_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `version_id` when calling `unique_key_service_get_unique_key_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope' in local_var_params:
            path_params['scope'] = local_var_params['scope']  # noqa: E501
        if 'name' in local_var_params:
            path_params['name'] = local_var_params['name']  # noqa: E501
        if 'version_id' in local_var_params:
            path_params['versionId'] = local_var_params['version_id']  # noqa: E501

        query_params = []
        if local_var_params.get('descriptor_name') is not None:  # noqa: E501
            query_params.append(('descriptorName', local_var_params['descriptor_name']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "TitaniumUniqueKeyDefinitionResponse",
        }

        return self.api_client.call_api(
            '/api/v1/uniquekey/version/{scope}/{name}/{versionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def unique_key_service_list_unique_key_versions(self, body, **kwargs):  # noqa: E501
        """ListUniqueKeyVersions is used to retrieve a list of all versions of a specific unique key definition by its scope and name. Request: {   \"scope\":\"global\",   \"identifier\": {        \"name\": \"foreign_exchange-vanilla-forwards\"    } }  # noqa: E501

        Response: {    \"data\": {        \"versions\": [            {                \"versionId\":\"0bmhRR-7hISwkb_H2MvIqafpJCAoy3YgEySZjntZF9o=\",                \"createdAt\": \"2022-08-22 15:23:44.0\"            }        ]    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unique_key_service_list_unique_key_versions(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumGetDefinition
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TitaniumListVersionResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.unique_key_service_list_unique_key_versions_with_http_info(body, **kwargs)  # noqa: E501

    def unique_key_service_list_unique_key_versions_with_http_info(self, body, **kwargs):  # noqa: E501
        """ListUniqueKeyVersions is used to retrieve a list of all versions of a specific unique key definition by its scope and name. Request: {   \"scope\":\"global\",   \"identifier\": {        \"name\": \"foreign_exchange-vanilla-forwards\"    } }  # noqa: E501

        Response: {    \"data\": {        \"versions\": [            {                \"versionId\":\"0bmhRR-7hISwkb_H2MvIqafpJCAoy3YgEySZjntZF9o=\",                \"createdAt\": \"2022-08-22 15:23:44.0\"            }        ]    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unique_key_service_list_unique_key_versions_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumGetDefinition
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TitaniumListVersionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unique_key_service_list_unique_key_versions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and local_var_params.get('body') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `unique_key_service_list_unique_key_versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "TitaniumListVersionResponse",
        }

        return self.api_client.call_api(
            '/api/v1/uniquekey/versions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def unique_key_service_list_unique_keys(self, body, **kwargs):  # noqa: E501
        """ListUniqueKeys is used to retrieve a list of all unique key definitions in the system. Request: {   \"scope\":\"global\" }  # noqa: E501

        Response: {    \"data\": {        \"results\": [            {                \"name\": \"foreign_exchange-vanilla-forwards\",                \"scope\": \"global\",                \"uniqueKey\": [                    \"asset\",                    \"service\",                    \"sub-asset\",                    \"instrument_type\",                    \"tenor\",                    \"snap_date\",                    \"snap_time\",                    \"curr_1\",                    \"curr_2\",                    \"onshore_offshore_curr_1\",                    \"onshore_offshore_curr_2\"                ],                \"orderBy\": [                    \"__input_row_num\"                ],                \"order\": \"ASC\"            },            {                \"name\": \"foreign_exchange-vanilla-options\",                \"scope\": \"global\",                \"uniqueKey\": [                    \"snap_date\",                    \"asset\",                    \"service\",                    \"snap_time\",                    \"instrument_type\",                    \"option_instrument_parameter\",                    \"exercise_style\",                    \"option_execution_cut_time\",                    \"curr_1\",                    \"curr_2\",                    \"tenor\",                    \"delta\",                    \"vol_format\",                    \"instrument_convention\",                    \"delta_convention\",                    \"premium_currency\",                    \"settlement_convention\"                ],                \"orderBy\": [                    \"__input_row_num\"                ],                \"order\": \"ASC\"            }        ]    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unique_key_service_list_unique_keys(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumListRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TitaniumListUniqueKeysResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.unique_key_service_list_unique_keys_with_http_info(body, **kwargs)  # noqa: E501

    def unique_key_service_list_unique_keys_with_http_info(self, body, **kwargs):  # noqa: E501
        """ListUniqueKeys is used to retrieve a list of all unique key definitions in the system. Request: {   \"scope\":\"global\" }  # noqa: E501

        Response: {    \"data\": {        \"results\": [            {                \"name\": \"foreign_exchange-vanilla-forwards\",                \"scope\": \"global\",                \"uniqueKey\": [                    \"asset\",                    \"service\",                    \"sub-asset\",                    \"instrument_type\",                    \"tenor\",                    \"snap_date\",                    \"snap_time\",                    \"curr_1\",                    \"curr_2\",                    \"onshore_offshore_curr_1\",                    \"onshore_offshore_curr_2\"                ],                \"orderBy\": [                    \"__input_row_num\"                ],                \"order\": \"ASC\"            },            {                \"name\": \"foreign_exchange-vanilla-options\",                \"scope\": \"global\",                \"uniqueKey\": [                    \"snap_date\",                    \"asset\",                    \"service\",                    \"snap_time\",                    \"instrument_type\",                    \"option_instrument_parameter\",                    \"exercise_style\",                    \"option_execution_cut_time\",                    \"curr_1\",                    \"curr_2\",                    \"tenor\",                    \"delta\",                    \"vol_format\",                    \"instrument_convention\",                    \"delta_convention\",                    \"premium_currency\",                    \"settlement_convention\"                ],                \"orderBy\": [                    \"__input_row_num\"                ],                \"order\": \"ASC\"            }        ]    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unique_key_service_list_unique_keys_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: TitaniumListRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TitaniumListUniqueKeysResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unique_key_service_list_unique_keys" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and local_var_params.get('body') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `unique_key_service_list_unique_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "TitaniumListUniqueKeysResponse",
        }

        return self.api_client.call_api(
            '/api/v1/uniquekey/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
