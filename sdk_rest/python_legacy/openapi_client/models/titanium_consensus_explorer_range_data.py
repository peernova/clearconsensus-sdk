# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumConsensusExplorerRangeData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'anchor_point': 'TitaniumRangePoint',
        'bimodal_left_mean': 'TitaniumRangePoint',
        'bimodal_right_mean': 'TitaniumRangePoint',
        'chart_ranges': 'TitaniumChartRanges',
        'cohort_consensus_price': 'TitaniumRangePoint',
        'cohort_consensus_range_tab_data': 'TitaniumCohortConsensusRangeTabData',
        'evp_mid': 'TitaniumRangePoint',
        'submission_evidence_price': 'TitaniumRangePoint',
        'submission_mean': 'TitaniumRangePoint',
        'submission_point': 'TitaniumRangePoint'
    }

    attribute_map = {
        'anchor_point': 'anchorPoint',
        'bimodal_left_mean': 'bimodalLeftMean',
        'bimodal_right_mean': 'bimodalRightMean',
        'chart_ranges': 'chartRanges',
        'cohort_consensus_price': 'cohortConsensusPrice',
        'cohort_consensus_range_tab_data': 'cohortConsensusRangeTabData',
        'evp_mid': 'evpMid',
        'submission_evidence_price': 'submissionEvidencePrice',
        'submission_mean': 'submissionMean',
        'submission_point': 'submissionPoint'
    }

    def __init__(self, anchor_point=None, bimodal_left_mean=None, bimodal_right_mean=None, chart_ranges=None, cohort_consensus_price=None, cohort_consensus_range_tab_data=None, evp_mid=None, submission_evidence_price=None, submission_mean=None, submission_point=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumConsensusExplorerRangeData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._anchor_point = None
        self._bimodal_left_mean = None
        self._bimodal_right_mean = None
        self._chart_ranges = None
        self._cohort_consensus_price = None
        self._cohort_consensus_range_tab_data = None
        self._evp_mid = None
        self._submission_evidence_price = None
        self._submission_mean = None
        self._submission_point = None
        self.discriminator = None

        if anchor_point is not None:
            self.anchor_point = anchor_point
        if bimodal_left_mean is not None:
            self.bimodal_left_mean = bimodal_left_mean
        if bimodal_right_mean is not None:
            self.bimodal_right_mean = bimodal_right_mean
        if chart_ranges is not None:
            self.chart_ranges = chart_ranges
        if cohort_consensus_price is not None:
            self.cohort_consensus_price = cohort_consensus_price
        if cohort_consensus_range_tab_data is not None:
            self.cohort_consensus_range_tab_data = cohort_consensus_range_tab_data
        if evp_mid is not None:
            self.evp_mid = evp_mid
        if submission_evidence_price is not None:
            self.submission_evidence_price = submission_evidence_price
        if submission_mean is not None:
            self.submission_mean = submission_mean
        if submission_point is not None:
            self.submission_point = submission_point

    @property
    def anchor_point(self):
        """Gets the anchor_point of this TitaniumConsensusExplorerRangeData.  # noqa: E501


        :return: The anchor_point of this TitaniumConsensusExplorerRangeData.  # noqa: E501
        :rtype: TitaniumRangePoint
        """
        return self._anchor_point

    @anchor_point.setter
    def anchor_point(self, anchor_point):
        """Sets the anchor_point of this TitaniumConsensusExplorerRangeData.


        :param anchor_point: The anchor_point of this TitaniumConsensusExplorerRangeData.  # noqa: E501
        :type anchor_point: TitaniumRangePoint
        """

        self._anchor_point = anchor_point

    @property
    def bimodal_left_mean(self):
        """Gets the bimodal_left_mean of this TitaniumConsensusExplorerRangeData.  # noqa: E501


        :return: The bimodal_left_mean of this TitaniumConsensusExplorerRangeData.  # noqa: E501
        :rtype: TitaniumRangePoint
        """
        return self._bimodal_left_mean

    @bimodal_left_mean.setter
    def bimodal_left_mean(self, bimodal_left_mean):
        """Sets the bimodal_left_mean of this TitaniumConsensusExplorerRangeData.


        :param bimodal_left_mean: The bimodal_left_mean of this TitaniumConsensusExplorerRangeData.  # noqa: E501
        :type bimodal_left_mean: TitaniumRangePoint
        """

        self._bimodal_left_mean = bimodal_left_mean

    @property
    def bimodal_right_mean(self):
        """Gets the bimodal_right_mean of this TitaniumConsensusExplorerRangeData.  # noqa: E501


        :return: The bimodal_right_mean of this TitaniumConsensusExplorerRangeData.  # noqa: E501
        :rtype: TitaniumRangePoint
        """
        return self._bimodal_right_mean

    @bimodal_right_mean.setter
    def bimodal_right_mean(self, bimodal_right_mean):
        """Sets the bimodal_right_mean of this TitaniumConsensusExplorerRangeData.


        :param bimodal_right_mean: The bimodal_right_mean of this TitaniumConsensusExplorerRangeData.  # noqa: E501
        :type bimodal_right_mean: TitaniumRangePoint
        """

        self._bimodal_right_mean = bimodal_right_mean

    @property
    def chart_ranges(self):
        """Gets the chart_ranges of this TitaniumConsensusExplorerRangeData.  # noqa: E501


        :return: The chart_ranges of this TitaniumConsensusExplorerRangeData.  # noqa: E501
        :rtype: TitaniumChartRanges
        """
        return self._chart_ranges

    @chart_ranges.setter
    def chart_ranges(self, chart_ranges):
        """Sets the chart_ranges of this TitaniumConsensusExplorerRangeData.


        :param chart_ranges: The chart_ranges of this TitaniumConsensusExplorerRangeData.  # noqa: E501
        :type chart_ranges: TitaniumChartRanges
        """

        self._chart_ranges = chart_ranges

    @property
    def cohort_consensus_price(self):
        """Gets the cohort_consensus_price of this TitaniumConsensusExplorerRangeData.  # noqa: E501


        :return: The cohort_consensus_price of this TitaniumConsensusExplorerRangeData.  # noqa: E501
        :rtype: TitaniumRangePoint
        """
        return self._cohort_consensus_price

    @cohort_consensus_price.setter
    def cohort_consensus_price(self, cohort_consensus_price):
        """Sets the cohort_consensus_price of this TitaniumConsensusExplorerRangeData.


        :param cohort_consensus_price: The cohort_consensus_price of this TitaniumConsensusExplorerRangeData.  # noqa: E501
        :type cohort_consensus_price: TitaniumRangePoint
        """

        self._cohort_consensus_price = cohort_consensus_price

    @property
    def cohort_consensus_range_tab_data(self):
        """Gets the cohort_consensus_range_tab_data of this TitaniumConsensusExplorerRangeData.  # noqa: E501


        :return: The cohort_consensus_range_tab_data of this TitaniumConsensusExplorerRangeData.  # noqa: E501
        :rtype: TitaniumCohortConsensusRangeTabData
        """
        return self._cohort_consensus_range_tab_data

    @cohort_consensus_range_tab_data.setter
    def cohort_consensus_range_tab_data(self, cohort_consensus_range_tab_data):
        """Sets the cohort_consensus_range_tab_data of this TitaniumConsensusExplorerRangeData.


        :param cohort_consensus_range_tab_data: The cohort_consensus_range_tab_data of this TitaniumConsensusExplorerRangeData.  # noqa: E501
        :type cohort_consensus_range_tab_data: TitaniumCohortConsensusRangeTabData
        """

        self._cohort_consensus_range_tab_data = cohort_consensus_range_tab_data

    @property
    def evp_mid(self):
        """Gets the evp_mid of this TitaniumConsensusExplorerRangeData.  # noqa: E501


        :return: The evp_mid of this TitaniumConsensusExplorerRangeData.  # noqa: E501
        :rtype: TitaniumRangePoint
        """
        return self._evp_mid

    @evp_mid.setter
    def evp_mid(self, evp_mid):
        """Sets the evp_mid of this TitaniumConsensusExplorerRangeData.


        :param evp_mid: The evp_mid of this TitaniumConsensusExplorerRangeData.  # noqa: E501
        :type evp_mid: TitaniumRangePoint
        """

        self._evp_mid = evp_mid

    @property
    def submission_evidence_price(self):
        """Gets the submission_evidence_price of this TitaniumConsensusExplorerRangeData.  # noqa: E501


        :return: The submission_evidence_price of this TitaniumConsensusExplorerRangeData.  # noqa: E501
        :rtype: TitaniumRangePoint
        """
        return self._submission_evidence_price

    @submission_evidence_price.setter
    def submission_evidence_price(self, submission_evidence_price):
        """Sets the submission_evidence_price of this TitaniumConsensusExplorerRangeData.


        :param submission_evidence_price: The submission_evidence_price of this TitaniumConsensusExplorerRangeData.  # noqa: E501
        :type submission_evidence_price: TitaniumRangePoint
        """

        self._submission_evidence_price = submission_evidence_price

    @property
    def submission_mean(self):
        """Gets the submission_mean of this TitaniumConsensusExplorerRangeData.  # noqa: E501


        :return: The submission_mean of this TitaniumConsensusExplorerRangeData.  # noqa: E501
        :rtype: TitaniumRangePoint
        """
        return self._submission_mean

    @submission_mean.setter
    def submission_mean(self, submission_mean):
        """Sets the submission_mean of this TitaniumConsensusExplorerRangeData.


        :param submission_mean: The submission_mean of this TitaniumConsensusExplorerRangeData.  # noqa: E501
        :type submission_mean: TitaniumRangePoint
        """

        self._submission_mean = submission_mean

    @property
    def submission_point(self):
        """Gets the submission_point of this TitaniumConsensusExplorerRangeData.  # noqa: E501


        :return: The submission_point of this TitaniumConsensusExplorerRangeData.  # noqa: E501
        :rtype: TitaniumRangePoint
        """
        return self._submission_point

    @submission_point.setter
    def submission_point(self, submission_point):
        """Sets the submission_point of this TitaniumConsensusExplorerRangeData.


        :param submission_point: The submission_point of this TitaniumConsensusExplorerRangeData.  # noqa: E501
        :type submission_point: TitaniumRangePoint
        """

        self._submission_point = submission_point

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumConsensusExplorerRangeData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumConsensusExplorerRangeData):
            return True

        return self.to_dict() != other.to_dict()
