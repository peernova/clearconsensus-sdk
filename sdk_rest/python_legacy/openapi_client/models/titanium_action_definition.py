# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumActionDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action_type': 'str',
        'depends_on': 'list[str]',
        'do_not_run_if': 'str',
        'id': 'str',
        'ignore_failure': 'bool',
        'input_arguments': 'list[TitaniumArgument]',
        'output_argument': 'str',
        'queue': 'str',
        'retries': 'int',
        'run_if': 'str',
        'timeout_seconds': 'int'
    }

    attribute_map = {
        'action_type': 'actionType',
        'depends_on': 'dependsOn',
        'do_not_run_if': 'doNotRunIf',
        'id': 'id',
        'ignore_failure': 'ignoreFailure',
        'input_arguments': 'inputArguments',
        'output_argument': 'outputArgument',
        'queue': 'queue',
        'retries': 'retries',
        'run_if': 'runIf',
        'timeout_seconds': 'timeoutSeconds'
    }

    def __init__(self, action_type=None, depends_on=None, do_not_run_if=None, id=None, ignore_failure=None, input_arguments=None, output_argument=None, queue=None, retries=None, run_if=None, timeout_seconds=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumActionDefinition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._action_type = None
        self._depends_on = None
        self._do_not_run_if = None
        self._id = None
        self._ignore_failure = None
        self._input_arguments = None
        self._output_argument = None
        self._queue = None
        self._retries = None
        self._run_if = None
        self._timeout_seconds = None
        self.discriminator = None

        if action_type is not None:
            self.action_type = action_type
        if depends_on is not None:
            self.depends_on = depends_on
        if do_not_run_if is not None:
            self.do_not_run_if = do_not_run_if
        if id is not None:
            self.id = id
        if ignore_failure is not None:
            self.ignore_failure = ignore_failure
        if input_arguments is not None:
            self.input_arguments = input_arguments
        if output_argument is not None:
            self.output_argument = output_argument
        if queue is not None:
            self.queue = queue
        if retries is not None:
            self.retries = retries
        if run_if is not None:
            self.run_if = run_if
        if timeout_seconds is not None:
            self.timeout_seconds = timeout_seconds

    @property
    def action_type(self):
        """Gets the action_type of this TitaniumActionDefinition.  # noqa: E501


        :return: The action_type of this TitaniumActionDefinition.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this TitaniumActionDefinition.


        :param action_type: The action_type of this TitaniumActionDefinition.  # noqa: E501
        :type action_type: str
        """

        self._action_type = action_type

    @property
    def depends_on(self):
        """Gets the depends_on of this TitaniumActionDefinition.  # noqa: E501


        :return: The depends_on of this TitaniumActionDefinition.  # noqa: E501
        :rtype: list[str]
        """
        return self._depends_on

    @depends_on.setter
    def depends_on(self, depends_on):
        """Sets the depends_on of this TitaniumActionDefinition.


        :param depends_on: The depends_on of this TitaniumActionDefinition.  # noqa: E501
        :type depends_on: list[str]
        """

        self._depends_on = depends_on

    @property
    def do_not_run_if(self):
        """Gets the do_not_run_if of this TitaniumActionDefinition.  # noqa: E501


        :return: The do_not_run_if of this TitaniumActionDefinition.  # noqa: E501
        :rtype: str
        """
        return self._do_not_run_if

    @do_not_run_if.setter
    def do_not_run_if(self, do_not_run_if):
        """Sets the do_not_run_if of this TitaniumActionDefinition.


        :param do_not_run_if: The do_not_run_if of this TitaniumActionDefinition.  # noqa: E501
        :type do_not_run_if: str
        """

        self._do_not_run_if = do_not_run_if

    @property
    def id(self):
        """Gets the id of this TitaniumActionDefinition.  # noqa: E501


        :return: The id of this TitaniumActionDefinition.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TitaniumActionDefinition.


        :param id: The id of this TitaniumActionDefinition.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def ignore_failure(self):
        """Gets the ignore_failure of this TitaniumActionDefinition.  # noqa: E501


        :return: The ignore_failure of this TitaniumActionDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_failure

    @ignore_failure.setter
    def ignore_failure(self, ignore_failure):
        """Sets the ignore_failure of this TitaniumActionDefinition.


        :param ignore_failure: The ignore_failure of this TitaniumActionDefinition.  # noqa: E501
        :type ignore_failure: bool
        """

        self._ignore_failure = ignore_failure

    @property
    def input_arguments(self):
        """Gets the input_arguments of this TitaniumActionDefinition.  # noqa: E501


        :return: The input_arguments of this TitaniumActionDefinition.  # noqa: E501
        :rtype: list[TitaniumArgument]
        """
        return self._input_arguments

    @input_arguments.setter
    def input_arguments(self, input_arguments):
        """Sets the input_arguments of this TitaniumActionDefinition.


        :param input_arguments: The input_arguments of this TitaniumActionDefinition.  # noqa: E501
        :type input_arguments: list[TitaniumArgument]
        """

        self._input_arguments = input_arguments

    @property
    def output_argument(self):
        """Gets the output_argument of this TitaniumActionDefinition.  # noqa: E501


        :return: The output_argument of this TitaniumActionDefinition.  # noqa: E501
        :rtype: str
        """
        return self._output_argument

    @output_argument.setter
    def output_argument(self, output_argument):
        """Sets the output_argument of this TitaniumActionDefinition.


        :param output_argument: The output_argument of this TitaniumActionDefinition.  # noqa: E501
        :type output_argument: str
        """

        self._output_argument = output_argument

    @property
    def queue(self):
        """Gets the queue of this TitaniumActionDefinition.  # noqa: E501


        :return: The queue of this TitaniumActionDefinition.  # noqa: E501
        :rtype: str
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this TitaniumActionDefinition.


        :param queue: The queue of this TitaniumActionDefinition.  # noqa: E501
        :type queue: str
        """

        self._queue = queue

    @property
    def retries(self):
        """Gets the retries of this TitaniumActionDefinition.  # noqa: E501


        :return: The retries of this TitaniumActionDefinition.  # noqa: E501
        :rtype: int
        """
        return self._retries

    @retries.setter
    def retries(self, retries):
        """Sets the retries of this TitaniumActionDefinition.


        :param retries: The retries of this TitaniumActionDefinition.  # noqa: E501
        :type retries: int
        """

        self._retries = retries

    @property
    def run_if(self):
        """Gets the run_if of this TitaniumActionDefinition.  # noqa: E501


        :return: The run_if of this TitaniumActionDefinition.  # noqa: E501
        :rtype: str
        """
        return self._run_if

    @run_if.setter
    def run_if(self, run_if):
        """Sets the run_if of this TitaniumActionDefinition.


        :param run_if: The run_if of this TitaniumActionDefinition.  # noqa: E501
        :type run_if: str
        """

        self._run_if = run_if

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this TitaniumActionDefinition.  # noqa: E501


        :return: The timeout_seconds of this TitaniumActionDefinition.  # noqa: E501
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this TitaniumActionDefinition.


        :param timeout_seconds: The timeout_seconds of this TitaniumActionDefinition.  # noqa: E501
        :type timeout_seconds: int
        """

        self._timeout_seconds = timeout_seconds

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumActionDefinition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumActionDefinition):
            return True

        return self.to_dict() != other.to_dict()
