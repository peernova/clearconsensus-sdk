# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumWorkflowDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action_list': 'list[TitaniumActionDefinition]',
        'max_attempts': 'int',
        'predefined_arguments': 'object',
        'runtime_arguments': 'list[str]',
        'schedule': 'str',
        'timeout': 'str',
        'workflow_name': 'str',
        'workflow_queue': 'str'
    }

    attribute_map = {
        'action_list': 'actionList',
        'max_attempts': 'maxAttempts',
        'predefined_arguments': 'predefinedArguments',
        'runtime_arguments': 'runtimeArguments',
        'schedule': 'schedule',
        'timeout': 'timeout',
        'workflow_name': 'workflowName',
        'workflow_queue': 'workflowQueue'
    }

    def __init__(self, action_list=None, max_attempts=None, predefined_arguments=None, runtime_arguments=None, schedule=None, timeout=None, workflow_name=None, workflow_queue=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumWorkflowDefinition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._action_list = None
        self._max_attempts = None
        self._predefined_arguments = None
        self._runtime_arguments = None
        self._schedule = None
        self._timeout = None
        self._workflow_name = None
        self._workflow_queue = None
        self.discriminator = None

        if action_list is not None:
            self.action_list = action_list
        if max_attempts is not None:
            self.max_attempts = max_attempts
        if predefined_arguments is not None:
            self.predefined_arguments = predefined_arguments
        if runtime_arguments is not None:
            self.runtime_arguments = runtime_arguments
        if schedule is not None:
            self.schedule = schedule
        if timeout is not None:
            self.timeout = timeout
        if workflow_name is not None:
            self.workflow_name = workflow_name
        if workflow_queue is not None:
            self.workflow_queue = workflow_queue

    @property
    def action_list(self):
        """Gets the action_list of this TitaniumWorkflowDefinition.  # noqa: E501


        :return: The action_list of this TitaniumWorkflowDefinition.  # noqa: E501
        :rtype: list[TitaniumActionDefinition]
        """
        return self._action_list

    @action_list.setter
    def action_list(self, action_list):
        """Sets the action_list of this TitaniumWorkflowDefinition.


        :param action_list: The action_list of this TitaniumWorkflowDefinition.  # noqa: E501
        :type action_list: list[TitaniumActionDefinition]
        """

        self._action_list = action_list

    @property
    def max_attempts(self):
        """Gets the max_attempts of this TitaniumWorkflowDefinition.  # noqa: E501


        :return: The max_attempts of this TitaniumWorkflowDefinition.  # noqa: E501
        :rtype: int
        """
        return self._max_attempts

    @max_attempts.setter
    def max_attempts(self, max_attempts):
        """Sets the max_attempts of this TitaniumWorkflowDefinition.


        :param max_attempts: The max_attempts of this TitaniumWorkflowDefinition.  # noqa: E501
        :type max_attempts: int
        """

        self._max_attempts = max_attempts

    @property
    def predefined_arguments(self):
        """Gets the predefined_arguments of this TitaniumWorkflowDefinition.  # noqa: E501


        :return: The predefined_arguments of this TitaniumWorkflowDefinition.  # noqa: E501
        :rtype: object
        """
        return self._predefined_arguments

    @predefined_arguments.setter
    def predefined_arguments(self, predefined_arguments):
        """Sets the predefined_arguments of this TitaniumWorkflowDefinition.


        :param predefined_arguments: The predefined_arguments of this TitaniumWorkflowDefinition.  # noqa: E501
        :type predefined_arguments: object
        """

        self._predefined_arguments = predefined_arguments

    @property
    def runtime_arguments(self):
        """Gets the runtime_arguments of this TitaniumWorkflowDefinition.  # noqa: E501


        :return: The runtime_arguments of this TitaniumWorkflowDefinition.  # noqa: E501
        :rtype: list[str]
        """
        return self._runtime_arguments

    @runtime_arguments.setter
    def runtime_arguments(self, runtime_arguments):
        """Sets the runtime_arguments of this TitaniumWorkflowDefinition.


        :param runtime_arguments: The runtime_arguments of this TitaniumWorkflowDefinition.  # noqa: E501
        :type runtime_arguments: list[str]
        """

        self._runtime_arguments = runtime_arguments

    @property
    def schedule(self):
        """Gets the schedule of this TitaniumWorkflowDefinition.  # noqa: E501


        :return: The schedule of this TitaniumWorkflowDefinition.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this TitaniumWorkflowDefinition.


        :param schedule: The schedule of this TitaniumWorkflowDefinition.  # noqa: E501
        :type schedule: str
        """

        self._schedule = schedule

    @property
    def timeout(self):
        """Gets the timeout of this TitaniumWorkflowDefinition.  # noqa: E501


        :return: The timeout of this TitaniumWorkflowDefinition.  # noqa: E501
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this TitaniumWorkflowDefinition.


        :param timeout: The timeout of this TitaniumWorkflowDefinition.  # noqa: E501
        :type timeout: str
        """

        self._timeout = timeout

    @property
    def workflow_name(self):
        """Gets the workflow_name of this TitaniumWorkflowDefinition.  # noqa: E501


        :return: The workflow_name of this TitaniumWorkflowDefinition.  # noqa: E501
        :rtype: str
        """
        return self._workflow_name

    @workflow_name.setter
    def workflow_name(self, workflow_name):
        """Sets the workflow_name of this TitaniumWorkflowDefinition.


        :param workflow_name: The workflow_name of this TitaniumWorkflowDefinition.  # noqa: E501
        :type workflow_name: str
        """

        self._workflow_name = workflow_name

    @property
    def workflow_queue(self):
        """Gets the workflow_queue of this TitaniumWorkflowDefinition.  # noqa: E501


        :return: The workflow_queue of this TitaniumWorkflowDefinition.  # noqa: E501
        :rtype: str
        """
        return self._workflow_queue

    @workflow_queue.setter
    def workflow_queue(self, workflow_queue):
        """Sets the workflow_queue of this TitaniumWorkflowDefinition.


        :param workflow_queue: The workflow_queue of this TitaniumWorkflowDefinition.  # noqa: E501
        :type workflow_queue: str
        """

        self._workflow_queue = workflow_queue

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumWorkflowDefinition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumWorkflowDefinition):
            return True

        return self.to_dict() != other.to_dict()
