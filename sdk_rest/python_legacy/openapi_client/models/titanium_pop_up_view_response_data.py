# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumPopUpViewResponseData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'benchmark': 'str',
        'consensus': 'TitaniumViewRow',
        'consensus_details': 'TitaniumConsensusDetail',
        'data_quality_errors': 'TitaniumDataQualityErrors',
        'evaluated_price': 'TitaniumViewRow',
        'grouping_keys': 'list[TitaniumStringKeyVal]',
        'outlier': 'str',
        'ranges_chart': 'str',
        'submission': 'TitaniumViewRow',
        'validation_errors': 'str'
    }

    attribute_map = {
        'benchmark': 'benchmark',
        'consensus': 'consensus',
        'consensus_details': 'consensusDetails',
        'data_quality_errors': 'dataQualityErrors',
        'evaluated_price': 'evaluatedPrice',
        'grouping_keys': 'groupingKeys',
        'outlier': 'outlier',
        'ranges_chart': 'rangesChart',
        'submission': 'submission',
        'validation_errors': 'validationErrors'
    }

    def __init__(self, benchmark=None, consensus=None, consensus_details=None, data_quality_errors=None, evaluated_price=None, grouping_keys=None, outlier=None, ranges_chart=None, submission=None, validation_errors=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumPopUpViewResponseData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._benchmark = None
        self._consensus = None
        self._consensus_details = None
        self._data_quality_errors = None
        self._evaluated_price = None
        self._grouping_keys = None
        self._outlier = None
        self._ranges_chart = None
        self._submission = None
        self._validation_errors = None
        self.discriminator = None

        if benchmark is not None:
            self.benchmark = benchmark
        if consensus is not None:
            self.consensus = consensus
        if consensus_details is not None:
            self.consensus_details = consensus_details
        if data_quality_errors is not None:
            self.data_quality_errors = data_quality_errors
        if evaluated_price is not None:
            self.evaluated_price = evaluated_price
        if grouping_keys is not None:
            self.grouping_keys = grouping_keys
        if outlier is not None:
            self.outlier = outlier
        if ranges_chart is not None:
            self.ranges_chart = ranges_chart
        if submission is not None:
            self.submission = submission
        if validation_errors is not None:
            self.validation_errors = validation_errors

    @property
    def benchmark(self):
        """Gets the benchmark of this TitaniumPopUpViewResponseData.  # noqa: E501


        :return: The benchmark of this TitaniumPopUpViewResponseData.  # noqa: E501
        :rtype: str
        """
        return self._benchmark

    @benchmark.setter
    def benchmark(self, benchmark):
        """Sets the benchmark of this TitaniumPopUpViewResponseData.


        :param benchmark: The benchmark of this TitaniumPopUpViewResponseData.  # noqa: E501
        :type benchmark: str
        """

        self._benchmark = benchmark

    @property
    def consensus(self):
        """Gets the consensus of this TitaniumPopUpViewResponseData.  # noqa: E501


        :return: The consensus of this TitaniumPopUpViewResponseData.  # noqa: E501
        :rtype: TitaniumViewRow
        """
        return self._consensus

    @consensus.setter
    def consensus(self, consensus):
        """Sets the consensus of this TitaniumPopUpViewResponseData.


        :param consensus: The consensus of this TitaniumPopUpViewResponseData.  # noqa: E501
        :type consensus: TitaniumViewRow
        """

        self._consensus = consensus

    @property
    def consensus_details(self):
        """Gets the consensus_details of this TitaniumPopUpViewResponseData.  # noqa: E501


        :return: The consensus_details of this TitaniumPopUpViewResponseData.  # noqa: E501
        :rtype: TitaniumConsensusDetail
        """
        return self._consensus_details

    @consensus_details.setter
    def consensus_details(self, consensus_details):
        """Sets the consensus_details of this TitaniumPopUpViewResponseData.


        :param consensus_details: The consensus_details of this TitaniumPopUpViewResponseData.  # noqa: E501
        :type consensus_details: TitaniumConsensusDetail
        """

        self._consensus_details = consensus_details

    @property
    def data_quality_errors(self):
        """Gets the data_quality_errors of this TitaniumPopUpViewResponseData.  # noqa: E501


        :return: The data_quality_errors of this TitaniumPopUpViewResponseData.  # noqa: E501
        :rtype: TitaniumDataQualityErrors
        """
        return self._data_quality_errors

    @data_quality_errors.setter
    def data_quality_errors(self, data_quality_errors):
        """Sets the data_quality_errors of this TitaniumPopUpViewResponseData.


        :param data_quality_errors: The data_quality_errors of this TitaniumPopUpViewResponseData.  # noqa: E501
        :type data_quality_errors: TitaniumDataQualityErrors
        """

        self._data_quality_errors = data_quality_errors

    @property
    def evaluated_price(self):
        """Gets the evaluated_price of this TitaniumPopUpViewResponseData.  # noqa: E501


        :return: The evaluated_price of this TitaniumPopUpViewResponseData.  # noqa: E501
        :rtype: TitaniumViewRow
        """
        return self._evaluated_price

    @evaluated_price.setter
    def evaluated_price(self, evaluated_price):
        """Sets the evaluated_price of this TitaniumPopUpViewResponseData.


        :param evaluated_price: The evaluated_price of this TitaniumPopUpViewResponseData.  # noqa: E501
        :type evaluated_price: TitaniumViewRow
        """

        self._evaluated_price = evaluated_price

    @property
    def grouping_keys(self):
        """Gets the grouping_keys of this TitaniumPopUpViewResponseData.  # noqa: E501


        :return: The grouping_keys of this TitaniumPopUpViewResponseData.  # noqa: E501
        :rtype: list[TitaniumStringKeyVal]
        """
        return self._grouping_keys

    @grouping_keys.setter
    def grouping_keys(self, grouping_keys):
        """Sets the grouping_keys of this TitaniumPopUpViewResponseData.


        :param grouping_keys: The grouping_keys of this TitaniumPopUpViewResponseData.  # noqa: E501
        :type grouping_keys: list[TitaniumStringKeyVal]
        """

        self._grouping_keys = grouping_keys

    @property
    def outlier(self):
        """Gets the outlier of this TitaniumPopUpViewResponseData.  # noqa: E501


        :return: The outlier of this TitaniumPopUpViewResponseData.  # noqa: E501
        :rtype: str
        """
        return self._outlier

    @outlier.setter
    def outlier(self, outlier):
        """Sets the outlier of this TitaniumPopUpViewResponseData.


        :param outlier: The outlier of this TitaniumPopUpViewResponseData.  # noqa: E501
        :type outlier: str
        """

        self._outlier = outlier

    @property
    def ranges_chart(self):
        """Gets the ranges_chart of this TitaniumPopUpViewResponseData.  # noqa: E501


        :return: The ranges_chart of this TitaniumPopUpViewResponseData.  # noqa: E501
        :rtype: str
        """
        return self._ranges_chart

    @ranges_chart.setter
    def ranges_chart(self, ranges_chart):
        """Sets the ranges_chart of this TitaniumPopUpViewResponseData.


        :param ranges_chart: The ranges_chart of this TitaniumPopUpViewResponseData.  # noqa: E501
        :type ranges_chart: str
        """

        self._ranges_chart = ranges_chart

    @property
    def submission(self):
        """Gets the submission of this TitaniumPopUpViewResponseData.  # noqa: E501


        :return: The submission of this TitaniumPopUpViewResponseData.  # noqa: E501
        :rtype: TitaniumViewRow
        """
        return self._submission

    @submission.setter
    def submission(self, submission):
        """Sets the submission of this TitaniumPopUpViewResponseData.


        :param submission: The submission of this TitaniumPopUpViewResponseData.  # noqa: E501
        :type submission: TitaniumViewRow
        """

        self._submission = submission

    @property
    def validation_errors(self):
        """Gets the validation_errors of this TitaniumPopUpViewResponseData.  # noqa: E501


        :return: The validation_errors of this TitaniumPopUpViewResponseData.  # noqa: E501
        :rtype: str
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this TitaniumPopUpViewResponseData.


        :param validation_errors: The validation_errors of this TitaniumPopUpViewResponseData.  # noqa: E501
        :type validation_errors: str
        """

        self._validation_errors = validation_errors

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumPopUpViewResponseData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumPopUpViewResponseData):
            return True

        return self.to_dict() != other.to_dict()
