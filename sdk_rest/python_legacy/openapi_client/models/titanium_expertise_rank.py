# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumExpertiseRank(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'abs_distance_to_anchor': 'object',
        'anchor_price': 'object',
        'expertise_score': 'object',
        'experts_count': 'object',
        'history': 'list[TitaniumExpertiseRankHistoryElement]',
        'rank': 'object',
        'submission_price': 'object'
    }

    attribute_map = {
        'abs_distance_to_anchor': 'absDistanceToAnchor',
        'anchor_price': 'anchorPrice',
        'expertise_score': 'expertiseScore',
        'experts_count': 'expertsCount',
        'history': 'history',
        'rank': 'rank',
        'submission_price': 'submissionPrice'
    }

    def __init__(self, abs_distance_to_anchor=None, anchor_price=None, expertise_score=None, experts_count=None, history=None, rank=None, submission_price=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumExpertiseRank - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._abs_distance_to_anchor = None
        self._anchor_price = None
        self._expertise_score = None
        self._experts_count = None
        self._history = None
        self._rank = None
        self._submission_price = None
        self.discriminator = None

        if abs_distance_to_anchor is not None:
            self.abs_distance_to_anchor = abs_distance_to_anchor
        if anchor_price is not None:
            self.anchor_price = anchor_price
        if expertise_score is not None:
            self.expertise_score = expertise_score
        if experts_count is not None:
            self.experts_count = experts_count
        if history is not None:
            self.history = history
        if rank is not None:
            self.rank = rank
        if submission_price is not None:
            self.submission_price = submission_price

    @property
    def abs_distance_to_anchor(self):
        """Gets the abs_distance_to_anchor of this TitaniumExpertiseRank.  # noqa: E501


        :return: The abs_distance_to_anchor of this TitaniumExpertiseRank.  # noqa: E501
        :rtype: object
        """
        return self._abs_distance_to_anchor

    @abs_distance_to_anchor.setter
    def abs_distance_to_anchor(self, abs_distance_to_anchor):
        """Sets the abs_distance_to_anchor of this TitaniumExpertiseRank.


        :param abs_distance_to_anchor: The abs_distance_to_anchor of this TitaniumExpertiseRank.  # noqa: E501
        :type abs_distance_to_anchor: object
        """

        self._abs_distance_to_anchor = abs_distance_to_anchor

    @property
    def anchor_price(self):
        """Gets the anchor_price of this TitaniumExpertiseRank.  # noqa: E501


        :return: The anchor_price of this TitaniumExpertiseRank.  # noqa: E501
        :rtype: object
        """
        return self._anchor_price

    @anchor_price.setter
    def anchor_price(self, anchor_price):
        """Sets the anchor_price of this TitaniumExpertiseRank.


        :param anchor_price: The anchor_price of this TitaniumExpertiseRank.  # noqa: E501
        :type anchor_price: object
        """

        self._anchor_price = anchor_price

    @property
    def expertise_score(self):
        """Gets the expertise_score of this TitaniumExpertiseRank.  # noqa: E501


        :return: The expertise_score of this TitaniumExpertiseRank.  # noqa: E501
        :rtype: object
        """
        return self._expertise_score

    @expertise_score.setter
    def expertise_score(self, expertise_score):
        """Sets the expertise_score of this TitaniumExpertiseRank.


        :param expertise_score: The expertise_score of this TitaniumExpertiseRank.  # noqa: E501
        :type expertise_score: object
        """

        self._expertise_score = expertise_score

    @property
    def experts_count(self):
        """Gets the experts_count of this TitaniumExpertiseRank.  # noqa: E501


        :return: The experts_count of this TitaniumExpertiseRank.  # noqa: E501
        :rtype: object
        """
        return self._experts_count

    @experts_count.setter
    def experts_count(self, experts_count):
        """Sets the experts_count of this TitaniumExpertiseRank.


        :param experts_count: The experts_count of this TitaniumExpertiseRank.  # noqa: E501
        :type experts_count: object
        """

        self._experts_count = experts_count

    @property
    def history(self):
        """Gets the history of this TitaniumExpertiseRank.  # noqa: E501


        :return: The history of this TitaniumExpertiseRank.  # noqa: E501
        :rtype: list[TitaniumExpertiseRankHistoryElement]
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this TitaniumExpertiseRank.


        :param history: The history of this TitaniumExpertiseRank.  # noqa: E501
        :type history: list[TitaniumExpertiseRankHistoryElement]
        """

        self._history = history

    @property
    def rank(self):
        """Gets the rank of this TitaniumExpertiseRank.  # noqa: E501


        :return: The rank of this TitaniumExpertiseRank.  # noqa: E501
        :rtype: object
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this TitaniumExpertiseRank.


        :param rank: The rank of this TitaniumExpertiseRank.  # noqa: E501
        :type rank: object
        """

        self._rank = rank

    @property
    def submission_price(self):
        """Gets the submission_price of this TitaniumExpertiseRank.  # noqa: E501


        :return: The submission_price of this TitaniumExpertiseRank.  # noqa: E501
        :rtype: object
        """
        return self._submission_price

    @submission_price.setter
    def submission_price(self, submission_price):
        """Sets the submission_price of this TitaniumExpertiseRank.


        :param submission_price: The submission_price of this TitaniumExpertiseRank.  # noqa: E501
        :type submission_price: object
        """

        self._submission_price = submission_price

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumExpertiseRank):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumExpertiseRank):
            return True

        return self.to_dict() != other.to_dict()
