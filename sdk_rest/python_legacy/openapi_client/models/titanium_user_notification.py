# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumUserNotification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'asset': 'TitaniumAssetM',
        'id': 'str',
        'market': 'TitaniumMarket',
        'type': 'str',
        'user': 'TitaniumUser',
        'value': 'str'
    }

    attribute_map = {
        'asset': 'asset',
        'id': 'id',
        'market': 'market',
        'type': 'type',
        'user': 'user',
        'value': 'value'
    }

    def __init__(self, asset=None, id=None, market=None, type=None, user=None, value=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumUserNotification - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._asset = None
        self._id = None
        self._market = None
        self._type = None
        self._user = None
        self._value = None
        self.discriminator = None

        if asset is not None:
            self.asset = asset
        if id is not None:
            self.id = id
        if market is not None:
            self.market = market
        if type is not None:
            self.type = type
        if user is not None:
            self.user = user
        if value is not None:
            self.value = value

    @property
    def asset(self):
        """Gets the asset of this TitaniumUserNotification.  # noqa: E501


        :return: The asset of this TitaniumUserNotification.  # noqa: E501
        :rtype: TitaniumAssetM
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this TitaniumUserNotification.


        :param asset: The asset of this TitaniumUserNotification.  # noqa: E501
        :type asset: TitaniumAssetM
        """

        self._asset = asset

    @property
    def id(self):
        """Gets the id of this TitaniumUserNotification.  # noqa: E501


        :return: The id of this TitaniumUserNotification.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TitaniumUserNotification.


        :param id: The id of this TitaniumUserNotification.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def market(self):
        """Gets the market of this TitaniumUserNotification.  # noqa: E501


        :return: The market of this TitaniumUserNotification.  # noqa: E501
        :rtype: TitaniumMarket
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this TitaniumUserNotification.


        :param market: The market of this TitaniumUserNotification.  # noqa: E501
        :type market: TitaniumMarket
        """

        self._market = market

    @property
    def type(self):
        """Gets the type of this TitaniumUserNotification.  # noqa: E501


        :return: The type of this TitaniumUserNotification.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TitaniumUserNotification.


        :param type: The type of this TitaniumUserNotification.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def user(self):
        """Gets the user of this TitaniumUserNotification.  # noqa: E501


        :return: The user of this TitaniumUserNotification.  # noqa: E501
        :rtype: TitaniumUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this TitaniumUserNotification.


        :param user: The user of this TitaniumUserNotification.  # noqa: E501
        :type user: TitaniumUser
        """

        self._user = user

    @property
    def value(self):
        """Gets the value of this TitaniumUserNotification.  # noqa: E501


        :return: The value of this TitaniumUserNotification.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TitaniumUserNotification.


        :param value: The value of this TitaniumUserNotification.  # noqa: E501
        :type value: str
        """

        self._value = value

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumUserNotification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumUserNotification):
            return True

        return self.to_dict() != other.to_dict()
