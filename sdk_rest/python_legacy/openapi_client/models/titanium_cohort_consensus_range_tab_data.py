# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumCohortConsensusRangeTabData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'distance_to_anchor': 'object',
        'distance_to_consensus': 'object',
        'evp_anchor_details': 'TitaniumEvpAnchorDetails',
        'expertise_rank': 'object',
        'expertise_score': 'object',
        'experts_count': 'int',
        'submission_evidence_anchor_details': 'TitaniumSubmissionEvidenceAnchorDetails',
        'trade_anchor_details': 'TitaniumTradeAnchorDetails',
        'trade_periods_with_metrics': 'TitaniumTradePeriodsWithMetrics'
    }

    attribute_map = {
        'distance_to_anchor': 'distanceToAnchor',
        'distance_to_consensus': 'distanceToConsensus',
        'evp_anchor_details': 'evpAnchorDetails',
        'expertise_rank': 'expertiseRank',
        'expertise_score': 'expertiseScore',
        'experts_count': 'expertsCount',
        'submission_evidence_anchor_details': 'submissionEvidenceAnchorDetails',
        'trade_anchor_details': 'tradeAnchorDetails',
        'trade_periods_with_metrics': 'tradePeriodsWithMetrics'
    }

    def __init__(self, distance_to_anchor=None, distance_to_consensus=None, evp_anchor_details=None, expertise_rank=None, expertise_score=None, experts_count=None, submission_evidence_anchor_details=None, trade_anchor_details=None, trade_periods_with_metrics=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumCohortConsensusRangeTabData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._distance_to_anchor = None
        self._distance_to_consensus = None
        self._evp_anchor_details = None
        self._expertise_rank = None
        self._expertise_score = None
        self._experts_count = None
        self._submission_evidence_anchor_details = None
        self._trade_anchor_details = None
        self._trade_periods_with_metrics = None
        self.discriminator = None

        if distance_to_anchor is not None:
            self.distance_to_anchor = distance_to_anchor
        if distance_to_consensus is not None:
            self.distance_to_consensus = distance_to_consensus
        if evp_anchor_details is not None:
            self.evp_anchor_details = evp_anchor_details
        if expertise_rank is not None:
            self.expertise_rank = expertise_rank
        if expertise_score is not None:
            self.expertise_score = expertise_score
        if experts_count is not None:
            self.experts_count = experts_count
        if submission_evidence_anchor_details is not None:
            self.submission_evidence_anchor_details = submission_evidence_anchor_details
        if trade_anchor_details is not None:
            self.trade_anchor_details = trade_anchor_details
        if trade_periods_with_metrics is not None:
            self.trade_periods_with_metrics = trade_periods_with_metrics

    @property
    def distance_to_anchor(self):
        """Gets the distance_to_anchor of this TitaniumCohortConsensusRangeTabData.  # noqa: E501


        :return: The distance_to_anchor of this TitaniumCohortConsensusRangeTabData.  # noqa: E501
        :rtype: object
        """
        return self._distance_to_anchor

    @distance_to_anchor.setter
    def distance_to_anchor(self, distance_to_anchor):
        """Sets the distance_to_anchor of this TitaniumCohortConsensusRangeTabData.


        :param distance_to_anchor: The distance_to_anchor of this TitaniumCohortConsensusRangeTabData.  # noqa: E501
        :type distance_to_anchor: object
        """

        self._distance_to_anchor = distance_to_anchor

    @property
    def distance_to_consensus(self):
        """Gets the distance_to_consensus of this TitaniumCohortConsensusRangeTabData.  # noqa: E501


        :return: The distance_to_consensus of this TitaniumCohortConsensusRangeTabData.  # noqa: E501
        :rtype: object
        """
        return self._distance_to_consensus

    @distance_to_consensus.setter
    def distance_to_consensus(self, distance_to_consensus):
        """Sets the distance_to_consensus of this TitaniumCohortConsensusRangeTabData.


        :param distance_to_consensus: The distance_to_consensus of this TitaniumCohortConsensusRangeTabData.  # noqa: E501
        :type distance_to_consensus: object
        """

        self._distance_to_consensus = distance_to_consensus

    @property
    def evp_anchor_details(self):
        """Gets the evp_anchor_details of this TitaniumCohortConsensusRangeTabData.  # noqa: E501


        :return: The evp_anchor_details of this TitaniumCohortConsensusRangeTabData.  # noqa: E501
        :rtype: TitaniumEvpAnchorDetails
        """
        return self._evp_anchor_details

    @evp_anchor_details.setter
    def evp_anchor_details(self, evp_anchor_details):
        """Sets the evp_anchor_details of this TitaniumCohortConsensusRangeTabData.


        :param evp_anchor_details: The evp_anchor_details of this TitaniumCohortConsensusRangeTabData.  # noqa: E501
        :type evp_anchor_details: TitaniumEvpAnchorDetails
        """

        self._evp_anchor_details = evp_anchor_details

    @property
    def expertise_rank(self):
        """Gets the expertise_rank of this TitaniumCohortConsensusRangeTabData.  # noqa: E501


        :return: The expertise_rank of this TitaniumCohortConsensusRangeTabData.  # noqa: E501
        :rtype: object
        """
        return self._expertise_rank

    @expertise_rank.setter
    def expertise_rank(self, expertise_rank):
        """Sets the expertise_rank of this TitaniumCohortConsensusRangeTabData.


        :param expertise_rank: The expertise_rank of this TitaniumCohortConsensusRangeTabData.  # noqa: E501
        :type expertise_rank: object
        """

        self._expertise_rank = expertise_rank

    @property
    def expertise_score(self):
        """Gets the expertise_score of this TitaniumCohortConsensusRangeTabData.  # noqa: E501


        :return: The expertise_score of this TitaniumCohortConsensusRangeTabData.  # noqa: E501
        :rtype: object
        """
        return self._expertise_score

    @expertise_score.setter
    def expertise_score(self, expertise_score):
        """Sets the expertise_score of this TitaniumCohortConsensusRangeTabData.


        :param expertise_score: The expertise_score of this TitaniumCohortConsensusRangeTabData.  # noqa: E501
        :type expertise_score: object
        """

        self._expertise_score = expertise_score

    @property
    def experts_count(self):
        """Gets the experts_count of this TitaniumCohortConsensusRangeTabData.  # noqa: E501


        :return: The experts_count of this TitaniumCohortConsensusRangeTabData.  # noqa: E501
        :rtype: int
        """
        return self._experts_count

    @experts_count.setter
    def experts_count(self, experts_count):
        """Sets the experts_count of this TitaniumCohortConsensusRangeTabData.


        :param experts_count: The experts_count of this TitaniumCohortConsensusRangeTabData.  # noqa: E501
        :type experts_count: int
        """

        self._experts_count = experts_count

    @property
    def submission_evidence_anchor_details(self):
        """Gets the submission_evidence_anchor_details of this TitaniumCohortConsensusRangeTabData.  # noqa: E501


        :return: The submission_evidence_anchor_details of this TitaniumCohortConsensusRangeTabData.  # noqa: E501
        :rtype: TitaniumSubmissionEvidenceAnchorDetails
        """
        return self._submission_evidence_anchor_details

    @submission_evidence_anchor_details.setter
    def submission_evidence_anchor_details(self, submission_evidence_anchor_details):
        """Sets the submission_evidence_anchor_details of this TitaniumCohortConsensusRangeTabData.


        :param submission_evidence_anchor_details: The submission_evidence_anchor_details of this TitaniumCohortConsensusRangeTabData.  # noqa: E501
        :type submission_evidence_anchor_details: TitaniumSubmissionEvidenceAnchorDetails
        """

        self._submission_evidence_anchor_details = submission_evidence_anchor_details

    @property
    def trade_anchor_details(self):
        """Gets the trade_anchor_details of this TitaniumCohortConsensusRangeTabData.  # noqa: E501


        :return: The trade_anchor_details of this TitaniumCohortConsensusRangeTabData.  # noqa: E501
        :rtype: TitaniumTradeAnchorDetails
        """
        return self._trade_anchor_details

    @trade_anchor_details.setter
    def trade_anchor_details(self, trade_anchor_details):
        """Sets the trade_anchor_details of this TitaniumCohortConsensusRangeTabData.


        :param trade_anchor_details: The trade_anchor_details of this TitaniumCohortConsensusRangeTabData.  # noqa: E501
        :type trade_anchor_details: TitaniumTradeAnchorDetails
        """

        self._trade_anchor_details = trade_anchor_details

    @property
    def trade_periods_with_metrics(self):
        """Gets the trade_periods_with_metrics of this TitaniumCohortConsensusRangeTabData.  # noqa: E501


        :return: The trade_periods_with_metrics of this TitaniumCohortConsensusRangeTabData.  # noqa: E501
        :rtype: TitaniumTradePeriodsWithMetrics
        """
        return self._trade_periods_with_metrics

    @trade_periods_with_metrics.setter
    def trade_periods_with_metrics(self, trade_periods_with_metrics):
        """Sets the trade_periods_with_metrics of this TitaniumCohortConsensusRangeTabData.


        :param trade_periods_with_metrics: The trade_periods_with_metrics of this TitaniumCohortConsensusRangeTabData.  # noqa: E501
        :type trade_periods_with_metrics: TitaniumTradePeriodsWithMetrics
        """

        self._trade_periods_with_metrics = trade_periods_with_metrics

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumCohortConsensusRangeTabData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumCohortConsensusRangeTabData):
            return True

        return self.to_dict() != other.to_dict()
