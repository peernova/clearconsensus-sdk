# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumExpertiseScoreWithDate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'date': 'str',
        'expertise_rank': 'object',
        'experts_count': 'object',
        'score': 'object'
    }

    attribute_map = {
        'date': 'date',
        'expertise_rank': 'expertiseRank',
        'experts_count': 'expertsCount',
        'score': 'score'
    }

    def __init__(self, date=None, expertise_rank=None, experts_count=None, score=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumExpertiseScoreWithDate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._date = None
        self._expertise_rank = None
        self._experts_count = None
        self._score = None
        self.discriminator = None

        if date is not None:
            self.date = date
        if expertise_rank is not None:
            self.expertise_rank = expertise_rank
        if experts_count is not None:
            self.experts_count = experts_count
        if score is not None:
            self.score = score

    @property
    def date(self):
        """Gets the date of this TitaniumExpertiseScoreWithDate.  # noqa: E501


        :return: The date of this TitaniumExpertiseScoreWithDate.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this TitaniumExpertiseScoreWithDate.


        :param date: The date of this TitaniumExpertiseScoreWithDate.  # noqa: E501
        :type date: str
        """

        self._date = date

    @property
    def expertise_rank(self):
        """Gets the expertise_rank of this TitaniumExpertiseScoreWithDate.  # noqa: E501


        :return: The expertise_rank of this TitaniumExpertiseScoreWithDate.  # noqa: E501
        :rtype: object
        """
        return self._expertise_rank

    @expertise_rank.setter
    def expertise_rank(self, expertise_rank):
        """Sets the expertise_rank of this TitaniumExpertiseScoreWithDate.


        :param expertise_rank: The expertise_rank of this TitaniumExpertiseScoreWithDate.  # noqa: E501
        :type expertise_rank: object
        """

        self._expertise_rank = expertise_rank

    @property
    def experts_count(self):
        """Gets the experts_count of this TitaniumExpertiseScoreWithDate.  # noqa: E501


        :return: The experts_count of this TitaniumExpertiseScoreWithDate.  # noqa: E501
        :rtype: object
        """
        return self._experts_count

    @experts_count.setter
    def experts_count(self, experts_count):
        """Sets the experts_count of this TitaniumExpertiseScoreWithDate.


        :param experts_count: The experts_count of this TitaniumExpertiseScoreWithDate.  # noqa: E501
        :type experts_count: object
        """

        self._experts_count = experts_count

    @property
    def score(self):
        """Gets the score of this TitaniumExpertiseScoreWithDate.  # noqa: E501


        :return: The score of this TitaniumExpertiseScoreWithDate.  # noqa: E501
        :rtype: object
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this TitaniumExpertiseScoreWithDate.


        :param score: The score of this TitaniumExpertiseScoreWithDate.  # noqa: E501
        :type score: object
        """

        self._score = score

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumExpertiseScoreWithDate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumExpertiseScoreWithDate):
            return True

        return self.to_dict() != other.to_dict()
