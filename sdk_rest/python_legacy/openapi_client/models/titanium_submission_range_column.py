# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumSubmissionRangeColumn(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'abs_diff_from_mean': 'object',
        'mean': 'object',
        'mean_abs_diff_from_latest_trade': 'object',
        'std_dev': 'object',
        'sub_price_diff': 'object',
        'submission_max': 'object',
        'submission_min': 'object',
        'valid_count': 'object'
    }

    attribute_map = {
        'abs_diff_from_mean': 'absDiffFromMean',
        'mean': 'mean',
        'mean_abs_diff_from_latest_trade': 'meanAbsDiffFromLatestTrade',
        'std_dev': 'stdDev',
        'sub_price_diff': 'subPriceDiff',
        'submission_max': 'submissionMax',
        'submission_min': 'submissionMin',
        'valid_count': 'validCount'
    }

    def __init__(self, abs_diff_from_mean=None, mean=None, mean_abs_diff_from_latest_trade=None, std_dev=None, sub_price_diff=None, submission_max=None, submission_min=None, valid_count=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumSubmissionRangeColumn - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._abs_diff_from_mean = None
        self._mean = None
        self._mean_abs_diff_from_latest_trade = None
        self._std_dev = None
        self._sub_price_diff = None
        self._submission_max = None
        self._submission_min = None
        self._valid_count = None
        self.discriminator = None

        if abs_diff_from_mean is not None:
            self.abs_diff_from_mean = abs_diff_from_mean
        if mean is not None:
            self.mean = mean
        if mean_abs_diff_from_latest_trade is not None:
            self.mean_abs_diff_from_latest_trade = mean_abs_diff_from_latest_trade
        if std_dev is not None:
            self.std_dev = std_dev
        if sub_price_diff is not None:
            self.sub_price_diff = sub_price_diff
        if submission_max is not None:
            self.submission_max = submission_max
        if submission_min is not None:
            self.submission_min = submission_min
        if valid_count is not None:
            self.valid_count = valid_count

    @property
    def abs_diff_from_mean(self):
        """Gets the abs_diff_from_mean of this TitaniumSubmissionRangeColumn.  # noqa: E501


        :return: The abs_diff_from_mean of this TitaniumSubmissionRangeColumn.  # noqa: E501
        :rtype: object
        """
        return self._abs_diff_from_mean

    @abs_diff_from_mean.setter
    def abs_diff_from_mean(self, abs_diff_from_mean):
        """Sets the abs_diff_from_mean of this TitaniumSubmissionRangeColumn.


        :param abs_diff_from_mean: The abs_diff_from_mean of this TitaniumSubmissionRangeColumn.  # noqa: E501
        :type abs_diff_from_mean: object
        """

        self._abs_diff_from_mean = abs_diff_from_mean

    @property
    def mean(self):
        """Gets the mean of this TitaniumSubmissionRangeColumn.  # noqa: E501


        :return: The mean of this TitaniumSubmissionRangeColumn.  # noqa: E501
        :rtype: object
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this TitaniumSubmissionRangeColumn.


        :param mean: The mean of this TitaniumSubmissionRangeColumn.  # noqa: E501
        :type mean: object
        """

        self._mean = mean

    @property
    def mean_abs_diff_from_latest_trade(self):
        """Gets the mean_abs_diff_from_latest_trade of this TitaniumSubmissionRangeColumn.  # noqa: E501


        :return: The mean_abs_diff_from_latest_trade of this TitaniumSubmissionRangeColumn.  # noqa: E501
        :rtype: object
        """
        return self._mean_abs_diff_from_latest_trade

    @mean_abs_diff_from_latest_trade.setter
    def mean_abs_diff_from_latest_trade(self, mean_abs_diff_from_latest_trade):
        """Sets the mean_abs_diff_from_latest_trade of this TitaniumSubmissionRangeColumn.


        :param mean_abs_diff_from_latest_trade: The mean_abs_diff_from_latest_trade of this TitaniumSubmissionRangeColumn.  # noqa: E501
        :type mean_abs_diff_from_latest_trade: object
        """

        self._mean_abs_diff_from_latest_trade = mean_abs_diff_from_latest_trade

    @property
    def std_dev(self):
        """Gets the std_dev of this TitaniumSubmissionRangeColumn.  # noqa: E501


        :return: The std_dev of this TitaniumSubmissionRangeColumn.  # noqa: E501
        :rtype: object
        """
        return self._std_dev

    @std_dev.setter
    def std_dev(self, std_dev):
        """Sets the std_dev of this TitaniumSubmissionRangeColumn.


        :param std_dev: The std_dev of this TitaniumSubmissionRangeColumn.  # noqa: E501
        :type std_dev: object
        """

        self._std_dev = std_dev

    @property
    def sub_price_diff(self):
        """Gets the sub_price_diff of this TitaniumSubmissionRangeColumn.  # noqa: E501


        :return: The sub_price_diff of this TitaniumSubmissionRangeColumn.  # noqa: E501
        :rtype: object
        """
        return self._sub_price_diff

    @sub_price_diff.setter
    def sub_price_diff(self, sub_price_diff):
        """Sets the sub_price_diff of this TitaniumSubmissionRangeColumn.


        :param sub_price_diff: The sub_price_diff of this TitaniumSubmissionRangeColumn.  # noqa: E501
        :type sub_price_diff: object
        """

        self._sub_price_diff = sub_price_diff

    @property
    def submission_max(self):
        """Gets the submission_max of this TitaniumSubmissionRangeColumn.  # noqa: E501


        :return: The submission_max of this TitaniumSubmissionRangeColumn.  # noqa: E501
        :rtype: object
        """
        return self._submission_max

    @submission_max.setter
    def submission_max(self, submission_max):
        """Sets the submission_max of this TitaniumSubmissionRangeColumn.


        :param submission_max: The submission_max of this TitaniumSubmissionRangeColumn.  # noqa: E501
        :type submission_max: object
        """

        self._submission_max = submission_max

    @property
    def submission_min(self):
        """Gets the submission_min of this TitaniumSubmissionRangeColumn.  # noqa: E501


        :return: The submission_min of this TitaniumSubmissionRangeColumn.  # noqa: E501
        :rtype: object
        """
        return self._submission_min

    @submission_min.setter
    def submission_min(self, submission_min):
        """Sets the submission_min of this TitaniumSubmissionRangeColumn.


        :param submission_min: The submission_min of this TitaniumSubmissionRangeColumn.  # noqa: E501
        :type submission_min: object
        """

        self._submission_min = submission_min

    @property
    def valid_count(self):
        """Gets the valid_count of this TitaniumSubmissionRangeColumn.  # noqa: E501


        :return: The valid_count of this TitaniumSubmissionRangeColumn.  # noqa: E501
        :rtype: object
        """
        return self._valid_count

    @valid_count.setter
    def valid_count(self, valid_count):
        """Sets the valid_count of this TitaniumSubmissionRangeColumn.


        :param valid_count: The valid_count of this TitaniumSubmissionRangeColumn.  # noqa: E501
        :type valid_count: object
        """

        self._valid_count = valid_count

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumSubmissionRangeColumn):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumSubmissionRangeColumn):
            return True

        return self.to_dict() != other.to_dict()
