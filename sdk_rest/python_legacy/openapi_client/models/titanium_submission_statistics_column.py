# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumSubmissionStatisticsColumn(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'abs_diff_from_latest_trade': 'object',
        'abs_diff_from_sub_evidence': 'object',
        'lower_boundary': 'object',
        'number_of_part_in_boundaries': 'object',
        'std_dev': 'object',
        'sub_price_diff': 'object',
        'submission_evidence': 'object',
        'upper_boundary': 'object'
    }

    attribute_map = {
        'abs_diff_from_latest_trade': 'absDiffFromLatestTrade',
        'abs_diff_from_sub_evidence': 'absDiffFromSubEvidence',
        'lower_boundary': 'lowerBoundary',
        'number_of_part_in_boundaries': 'numberOfPartInBoundaries',
        'std_dev': 'stdDev',
        'sub_price_diff': 'subPriceDiff',
        'submission_evidence': 'submissionEvidence',
        'upper_boundary': 'upperBoundary'
    }

    def __init__(self, abs_diff_from_latest_trade=None, abs_diff_from_sub_evidence=None, lower_boundary=None, number_of_part_in_boundaries=None, std_dev=None, sub_price_diff=None, submission_evidence=None, upper_boundary=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumSubmissionStatisticsColumn - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._abs_diff_from_latest_trade = None
        self._abs_diff_from_sub_evidence = None
        self._lower_boundary = None
        self._number_of_part_in_boundaries = None
        self._std_dev = None
        self._sub_price_diff = None
        self._submission_evidence = None
        self._upper_boundary = None
        self.discriminator = None

        if abs_diff_from_latest_trade is not None:
            self.abs_diff_from_latest_trade = abs_diff_from_latest_trade
        if abs_diff_from_sub_evidence is not None:
            self.abs_diff_from_sub_evidence = abs_diff_from_sub_evidence
        if lower_boundary is not None:
            self.lower_boundary = lower_boundary
        if number_of_part_in_boundaries is not None:
            self.number_of_part_in_boundaries = number_of_part_in_boundaries
        if std_dev is not None:
            self.std_dev = std_dev
        if sub_price_diff is not None:
            self.sub_price_diff = sub_price_diff
        if submission_evidence is not None:
            self.submission_evidence = submission_evidence
        if upper_boundary is not None:
            self.upper_boundary = upper_boundary

    @property
    def abs_diff_from_latest_trade(self):
        """Gets the abs_diff_from_latest_trade of this TitaniumSubmissionStatisticsColumn.  # noqa: E501


        :return: The abs_diff_from_latest_trade of this TitaniumSubmissionStatisticsColumn.  # noqa: E501
        :rtype: object
        """
        return self._abs_diff_from_latest_trade

    @abs_diff_from_latest_trade.setter
    def abs_diff_from_latest_trade(self, abs_diff_from_latest_trade):
        """Sets the abs_diff_from_latest_trade of this TitaniumSubmissionStatisticsColumn.


        :param abs_diff_from_latest_trade: The abs_diff_from_latest_trade of this TitaniumSubmissionStatisticsColumn.  # noqa: E501
        :type abs_diff_from_latest_trade: object
        """

        self._abs_diff_from_latest_trade = abs_diff_from_latest_trade

    @property
    def abs_diff_from_sub_evidence(self):
        """Gets the abs_diff_from_sub_evidence of this TitaniumSubmissionStatisticsColumn.  # noqa: E501


        :return: The abs_diff_from_sub_evidence of this TitaniumSubmissionStatisticsColumn.  # noqa: E501
        :rtype: object
        """
        return self._abs_diff_from_sub_evidence

    @abs_diff_from_sub_evidence.setter
    def abs_diff_from_sub_evidence(self, abs_diff_from_sub_evidence):
        """Sets the abs_diff_from_sub_evidence of this TitaniumSubmissionStatisticsColumn.


        :param abs_diff_from_sub_evidence: The abs_diff_from_sub_evidence of this TitaniumSubmissionStatisticsColumn.  # noqa: E501
        :type abs_diff_from_sub_evidence: object
        """

        self._abs_diff_from_sub_evidence = abs_diff_from_sub_evidence

    @property
    def lower_boundary(self):
        """Gets the lower_boundary of this TitaniumSubmissionStatisticsColumn.  # noqa: E501


        :return: The lower_boundary of this TitaniumSubmissionStatisticsColumn.  # noqa: E501
        :rtype: object
        """
        return self._lower_boundary

    @lower_boundary.setter
    def lower_boundary(self, lower_boundary):
        """Sets the lower_boundary of this TitaniumSubmissionStatisticsColumn.


        :param lower_boundary: The lower_boundary of this TitaniumSubmissionStatisticsColumn.  # noqa: E501
        :type lower_boundary: object
        """

        self._lower_boundary = lower_boundary

    @property
    def number_of_part_in_boundaries(self):
        """Gets the number_of_part_in_boundaries of this TitaniumSubmissionStatisticsColumn.  # noqa: E501


        :return: The number_of_part_in_boundaries of this TitaniumSubmissionStatisticsColumn.  # noqa: E501
        :rtype: object
        """
        return self._number_of_part_in_boundaries

    @number_of_part_in_boundaries.setter
    def number_of_part_in_boundaries(self, number_of_part_in_boundaries):
        """Sets the number_of_part_in_boundaries of this TitaniumSubmissionStatisticsColumn.


        :param number_of_part_in_boundaries: The number_of_part_in_boundaries of this TitaniumSubmissionStatisticsColumn.  # noqa: E501
        :type number_of_part_in_boundaries: object
        """

        self._number_of_part_in_boundaries = number_of_part_in_boundaries

    @property
    def std_dev(self):
        """Gets the std_dev of this TitaniumSubmissionStatisticsColumn.  # noqa: E501


        :return: The std_dev of this TitaniumSubmissionStatisticsColumn.  # noqa: E501
        :rtype: object
        """
        return self._std_dev

    @std_dev.setter
    def std_dev(self, std_dev):
        """Sets the std_dev of this TitaniumSubmissionStatisticsColumn.


        :param std_dev: The std_dev of this TitaniumSubmissionStatisticsColumn.  # noqa: E501
        :type std_dev: object
        """

        self._std_dev = std_dev

    @property
    def sub_price_diff(self):
        """Gets the sub_price_diff of this TitaniumSubmissionStatisticsColumn.  # noqa: E501


        :return: The sub_price_diff of this TitaniumSubmissionStatisticsColumn.  # noqa: E501
        :rtype: object
        """
        return self._sub_price_diff

    @sub_price_diff.setter
    def sub_price_diff(self, sub_price_diff):
        """Sets the sub_price_diff of this TitaniumSubmissionStatisticsColumn.


        :param sub_price_diff: The sub_price_diff of this TitaniumSubmissionStatisticsColumn.  # noqa: E501
        :type sub_price_diff: object
        """

        self._sub_price_diff = sub_price_diff

    @property
    def submission_evidence(self):
        """Gets the submission_evidence of this TitaniumSubmissionStatisticsColumn.  # noqa: E501


        :return: The submission_evidence of this TitaniumSubmissionStatisticsColumn.  # noqa: E501
        :rtype: object
        """
        return self._submission_evidence

    @submission_evidence.setter
    def submission_evidence(self, submission_evidence):
        """Sets the submission_evidence of this TitaniumSubmissionStatisticsColumn.


        :param submission_evidence: The submission_evidence of this TitaniumSubmissionStatisticsColumn.  # noqa: E501
        :type submission_evidence: object
        """

        self._submission_evidence = submission_evidence

    @property
    def upper_boundary(self):
        """Gets the upper_boundary of this TitaniumSubmissionStatisticsColumn.  # noqa: E501


        :return: The upper_boundary of this TitaniumSubmissionStatisticsColumn.  # noqa: E501
        :rtype: object
        """
        return self._upper_boundary

    @upper_boundary.setter
    def upper_boundary(self, upper_boundary):
        """Sets the upper_boundary of this TitaniumSubmissionStatisticsColumn.


        :param upper_boundary: The upper_boundary of this TitaniumSubmissionStatisticsColumn.  # noqa: E501
        :type upper_boundary: object
        """

        self._upper_boundary = upper_boundary

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumSubmissionStatisticsColumn):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumSubmissionStatisticsColumn):
            return True

        return self.to_dict() != other.to_dict()
