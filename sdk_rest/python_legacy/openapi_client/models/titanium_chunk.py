# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumChunk(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'annotation': 'object',
        'chunk_id': 'str',
        'description': 'str',
        'original_file_name': 'str',
        'rows_count': 'int',
        'start_row': 'int',
        'user': 'str'
    }

    attribute_map = {
        'annotation': 'annotation',
        'chunk_id': 'chunkId',
        'description': 'description',
        'original_file_name': 'originalFileName',
        'rows_count': 'rowsCount',
        'start_row': 'startRow',
        'user': 'user'
    }

    def __init__(self, annotation=None, chunk_id=None, description=None, original_file_name=None, rows_count=None, start_row=None, user=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumChunk - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._annotation = None
        self._chunk_id = None
        self._description = None
        self._original_file_name = None
        self._rows_count = None
        self._start_row = None
        self._user = None
        self.discriminator = None

        if annotation is not None:
            self.annotation = annotation
        if chunk_id is not None:
            self.chunk_id = chunk_id
        if description is not None:
            self.description = description
        if original_file_name is not None:
            self.original_file_name = original_file_name
        if rows_count is not None:
            self.rows_count = rows_count
        if start_row is not None:
            self.start_row = start_row
        if user is not None:
            self.user = user

    @property
    def annotation(self):
        """Gets the annotation of this TitaniumChunk.  # noqa: E501


        :return: The annotation of this TitaniumChunk.  # noqa: E501
        :rtype: object
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        """Sets the annotation of this TitaniumChunk.


        :param annotation: The annotation of this TitaniumChunk.  # noqa: E501
        :type annotation: object
        """

        self._annotation = annotation

    @property
    def chunk_id(self):
        """Gets the chunk_id of this TitaniumChunk.  # noqa: E501


        :return: The chunk_id of this TitaniumChunk.  # noqa: E501
        :rtype: str
        """
        return self._chunk_id

    @chunk_id.setter
    def chunk_id(self, chunk_id):
        """Sets the chunk_id of this TitaniumChunk.


        :param chunk_id: The chunk_id of this TitaniumChunk.  # noqa: E501
        :type chunk_id: str
        """

        self._chunk_id = chunk_id

    @property
    def description(self):
        """Gets the description of this TitaniumChunk.  # noqa: E501


        :return: The description of this TitaniumChunk.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TitaniumChunk.


        :param description: The description of this TitaniumChunk.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def original_file_name(self):
        """Gets the original_file_name of this TitaniumChunk.  # noqa: E501


        :return: The original_file_name of this TitaniumChunk.  # noqa: E501
        :rtype: str
        """
        return self._original_file_name

    @original_file_name.setter
    def original_file_name(self, original_file_name):
        """Sets the original_file_name of this TitaniumChunk.


        :param original_file_name: The original_file_name of this TitaniumChunk.  # noqa: E501
        :type original_file_name: str
        """

        self._original_file_name = original_file_name

    @property
    def rows_count(self):
        """Gets the rows_count of this TitaniumChunk.  # noqa: E501


        :return: The rows_count of this TitaniumChunk.  # noqa: E501
        :rtype: int
        """
        return self._rows_count

    @rows_count.setter
    def rows_count(self, rows_count):
        """Sets the rows_count of this TitaniumChunk.


        :param rows_count: The rows_count of this TitaniumChunk.  # noqa: E501
        :type rows_count: int
        """

        self._rows_count = rows_count

    @property
    def start_row(self):
        """Gets the start_row of this TitaniumChunk.  # noqa: E501


        :return: The start_row of this TitaniumChunk.  # noqa: E501
        :rtype: int
        """
        return self._start_row

    @start_row.setter
    def start_row(self, start_row):
        """Sets the start_row of this TitaniumChunk.


        :param start_row: The start_row of this TitaniumChunk.  # noqa: E501
        :type start_row: int
        """

        self._start_row = start_row

    @property
    def user(self):
        """Gets the user of this TitaniumChunk.  # noqa: E501


        :return: The user of this TitaniumChunk.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this TitaniumChunk.


        :param user: The user of this TitaniumChunk.  # noqa: E501
        :type user: str
        """

        self._user = user

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumChunk):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumChunk):
            return True

        return self.to_dict() != other.to_dict()
