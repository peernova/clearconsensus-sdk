# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumTradeAlignmentScore(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'history': 'list[TitaniumTradeAligmentDateAndValue]',
        'latest_trade_price': 'object',
        'mean': 'object',
        'score': 'object',
        'score_status': 'str',
        'std_dev': 'object'
    }

    attribute_map = {
        'history': 'history',
        'latest_trade_price': 'latestTradePrice',
        'mean': 'mean',
        'score': 'score',
        'score_status': 'scoreStatus',
        'std_dev': 'stdDev'
    }

    def __init__(self, history=None, latest_trade_price=None, mean=None, score=None, score_status=None, std_dev=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumTradeAlignmentScore - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._history = None
        self._latest_trade_price = None
        self._mean = None
        self._score = None
        self._score_status = None
        self._std_dev = None
        self.discriminator = None

        if history is not None:
            self.history = history
        if latest_trade_price is not None:
            self.latest_trade_price = latest_trade_price
        if mean is not None:
            self.mean = mean
        if score is not None:
            self.score = score
        if score_status is not None:
            self.score_status = score_status
        if std_dev is not None:
            self.std_dev = std_dev

    @property
    def history(self):
        """Gets the history of this TitaniumTradeAlignmentScore.  # noqa: E501


        :return: The history of this TitaniumTradeAlignmentScore.  # noqa: E501
        :rtype: list[TitaniumTradeAligmentDateAndValue]
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this TitaniumTradeAlignmentScore.


        :param history: The history of this TitaniumTradeAlignmentScore.  # noqa: E501
        :type history: list[TitaniumTradeAligmentDateAndValue]
        """

        self._history = history

    @property
    def latest_trade_price(self):
        """Gets the latest_trade_price of this TitaniumTradeAlignmentScore.  # noqa: E501


        :return: The latest_trade_price of this TitaniumTradeAlignmentScore.  # noqa: E501
        :rtype: object
        """
        return self._latest_trade_price

    @latest_trade_price.setter
    def latest_trade_price(self, latest_trade_price):
        """Sets the latest_trade_price of this TitaniumTradeAlignmentScore.


        :param latest_trade_price: The latest_trade_price of this TitaniumTradeAlignmentScore.  # noqa: E501
        :type latest_trade_price: object
        """

        self._latest_trade_price = latest_trade_price

    @property
    def mean(self):
        """Gets the mean of this TitaniumTradeAlignmentScore.  # noqa: E501


        :return: The mean of this TitaniumTradeAlignmentScore.  # noqa: E501
        :rtype: object
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this TitaniumTradeAlignmentScore.


        :param mean: The mean of this TitaniumTradeAlignmentScore.  # noqa: E501
        :type mean: object
        """

        self._mean = mean

    @property
    def score(self):
        """Gets the score of this TitaniumTradeAlignmentScore.  # noqa: E501


        :return: The score of this TitaniumTradeAlignmentScore.  # noqa: E501
        :rtype: object
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this TitaniumTradeAlignmentScore.


        :param score: The score of this TitaniumTradeAlignmentScore.  # noqa: E501
        :type score: object
        """

        self._score = score

    @property
    def score_status(self):
        """Gets the score_status of this TitaniumTradeAlignmentScore.  # noqa: E501


        :return: The score_status of this TitaniumTradeAlignmentScore.  # noqa: E501
        :rtype: str
        """
        return self._score_status

    @score_status.setter
    def score_status(self, score_status):
        """Sets the score_status of this TitaniumTradeAlignmentScore.


        :param score_status: The score_status of this TitaniumTradeAlignmentScore.  # noqa: E501
        :type score_status: str
        """

        self._score_status = score_status

    @property
    def std_dev(self):
        """Gets the std_dev of this TitaniumTradeAlignmentScore.  # noqa: E501


        :return: The std_dev of this TitaniumTradeAlignmentScore.  # noqa: E501
        :rtype: object
        """
        return self._std_dev

    @std_dev.setter
    def std_dev(self, std_dev):
        """Sets the std_dev of this TitaniumTradeAlignmentScore.


        :param std_dev: The std_dev of this TitaniumTradeAlignmentScore.  # noqa: E501
        :type std_dev: object
        """

        self._std_dev = std_dev

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumTradeAlignmentScore):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumTradeAlignmentScore):
            return True

        return self.to_dict() != other.to_dict()
