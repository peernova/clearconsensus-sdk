# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumConsensusResultSetInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cohort_name': 'str',
        'consensus_result_set_id': 'str',
        'consensus_run_timestamp': 'str',
        'data_content': 'str',
        'description': 'str',
        'status': 'str',
        'type': 'str'
    }

    attribute_map = {
        'cohort_name': 'cohortName',
        'consensus_result_set_id': 'consensusResultSetId',
        'consensus_run_timestamp': 'consensusRunTimestamp',
        'data_content': 'dataContent',
        'description': 'description',
        'status': 'status',
        'type': 'type'
    }

    def __init__(self, cohort_name=None, consensus_result_set_id=None, consensus_run_timestamp=None, data_content=None, description=None, status=None, type=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumConsensusResultSetInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cohort_name = None
        self._consensus_result_set_id = None
        self._consensus_run_timestamp = None
        self._data_content = None
        self._description = None
        self._status = None
        self._type = None
        self.discriminator = None

        if cohort_name is not None:
            self.cohort_name = cohort_name
        if consensus_result_set_id is not None:
            self.consensus_result_set_id = consensus_result_set_id
        if consensus_run_timestamp is not None:
            self.consensus_run_timestamp = consensus_run_timestamp
        if data_content is not None:
            self.data_content = data_content
        if description is not None:
            self.description = description
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type

    @property
    def cohort_name(self):
        """Gets the cohort_name of this TitaniumConsensusResultSetInfo.  # noqa: E501


        :return: The cohort_name of this TitaniumConsensusResultSetInfo.  # noqa: E501
        :rtype: str
        """
        return self._cohort_name

    @cohort_name.setter
    def cohort_name(self, cohort_name):
        """Sets the cohort_name of this TitaniumConsensusResultSetInfo.


        :param cohort_name: The cohort_name of this TitaniumConsensusResultSetInfo.  # noqa: E501
        :type cohort_name: str
        """

        self._cohort_name = cohort_name

    @property
    def consensus_result_set_id(self):
        """Gets the consensus_result_set_id of this TitaniumConsensusResultSetInfo.  # noqa: E501


        :return: The consensus_result_set_id of this TitaniumConsensusResultSetInfo.  # noqa: E501
        :rtype: str
        """
        return self._consensus_result_set_id

    @consensus_result_set_id.setter
    def consensus_result_set_id(self, consensus_result_set_id):
        """Sets the consensus_result_set_id of this TitaniumConsensusResultSetInfo.


        :param consensus_result_set_id: The consensus_result_set_id of this TitaniumConsensusResultSetInfo.  # noqa: E501
        :type consensus_result_set_id: str
        """

        self._consensus_result_set_id = consensus_result_set_id

    @property
    def consensus_run_timestamp(self):
        """Gets the consensus_run_timestamp of this TitaniumConsensusResultSetInfo.  # noqa: E501


        :return: The consensus_run_timestamp of this TitaniumConsensusResultSetInfo.  # noqa: E501
        :rtype: str
        """
        return self._consensus_run_timestamp

    @consensus_run_timestamp.setter
    def consensus_run_timestamp(self, consensus_run_timestamp):
        """Sets the consensus_run_timestamp of this TitaniumConsensusResultSetInfo.


        :param consensus_run_timestamp: The consensus_run_timestamp of this TitaniumConsensusResultSetInfo.  # noqa: E501
        :type consensus_run_timestamp: str
        """

        self._consensus_run_timestamp = consensus_run_timestamp

    @property
    def data_content(self):
        """Gets the data_content of this TitaniumConsensusResultSetInfo.  # noqa: E501


        :return: The data_content of this TitaniumConsensusResultSetInfo.  # noqa: E501
        :rtype: str
        """
        return self._data_content

    @data_content.setter
    def data_content(self, data_content):
        """Sets the data_content of this TitaniumConsensusResultSetInfo.


        :param data_content: The data_content of this TitaniumConsensusResultSetInfo.  # noqa: E501
        :type data_content: str
        """

        self._data_content = data_content

    @property
    def description(self):
        """Gets the description of this TitaniumConsensusResultSetInfo.  # noqa: E501


        :return: The description of this TitaniumConsensusResultSetInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TitaniumConsensusResultSetInfo.


        :param description: The description of this TitaniumConsensusResultSetInfo.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this TitaniumConsensusResultSetInfo.  # noqa: E501


        :return: The status of this TitaniumConsensusResultSetInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TitaniumConsensusResultSetInfo.


        :param status: The status of this TitaniumConsensusResultSetInfo.  # noqa: E501
        :type status: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this TitaniumConsensusResultSetInfo.  # noqa: E501


        :return: The type of this TitaniumConsensusResultSetInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TitaniumConsensusResultSetInfo.


        :param type: The type of this TitaniumConsensusResultSetInfo.  # noqa: E501
        :type type: str
        """

        self._type = type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumConsensusResultSetInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumConsensusResultSetInfo):
            return True

        return self.to_dict() != other.to_dict()
