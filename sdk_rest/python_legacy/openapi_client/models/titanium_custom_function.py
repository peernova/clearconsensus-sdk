# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumCustomFunction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'category': 'str',
        'definition': 'str',
        'descriptor_name': 'str',
        'descriptor_type': 'str',
        'name': 'str',
        'output_type': 'str',
        'scope': 'str',
        'uid': 'str',
        'usages': 'list[TitaniumCustomFunctionUsage]'
    }

    attribute_map = {
        'category': 'category',
        'definition': 'definition',
        'descriptor_name': 'descriptorName',
        'descriptor_type': 'descriptorType',
        'name': 'name',
        'output_type': 'outputType',
        'scope': 'scope',
        'uid': 'uid',
        'usages': 'usages'
    }

    def __init__(self, category=None, definition=None, descriptor_name=None, descriptor_type=None, name=None, output_type=None, scope=None, uid=None, usages=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumCustomFunction - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._category = None
        self._definition = None
        self._descriptor_name = None
        self._descriptor_type = None
        self._name = None
        self._output_type = None
        self._scope = None
        self._uid = None
        self._usages = None
        self.discriminator = None

        if category is not None:
            self.category = category
        if definition is not None:
            self.definition = definition
        if descriptor_name is not None:
            self.descriptor_name = descriptor_name
        if descriptor_type is not None:
            self.descriptor_type = descriptor_type
        if name is not None:
            self.name = name
        if output_type is not None:
            self.output_type = output_type
        if scope is not None:
            self.scope = scope
        if uid is not None:
            self.uid = uid
        if usages is not None:
            self.usages = usages

    @property
    def category(self):
        """Gets the category of this TitaniumCustomFunction.  # noqa: E501


        :return: The category of this TitaniumCustomFunction.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TitaniumCustomFunction.


        :param category: The category of this TitaniumCustomFunction.  # noqa: E501
        :type category: str
        """

        self._category = category

    @property
    def definition(self):
        """Gets the definition of this TitaniumCustomFunction.  # noqa: E501


        :return: The definition of this TitaniumCustomFunction.  # noqa: E501
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this TitaniumCustomFunction.


        :param definition: The definition of this TitaniumCustomFunction.  # noqa: E501
        :type definition: str
        """

        self._definition = definition

    @property
    def descriptor_name(self):
        """Gets the descriptor_name of this TitaniumCustomFunction.  # noqa: E501


        :return: The descriptor_name of this TitaniumCustomFunction.  # noqa: E501
        :rtype: str
        """
        return self._descriptor_name

    @descriptor_name.setter
    def descriptor_name(self, descriptor_name):
        """Sets the descriptor_name of this TitaniumCustomFunction.


        :param descriptor_name: The descriptor_name of this TitaniumCustomFunction.  # noqa: E501
        :type descriptor_name: str
        """

        self._descriptor_name = descriptor_name

    @property
    def descriptor_type(self):
        """Gets the descriptor_type of this TitaniumCustomFunction.  # noqa: E501


        :return: The descriptor_type of this TitaniumCustomFunction.  # noqa: E501
        :rtype: str
        """
        return self._descriptor_type

    @descriptor_type.setter
    def descriptor_type(self, descriptor_type):
        """Sets the descriptor_type of this TitaniumCustomFunction.


        :param descriptor_type: The descriptor_type of this TitaniumCustomFunction.  # noqa: E501
        :type descriptor_type: str
        """

        self._descriptor_type = descriptor_type

    @property
    def name(self):
        """Gets the name of this TitaniumCustomFunction.  # noqa: E501


        :return: The name of this TitaniumCustomFunction.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TitaniumCustomFunction.


        :param name: The name of this TitaniumCustomFunction.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def output_type(self):
        """Gets the output_type of this TitaniumCustomFunction.  # noqa: E501


        :return: The output_type of this TitaniumCustomFunction.  # noqa: E501
        :rtype: str
        """
        return self._output_type

    @output_type.setter
    def output_type(self, output_type):
        """Sets the output_type of this TitaniumCustomFunction.


        :param output_type: The output_type of this TitaniumCustomFunction.  # noqa: E501
        :type output_type: str
        """

        self._output_type = output_type

    @property
    def scope(self):
        """Gets the scope of this TitaniumCustomFunction.  # noqa: E501


        :return: The scope of this TitaniumCustomFunction.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this TitaniumCustomFunction.


        :param scope: The scope of this TitaniumCustomFunction.  # noqa: E501
        :type scope: str
        """

        self._scope = scope

    @property
    def uid(self):
        """Gets the uid of this TitaniumCustomFunction.  # noqa: E501


        :return: The uid of this TitaniumCustomFunction.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this TitaniumCustomFunction.


        :param uid: The uid of this TitaniumCustomFunction.  # noqa: E501
        :type uid: str
        """

        self._uid = uid

    @property
    def usages(self):
        """Gets the usages of this TitaniumCustomFunction.  # noqa: E501


        :return: The usages of this TitaniumCustomFunction.  # noqa: E501
        :rtype: list[TitaniumCustomFunctionUsage]
        """
        return self._usages

    @usages.setter
    def usages(self, usages):
        """Sets the usages of this TitaniumCustomFunction.


        :param usages: The usages of this TitaniumCustomFunction.  # noqa: E501
        :type usages: list[TitaniumCustomFunctionUsage]
        """

        self._usages = usages

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumCustomFunction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumCustomFunction):
            return True

        return self.to_dict() != other.to_dict()
