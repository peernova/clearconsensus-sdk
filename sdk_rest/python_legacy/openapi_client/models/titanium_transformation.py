# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumTransformation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'lut': 'TitaniumDynamicLut',
        'name': 'str',
        'rule': 'str',
        'source_column': 'str',
        'target_column': 'str'
    }

    attribute_map = {
        'description': 'description',
        'lut': 'lut',
        'name': 'name',
        'rule': 'rule',
        'source_column': 'sourceColumn',
        'target_column': 'targetColumn'
    }

    def __init__(self, description=None, lut=None, name=None, rule=None, source_column=None, target_column=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumTransformation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._lut = None
        self._name = None
        self._rule = None
        self._source_column = None
        self._target_column = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if lut is not None:
            self.lut = lut
        if name is not None:
            self.name = name
        if rule is not None:
            self.rule = rule
        if source_column is not None:
            self.source_column = source_column
        if target_column is not None:
            self.target_column = target_column

    @property
    def description(self):
        """Gets the description of this TitaniumTransformation.  # noqa: E501


        :return: The description of this TitaniumTransformation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TitaniumTransformation.


        :param description: The description of this TitaniumTransformation.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def lut(self):
        """Gets the lut of this TitaniumTransformation.  # noqa: E501


        :return: The lut of this TitaniumTransformation.  # noqa: E501
        :rtype: TitaniumDynamicLut
        """
        return self._lut

    @lut.setter
    def lut(self, lut):
        """Sets the lut of this TitaniumTransformation.


        :param lut: The lut of this TitaniumTransformation.  # noqa: E501
        :type lut: TitaniumDynamicLut
        """

        self._lut = lut

    @property
    def name(self):
        """Gets the name of this TitaniumTransformation.  # noqa: E501


        :return: The name of this TitaniumTransformation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TitaniumTransformation.


        :param name: The name of this TitaniumTransformation.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def rule(self):
        """Gets the rule of this TitaniumTransformation.  # noqa: E501


        :return: The rule of this TitaniumTransformation.  # noqa: E501
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this TitaniumTransformation.


        :param rule: The rule of this TitaniumTransformation.  # noqa: E501
        :type rule: str
        """

        self._rule = rule

    @property
    def source_column(self):
        """Gets the source_column of this TitaniumTransformation.  # noqa: E501


        :return: The source_column of this TitaniumTransformation.  # noqa: E501
        :rtype: str
        """
        return self._source_column

    @source_column.setter
    def source_column(self, source_column):
        """Sets the source_column of this TitaniumTransformation.


        :param source_column: The source_column of this TitaniumTransformation.  # noqa: E501
        :type source_column: str
        """

        self._source_column = source_column

    @property
    def target_column(self):
        """Gets the target_column of this TitaniumTransformation.  # noqa: E501


        :return: The target_column of this TitaniumTransformation.  # noqa: E501
        :rtype: str
        """
        return self._target_column

    @target_column.setter
    def target_column(self, target_column):
        """Sets the target_column of this TitaniumTransformation.


        :param target_column: The target_column of this TitaniumTransformation.  # noqa: E501
        :type target_column: str
        """

        self._target_column = target_column

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumTransformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumTransformation):
            return True

        return self.to_dict() != other.to_dict()
