# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumConsensusDensityScore(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bimodality_score': 'object',
        'dispersion': 'object',
        'evp_alignment_score': 'object',
        'history': 'list[TitaniumDateAndValue]',
        'score': 'object',
        'trade_alignment_score': 'object'
    }

    attribute_map = {
        'bimodality_score': 'bimodalityScore',
        'dispersion': 'dispersion',
        'evp_alignment_score': 'evpAlignmentScore',
        'history': 'history',
        'score': 'score',
        'trade_alignment_score': 'tradeAlignmentScore'
    }

    def __init__(self, bimodality_score=None, dispersion=None, evp_alignment_score=None, history=None, score=None, trade_alignment_score=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumConsensusDensityScore - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._bimodality_score = None
        self._dispersion = None
        self._evp_alignment_score = None
        self._history = None
        self._score = None
        self._trade_alignment_score = None
        self.discriminator = None

        if bimodality_score is not None:
            self.bimodality_score = bimodality_score
        if dispersion is not None:
            self.dispersion = dispersion
        if evp_alignment_score is not None:
            self.evp_alignment_score = evp_alignment_score
        if history is not None:
            self.history = history
        if score is not None:
            self.score = score
        if trade_alignment_score is not None:
            self.trade_alignment_score = trade_alignment_score

    @property
    def bimodality_score(self):
        """Gets the bimodality_score of this TitaniumConsensusDensityScore.  # noqa: E501


        :return: The bimodality_score of this TitaniumConsensusDensityScore.  # noqa: E501
        :rtype: object
        """
        return self._bimodality_score

    @bimodality_score.setter
    def bimodality_score(self, bimodality_score):
        """Sets the bimodality_score of this TitaniumConsensusDensityScore.


        :param bimodality_score: The bimodality_score of this TitaniumConsensusDensityScore.  # noqa: E501
        :type bimodality_score: object
        """

        self._bimodality_score = bimodality_score

    @property
    def dispersion(self):
        """Gets the dispersion of this TitaniumConsensusDensityScore.  # noqa: E501


        :return: The dispersion of this TitaniumConsensusDensityScore.  # noqa: E501
        :rtype: object
        """
        return self._dispersion

    @dispersion.setter
    def dispersion(self, dispersion):
        """Sets the dispersion of this TitaniumConsensusDensityScore.


        :param dispersion: The dispersion of this TitaniumConsensusDensityScore.  # noqa: E501
        :type dispersion: object
        """

        self._dispersion = dispersion

    @property
    def evp_alignment_score(self):
        """Gets the evp_alignment_score of this TitaniumConsensusDensityScore.  # noqa: E501


        :return: The evp_alignment_score of this TitaniumConsensusDensityScore.  # noqa: E501
        :rtype: object
        """
        return self._evp_alignment_score

    @evp_alignment_score.setter
    def evp_alignment_score(self, evp_alignment_score):
        """Sets the evp_alignment_score of this TitaniumConsensusDensityScore.


        :param evp_alignment_score: The evp_alignment_score of this TitaniumConsensusDensityScore.  # noqa: E501
        :type evp_alignment_score: object
        """

        self._evp_alignment_score = evp_alignment_score

    @property
    def history(self):
        """Gets the history of this TitaniumConsensusDensityScore.  # noqa: E501


        :return: The history of this TitaniumConsensusDensityScore.  # noqa: E501
        :rtype: list[TitaniumDateAndValue]
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this TitaniumConsensusDensityScore.


        :param history: The history of this TitaniumConsensusDensityScore.  # noqa: E501
        :type history: list[TitaniumDateAndValue]
        """

        self._history = history

    @property
    def score(self):
        """Gets the score of this TitaniumConsensusDensityScore.  # noqa: E501


        :return: The score of this TitaniumConsensusDensityScore.  # noqa: E501
        :rtype: object
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this TitaniumConsensusDensityScore.


        :param score: The score of this TitaniumConsensusDensityScore.  # noqa: E501
        :type score: object
        """

        self._score = score

    @property
    def trade_alignment_score(self):
        """Gets the trade_alignment_score of this TitaniumConsensusDensityScore.  # noqa: E501


        :return: The trade_alignment_score of this TitaniumConsensusDensityScore.  # noqa: E501
        :rtype: object
        """
        return self._trade_alignment_score

    @trade_alignment_score.setter
    def trade_alignment_score(self, trade_alignment_score):
        """Sets the trade_alignment_score of this TitaniumConsensusDensityScore.


        :param trade_alignment_score: The trade_alignment_score of this TitaniumConsensusDensityScore.  # noqa: E501
        :type trade_alignment_score: object
        """

        self._trade_alignment_score = trade_alignment_score

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumConsensusDensityScore):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumConsensusDensityScore):
            return True

        return self.to_dict() != other.to_dict()
