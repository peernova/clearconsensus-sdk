# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumChallengeFormGeneralRow(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'field': 'str',
        'max': 'TitaniumChallengeFormGeneralRowMax',
        'max_length': 'TitaniumChallengeFormGeneralRowMaxLength',
        'min': 'TitaniumChallengeFormGeneralRowMin',
        'min_length': 'TitaniumChallengeFormGeneralRowMinLength',
        'precision': 'TitaniumChallengeFormGeneralRowPrecision',
        'regex': 'str',
        'tooltip': 'str',
        'type': 'str',
        'value': 'object'
    }

    attribute_map = {
        'field': 'field',
        'max': 'max',
        'max_length': 'maxLength',
        'min': 'min',
        'min_length': 'minLength',
        'precision': 'precision',
        'regex': 'regex',
        'tooltip': 'tooltip',
        'type': 'type',
        'value': 'value'
    }

    def __init__(self, field=None, max=None, max_length=None, min=None, min_length=None, precision=None, regex=None, tooltip=None, type=None, value=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumChallengeFormGeneralRow - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._field = None
        self._max = None
        self._max_length = None
        self._min = None
        self._min_length = None
        self._precision = None
        self._regex = None
        self._tooltip = None
        self._type = None
        self._value = None
        self.discriminator = None

        if field is not None:
            self.field = field
        if max is not None:
            self.max = max
        if max_length is not None:
            self.max_length = max_length
        if min is not None:
            self.min = min
        if min_length is not None:
            self.min_length = min_length
        if precision is not None:
            self.precision = precision
        if regex is not None:
            self.regex = regex
        if tooltip is not None:
            self.tooltip = tooltip
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value

    @property
    def field(self):
        """Gets the field of this TitaniumChallengeFormGeneralRow.  # noqa: E501


        :return: The field of this TitaniumChallengeFormGeneralRow.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this TitaniumChallengeFormGeneralRow.


        :param field: The field of this TitaniumChallengeFormGeneralRow.  # noqa: E501
        :type field: str
        """

        self._field = field

    @property
    def max(self):
        """Gets the max of this TitaniumChallengeFormGeneralRow.  # noqa: E501


        :return: The max of this TitaniumChallengeFormGeneralRow.  # noqa: E501
        :rtype: TitaniumChallengeFormGeneralRowMax
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this TitaniumChallengeFormGeneralRow.


        :param max: The max of this TitaniumChallengeFormGeneralRow.  # noqa: E501
        :type max: TitaniumChallengeFormGeneralRowMax
        """

        self._max = max

    @property
    def max_length(self):
        """Gets the max_length of this TitaniumChallengeFormGeneralRow.  # noqa: E501


        :return: The max_length of this TitaniumChallengeFormGeneralRow.  # noqa: E501
        :rtype: TitaniumChallengeFormGeneralRowMaxLength
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this TitaniumChallengeFormGeneralRow.


        :param max_length: The max_length of this TitaniumChallengeFormGeneralRow.  # noqa: E501
        :type max_length: TitaniumChallengeFormGeneralRowMaxLength
        """

        self._max_length = max_length

    @property
    def min(self):
        """Gets the min of this TitaniumChallengeFormGeneralRow.  # noqa: E501


        :return: The min of this TitaniumChallengeFormGeneralRow.  # noqa: E501
        :rtype: TitaniumChallengeFormGeneralRowMin
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this TitaniumChallengeFormGeneralRow.


        :param min: The min of this TitaniumChallengeFormGeneralRow.  # noqa: E501
        :type min: TitaniumChallengeFormGeneralRowMin
        """

        self._min = min

    @property
    def min_length(self):
        """Gets the min_length of this TitaniumChallengeFormGeneralRow.  # noqa: E501


        :return: The min_length of this TitaniumChallengeFormGeneralRow.  # noqa: E501
        :rtype: TitaniumChallengeFormGeneralRowMinLength
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this TitaniumChallengeFormGeneralRow.


        :param min_length: The min_length of this TitaniumChallengeFormGeneralRow.  # noqa: E501
        :type min_length: TitaniumChallengeFormGeneralRowMinLength
        """

        self._min_length = min_length

    @property
    def precision(self):
        """Gets the precision of this TitaniumChallengeFormGeneralRow.  # noqa: E501


        :return: The precision of this TitaniumChallengeFormGeneralRow.  # noqa: E501
        :rtype: TitaniumChallengeFormGeneralRowPrecision
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this TitaniumChallengeFormGeneralRow.


        :param precision: The precision of this TitaniumChallengeFormGeneralRow.  # noqa: E501
        :type precision: TitaniumChallengeFormGeneralRowPrecision
        """

        self._precision = precision

    @property
    def regex(self):
        """Gets the regex of this TitaniumChallengeFormGeneralRow.  # noqa: E501


        :return: The regex of this TitaniumChallengeFormGeneralRow.  # noqa: E501
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this TitaniumChallengeFormGeneralRow.


        :param regex: The regex of this TitaniumChallengeFormGeneralRow.  # noqa: E501
        :type regex: str
        """

        self._regex = regex

    @property
    def tooltip(self):
        """Gets the tooltip of this TitaniumChallengeFormGeneralRow.  # noqa: E501


        :return: The tooltip of this TitaniumChallengeFormGeneralRow.  # noqa: E501
        :rtype: str
        """
        return self._tooltip

    @tooltip.setter
    def tooltip(self, tooltip):
        """Sets the tooltip of this TitaniumChallengeFormGeneralRow.


        :param tooltip: The tooltip of this TitaniumChallengeFormGeneralRow.  # noqa: E501
        :type tooltip: str
        """

        self._tooltip = tooltip

    @property
    def type(self):
        """Gets the type of this TitaniumChallengeFormGeneralRow.  # noqa: E501


        :return: The type of this TitaniumChallengeFormGeneralRow.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TitaniumChallengeFormGeneralRow.


        :param type: The type of this TitaniumChallengeFormGeneralRow.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this TitaniumChallengeFormGeneralRow.  # noqa: E501


        :return: The value of this TitaniumChallengeFormGeneralRow.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TitaniumChallengeFormGeneralRow.


        :param value: The value of this TitaniumChallengeFormGeneralRow.  # noqa: E501
        :type value: object
        """

        self._value = value

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumChallengeFormGeneralRow):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumChallengeFormGeneralRow):
            return True

        return self.to_dict() != other.to_dict()
