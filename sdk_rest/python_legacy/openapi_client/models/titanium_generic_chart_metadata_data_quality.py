# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumGenericChartMetadataDataQuality(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'asset_id': 'str',
        'chart_metadata': 'TitaniumGenericChartMetadata',
        'client': 'str',
        'date_range_filter': 'str',
        'id': 'str',
        'trace_name': 'str'
    }

    attribute_map = {
        'asset_id': 'assetId',
        'chart_metadata': 'chartMetadata',
        'client': 'client',
        'date_range_filter': 'dateRangeFilter',
        'id': 'id',
        'trace_name': 'traceName'
    }

    def __init__(self, asset_id=None, chart_metadata=None, client=None, date_range_filter=None, id=None, trace_name=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumGenericChartMetadataDataQuality - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._asset_id = None
        self._chart_metadata = None
        self._client = None
        self._date_range_filter = None
        self._id = None
        self._trace_name = None
        self.discriminator = None

        if asset_id is not None:
            self.asset_id = asset_id
        if chart_metadata is not None:
            self.chart_metadata = chart_metadata
        if client is not None:
            self.client = client
        if date_range_filter is not None:
            self.date_range_filter = date_range_filter
        if id is not None:
            self.id = id
        if trace_name is not None:
            self.trace_name = trace_name

    @property
    def asset_id(self):
        """Gets the asset_id of this TitaniumGenericChartMetadataDataQuality.  # noqa: E501


        :return: The asset_id of this TitaniumGenericChartMetadataDataQuality.  # noqa: E501
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this TitaniumGenericChartMetadataDataQuality.


        :param asset_id: The asset_id of this TitaniumGenericChartMetadataDataQuality.  # noqa: E501
        :type asset_id: str
        """

        self._asset_id = asset_id

    @property
    def chart_metadata(self):
        """Gets the chart_metadata of this TitaniumGenericChartMetadataDataQuality.  # noqa: E501


        :return: The chart_metadata of this TitaniumGenericChartMetadataDataQuality.  # noqa: E501
        :rtype: TitaniumGenericChartMetadata
        """
        return self._chart_metadata

    @chart_metadata.setter
    def chart_metadata(self, chart_metadata):
        """Sets the chart_metadata of this TitaniumGenericChartMetadataDataQuality.


        :param chart_metadata: The chart_metadata of this TitaniumGenericChartMetadataDataQuality.  # noqa: E501
        :type chart_metadata: TitaniumGenericChartMetadata
        """

        self._chart_metadata = chart_metadata

    @property
    def client(self):
        """Gets the client of this TitaniumGenericChartMetadataDataQuality.  # noqa: E501


        :return: The client of this TitaniumGenericChartMetadataDataQuality.  # noqa: E501
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this TitaniumGenericChartMetadataDataQuality.


        :param client: The client of this TitaniumGenericChartMetadataDataQuality.  # noqa: E501
        :type client: str
        """

        self._client = client

    @property
    def date_range_filter(self):
        """Gets the date_range_filter of this TitaniumGenericChartMetadataDataQuality.  # noqa: E501


        :return: The date_range_filter of this TitaniumGenericChartMetadataDataQuality.  # noqa: E501
        :rtype: str
        """
        return self._date_range_filter

    @date_range_filter.setter
    def date_range_filter(self, date_range_filter):
        """Sets the date_range_filter of this TitaniumGenericChartMetadataDataQuality.


        :param date_range_filter: The date_range_filter of this TitaniumGenericChartMetadataDataQuality.  # noqa: E501
        :type date_range_filter: str
        """

        self._date_range_filter = date_range_filter

    @property
    def id(self):
        """Gets the id of this TitaniumGenericChartMetadataDataQuality.  # noqa: E501


        :return: The id of this TitaniumGenericChartMetadataDataQuality.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TitaniumGenericChartMetadataDataQuality.


        :param id: The id of this TitaniumGenericChartMetadataDataQuality.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def trace_name(self):
        """Gets the trace_name of this TitaniumGenericChartMetadataDataQuality.  # noqa: E501


        :return: The trace_name of this TitaniumGenericChartMetadataDataQuality.  # noqa: E501
        :rtype: str
        """
        return self._trace_name

    @trace_name.setter
    def trace_name(self, trace_name):
        """Sets the trace_name of this TitaniumGenericChartMetadataDataQuality.


        :param trace_name: The trace_name of this TitaniumGenericChartMetadataDataQuality.  # noqa: E501
        :type trace_name: str
        """

        self._trace_name = trace_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumGenericChartMetadataDataQuality):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumGenericChartMetadataDataQuality):
            return True

        return self.to_dict() != other.to_dict()
