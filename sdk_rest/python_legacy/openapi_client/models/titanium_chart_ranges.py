# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumChartRanges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bimodal_left_population': 'TitaniumRange',
        'bimodal_right_population': 'TitaniumRange',
        'cohort_consensus': 'TitaniumRange',
        'evp': 'TitaniumRange',
        'submission_evidence': 'TitaniumRange',
        'submission_min_max': 'TitaniumRange'
    }

    attribute_map = {
        'bimodal_left_population': 'bimodalLeftPopulation',
        'bimodal_right_population': 'bimodalRightPopulation',
        'cohort_consensus': 'cohortConsensus',
        'evp': 'evp',
        'submission_evidence': 'submissionEvidence',
        'submission_min_max': 'submissionMinMax'
    }

    def __init__(self, bimodal_left_population=None, bimodal_right_population=None, cohort_consensus=None, evp=None, submission_evidence=None, submission_min_max=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumChartRanges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._bimodal_left_population = None
        self._bimodal_right_population = None
        self._cohort_consensus = None
        self._evp = None
        self._submission_evidence = None
        self._submission_min_max = None
        self.discriminator = None

        if bimodal_left_population is not None:
            self.bimodal_left_population = bimodal_left_population
        if bimodal_right_population is not None:
            self.bimodal_right_population = bimodal_right_population
        if cohort_consensus is not None:
            self.cohort_consensus = cohort_consensus
        if evp is not None:
            self.evp = evp
        if submission_evidence is not None:
            self.submission_evidence = submission_evidence
        if submission_min_max is not None:
            self.submission_min_max = submission_min_max

    @property
    def bimodal_left_population(self):
        """Gets the bimodal_left_population of this TitaniumChartRanges.  # noqa: E501


        :return: The bimodal_left_population of this TitaniumChartRanges.  # noqa: E501
        :rtype: TitaniumRange
        """
        return self._bimodal_left_population

    @bimodal_left_population.setter
    def bimodal_left_population(self, bimodal_left_population):
        """Sets the bimodal_left_population of this TitaniumChartRanges.


        :param bimodal_left_population: The bimodal_left_population of this TitaniumChartRanges.  # noqa: E501
        :type bimodal_left_population: TitaniumRange
        """

        self._bimodal_left_population = bimodal_left_population

    @property
    def bimodal_right_population(self):
        """Gets the bimodal_right_population of this TitaniumChartRanges.  # noqa: E501


        :return: The bimodal_right_population of this TitaniumChartRanges.  # noqa: E501
        :rtype: TitaniumRange
        """
        return self._bimodal_right_population

    @bimodal_right_population.setter
    def bimodal_right_population(self, bimodal_right_population):
        """Sets the bimodal_right_population of this TitaniumChartRanges.


        :param bimodal_right_population: The bimodal_right_population of this TitaniumChartRanges.  # noqa: E501
        :type bimodal_right_population: TitaniumRange
        """

        self._bimodal_right_population = bimodal_right_population

    @property
    def cohort_consensus(self):
        """Gets the cohort_consensus of this TitaniumChartRanges.  # noqa: E501


        :return: The cohort_consensus of this TitaniumChartRanges.  # noqa: E501
        :rtype: TitaniumRange
        """
        return self._cohort_consensus

    @cohort_consensus.setter
    def cohort_consensus(self, cohort_consensus):
        """Sets the cohort_consensus of this TitaniumChartRanges.


        :param cohort_consensus: The cohort_consensus of this TitaniumChartRanges.  # noqa: E501
        :type cohort_consensus: TitaniumRange
        """

        self._cohort_consensus = cohort_consensus

    @property
    def evp(self):
        """Gets the evp of this TitaniumChartRanges.  # noqa: E501


        :return: The evp of this TitaniumChartRanges.  # noqa: E501
        :rtype: TitaniumRange
        """
        return self._evp

    @evp.setter
    def evp(self, evp):
        """Sets the evp of this TitaniumChartRanges.


        :param evp: The evp of this TitaniumChartRanges.  # noqa: E501
        :type evp: TitaniumRange
        """

        self._evp = evp

    @property
    def submission_evidence(self):
        """Gets the submission_evidence of this TitaniumChartRanges.  # noqa: E501


        :return: The submission_evidence of this TitaniumChartRanges.  # noqa: E501
        :rtype: TitaniumRange
        """
        return self._submission_evidence

    @submission_evidence.setter
    def submission_evidence(self, submission_evidence):
        """Sets the submission_evidence of this TitaniumChartRanges.


        :param submission_evidence: The submission_evidence of this TitaniumChartRanges.  # noqa: E501
        :type submission_evidence: TitaniumRange
        """

        self._submission_evidence = submission_evidence

    @property
    def submission_min_max(self):
        """Gets the submission_min_max of this TitaniumChartRanges.  # noqa: E501


        :return: The submission_min_max of this TitaniumChartRanges.  # noqa: E501
        :rtype: TitaniumRange
        """
        return self._submission_min_max

    @submission_min_max.setter
    def submission_min_max(self, submission_min_max):
        """Sets the submission_min_max of this TitaniumChartRanges.


        :param submission_min_max: The submission_min_max of this TitaniumChartRanges.  # noqa: E501
        :type submission_min_max: TitaniumRange
        """

        self._submission_min_max = submission_min_max

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumChartRanges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumChartRanges):
            return True

        return self.to_dict() != other.to_dict()
