# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email': 'str',
        'id': 'str',
        'notify_by_app_enabled': 'bool',
        'notify_by_email_enabled': 'bool',
        'organization': 'str'
    }

    attribute_map = {
        'email': 'email',
        'id': 'id',
        'notify_by_app_enabled': 'notifyByAppEnabled',
        'notify_by_email_enabled': 'notifyByEmailEnabled',
        'organization': 'organization'
    }

    def __init__(self, email=None, id=None, notify_by_app_enabled=None, notify_by_email_enabled=None, organization=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumUser - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._email = None
        self._id = None
        self._notify_by_app_enabled = None
        self._notify_by_email_enabled = None
        self._organization = None
        self.discriminator = None

        if email is not None:
            self.email = email
        if id is not None:
            self.id = id
        if notify_by_app_enabled is not None:
            self.notify_by_app_enabled = notify_by_app_enabled
        if notify_by_email_enabled is not None:
            self.notify_by_email_enabled = notify_by_email_enabled
        if organization is not None:
            self.organization = organization

    @property
    def email(self):
        """Gets the email of this TitaniumUser.  # noqa: E501


        :return: The email of this TitaniumUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this TitaniumUser.


        :param email: The email of this TitaniumUser.  # noqa: E501
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this TitaniumUser.  # noqa: E501


        :return: The id of this TitaniumUser.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TitaniumUser.


        :param id: The id of this TitaniumUser.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def notify_by_app_enabled(self):
        """Gets the notify_by_app_enabled of this TitaniumUser.  # noqa: E501


        :return: The notify_by_app_enabled of this TitaniumUser.  # noqa: E501
        :rtype: bool
        """
        return self._notify_by_app_enabled

    @notify_by_app_enabled.setter
    def notify_by_app_enabled(self, notify_by_app_enabled):
        """Sets the notify_by_app_enabled of this TitaniumUser.


        :param notify_by_app_enabled: The notify_by_app_enabled of this TitaniumUser.  # noqa: E501
        :type notify_by_app_enabled: bool
        """

        self._notify_by_app_enabled = notify_by_app_enabled

    @property
    def notify_by_email_enabled(self):
        """Gets the notify_by_email_enabled of this TitaniumUser.  # noqa: E501


        :return: The notify_by_email_enabled of this TitaniumUser.  # noqa: E501
        :rtype: bool
        """
        return self._notify_by_email_enabled

    @notify_by_email_enabled.setter
    def notify_by_email_enabled(self, notify_by_email_enabled):
        """Sets the notify_by_email_enabled of this TitaniumUser.


        :param notify_by_email_enabled: The notify_by_email_enabled of this TitaniumUser.  # noqa: E501
        :type notify_by_email_enabled: bool
        """

        self._notify_by_email_enabled = notify_by_email_enabled

    @property
    def organization(self):
        """Gets the organization of this TitaniumUser.  # noqa: E501


        :return: The organization of this TitaniumUser.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this TitaniumUser.


        :param organization: The organization of this TitaniumUser.  # noqa: E501
        :type organization: str
        """

        self._organization = organization

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumUser):
            return True

        return self.to_dict() != other.to_dict()
