# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumPredefinedFilter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'instrument_types_with_count': 'list[TitaniumKeyAndValue]',
        'key': 'str',
        'operator': 'str',
        'predefined_value_label': 'str',
        'result_count': 'int',
        'value': 'object'
    }

    attribute_map = {
        'instrument_types_with_count': 'instrumentTypesWithCount',
        'key': 'key',
        'operator': 'operator',
        'predefined_value_label': 'predefinedValueLabel',
        'result_count': 'resultCount',
        'value': 'value'
    }

    def __init__(self, instrument_types_with_count=None, key=None, operator=None, predefined_value_label=None, result_count=None, value=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumPredefinedFilter - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._instrument_types_with_count = None
        self._key = None
        self._operator = None
        self._predefined_value_label = None
        self._result_count = None
        self._value = None
        self.discriminator = None

        if instrument_types_with_count is not None:
            self.instrument_types_with_count = instrument_types_with_count
        if key is not None:
            self.key = key
        if operator is not None:
            self.operator = operator
        if predefined_value_label is not None:
            self.predefined_value_label = predefined_value_label
        if result_count is not None:
            self.result_count = result_count
        if value is not None:
            self.value = value

    @property
    def instrument_types_with_count(self):
        """Gets the instrument_types_with_count of this TitaniumPredefinedFilter.  # noqa: E501


        :return: The instrument_types_with_count of this TitaniumPredefinedFilter.  # noqa: E501
        :rtype: list[TitaniumKeyAndValue]
        """
        return self._instrument_types_with_count

    @instrument_types_with_count.setter
    def instrument_types_with_count(self, instrument_types_with_count):
        """Sets the instrument_types_with_count of this TitaniumPredefinedFilter.


        :param instrument_types_with_count: The instrument_types_with_count of this TitaniumPredefinedFilter.  # noqa: E501
        :type instrument_types_with_count: list[TitaniumKeyAndValue]
        """

        self._instrument_types_with_count = instrument_types_with_count

    @property
    def key(self):
        """Gets the key of this TitaniumPredefinedFilter.  # noqa: E501


        :return: The key of this TitaniumPredefinedFilter.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this TitaniumPredefinedFilter.


        :param key: The key of this TitaniumPredefinedFilter.  # noqa: E501
        :type key: str
        """

        self._key = key

    @property
    def operator(self):
        """Gets the operator of this TitaniumPredefinedFilter.  # noqa: E501


        :return: The operator of this TitaniumPredefinedFilter.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this TitaniumPredefinedFilter.


        :param operator: The operator of this TitaniumPredefinedFilter.  # noqa: E501
        :type operator: str
        """

        self._operator = operator

    @property
    def predefined_value_label(self):
        """Gets the predefined_value_label of this TitaniumPredefinedFilter.  # noqa: E501


        :return: The predefined_value_label of this TitaniumPredefinedFilter.  # noqa: E501
        :rtype: str
        """
        return self._predefined_value_label

    @predefined_value_label.setter
    def predefined_value_label(self, predefined_value_label):
        """Sets the predefined_value_label of this TitaniumPredefinedFilter.


        :param predefined_value_label: The predefined_value_label of this TitaniumPredefinedFilter.  # noqa: E501
        :type predefined_value_label: str
        """

        self._predefined_value_label = predefined_value_label

    @property
    def result_count(self):
        """Gets the result_count of this TitaniumPredefinedFilter.  # noqa: E501


        :return: The result_count of this TitaniumPredefinedFilter.  # noqa: E501
        :rtype: int
        """
        return self._result_count

    @result_count.setter
    def result_count(self, result_count):
        """Sets the result_count of this TitaniumPredefinedFilter.


        :param result_count: The result_count of this TitaniumPredefinedFilter.  # noqa: E501
        :type result_count: int
        """

        self._result_count = result_count

    @property
    def value(self):
        """Gets the value of this TitaniumPredefinedFilter.  # noqa: E501


        :return: The value of this TitaniumPredefinedFilter.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TitaniumPredefinedFilter.


        :param value: The value of this TitaniumPredefinedFilter.  # noqa: E501
        :type value: object
        """

        self._value = value

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumPredefinedFilter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumPredefinedFilter):
            return True

        return self.to_dict() != other.to_dict()
