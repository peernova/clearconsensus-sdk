# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumSupportedField(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'asset': 'str',
        'asset_id': 'str',
        'field': 'str',
        'filter': 'str',
        'instrument_type': 'str',
        'limit': 'TitaniumLimit',
        'match_pattern': 'str',
        'offset': 'int',
        'service': 'str',
        'submitted_date': 'str',
        'trace_name': 'str'
    }

    attribute_map = {
        'asset': 'asset',
        'asset_id': 'assetId',
        'field': 'field',
        'filter': 'filter',
        'instrument_type': 'instrumentType',
        'limit': 'limit',
        'match_pattern': 'matchPattern',
        'offset': 'offset',
        'service': 'service',
        'submitted_date': 'submittedDate',
        'trace_name': 'traceName'
    }

    def __init__(self, asset=None, asset_id=None, field=None, filter=None, instrument_type=None, limit=None, match_pattern=None, offset=None, service=None, submitted_date=None, trace_name=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumSupportedField - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._asset = None
        self._asset_id = None
        self._field = None
        self._filter = None
        self._instrument_type = None
        self._limit = None
        self._match_pattern = None
        self._offset = None
        self._service = None
        self._submitted_date = None
        self._trace_name = None
        self.discriminator = None

        if asset is not None:
            self.asset = asset
        if asset_id is not None:
            self.asset_id = asset_id
        if field is not None:
            self.field = field
        if filter is not None:
            self.filter = filter
        if instrument_type is not None:
            self.instrument_type = instrument_type
        if limit is not None:
            self.limit = limit
        if match_pattern is not None:
            self.match_pattern = match_pattern
        if offset is not None:
            self.offset = offset
        if service is not None:
            self.service = service
        if submitted_date is not None:
            self.submitted_date = submitted_date
        if trace_name is not None:
            self.trace_name = trace_name

    @property
    def asset(self):
        """Gets the asset of this TitaniumSupportedField.  # noqa: E501


        :return: The asset of this TitaniumSupportedField.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this TitaniumSupportedField.


        :param asset: The asset of this TitaniumSupportedField.  # noqa: E501
        :type asset: str
        """

        self._asset = asset

    @property
    def asset_id(self):
        """Gets the asset_id of this TitaniumSupportedField.  # noqa: E501


        :return: The asset_id of this TitaniumSupportedField.  # noqa: E501
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this TitaniumSupportedField.


        :param asset_id: The asset_id of this TitaniumSupportedField.  # noqa: E501
        :type asset_id: str
        """

        self._asset_id = asset_id

    @property
    def field(self):
        """Gets the field of this TitaniumSupportedField.  # noqa: E501


        :return: The field of this TitaniumSupportedField.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this TitaniumSupportedField.


        :param field: The field of this TitaniumSupportedField.  # noqa: E501
        :type field: str
        """

        self._field = field

    @property
    def filter(self):
        """Gets the filter of this TitaniumSupportedField.  # noqa: E501


        :return: The filter of this TitaniumSupportedField.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this TitaniumSupportedField.


        :param filter: The filter of this TitaniumSupportedField.  # noqa: E501
        :type filter: str
        """

        self._filter = filter

    @property
    def instrument_type(self):
        """Gets the instrument_type of this TitaniumSupportedField.  # noqa: E501


        :return: The instrument_type of this TitaniumSupportedField.  # noqa: E501
        :rtype: str
        """
        return self._instrument_type

    @instrument_type.setter
    def instrument_type(self, instrument_type):
        """Sets the instrument_type of this TitaniumSupportedField.


        :param instrument_type: The instrument_type of this TitaniumSupportedField.  # noqa: E501
        :type instrument_type: str
        """

        self._instrument_type = instrument_type

    @property
    def limit(self):
        """Gets the limit of this TitaniumSupportedField.  # noqa: E501


        :return: The limit of this TitaniumSupportedField.  # noqa: E501
        :rtype: TitaniumLimit
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this TitaniumSupportedField.


        :param limit: The limit of this TitaniumSupportedField.  # noqa: E501
        :type limit: TitaniumLimit
        """

        self._limit = limit

    @property
    def match_pattern(self):
        """Gets the match_pattern of this TitaniumSupportedField.  # noqa: E501


        :return: The match_pattern of this TitaniumSupportedField.  # noqa: E501
        :rtype: str
        """
        return self._match_pattern

    @match_pattern.setter
    def match_pattern(self, match_pattern):
        """Sets the match_pattern of this TitaniumSupportedField.


        :param match_pattern: The match_pattern of this TitaniumSupportedField.  # noqa: E501
        :type match_pattern: str
        """

        self._match_pattern = match_pattern

    @property
    def offset(self):
        """Gets the offset of this TitaniumSupportedField.  # noqa: E501


        :return: The offset of this TitaniumSupportedField.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this TitaniumSupportedField.


        :param offset: The offset of this TitaniumSupportedField.  # noqa: E501
        :type offset: int
        """

        self._offset = offset

    @property
    def service(self):
        """Gets the service of this TitaniumSupportedField.  # noqa: E501


        :return: The service of this TitaniumSupportedField.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this TitaniumSupportedField.


        :param service: The service of this TitaniumSupportedField.  # noqa: E501
        :type service: str
        """

        self._service = service

    @property
    def submitted_date(self):
        """Gets the submitted_date of this TitaniumSupportedField.  # noqa: E501


        :return: The submitted_date of this TitaniumSupportedField.  # noqa: E501
        :rtype: str
        """
        return self._submitted_date

    @submitted_date.setter
    def submitted_date(self, submitted_date):
        """Sets the submitted_date of this TitaniumSupportedField.


        :param submitted_date: The submitted_date of this TitaniumSupportedField.  # noqa: E501
        :type submitted_date: str
        """

        self._submitted_date = submitted_date

    @property
    def trace_name(self):
        """Gets the trace_name of this TitaniumSupportedField.  # noqa: E501


        :return: The trace_name of this TitaniumSupportedField.  # noqa: E501
        :rtype: str
        """
        return self._trace_name

    @trace_name.setter
    def trace_name(self, trace_name):
        """Sets the trace_name of this TitaniumSupportedField.


        :param trace_name: The trace_name of this TitaniumSupportedField.  # noqa: E501
        :type trace_name: str
        """

        self._trace_name = trace_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumSupportedField):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumSupportedField):
            return True

        return self.to_dict() != other.to_dict()
