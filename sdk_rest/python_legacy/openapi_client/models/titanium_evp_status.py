# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumEvpStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'added': 'str',
        'asset': 'str',
        'date': 'str',
        'dealer': 'str',
        'instrument_type': 'str',
        'log_path': 'str',
        's3path': 'str',
        'snap_time': 'str',
        'status': 'str',
        'user_email': 'str'
    }

    attribute_map = {
        'added': 'added',
        'asset': 'asset',
        'date': 'date',
        'dealer': 'dealer',
        'instrument_type': 'instrumentType',
        'log_path': 'logPath',
        's3path': 's3path',
        'snap_time': 'snapTime',
        'status': 'status',
        'user_email': 'userEmail'
    }

    def __init__(self, added=None, asset=None, date=None, dealer=None, instrument_type=None, log_path=None, s3path=None, snap_time=None, status=None, user_email=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumEvpStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._added = None
        self._asset = None
        self._date = None
        self._dealer = None
        self._instrument_type = None
        self._log_path = None
        self._s3path = None
        self._snap_time = None
        self._status = None
        self._user_email = None
        self.discriminator = None

        if added is not None:
            self.added = added
        if asset is not None:
            self.asset = asset
        if date is not None:
            self.date = date
        if dealer is not None:
            self.dealer = dealer
        if instrument_type is not None:
            self.instrument_type = instrument_type
        if log_path is not None:
            self.log_path = log_path
        if s3path is not None:
            self.s3path = s3path
        if snap_time is not None:
            self.snap_time = snap_time
        if status is not None:
            self.status = status
        if user_email is not None:
            self.user_email = user_email

    @property
    def added(self):
        """Gets the added of this TitaniumEvpStatus.  # noqa: E501


        :return: The added of this TitaniumEvpStatus.  # noqa: E501
        :rtype: str
        """
        return self._added

    @added.setter
    def added(self, added):
        """Sets the added of this TitaniumEvpStatus.


        :param added: The added of this TitaniumEvpStatus.  # noqa: E501
        :type added: str
        """

        self._added = added

    @property
    def asset(self):
        """Gets the asset of this TitaniumEvpStatus.  # noqa: E501


        :return: The asset of this TitaniumEvpStatus.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this TitaniumEvpStatus.


        :param asset: The asset of this TitaniumEvpStatus.  # noqa: E501
        :type asset: str
        """

        self._asset = asset

    @property
    def date(self):
        """Gets the date of this TitaniumEvpStatus.  # noqa: E501


        :return: The date of this TitaniumEvpStatus.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this TitaniumEvpStatus.


        :param date: The date of this TitaniumEvpStatus.  # noqa: E501
        :type date: str
        """

        self._date = date

    @property
    def dealer(self):
        """Gets the dealer of this TitaniumEvpStatus.  # noqa: E501


        :return: The dealer of this TitaniumEvpStatus.  # noqa: E501
        :rtype: str
        """
        return self._dealer

    @dealer.setter
    def dealer(self, dealer):
        """Sets the dealer of this TitaniumEvpStatus.


        :param dealer: The dealer of this TitaniumEvpStatus.  # noqa: E501
        :type dealer: str
        """

        self._dealer = dealer

    @property
    def instrument_type(self):
        """Gets the instrument_type of this TitaniumEvpStatus.  # noqa: E501


        :return: The instrument_type of this TitaniumEvpStatus.  # noqa: E501
        :rtype: str
        """
        return self._instrument_type

    @instrument_type.setter
    def instrument_type(self, instrument_type):
        """Sets the instrument_type of this TitaniumEvpStatus.


        :param instrument_type: The instrument_type of this TitaniumEvpStatus.  # noqa: E501
        :type instrument_type: str
        """

        self._instrument_type = instrument_type

    @property
    def log_path(self):
        """Gets the log_path of this TitaniumEvpStatus.  # noqa: E501


        :return: The log_path of this TitaniumEvpStatus.  # noqa: E501
        :rtype: str
        """
        return self._log_path

    @log_path.setter
    def log_path(self, log_path):
        """Sets the log_path of this TitaniumEvpStatus.


        :param log_path: The log_path of this TitaniumEvpStatus.  # noqa: E501
        :type log_path: str
        """

        self._log_path = log_path

    @property
    def s3path(self):
        """Gets the s3path of this TitaniumEvpStatus.  # noqa: E501


        :return: The s3path of this TitaniumEvpStatus.  # noqa: E501
        :rtype: str
        """
        return self._s3path

    @s3path.setter
    def s3path(self, s3path):
        """Sets the s3path of this TitaniumEvpStatus.


        :param s3path: The s3path of this TitaniumEvpStatus.  # noqa: E501
        :type s3path: str
        """

        self._s3path = s3path

    @property
    def snap_time(self):
        """Gets the snap_time of this TitaniumEvpStatus.  # noqa: E501


        :return: The snap_time of this TitaniumEvpStatus.  # noqa: E501
        :rtype: str
        """
        return self._snap_time

    @snap_time.setter
    def snap_time(self, snap_time):
        """Sets the snap_time of this TitaniumEvpStatus.


        :param snap_time: The snap_time of this TitaniumEvpStatus.  # noqa: E501
        :type snap_time: str
        """

        self._snap_time = snap_time

    @property
    def status(self):
        """Gets the status of this TitaniumEvpStatus.  # noqa: E501


        :return: The status of this TitaniumEvpStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TitaniumEvpStatus.


        :param status: The status of this TitaniumEvpStatus.  # noqa: E501
        :type status: str
        """

        self._status = status

    @property
    def user_email(self):
        """Gets the user_email of this TitaniumEvpStatus.  # noqa: E501


        :return: The user_email of this TitaniumEvpStatus.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this TitaniumEvpStatus.


        :param user_email: The user_email of this TitaniumEvpStatus.  # noqa: E501
        :type user_email: str
        """

        self._user_email = user_email

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumEvpStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumEvpStatus):
            return True

        return self.to_dict() != other.to_dict()
