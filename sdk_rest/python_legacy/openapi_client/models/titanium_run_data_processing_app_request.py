# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumRunDataProcessingAppRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'asset': 'str',
        'date': 'str',
        'descriptor_name': 'str',
        'file_name': 'str',
        'input': 'str',
        'instrument_type': 'str',
        'mapper_rule': 'str',
        'service': 'str',
        'snap_time': 'str',
        'validation_rule': 'str'
    }

    attribute_map = {
        'asset': 'asset',
        'date': 'date',
        'descriptor_name': 'descriptorName',
        'file_name': 'fileName',
        'input': 'input',
        'instrument_type': 'instrumentType',
        'mapper_rule': 'mapperRule',
        'service': 'service',
        'snap_time': 'snapTime',
        'validation_rule': 'validationRule'
    }

    def __init__(self, asset=None, date=None, descriptor_name=None, file_name=None, input=None, instrument_type=None, mapper_rule=None, service=None, snap_time=None, validation_rule=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumRunDataProcessingAppRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._asset = None
        self._date = None
        self._descriptor_name = None
        self._file_name = None
        self._input = None
        self._instrument_type = None
        self._mapper_rule = None
        self._service = None
        self._snap_time = None
        self._validation_rule = None
        self.discriminator = None

        if asset is not None:
            self.asset = asset
        if date is not None:
            self.date = date
        if descriptor_name is not None:
            self.descriptor_name = descriptor_name
        if file_name is not None:
            self.file_name = file_name
        if input is not None:
            self.input = input
        if instrument_type is not None:
            self.instrument_type = instrument_type
        if mapper_rule is not None:
            self.mapper_rule = mapper_rule
        if service is not None:
            self.service = service
        if snap_time is not None:
            self.snap_time = snap_time
        if validation_rule is not None:
            self.validation_rule = validation_rule

    @property
    def asset(self):
        """Gets the asset of this TitaniumRunDataProcessingAppRequest.  # noqa: E501


        :return: The asset of this TitaniumRunDataProcessingAppRequest.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this TitaniumRunDataProcessingAppRequest.


        :param asset: The asset of this TitaniumRunDataProcessingAppRequest.  # noqa: E501
        :type asset: str
        """

        self._asset = asset

    @property
    def date(self):
        """Gets the date of this TitaniumRunDataProcessingAppRequest.  # noqa: E501


        :return: The date of this TitaniumRunDataProcessingAppRequest.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this TitaniumRunDataProcessingAppRequest.


        :param date: The date of this TitaniumRunDataProcessingAppRequest.  # noqa: E501
        :type date: str
        """

        self._date = date

    @property
    def descriptor_name(self):
        """Gets the descriptor_name of this TitaniumRunDataProcessingAppRequest.  # noqa: E501


        :return: The descriptor_name of this TitaniumRunDataProcessingAppRequest.  # noqa: E501
        :rtype: str
        """
        return self._descriptor_name

    @descriptor_name.setter
    def descriptor_name(self, descriptor_name):
        """Sets the descriptor_name of this TitaniumRunDataProcessingAppRequest.


        :param descriptor_name: The descriptor_name of this TitaniumRunDataProcessingAppRequest.  # noqa: E501
        :type descriptor_name: str
        """

        self._descriptor_name = descriptor_name

    @property
    def file_name(self):
        """Gets the file_name of this TitaniumRunDataProcessingAppRequest.  # noqa: E501


        :return: The file_name of this TitaniumRunDataProcessingAppRequest.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this TitaniumRunDataProcessingAppRequest.


        :param file_name: The file_name of this TitaniumRunDataProcessingAppRequest.  # noqa: E501
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def input(self):
        """Gets the input of this TitaniumRunDataProcessingAppRequest.  # noqa: E501


        :return: The input of this TitaniumRunDataProcessingAppRequest.  # noqa: E501
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this TitaniumRunDataProcessingAppRequest.


        :param input: The input of this TitaniumRunDataProcessingAppRequest.  # noqa: E501
        :type input: str
        """

        self._input = input

    @property
    def instrument_type(self):
        """Gets the instrument_type of this TitaniumRunDataProcessingAppRequest.  # noqa: E501


        :return: The instrument_type of this TitaniumRunDataProcessingAppRequest.  # noqa: E501
        :rtype: str
        """
        return self._instrument_type

    @instrument_type.setter
    def instrument_type(self, instrument_type):
        """Sets the instrument_type of this TitaniumRunDataProcessingAppRequest.


        :param instrument_type: The instrument_type of this TitaniumRunDataProcessingAppRequest.  # noqa: E501
        :type instrument_type: str
        """

        self._instrument_type = instrument_type

    @property
    def mapper_rule(self):
        """Gets the mapper_rule of this TitaniumRunDataProcessingAppRequest.  # noqa: E501


        :return: The mapper_rule of this TitaniumRunDataProcessingAppRequest.  # noqa: E501
        :rtype: str
        """
        return self._mapper_rule

    @mapper_rule.setter
    def mapper_rule(self, mapper_rule):
        """Sets the mapper_rule of this TitaniumRunDataProcessingAppRequest.


        :param mapper_rule: The mapper_rule of this TitaniumRunDataProcessingAppRequest.  # noqa: E501
        :type mapper_rule: str
        """

        self._mapper_rule = mapper_rule

    @property
    def service(self):
        """Gets the service of this TitaniumRunDataProcessingAppRequest.  # noqa: E501


        :return: The service of this TitaniumRunDataProcessingAppRequest.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this TitaniumRunDataProcessingAppRequest.


        :param service: The service of this TitaniumRunDataProcessingAppRequest.  # noqa: E501
        :type service: str
        """

        self._service = service

    @property
    def snap_time(self):
        """Gets the snap_time of this TitaniumRunDataProcessingAppRequest.  # noqa: E501


        :return: The snap_time of this TitaniumRunDataProcessingAppRequest.  # noqa: E501
        :rtype: str
        """
        return self._snap_time

    @snap_time.setter
    def snap_time(self, snap_time):
        """Sets the snap_time of this TitaniumRunDataProcessingAppRequest.


        :param snap_time: The snap_time of this TitaniumRunDataProcessingAppRequest.  # noqa: E501
        :type snap_time: str
        """

        self._snap_time = snap_time

    @property
    def validation_rule(self):
        """Gets the validation_rule of this TitaniumRunDataProcessingAppRequest.  # noqa: E501


        :return: The validation_rule of this TitaniumRunDataProcessingAppRequest.  # noqa: E501
        :rtype: str
        """
        return self._validation_rule

    @validation_rule.setter
    def validation_rule(self, validation_rule):
        """Sets the validation_rule of this TitaniumRunDataProcessingAppRequest.


        :param validation_rule: The validation_rule of this TitaniumRunDataProcessingAppRequest.  # noqa: E501
        :type validation_rule: str
        """

        self._validation_rule = validation_rule

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumRunDataProcessingAppRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumRunDataProcessingAppRequest):
            return True

        return self.to_dict() != other.to_dict()
