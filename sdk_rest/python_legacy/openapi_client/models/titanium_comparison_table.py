# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumComparisonTable(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'consensus': 'TitaniumConsensusColumn',
        'evidential_pricing': 'TitaniumEvidentalPricing',
        'my_submission': 'TitaniumSubmissionColumn',
        'submission_range': 'TitaniumSubmissionRangeColumn',
        'submission_statistical_boundaries': 'TitaniumSubmissionStatisticsColumn',
        'trade_time_series': 'TitaniumAvailableTrades'
    }

    attribute_map = {
        'consensus': 'consensus',
        'evidential_pricing': 'evidentialPricing',
        'my_submission': 'mySubmission',
        'submission_range': 'submissionRange',
        'submission_statistical_boundaries': 'submissionStatisticalBoundaries',
        'trade_time_series': 'tradeTimeSeries'
    }

    def __init__(self, consensus=None, evidential_pricing=None, my_submission=None, submission_range=None, submission_statistical_boundaries=None, trade_time_series=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumComparisonTable - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._consensus = None
        self._evidential_pricing = None
        self._my_submission = None
        self._submission_range = None
        self._submission_statistical_boundaries = None
        self._trade_time_series = None
        self.discriminator = None

        if consensus is not None:
            self.consensus = consensus
        if evidential_pricing is not None:
            self.evidential_pricing = evidential_pricing
        if my_submission is not None:
            self.my_submission = my_submission
        if submission_range is not None:
            self.submission_range = submission_range
        if submission_statistical_boundaries is not None:
            self.submission_statistical_boundaries = submission_statistical_boundaries
        if trade_time_series is not None:
            self.trade_time_series = trade_time_series

    @property
    def consensus(self):
        """Gets the consensus of this TitaniumComparisonTable.  # noqa: E501


        :return: The consensus of this TitaniumComparisonTable.  # noqa: E501
        :rtype: TitaniumConsensusColumn
        """
        return self._consensus

    @consensus.setter
    def consensus(self, consensus):
        """Sets the consensus of this TitaniumComparisonTable.


        :param consensus: The consensus of this TitaniumComparisonTable.  # noqa: E501
        :type consensus: TitaniumConsensusColumn
        """

        self._consensus = consensus

    @property
    def evidential_pricing(self):
        """Gets the evidential_pricing of this TitaniumComparisonTable.  # noqa: E501


        :return: The evidential_pricing of this TitaniumComparisonTable.  # noqa: E501
        :rtype: TitaniumEvidentalPricing
        """
        return self._evidential_pricing

    @evidential_pricing.setter
    def evidential_pricing(self, evidential_pricing):
        """Sets the evidential_pricing of this TitaniumComparisonTable.


        :param evidential_pricing: The evidential_pricing of this TitaniumComparisonTable.  # noqa: E501
        :type evidential_pricing: TitaniumEvidentalPricing
        """

        self._evidential_pricing = evidential_pricing

    @property
    def my_submission(self):
        """Gets the my_submission of this TitaniumComparisonTable.  # noqa: E501


        :return: The my_submission of this TitaniumComparisonTable.  # noqa: E501
        :rtype: TitaniumSubmissionColumn
        """
        return self._my_submission

    @my_submission.setter
    def my_submission(self, my_submission):
        """Sets the my_submission of this TitaniumComparisonTable.


        :param my_submission: The my_submission of this TitaniumComparisonTable.  # noqa: E501
        :type my_submission: TitaniumSubmissionColumn
        """

        self._my_submission = my_submission

    @property
    def submission_range(self):
        """Gets the submission_range of this TitaniumComparisonTable.  # noqa: E501


        :return: The submission_range of this TitaniumComparisonTable.  # noqa: E501
        :rtype: TitaniumSubmissionRangeColumn
        """
        return self._submission_range

    @submission_range.setter
    def submission_range(self, submission_range):
        """Sets the submission_range of this TitaniumComparisonTable.


        :param submission_range: The submission_range of this TitaniumComparisonTable.  # noqa: E501
        :type submission_range: TitaniumSubmissionRangeColumn
        """

        self._submission_range = submission_range

    @property
    def submission_statistical_boundaries(self):
        """Gets the submission_statistical_boundaries of this TitaniumComparisonTable.  # noqa: E501


        :return: The submission_statistical_boundaries of this TitaniumComparisonTable.  # noqa: E501
        :rtype: TitaniumSubmissionStatisticsColumn
        """
        return self._submission_statistical_boundaries

    @submission_statistical_boundaries.setter
    def submission_statistical_boundaries(self, submission_statistical_boundaries):
        """Sets the submission_statistical_boundaries of this TitaniumComparisonTable.


        :param submission_statistical_boundaries: The submission_statistical_boundaries of this TitaniumComparisonTable.  # noqa: E501
        :type submission_statistical_boundaries: TitaniumSubmissionStatisticsColumn
        """

        self._submission_statistical_boundaries = submission_statistical_boundaries

    @property
    def trade_time_series(self):
        """Gets the trade_time_series of this TitaniumComparisonTable.  # noqa: E501


        :return: The trade_time_series of this TitaniumComparisonTable.  # noqa: E501
        :rtype: TitaniumAvailableTrades
        """
        return self._trade_time_series

    @trade_time_series.setter
    def trade_time_series(self, trade_time_series):
        """Sets the trade_time_series of this TitaniumComparisonTable.


        :param trade_time_series: The trade_time_series of this TitaniumComparisonTable.  # noqa: E501
        :type trade_time_series: TitaniumAvailableTrades
        """

        self._trade_time_series = trade_time_series

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumComparisonTable):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumComparisonTable):
            return True

        return self.to_dict() != other.to_dict()
