# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumComparisonTable(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'available_trades': 'TitaniumAvailableTrades',
        'cohort_consensus_column': 'TitaniumCohortConsensusColumn',
        'evidential_pricing': 'TitaniumEvidentalPricing',
        'submission': 'TitaniumSubmissionExplorerTableColumn',
        'submission_evidence': 'TitaniumSubmissionEvidenceTableColumn',
        'submission_statistics': 'TitaniumSubmissionStatisticsExplorerTableColumn'
    }

    attribute_map = {
        'available_trades': 'availableTrades',
        'cohort_consensus_column': 'cohortConsensusColumn',
        'evidential_pricing': 'evidentialPricing',
        'submission': 'submission',
        'submission_evidence': 'submissionEvidence',
        'submission_statistics': 'submissionStatistics'
    }

    def __init__(self, available_trades=None, cohort_consensus_column=None, evidential_pricing=None, submission=None, submission_evidence=None, submission_statistics=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumComparisonTable - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._available_trades = None
        self._cohort_consensus_column = None
        self._evidential_pricing = None
        self._submission = None
        self._submission_evidence = None
        self._submission_statistics = None
        self.discriminator = None

        if available_trades is not None:
            self.available_trades = available_trades
        if cohort_consensus_column is not None:
            self.cohort_consensus_column = cohort_consensus_column
        if evidential_pricing is not None:
            self.evidential_pricing = evidential_pricing
        if submission is not None:
            self.submission = submission
        if submission_evidence is not None:
            self.submission_evidence = submission_evidence
        if submission_statistics is not None:
            self.submission_statistics = submission_statistics

    @property
    def available_trades(self):
        """Gets the available_trades of this TitaniumComparisonTable.  # noqa: E501


        :return: The available_trades of this TitaniumComparisonTable.  # noqa: E501
        :rtype: TitaniumAvailableTrades
        """
        return self._available_trades

    @available_trades.setter
    def available_trades(self, available_trades):
        """Sets the available_trades of this TitaniumComparisonTable.


        :param available_trades: The available_trades of this TitaniumComparisonTable.  # noqa: E501
        :type available_trades: TitaniumAvailableTrades
        """

        self._available_trades = available_trades

    @property
    def cohort_consensus_column(self):
        """Gets the cohort_consensus_column of this TitaniumComparisonTable.  # noqa: E501


        :return: The cohort_consensus_column of this TitaniumComparisonTable.  # noqa: E501
        :rtype: TitaniumCohortConsensusColumn
        """
        return self._cohort_consensus_column

    @cohort_consensus_column.setter
    def cohort_consensus_column(self, cohort_consensus_column):
        """Sets the cohort_consensus_column of this TitaniumComparisonTable.


        :param cohort_consensus_column: The cohort_consensus_column of this TitaniumComparisonTable.  # noqa: E501
        :type cohort_consensus_column: TitaniumCohortConsensusColumn
        """

        self._cohort_consensus_column = cohort_consensus_column

    @property
    def evidential_pricing(self):
        """Gets the evidential_pricing of this TitaniumComparisonTable.  # noqa: E501


        :return: The evidential_pricing of this TitaniumComparisonTable.  # noqa: E501
        :rtype: TitaniumEvidentalPricing
        """
        return self._evidential_pricing

    @evidential_pricing.setter
    def evidential_pricing(self, evidential_pricing):
        """Sets the evidential_pricing of this TitaniumComparisonTable.


        :param evidential_pricing: The evidential_pricing of this TitaniumComparisonTable.  # noqa: E501
        :type evidential_pricing: TitaniumEvidentalPricing
        """

        self._evidential_pricing = evidential_pricing

    @property
    def submission(self):
        """Gets the submission of this TitaniumComparisonTable.  # noqa: E501


        :return: The submission of this TitaniumComparisonTable.  # noqa: E501
        :rtype: TitaniumSubmissionExplorerTableColumn
        """
        return self._submission

    @submission.setter
    def submission(self, submission):
        """Sets the submission of this TitaniumComparisonTable.


        :param submission: The submission of this TitaniumComparisonTable.  # noqa: E501
        :type submission: TitaniumSubmissionExplorerTableColumn
        """

        self._submission = submission

    @property
    def submission_evidence(self):
        """Gets the submission_evidence of this TitaniumComparisonTable.  # noqa: E501


        :return: The submission_evidence of this TitaniumComparisonTable.  # noqa: E501
        :rtype: TitaniumSubmissionEvidenceTableColumn
        """
        return self._submission_evidence

    @submission_evidence.setter
    def submission_evidence(self, submission_evidence):
        """Sets the submission_evidence of this TitaniumComparisonTable.


        :param submission_evidence: The submission_evidence of this TitaniumComparisonTable.  # noqa: E501
        :type submission_evidence: TitaniumSubmissionEvidenceTableColumn
        """

        self._submission_evidence = submission_evidence

    @property
    def submission_statistics(self):
        """Gets the submission_statistics of this TitaniumComparisonTable.  # noqa: E501


        :return: The submission_statistics of this TitaniumComparisonTable.  # noqa: E501
        :rtype: TitaniumSubmissionStatisticsExplorerTableColumn
        """
        return self._submission_statistics

    @submission_statistics.setter
    def submission_statistics(self, submission_statistics):
        """Sets the submission_statistics of this TitaniumComparisonTable.


        :param submission_statistics: The submission_statistics of this TitaniumComparisonTable.  # noqa: E501
        :type submission_statistics: TitaniumSubmissionStatisticsExplorerTableColumn
        """

        self._submission_statistics = submission_statistics

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumComparisonTable):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumComparisonTable):
            return True

        return self.to_dict() != other.to_dict()
