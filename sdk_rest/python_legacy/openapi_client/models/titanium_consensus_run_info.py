# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumConsensusRunInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'consensus_result_set_info': 'list[TitaniumConsensusResultSetInfo]',
        'consensus_run_id': 'str',
        'number_of_participants': 'int',
        'run_by': 'str'
    }

    attribute_map = {
        'consensus_result_set_info': 'consensusResultSetInfo',
        'consensus_run_id': 'consensusRunId',
        'number_of_participants': 'numberOfParticipants',
        'run_by': 'runBy'
    }

    def __init__(self, consensus_result_set_info=None, consensus_run_id=None, number_of_participants=None, run_by=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumConsensusRunInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._consensus_result_set_info = None
        self._consensus_run_id = None
        self._number_of_participants = None
        self._run_by = None
        self.discriminator = None

        if consensus_result_set_info is not None:
            self.consensus_result_set_info = consensus_result_set_info
        if consensus_run_id is not None:
            self.consensus_run_id = consensus_run_id
        if number_of_participants is not None:
            self.number_of_participants = number_of_participants
        if run_by is not None:
            self.run_by = run_by

    @property
    def consensus_result_set_info(self):
        """Gets the consensus_result_set_info of this TitaniumConsensusRunInfo.  # noqa: E501


        :return: The consensus_result_set_info of this TitaniumConsensusRunInfo.  # noqa: E501
        :rtype: list[TitaniumConsensusResultSetInfo]
        """
        return self._consensus_result_set_info

    @consensus_result_set_info.setter
    def consensus_result_set_info(self, consensus_result_set_info):
        """Sets the consensus_result_set_info of this TitaniumConsensusRunInfo.


        :param consensus_result_set_info: The consensus_result_set_info of this TitaniumConsensusRunInfo.  # noqa: E501
        :type consensus_result_set_info: list[TitaniumConsensusResultSetInfo]
        """

        self._consensus_result_set_info = consensus_result_set_info

    @property
    def consensus_run_id(self):
        """Gets the consensus_run_id of this TitaniumConsensusRunInfo.  # noqa: E501


        :return: The consensus_run_id of this TitaniumConsensusRunInfo.  # noqa: E501
        :rtype: str
        """
        return self._consensus_run_id

    @consensus_run_id.setter
    def consensus_run_id(self, consensus_run_id):
        """Sets the consensus_run_id of this TitaniumConsensusRunInfo.


        :param consensus_run_id: The consensus_run_id of this TitaniumConsensusRunInfo.  # noqa: E501
        :type consensus_run_id: str
        """

        self._consensus_run_id = consensus_run_id

    @property
    def number_of_participants(self):
        """Gets the number_of_participants of this TitaniumConsensusRunInfo.  # noqa: E501


        :return: The number_of_participants of this TitaniumConsensusRunInfo.  # noqa: E501
        :rtype: int
        """
        return self._number_of_participants

    @number_of_participants.setter
    def number_of_participants(self, number_of_participants):
        """Sets the number_of_participants of this TitaniumConsensusRunInfo.


        :param number_of_participants: The number_of_participants of this TitaniumConsensusRunInfo.  # noqa: E501
        :type number_of_participants: int
        """

        self._number_of_participants = number_of_participants

    @property
    def run_by(self):
        """Gets the run_by of this TitaniumConsensusRunInfo.  # noqa: E501


        :return: The run_by of this TitaniumConsensusRunInfo.  # noqa: E501
        :rtype: str
        """
        return self._run_by

    @run_by.setter
    def run_by(self, run_by):
        """Sets the run_by of this TitaniumConsensusRunInfo.


        :param run_by: The run_by of this TitaniumConsensusRunInfo.  # noqa: E501
        :type run_by: str
        """

        self._run_by = run_by

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumConsensusRunInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumConsensusRunInfo):
            return True

        return self.to_dict() != other.to_dict()
