# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumChallengeCreateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'asset_id': 'str',
        'attachments': 'list[TitaniumAttachment]',
        'date': 'str',
        'evidence_type': 'str',
        'general_fields': 'list[str]',
        'note': 'str',
        'submitted_date': 'str',
        'submitted_id': 'str',
        'submitted_url': 'str',
        'time': 'str',
        'trace_name': 'str'
    }

    attribute_map = {
        'asset_id': 'assetId',
        'attachments': 'attachments',
        'date': 'date',
        'evidence_type': 'evidenceType',
        'general_fields': 'generalFields',
        'note': 'note',
        'submitted_date': 'submittedDate',
        'submitted_id': 'submittedId',
        'submitted_url': 'submittedUrl',
        'time': 'time',
        'trace_name': 'traceName'
    }

    def __init__(self, asset_id=None, attachments=None, date=None, evidence_type=None, general_fields=None, note=None, submitted_date=None, submitted_id=None, submitted_url=None, time=None, trace_name=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumChallengeCreateRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._asset_id = None
        self._attachments = None
        self._date = None
        self._evidence_type = None
        self._general_fields = None
        self._note = None
        self._submitted_date = None
        self._submitted_id = None
        self._submitted_url = None
        self._time = None
        self._trace_name = None
        self.discriminator = None

        if asset_id is not None:
            self.asset_id = asset_id
        if attachments is not None:
            self.attachments = attachments
        if date is not None:
            self.date = date
        if evidence_type is not None:
            self.evidence_type = evidence_type
        if general_fields is not None:
            self.general_fields = general_fields
        if note is not None:
            self.note = note
        if submitted_date is not None:
            self.submitted_date = submitted_date
        if submitted_id is not None:
            self.submitted_id = submitted_id
        if submitted_url is not None:
            self.submitted_url = submitted_url
        if time is not None:
            self.time = time
        if trace_name is not None:
            self.trace_name = trace_name

    @property
    def asset_id(self):
        """Gets the asset_id of this TitaniumChallengeCreateRequest.  # noqa: E501


        :return: The asset_id of this TitaniumChallengeCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this TitaniumChallengeCreateRequest.


        :param asset_id: The asset_id of this TitaniumChallengeCreateRequest.  # noqa: E501
        :type asset_id: str
        """

        self._asset_id = asset_id

    @property
    def attachments(self):
        """Gets the attachments of this TitaniumChallengeCreateRequest.  # noqa: E501


        :return: The attachments of this TitaniumChallengeCreateRequest.  # noqa: E501
        :rtype: list[TitaniumAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this TitaniumChallengeCreateRequest.


        :param attachments: The attachments of this TitaniumChallengeCreateRequest.  # noqa: E501
        :type attachments: list[TitaniumAttachment]
        """

        self._attachments = attachments

    @property
    def date(self):
        """Gets the date of this TitaniumChallengeCreateRequest.  # noqa: E501


        :return: The date of this TitaniumChallengeCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this TitaniumChallengeCreateRequest.


        :param date: The date of this TitaniumChallengeCreateRequest.  # noqa: E501
        :type date: str
        """

        self._date = date

    @property
    def evidence_type(self):
        """Gets the evidence_type of this TitaniumChallengeCreateRequest.  # noqa: E501


        :return: The evidence_type of this TitaniumChallengeCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._evidence_type

    @evidence_type.setter
    def evidence_type(self, evidence_type):
        """Sets the evidence_type of this TitaniumChallengeCreateRequest.


        :param evidence_type: The evidence_type of this TitaniumChallengeCreateRequest.  # noqa: E501
        :type evidence_type: str
        """

        self._evidence_type = evidence_type

    @property
    def general_fields(self):
        """Gets the general_fields of this TitaniumChallengeCreateRequest.  # noqa: E501


        :return: The general_fields of this TitaniumChallengeCreateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._general_fields

    @general_fields.setter
    def general_fields(self, general_fields):
        """Sets the general_fields of this TitaniumChallengeCreateRequest.


        :param general_fields: The general_fields of this TitaniumChallengeCreateRequest.  # noqa: E501
        :type general_fields: list[str]
        """

        self._general_fields = general_fields

    @property
    def note(self):
        """Gets the note of this TitaniumChallengeCreateRequest.  # noqa: E501


        :return: The note of this TitaniumChallengeCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this TitaniumChallengeCreateRequest.


        :param note: The note of this TitaniumChallengeCreateRequest.  # noqa: E501
        :type note: str
        """

        self._note = note

    @property
    def submitted_date(self):
        """Gets the submitted_date of this TitaniumChallengeCreateRequest.  # noqa: E501


        :return: The submitted_date of this TitaniumChallengeCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._submitted_date

    @submitted_date.setter
    def submitted_date(self, submitted_date):
        """Sets the submitted_date of this TitaniumChallengeCreateRequest.


        :param submitted_date: The submitted_date of this TitaniumChallengeCreateRequest.  # noqa: E501
        :type submitted_date: str
        """

        self._submitted_date = submitted_date

    @property
    def submitted_id(self):
        """Gets the submitted_id of this TitaniumChallengeCreateRequest.  # noqa: E501


        :return: The submitted_id of this TitaniumChallengeCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._submitted_id

    @submitted_id.setter
    def submitted_id(self, submitted_id):
        """Sets the submitted_id of this TitaniumChallengeCreateRequest.


        :param submitted_id: The submitted_id of this TitaniumChallengeCreateRequest.  # noqa: E501
        :type submitted_id: str
        """

        self._submitted_id = submitted_id

    @property
    def submitted_url(self):
        """Gets the submitted_url of this TitaniumChallengeCreateRequest.  # noqa: E501


        :return: The submitted_url of this TitaniumChallengeCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._submitted_url

    @submitted_url.setter
    def submitted_url(self, submitted_url):
        """Sets the submitted_url of this TitaniumChallengeCreateRequest.


        :param submitted_url: The submitted_url of this TitaniumChallengeCreateRequest.  # noqa: E501
        :type submitted_url: str
        """

        self._submitted_url = submitted_url

    @property
    def time(self):
        """Gets the time of this TitaniumChallengeCreateRequest.  # noqa: E501


        :return: The time of this TitaniumChallengeCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this TitaniumChallengeCreateRequest.


        :param time: The time of this TitaniumChallengeCreateRequest.  # noqa: E501
        :type time: str
        """

        self._time = time

    @property
    def trace_name(self):
        """Gets the trace_name of this TitaniumChallengeCreateRequest.  # noqa: E501


        :return: The trace_name of this TitaniumChallengeCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._trace_name

    @trace_name.setter
    def trace_name(self, trace_name):
        """Sets the trace_name of this TitaniumChallengeCreateRequest.


        :param trace_name: The trace_name of this TitaniumChallengeCreateRequest.  # noqa: E501
        :type trace_name: str
        """

        self._trace_name = trace_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumChallengeCreateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumChallengeCreateRequest):
            return True

        return self.to_dict() != other.to_dict()
