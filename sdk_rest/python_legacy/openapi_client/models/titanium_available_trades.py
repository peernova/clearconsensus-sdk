# coding: utf-8

"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TitaniumAvailableTrades(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'abs_diff_from_latest_trade': 'object',
        'day_trade_number': 'str',
        'latest_trade_price': 'object',
        'max': 'object',
        'min': 'object',
        'month_trade_number': 'str',
        'sub_price_abs_diff_from_latest_trade': 'object',
        'sub_price_diff': 'object',
        'week_trade_number': 'str'
    }

    attribute_map = {
        'abs_diff_from_latest_trade': 'absDiffFromLatestTrade',
        'day_trade_number': 'dayTradeNumber',
        'latest_trade_price': 'latestTradePrice',
        'max': 'max',
        'min': 'min',
        'month_trade_number': 'monthTradeNumber',
        'sub_price_abs_diff_from_latest_trade': 'subPriceAbsDiffFromLatestTrade',
        'sub_price_diff': 'subPriceDiff',
        'week_trade_number': 'weekTradeNumber'
    }

    def __init__(self, abs_diff_from_latest_trade=None, day_trade_number=None, latest_trade_price=None, max=None, min=None, month_trade_number=None, sub_price_abs_diff_from_latest_trade=None, sub_price_diff=None, week_trade_number=None, local_vars_configuration=None):  # noqa: E501
        """TitaniumAvailableTrades - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._abs_diff_from_latest_trade = None
        self._day_trade_number = None
        self._latest_trade_price = None
        self._max = None
        self._min = None
        self._month_trade_number = None
        self._sub_price_abs_diff_from_latest_trade = None
        self._sub_price_diff = None
        self._week_trade_number = None
        self.discriminator = None

        if abs_diff_from_latest_trade is not None:
            self.abs_diff_from_latest_trade = abs_diff_from_latest_trade
        if day_trade_number is not None:
            self.day_trade_number = day_trade_number
        if latest_trade_price is not None:
            self.latest_trade_price = latest_trade_price
        if max is not None:
            self.max = max
        if min is not None:
            self.min = min
        if month_trade_number is not None:
            self.month_trade_number = month_trade_number
        if sub_price_abs_diff_from_latest_trade is not None:
            self.sub_price_abs_diff_from_latest_trade = sub_price_abs_diff_from_latest_trade
        if sub_price_diff is not None:
            self.sub_price_diff = sub_price_diff
        if week_trade_number is not None:
            self.week_trade_number = week_trade_number

    @property
    def abs_diff_from_latest_trade(self):
        """Gets the abs_diff_from_latest_trade of this TitaniumAvailableTrades.  # noqa: E501


        :return: The abs_diff_from_latest_trade of this TitaniumAvailableTrades.  # noqa: E501
        :rtype: object
        """
        return self._abs_diff_from_latest_trade

    @abs_diff_from_latest_trade.setter
    def abs_diff_from_latest_trade(self, abs_diff_from_latest_trade):
        """Sets the abs_diff_from_latest_trade of this TitaniumAvailableTrades.


        :param abs_diff_from_latest_trade: The abs_diff_from_latest_trade of this TitaniumAvailableTrades.  # noqa: E501
        :type abs_diff_from_latest_trade: object
        """

        self._abs_diff_from_latest_trade = abs_diff_from_latest_trade

    @property
    def day_trade_number(self):
        """Gets the day_trade_number of this TitaniumAvailableTrades.  # noqa: E501


        :return: The day_trade_number of this TitaniumAvailableTrades.  # noqa: E501
        :rtype: str
        """
        return self._day_trade_number

    @day_trade_number.setter
    def day_trade_number(self, day_trade_number):
        """Sets the day_trade_number of this TitaniumAvailableTrades.


        :param day_trade_number: The day_trade_number of this TitaniumAvailableTrades.  # noqa: E501
        :type day_trade_number: str
        """

        self._day_trade_number = day_trade_number

    @property
    def latest_trade_price(self):
        """Gets the latest_trade_price of this TitaniumAvailableTrades.  # noqa: E501


        :return: The latest_trade_price of this TitaniumAvailableTrades.  # noqa: E501
        :rtype: object
        """
        return self._latest_trade_price

    @latest_trade_price.setter
    def latest_trade_price(self, latest_trade_price):
        """Sets the latest_trade_price of this TitaniumAvailableTrades.


        :param latest_trade_price: The latest_trade_price of this TitaniumAvailableTrades.  # noqa: E501
        :type latest_trade_price: object
        """

        self._latest_trade_price = latest_trade_price

    @property
    def max(self):
        """Gets the max of this TitaniumAvailableTrades.  # noqa: E501


        :return: The max of this TitaniumAvailableTrades.  # noqa: E501
        :rtype: object
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this TitaniumAvailableTrades.


        :param max: The max of this TitaniumAvailableTrades.  # noqa: E501
        :type max: object
        """

        self._max = max

    @property
    def min(self):
        """Gets the min of this TitaniumAvailableTrades.  # noqa: E501


        :return: The min of this TitaniumAvailableTrades.  # noqa: E501
        :rtype: object
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this TitaniumAvailableTrades.


        :param min: The min of this TitaniumAvailableTrades.  # noqa: E501
        :type min: object
        """

        self._min = min

    @property
    def month_trade_number(self):
        """Gets the month_trade_number of this TitaniumAvailableTrades.  # noqa: E501


        :return: The month_trade_number of this TitaniumAvailableTrades.  # noqa: E501
        :rtype: str
        """
        return self._month_trade_number

    @month_trade_number.setter
    def month_trade_number(self, month_trade_number):
        """Sets the month_trade_number of this TitaniumAvailableTrades.


        :param month_trade_number: The month_trade_number of this TitaniumAvailableTrades.  # noqa: E501
        :type month_trade_number: str
        """

        self._month_trade_number = month_trade_number

    @property
    def sub_price_abs_diff_from_latest_trade(self):
        """Gets the sub_price_abs_diff_from_latest_trade of this TitaniumAvailableTrades.  # noqa: E501


        :return: The sub_price_abs_diff_from_latest_trade of this TitaniumAvailableTrades.  # noqa: E501
        :rtype: object
        """
        return self._sub_price_abs_diff_from_latest_trade

    @sub_price_abs_diff_from_latest_trade.setter
    def sub_price_abs_diff_from_latest_trade(self, sub_price_abs_diff_from_latest_trade):
        """Sets the sub_price_abs_diff_from_latest_trade of this TitaniumAvailableTrades.


        :param sub_price_abs_diff_from_latest_trade: The sub_price_abs_diff_from_latest_trade of this TitaniumAvailableTrades.  # noqa: E501
        :type sub_price_abs_diff_from_latest_trade: object
        """

        self._sub_price_abs_diff_from_latest_trade = sub_price_abs_diff_from_latest_trade

    @property
    def sub_price_diff(self):
        """Gets the sub_price_diff of this TitaniumAvailableTrades.  # noqa: E501


        :return: The sub_price_diff of this TitaniumAvailableTrades.  # noqa: E501
        :rtype: object
        """
        return self._sub_price_diff

    @sub_price_diff.setter
    def sub_price_diff(self, sub_price_diff):
        """Sets the sub_price_diff of this TitaniumAvailableTrades.


        :param sub_price_diff: The sub_price_diff of this TitaniumAvailableTrades.  # noqa: E501
        :type sub_price_diff: object
        """

        self._sub_price_diff = sub_price_diff

    @property
    def week_trade_number(self):
        """Gets the week_trade_number of this TitaniumAvailableTrades.  # noqa: E501


        :return: The week_trade_number of this TitaniumAvailableTrades.  # noqa: E501
        :rtype: str
        """
        return self._week_trade_number

    @week_trade_number.setter
    def week_trade_number(self, week_trade_number):
        """Sets the week_trade_number of this TitaniumAvailableTrades.


        :param week_trade_number: The week_trade_number of this TitaniumAvailableTrades.  # noqa: E501
        :type week_trade_number: str
        """

        self._week_trade_number = week_trade_number

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TitaniumAvailableTrades):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TitaniumAvailableTrades):
            return True

        return self.to_dict() != other.to_dict()
