/**
 * clearconsensus-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProtoPolicies from '../model/ProtoPolicies';
import ProtoPolicyDto from '../model/ProtoPolicyDto';
import ProtoServiceResponse from '../model/ProtoServiceResponse';
import ProtoUsernamePermissionRequest from '../model/ProtoUsernamePermissionRequest';
import RpcStatus from '../model/RpcStatus';

/**
* PolicyService service.
* @module api/PolicyServiceApi
* @version 1.0.0
*/
export default class PolicyServiceApi {

    /**
    * Constructs a new PolicyServiceApi. 
    * @alias module:api/PolicyServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the policyServiceCheckPolicy operation.
     * @callback module:api/PolicyServiceApi~policyServiceCheckPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtoServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProtoPolicyDto} body 
     * @param {module:api/PolicyServiceApi~policyServiceCheckPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtoServiceResponse}
     */
    policyServiceCheckPolicy(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling policyServiceCheckPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProtoServiceResponse;
      return this.apiClient.callApi(
        '/api/v1/user-management/policies/checkPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyServiceCreate operation.
     * @callback module:api/PolicyServiceApi~policyServiceCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtoServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProtoPolicies} body 
     * @param {module:api/PolicyServiceApi~policyServiceCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtoServiceResponse}
     */
    policyServiceCreate(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling policyServiceCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProtoServiceResponse;
      return this.apiClient.callApi(
        '/api/v1/user-management/policies/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyServiceGetAddons operation.
     * @callback module:api/PolicyServiceApi~policyServiceGetAddonsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtoServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProtoUsernamePermissionRequest} body 
     * @param {module:api/PolicyServiceApi~policyServiceGetAddonsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtoServiceResponse}
     */
    policyServiceGetAddons(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling policyServiceGetAddons");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProtoServiceResponse;
      return this.apiClient.callApi(
        '/api/v1/user-management/policies/getAddons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyServiceGetApis operation.
     * @callback module:api/PolicyServiceApi~policyServiceGetApisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtoServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProtoUsernamePermissionRequest} body 
     * @param {module:api/PolicyServiceApi~policyServiceGetApisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtoServiceResponse}
     */
    policyServiceGetApis(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling policyServiceGetApis");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProtoServiceResponse;
      return this.apiClient.callApi(
        '/api/v1/user-management/policies/getApis', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyServiceGetAssets operation.
     * @callback module:api/PolicyServiceApi~policyServiceGetAssetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtoServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProtoUsernamePermissionRequest} body 
     * @param {module:api/PolicyServiceApi~policyServiceGetAssetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtoServiceResponse}
     */
    policyServiceGetAssets(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling policyServiceGetAssets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProtoServiceResponse;
      return this.apiClient.callApi(
        '/api/v1/user-management/policies/getAssets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyServiceGetPolicies operation.
     * @callback module:api/PolicyServiceApi~policyServiceGetPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtoServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} body 
     * @param {module:api/PolicyServiceApi~policyServiceGetPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtoServiceResponse}
     */
    policyServiceGetPolicies(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling policyServiceGetPolicies");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProtoServiceResponse;
      return this.apiClient.callApi(
        '/api/v1/user-management/policies/getPolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyServiceRemovePolicy operation.
     * @callback module:api/PolicyServiceApi~policyServiceRemovePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtoServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProtoPolicyDto} body 
     * @param {module:api/PolicyServiceApi~policyServiceRemovePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtoServiceResponse}
     */
    policyServiceRemovePolicy(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling policyServiceRemovePolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProtoServiceResponse;
      return this.apiClient.callApi(
        '/api/v1/user-management/policies/removePolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
