/**
 * clearconsensus-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RpcStatus from '../model/RpcStatus';
import TitaniumAcknowledgeResponse from '../model/TitaniumAcknowledgeResponse';
import TitaniumDescriptorDefinition from '../model/TitaniumDescriptorDefinition';
import TitaniumDescriptorDefinitionResponse from '../model/TitaniumDescriptorDefinitionResponse';
import TitaniumDescriptorDependenciesResponse from '../model/TitaniumDescriptorDependenciesResponse';
import TitaniumDescriptorList from '../model/TitaniumDescriptorList';
import TitaniumEnableDisableRequest from '../model/TitaniumEnableDisableRequest';
import TitaniumGetDefinition from '../model/TitaniumGetDefinition';
import TitaniumListRequest from '../model/TitaniumListRequest';
import TitaniumListVersionResponse from '../model/TitaniumListVersionResponse';

/**
* DescriptorService service.
* @module api/DescriptorServiceApi
* @version 1.0.0
*/
export default class DescriptorServiceApi {

    /**
    * Constructs a new DescriptorServiceApi. 
    * @alias module:api/DescriptorServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the descriptorServiceAddDescriptor operation.
     * @callback module:api/DescriptorServiceApi~descriptorServiceAddDescriptorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumAcknowledgeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AddDescriptor is used to add specific descriptor with specific definition to the system. Regular users can store a descriptor within their own scope, and any attempts to push it to a different scope will be declined. Back office users can store descriptors in any scope, provided that a scope key is provided. The name of the descriptor must match the name of the asset class to be mapped correctly. If a descriptor with the same name already exists, it will be updated.
     * Example of request for regular user : {   \"name\":\"foreign_exchange-vanilla-forwards\",   \"fields\":[      { [data]=\"typeEnumToDisplayName[cellData]\"v        \"name\":\"submission_date\",         \"nullable\":true,         \"type\":\"string\"      },      {         \"name\":\"submission_asset\",         \"nullable\":true,         \"type\":\"string\"      }   ] }  Example of request for Back Office : {   \"name\":\"foreign_exchange-vanilla-forwards\",   \"scope\": \"global\",   \"fields\":[      {         \"name\":\"snap_date\",         \"alias\":\"snap_date\",         \"type\":\"date\",         \"options\":{            \"format\":\"MM/dd/yy\"         }      },      {         \"name\":\"asset\",         \"alias\":\"asset\",         \"type\":\"string\"      },      {        \"name\": \"sub-asset\",        \"alias\": \"sub-asset\",        \"type\": \"string\"      }   ] }  Example of response : {   \"data\":{      \"uid\":\"98fd0526-cc88-11ec-b784-0fe7a41b45e0\",      \"name\":\"foreign_exchange-vanilla-forwards\"   } }  Example of error response : {   \"error\":{      \"code\":70,      \"message\":\"Can't add descriptor: [com.peernova.api.searchmetadata.metadata.exceptions.MetaDataServiceException: Namespace [bank11] is not valid].\"   } }
     * @param {module:model/TitaniumDescriptorDefinition} body 
     * @param {module:api/DescriptorServiceApi~descriptorServiceAddDescriptorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumAcknowledgeResponse}
     */
    descriptorServiceAddDescriptor(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling descriptorServiceAddDescriptor");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumAcknowledgeResponse;
      return this.apiClient.callApi(
        '/api/v1/descriptor/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the descriptorServiceDescriptorDependencies operation.
     * @callback module:api/DescriptorServiceApi~descriptorServiceDescriptorDependenciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumDescriptorDependenciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/TitaniumGetDefinition} body 
     * @param {module:api/DescriptorServiceApi~descriptorServiceDescriptorDependenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumDescriptorDependenciesResponse}
     */
    descriptorServiceDescriptorDependencies(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling descriptorServiceDescriptorDependencies");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumDescriptorDependenciesResponse;
      return this.apiClient.callApi(
        '/api/v1/descriptor/dependencies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the descriptorServiceDisableDescriptor operation.
     * @callback module:api/DescriptorServiceApi~descriptorServiceDisableDescriptorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumAcknowledgeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DisableDescriptor is used to disable specific descriptor. Example of response : {    \"data\": {        \"uid\": \"\",        \"name\": \"foreign_exchange-vanilla-forwards\"    } }
     * @param {module:model/TitaniumEnableDisableRequest} body 
     * @param {module:api/DescriptorServiceApi~descriptorServiceDisableDescriptorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumAcknowledgeResponse}
     */
    descriptorServiceDisableDescriptor(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling descriptorServiceDisableDescriptor");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumAcknowledgeResponse;
      return this.apiClient.callApi(
        '/api/v1/descriptor/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the descriptorServiceEnableDescriptor operation.
     * @callback module:api/DescriptorServiceApi~descriptorServiceEnableDescriptorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumAcknowledgeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EnableDescriptor is used to enable specific descriptor.
     * Example of request : {  \"name\" : \"foreign_exchange-vanilla-forwards\",  \"scope\": \"global\" }  Example of response : {    \"data\": {        \"uid\": \"\",        \"name\": \"foreign_exchange-vanilla-forwards\"    } }
     * @param {module:model/TitaniumEnableDisableRequest} body 
     * @param {module:api/DescriptorServiceApi~descriptorServiceEnableDescriptorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumAcknowledgeResponse}
     */
    descriptorServiceEnableDescriptor(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling descriptorServiceEnableDescriptor");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumAcknowledgeResponse;
      return this.apiClient.callApi(
        '/api/v1/descriptor/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the descriptorServiceGetDescriptor operation.
     * @callback module:api/DescriptorServiceApi~descriptorServiceGetDescriptorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumDescriptorDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetDescriptor is used to get specific descriptor definition based on get definition. Regular users can retrieve only their own descriptors and descriptors associated with asset classes. Back office users can retrieve any of the existing descriptors.
     * Example of request : {   \"identifier\":{      \"name\":\"foreign_exchange-vanilla-forwards\"   },   \"scope\":\"global\" }  Example of response : {    \"data\": \"{\\\"name\\\":\\\"foreign_exchange-vanilla-forwards\\\",\\\"fields\\\":[{\\\"name\\\":\\\"snap_date\\\",\\\"type\\\":\\\"date\\\",\\\"options\\\":{\\\"format\\\":\\\"MM/dd/yy\\\"},\\\"alias\\\":\\\"snap_date\\\"},{\\\"name\\\":\\\"asset\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"asset\\\"},{\\\"name\\\":\\\"sub-asset\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"sub-asset\\\"},{\\\"name\\\":\\\"service\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"service\\\"},{\\\"name\\\":\\\"snap_time\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"snap_time\\\"},{\\\"name\\\":\\\"curr_1\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"curr_1\\\"},{\\\"name\\\":\\\"curr_2\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"curr_2\\\"},{\\\"name\\\":\\\"onshore_offshore_curr_1\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"onshore_offshore_curr_1\\\"},{\\\"name\\\":\\\"onshore_offshore_curr_2\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"onshore_offshore_curr_2\\\"},{\\\"name\\\":\\\"instrument_type\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"instrument_type\\\"},{\\\"name\\\":\\\"tenor\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"tenor\\\"},{\\\"name\\\":\\\"value_source\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"value_source\\\"},{\\\"name\\\":\\\"fwrd_conversion_factor\\\",\\\"type\\\":\\\"double\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"fwrd_conversion_factor\\\"},{\\\"name\\\":\\\"mid_fwrd_outright\\\",\\\"type\\\":\\\"double\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"mid_fwrd_outright\\\"},{\\\"name\\\":\\\"value_source_ref_id\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"value_source_ref_id\\\"},{\\\"name\\\":\\\"client\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"client\\\"},{\\\"name\\\":\\\"spot_reference_price\\\",\\\"type\\\":\\\"double\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"spot_reference_price\\\"},{\\\"name\\\":\\\"mid_fwrd_points\\\",\\\"type\\\":\\\"double\\\",\\\"alias\\\":\\\"mid_fwrd_points\\\"}]}\" }  Example of error response : {    \"error\": {        \"code\": 70,        \"message\": \"Can't get descriptor: [[foreign_exchange-vanilla-forwards1] of service [DESCRIPTOR] does not exist in namespace [global]].\"    } }
     * @param {module:model/TitaniumGetDefinition} body 
     * @param {module:api/DescriptorServiceApi~descriptorServiceGetDescriptorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumDescriptorDefinitionResponse}
     */
    descriptorServiceGetDescriptor(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling descriptorServiceGetDescriptor");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumDescriptorDefinitionResponse;
      return this.apiClient.callApi(
        '/api/v1/descriptor/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the descriptorServiceGetDescriptorVersion operation.
     * @callback module:api/DescriptorServiceApi~descriptorServiceGetDescriptorVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumDescriptorDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetDescriptorVersion returns current version of the specific descriptor.
     * Example of response : { \"data\":\"{\\\"name\\\":\\\"fx_test_for_bank1\\\",\\\"fields\\\":[{\\\"name\\\":\\\"submission_date\\\",\\\"type\\\":\\\"date\\\",\\\"options\\\":{\\\"format\\\":\\\"MM/dd/yyyy\\\"},\\\"alias\\\":\\\"date12\\\"},{\\\"name\\\":\\\"submission_asset\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true}],\\\"options\\\":{\\\"DEDUPLICATION\\\":{\\\"GROUP_BY\\\":[\\\"submission_date\\\",\\\"submission_asset\\\"]}}}\" }
     * @param {String} scope 
     * @param {String} name 
     * @param {String} versionId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.descriptorName 
     * @param {module:api/DescriptorServiceApi~descriptorServiceGetDescriptorVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumDescriptorDefinitionResponse}
     */
    descriptorServiceGetDescriptorVersion(scope, name, versionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling descriptorServiceGetDescriptorVersion");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling descriptorServiceGetDescriptorVersion");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling descriptorServiceGetDescriptorVersion");
      }

      let pathParams = {
        'scope': scope,
        'name': name,
        'versionId': versionId
      };
      let queryParams = {
        'descriptorName': opts['descriptorName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumDescriptorDefinitionResponse;
      return this.apiClient.callApi(
        '/api/v1/descriptor/version/{scope}/{name}/{versionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the descriptorServiceListDescriptorVersions operation.
     * @callback module:api/DescriptorServiceApi~descriptorServiceListDescriptorVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumListVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListDescriptorVersions returns list of version of the specific descriptor versions.
     * Example of request : {   \"scope\":\"global\",   \"identifier\":{      \"name\":\"foreign_exchange-vanilla-forwards\"   } }  Example of response : {    \"data\": {        \"versions\": [            {                \"versionId\": \"fM9AukEqTJXKOcbW_tQ7Sfr4Clp5qinKq_liXZYzyiI=\",                \"createdAt\": \"2022-06-14 10:57:42.0\"            },            {                \"versionId\": \"LmVlkPbnsUKFBw8qIbUHEzBsRrcnG_BSMnopA5Ptd7I=\",                \"createdAt\": \"2022-06-14 10:20:48.0\"            }        ]    } }
     * @param {module:model/TitaniumGetDefinition} body 
     * @param {module:api/DescriptorServiceApi~descriptorServiceListDescriptorVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumListVersionResponse}
     */
    descriptorServiceListDescriptorVersions(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling descriptorServiceListDescriptorVersions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumListVersionResponse;
      return this.apiClient.callApi(
        '/api/v1/descriptor/versions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the descriptorServiceListDescriptors operation.
     * @callback module:api/DescriptorServiceApi~descriptorServiceListDescriptorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumDescriptorList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListDescriptors returns list of specific descriptors according to request.
     * Example of request : {   \"scope\":\"global\" }  Example of response : {    \"data\": {        \"results\": [            {                \"uid\": \"\",                \"name\": \"foreign_exchange-vanilla-options\"            },            {                \"uid\": \"\",                \"name\": \"foreign_exchange-exotics-barriers_and_digitals\"            },            {                \"uid\": \"\",                \"name\": \"foreign_exchange-exotics-tarfs\"            }        ]    } }
     * @param {module:model/TitaniumListRequest} body 
     * @param {module:api/DescriptorServiceApi~descriptorServiceListDescriptorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumDescriptorList}
     */
    descriptorServiceListDescriptors(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling descriptorServiceListDescriptors");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumDescriptorList;
      return this.apiClient.callApi(
        '/api/v1/descriptor/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
