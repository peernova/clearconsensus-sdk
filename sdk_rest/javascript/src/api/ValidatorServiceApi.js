/**
 * clearconsensus-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RpcStatus from '../model/RpcStatus';
import TitaniumAcknowledgeResponse from '../model/TitaniumAcknowledgeResponse';
import TitaniumGetDefinition from '../model/TitaniumGetDefinition';
import TitaniumGetGeneratedValidationRuleResponse from '../model/TitaniumGetGeneratedValidationRuleResponse';
import TitaniumGetValidationRuleResponse from '../model/TitaniumGetValidationRuleResponse';
import TitaniumListRequest from '../model/TitaniumListRequest';
import TitaniumListRuleResponse from '../model/TitaniumListRuleResponse';
import TitaniumListVersionResponse from '../model/TitaniumListVersionResponse';
import TitaniumMessageResponse from '../model/TitaniumMessageResponse';
import TitaniumRdlCheckRequest from '../model/TitaniumRdlCheckRequest';
import TitaniumValidationRuleDefinition from '../model/TitaniumValidationRuleDefinition';

/**
* ValidatorService service.
* @module api/ValidatorServiceApi
* @version 1.0.0
*/
export default class ValidatorServiceApi {

    /**
    * Constructs a new ValidatorServiceApi. 
    * @alias module:api/ValidatorServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the validatorServiceAddValidationRule operation.
     * @callback module:api/ValidatorServiceApi~validatorServiceAddValidationRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumAcknowledgeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AddValidationRule is a method used to add a validation rule to the system. Backoffice users can create a new validation ruleset in the 'global' scope, for each asset class. Participant users can create a new validation ruleset in its own scope, for each asset class. Backoffice users can represent any participant and create a new validation ruleset in that participant's scope. The default scope is used if no scope is given in the request ('global' for the operator, participant scope for that participant user). The authorization will be fetched from the user's token. It will do an update if a validation rule with the same name already exists.
     * Request for backoffice user: { \"definition\": {   \"descriptor_name\":\"foreign_exchange-vanilla-options\",   \"criteria\":[     {       \"name\":\"FX-V-FXO: Option Instrument Parameter: Forward Points\",       \"description\":\"This criteria element contains validation rules that will be applied to all fx-vanilla-options data submission rows where option_instrument_parameter equals \\\"Forward Points\\\".\",       \"tags\":[         \"forward points\"       ],       \"metadata\":[        ],       \"rule\":\"[\\\"foreign_exchange-vanilla-options.option_instrument_parameter\\\",\\\"$eq_case_insensitive\\\",\\\"Forward Points\\\"]\",       \"validations\":[         {           \"name\":\"FX-V-FXO: Forward Points: Forward Conversion Factor: Exiting Value Check\",           \"severity\":1,           \"rule_type\":\"input_data\",           \"tags\":[            ],           \"description\":\"Compare the fwrd_conversion_factor for a given underlying against the expected values.\",           \"rule\":\"[ { \\\"$lut_name\\\": \\\"conversion_factor\\\", \\\"$get\\\": [ \\\"foreign_exchange-vanilla-options.underlying\\\" ] }, \\\"$eq\\\", \\\"foreign_exchange-vanilla-options.fwrd_conversion_factor\\\" ]\",           \"error\":{             \"message\":\"[%s] is not a conversion factor used in consensus. Please update the conversion factor for this underlying -- [%s].\",             \"message_args\":[               \"foreign_exchange-vanilla-options.fwrd_conversion_factor\",               \"foreign_exchange-vanilla-options.underlying\"             ]           }         }       ]     }   ] }, \"scope\": \"global\", \"descriptor_name\": \"foreign_exchange-vanilla-options\" }  Response: {    \"data\": {        \"uid\": \"ac49453d-cc9c-11ec-8bac-5314d58ea570\",        \"descriptor_name\": \"fx_forward\"    } }  Error response:  Push to non ‘global’ scope : {    \"error\": {        \"code\": 70,        \"message\": \"Invalid argument: only support 'global' scope\"    } }  Unauthorized user : {    \"error\": {        \"code\": 70,        \"message\": \"Invalid auth token - only operator is allowed to add validation rules\"    } }  Missing argument : {    \"error\": {        \"code\": 70,        \"message\": \"Missing argument: descriptor_name\"    } }  Invalid rule definition - rule col mismatch with descriptor : {    \"error\": {        \"code\": 70,        \"message\": \"Rule [fx_fwd] compile failed, details: Column [submission_clienttt] not found in schema [fx_forward]\"    } }  Invalid rule definition - RDL syntax error : {    \"error\": {        \"code\": 70,        \"message\": \"Rule [fx_fwd] compile failed, details: line 1:14 no viable alternative at input '[{\\\"$lower\\\":\\\"fx_forward.submission_service\\\"'\"    } }  Dependencies not found - dependencies could be: descriptor, named lut, custom function : {    \"error\": {        \"code\": 70,        \"message\": \"Rule [fx_fwd] compile failed, details: Invalid rule expression [ { \\\"$lut_name\\\" : \\\"tenor\\\", \\\"$exist\\\" : [\\\"fx_forward.submission_tenor\\\"] } ]\\n\\terr: com.peernova.api.searchmetadata.metadata.exceptions.MetadataNotFoundException: No Look Up Table by name [tenor] found in scope [global]\"    } }  Ruleset with same name already exist : {    \"error\": {        \"code\": 70,        \"message\": \"Validation rule for descriptor [fx_fwd] already exist\"    } }
     * @param {module:model/TitaniumValidationRuleDefinition} body 
     * @param {module:api/ValidatorServiceApi~validatorServiceAddValidationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumAcknowledgeResponse}
     */
    validatorServiceAddValidationRule(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling validatorServiceAddValidationRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumAcknowledgeResponse;
      return this.apiClient.callApi(
        '/api/v1/validation/rule/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validatorServiceDisableValidationRule operation.
     * @callback module:api/ValidatorServiceApi~validatorServiceDisableValidationRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumAcknowledgeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DisableValidationRule method disables a validation rule in the system. The request includes the descriptor name and scope of the rule. Example of Request: { \"descriptor_name\" : \"foreign_exchange-vanilla-forwards\", \"scope\": \"global\" }
     * Example of Response: {    \"data\": {        \"uid\": \"\",        \"descriptor_name\": \"foreign_exchange-vanilla-forwards\"    } }
     * @param {module:model/TitaniumGetDefinition} body 
     * @param {module:api/ValidatorServiceApi~validatorServiceDisableValidationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumAcknowledgeResponse}
     */
    validatorServiceDisableValidationRule(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling validatorServiceDisableValidationRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumAcknowledgeResponse;
      return this.apiClient.callApi(
        '/api/v1/validation/rule/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validatorServiceEnableValidationRule operation.
     * @callback module:api/ValidatorServiceApi~validatorServiceEnableValidationRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumAcknowledgeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EnableValidationRule method enables a validation rule that has been previously disabled. The request includes the descriptor name and scope of the rule. Example of Request: { \"descriptor_name\" : \"foreign_exchange-vanilla-forwards\", \"scope\": \"global\" }
     * Example of Response: {    \"data\": {        \"uid\": \"\",        \"descriptor_name\": \"foreign_exchange-vanilla-forwards\"    } }
     * @param {module:model/TitaniumGetDefinition} body 
     * @param {module:api/ValidatorServiceApi~validatorServiceEnableValidationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumAcknowledgeResponse}
     */
    validatorServiceEnableValidationRule(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling validatorServiceEnableValidationRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumAcknowledgeResponse;
      return this.apiClient.callApi(
        '/api/v1/validation/rule/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validatorServiceGetGeneratedValidationRule operation.
     * @callback module:api/ValidatorServiceApi~validatorServiceGetGeneratedValidationRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumGetGeneratedValidationRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetGeneratedValidationRule method allows back office users to view all generated validation rulesets, including Java rulesets. Participant users can only view global generated validation rulesets and rulesets within their own scope. If no scope is given in the request, the default scope is used (\"global\" for operators and participant scope for the participant user). Authorization is fetched from the user's token. This method returns the latest version of the generated ruleset if multiple versions exist.
     * Example of Request: {  \"descriptor_name\": \"foreign_exchange-vanilla-forwards\" }
     * @param {module:model/TitaniumGetDefinition} body 
     * @param {module:api/ValidatorServiceApi~validatorServiceGetGeneratedValidationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumGetGeneratedValidationRuleResponse}
     */
    validatorServiceGetGeneratedValidationRule(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling validatorServiceGetGeneratedValidationRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumGetGeneratedValidationRuleResponse;
      return this.apiClient.callApi(
        '/api/v1/validation/rule/generated', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validatorServiceGetGeneratedValidationRuleVersion operation.
     * @callback module:api/ValidatorServiceApi~validatorServiceGetGeneratedValidationRuleVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumGetGeneratedValidationRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetGeneratedValidationRuleVersion method allows the user to view a particular version of a generated ruleset. The request requires a descriptor name and a version ID. If the requested ruleset version is not found, an error response is returned.
     * Example of Request: GET /api/v1/validation/rule/generated/version/foreign_exchange-vanilla-forwards /QHF5uuOTjGprb3FRsI7ybBnU6-Ub32Xq8Q399PtQWeQ= {  \"scope\": \"global\" }  Example of Response: {     \"data\": {          \"versions\": [              {                 \"versionId\": \"teTYb9Fs_lIOoPQJukM6dY3aJdiMqT-SdBPdvYfJAjk=\",                 \"createdAt\": \"2022-05-04 16:20:58.0\"              },              {                  \"versionId\": \"mwpGZcWNc2zFgweB5rcNmAbcxqekM_zUCdpVrl_V6BM=\",                  \"createdAt\": \"2022-05-04 16:17:19.0\"              },              {                  \"versionId\": \"6pfCXN2rFnIAMoDHy7VIFh6HmoyDu3njXkpwzeTp2nc=\",                  \"createdAt\": \"2022-05-04 15:02:00.0\"              }          ]      }  }
     * @param {String} descriptorName 
     * @param {String} versionId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {String} opts.scope 
     * @param {module:api/ValidatorServiceApi~validatorServiceGetGeneratedValidationRuleVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumGetGeneratedValidationRuleResponse}
     */
    validatorServiceGetGeneratedValidationRuleVersion(descriptorName, versionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'descriptorName' is set
      if (descriptorName === undefined || descriptorName === null) {
        throw new Error("Missing the required parameter 'descriptorName' when calling validatorServiceGetGeneratedValidationRuleVersion");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling validatorServiceGetGeneratedValidationRuleVersion");
      }

      let pathParams = {
        'descriptorName': descriptorName,
        'versionId': versionId
      };
      let queryParams = {
        'name': opts['name'],
        'scope': opts['scope']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumGetGeneratedValidationRuleResponse;
      return this.apiClient.callApi(
        '/api/v1/validation/rule/generated/version/{descriptorName}/{versionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validatorServiceGetValidationRule operation.
     * @callback module:api/ValidatorServiceApi~validatorServiceGetValidationRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumGetValidationRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetValidationRule method retrieves information about a validation rule. Both back office users and participant users can view validation rulesets. The default scope is used if no scope is given in the request. Authorization is fetched from the user's token. The rule can be retrieved by either descriptor name or UID. If multiple versions of the rule exist, this method returns the latest version.
     * Example of Request: {  \"descriptor_name\": \"fx_fwd\" }   Or: {  \"uid\": \"ac49453d-cc9c-11ec-8bac-5314d58ea570\" }    Example of Response: {    \"data\": {        \"uid\": \"\",        \"definition\": {            \"descriptorName\": \"foreign_exchange-vanilla-options\",            \"criteria\": [                {                    \"name\": \"FX-V-FXO: Option Instrument Parameter: Forward Points\",                    \"description\": \"This criteria element contains validation rules that will be applied to all fx-vanilla-options data submission rows where option_instrument_parameter equals \\\"Forward Points\\\".\",                    \"rule\": \"[\\\"foreign_exchange-vanilla-options.option_instrument_parameter\\\",\\\"$eq_case_insensitive\\\",\\\"Forward Points\\\"]\",                    \"tags\": [                        \"forward points\"                    ],                    \"metadata\": [],                    \"validations\": [                        {                            \"name\": \"FX-V-FXO: Forward Points: Forward Conversion Factor: Exiting Value Check\",                            \"description\": \"Compare the fwrd_conversion_factor for a given underlying against the expected values.\",                            \"rule\": \"[ { \\\"$lut_name\\\": \\\"conversion_factor\\\", \\\"$get\\\": [ \\\"foreign_exchange-vanilla-options.underlying\\\" ] }, \\\"$eq\\\", \\\"foreign_exchange-vanilla-options.fwrd_conversion_factor\\\" ]\",                            \"ruleType\": \"INPUT_DATA\",                            \"severity\": 1,                            \"tags\": [],                            \"error\": {                                \"message\": \"[%s] is not a conversion factor used in consensus. Please update the conversion factor for this underlying -- [%s].\",                                \"messageArgs\": [                                    \"foreign_exchange-vanilla-options.fwrd_conversion_factor\",                                    \"foreign_exchange-vanilla-options.underlying\"                                ]                            },                            \"filter\": \"\"                        }                    ]                }            ]        },        \"scope\": \"global\",        \"descriptorName\": \"foreign_exchange-vanilla-options\"    } }  Example of Error response:  Missing argument: {    \"error\": {        \"code\": 70,        \"message\": \"Missing argument: need either descriptor name or uid to get validation rule\"    } }  Resource not found : {    \"error\": {        \"code\": 70,        \"message\": \"Rule [fx_fwd] not found, details: [fx_fwd] of service [VALIDATIONRULESET] does not exist in namespace [global]\"    } }
     * @param {module:model/TitaniumGetDefinition} body 
     * @param {module:api/ValidatorServiceApi~validatorServiceGetValidationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumGetValidationRuleResponse}
     */
    validatorServiceGetValidationRule(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling validatorServiceGetValidationRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumGetValidationRuleResponse;
      return this.apiClient.callApi(
        '/api/v1/validation/rule/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validatorServiceGetValidationRuleVersion operation.
     * @callback module:api/ValidatorServiceApi~validatorServiceGetValidationRuleVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumGetValidationRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This is a method that allows both back office users and regular users to retrieve a specific version of a ruleset given the descriptor name and version ID. The ruleset is used for validation purposes and contains criteria and rules for validating data submissions. Back office users can retrieve a particular version of a ruleset from any scope, while participant users can only retrieve a version of a ruleset from either the global scope or their own scope.
     * Example of Request: GET /api/v1/validation/rule/version/fx_fwd_May04/teTYb9Fs_lIOoPQJukM6dY3aJdiMqT-SdBPdvYfJAjk=  Example of Response: {    \"data\": {        \"uid\": \"\",        \"definition\": {            \"descriptorName\": \"foreign_exchange-vanilla-options\",            \"criteria\": [                {                    \"name\": \"FX-V-FXO: Option Instrument Parameter: Forward Points\",                    \"description\": \"This criteria element contains validation rules that will be applied to all fx-vanilla-options data submission rows where option_instrument_parameter equals \\\"Forward Points\\\".\",                    \"rule\": \"[\\\"foreign_exchange-vanilla-options.option_instrument_parameter\\\",\\\"$eq_case_insensitive\\\",\\\"Forward Points\\\"]\",                    \"tags\": [                        \"forward points\"                    ],                    \"metadata\": [],                    \"validations\": [                        {                            \"name\": \"FX-V-FXO: Forward Points: Forward Conversion Factor: Exiting Value Check\",                            \"description\": \"Compare the fwrd_conversion_factor for a given underlying against the expected values.\",                            \"rule\": \"[ { \\\"$lut_name\\\": \\\"conversion_factor\\\", \\\"$get\\\": [ \\\"foreign_exchange-vanilla-options.underlying\\\" ] }, \\\"$eq\\\", \\\"foreign_exchange-vanilla-options.fwrd_conversion_factor\\\" ]\",                            \"ruleType\": \"INPUT_DATA\",                            \"severity\": 1,                            \"tags\": [],                            \"error\": {                                \"message\": \"[%s] is not a conversion factor used in consensus. Please update the conversion factor for this underlying -- [%s].\",                                \"messageArgs\": [                                    \"foreign_exchange-vanilla-options.fwrd_conversion_factor\",                                    \"foreign_exchange-vanilla-options.underlying\"                                ]                            },                            \"filter\": \"\"                        }                    ]                }            ]        },        \"scope\": \"global\",        \"descriptorName\": \"foreign_exchange-vanilla-options\"    } }  Example of Error response: Resource not found: {    \"error\": {        \"code\": 70,        \"message\": \"Failed to get rule [fx_fwd_May04], details: MetaData entity not found: name [fx_fwd_May04] version: [teTYb9Fs_lIOoPQJukM6dY3aJdiMqT-SdBPdvYfJAjk] in namespace: [global]\"    } }
     * @param {String} descriptorName 
     * @param {String} versionId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {String} opts.scope 
     * @param {module:api/ValidatorServiceApi~validatorServiceGetValidationRuleVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumGetValidationRuleResponse}
     */
    validatorServiceGetValidationRuleVersion(descriptorName, versionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'descriptorName' is set
      if (descriptorName === undefined || descriptorName === null) {
        throw new Error("Missing the required parameter 'descriptorName' when calling validatorServiceGetValidationRuleVersion");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling validatorServiceGetValidationRuleVersion");
      }

      let pathParams = {
        'descriptorName': descriptorName,
        'versionId': versionId
      };
      let queryParams = {
        'name': opts['name'],
        'scope': opts['scope']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumGetValidationRuleResponse;
      return this.apiClient.callApi(
        '/api/v1/validation/rule/version/{descriptorName}/{versionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validatorServiceListGeneratedValidationRuleVersions operation.
     * @callback module:api/ValidatorServiceApi~validatorServiceListGeneratedValidationRuleVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumListVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListGeneratedValidationRuleVersions method returns a list of generated ruleset version IDs along with their creation timestamps. The request requires a descriptor name. If the requested ruleset is not found, an error response is returned.
     * Example of Request: {  \"descriptor_name\": \"fx_fwd\" }   Example of Response: {    \"data\": {        \"versions\": [            {                \"versionId\": \"teTYb9Fs_lIOoPQJukM6dY3aJdiMqT-SdBPdvYfJAjk=\",                \"createdAt\": \"2022-05-04 16:20:58.0\"            },            {                \"versionId\": \"mwpGZcWNc2zFgweB5rcNmAbcxqekM_zUCdpVrl_V6BM=\",                \"createdAt\": \"2022-05-04 16:17:19.0\"            },            {                \"versionId\": \"6pfCXN2rFnIAMoDHy7VIFh6HmoyDu3njXkpwzeTp2nc=\",                \"createdAt\": \"2022-05-04 15:02:00.0\"            }        ]    } }  Example of Error response: Resource not found: {    \"error\": {        \"code\": 70,        \"message\": \"Failed to get rule [fx_fwd] versions, details: Rule [fx_fwd] not found\"    } }
     * @param {module:model/TitaniumGetDefinition} body 
     * @param {module:api/ValidatorServiceApi~validatorServiceListGeneratedValidationRuleVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumListVersionResponse}
     */
    validatorServiceListGeneratedValidationRuleVersions(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling validatorServiceListGeneratedValidationRuleVersions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumListVersionResponse;
      return this.apiClient.callApi(
        '/api/v1/validation/rule/generated/versions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validatorServiceListValidationRuleVersions operation.
     * @callback module:api/ValidatorServiceApi~validatorServiceListValidationRuleVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumListVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListValidationRuleVersions method is used to retrieve a list of versions for a given validation rule. Both back office users and participant users can retrieve versions of validation rulesets, but the scope will depend on the user. The request must specify the descriptor name for the validation rule. The response will include a list of versions and their created timestamp. If the requested rule is not found, an error response will be returned.
     * Example of Request: {  \"descriptor_name\": \"fx_fwd\" }  Example of Response: {    \"data\": {        \"versions\": [            {                \"versionId\": \"teTYb9Fs_lIOoPQJukM6dY3aJdiMqT-SdBPdvYfJAjk=\",                \"createdAt\": \"2022-05-04 16:20:58.0\"            },            {                \"versionId\": \"mwpGZcWNc2zFgweB5rcNmAbcxqekM_zUCdpVrl_V6BM=\",                \"createdAt\": \"2022-05-04 16:17:19.0\"            },            {                \"versionId\": \"6pfCXN2rFnIAMoDHy7VIFh6HmoyDu3njXkpwzeTp2nc=\",                \"createdAt\": \"2022-05-04 15:02:00.0\"            }        ]    } }  Example of Error response: Resource not found: {    \"error\": {        \"code\": 70,        \"message\": \"Failed to get rule [fx_fwd] versions, details: Rule [fx_fwd_validation] not found\"    } }
     * @param {module:model/TitaniumGetDefinition} body 
     * @param {module:api/ValidatorServiceApi~validatorServiceListValidationRuleVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumListVersionResponse}
     */
    validatorServiceListValidationRuleVersions(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling validatorServiceListValidationRuleVersions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumListVersionResponse;
      return this.apiClient.callApi(
        '/api/v1/validation/rule/versions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validatorServiceListValidationRules operation.
     * @callback module:api/ValidatorServiceApi~validatorServiceListValidationRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumListRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListValidationRules method is used to retrieve a list of validation rule names. Both back office users and participant users can retrieve validation rulesets, but the scope and authorization will depend on the user. The default scope is used if no scope is specified in the request. The request may include an optional filter and orderBy parameter to refine the search results. Pagination is also supported. The response will include a list of rule names matching the filter criteria.
     * Example of Request: {  \"scope\": \"global\",  \"filter\": \".*exchange.*\",  \"orderBy\": {   \"order\": \"DESC\"  } }  Example of Response: {    \"data\": {        \"results\": [            {                \"uid\": \"\",                \"descriptor_name\": \"foreign_exchange-vanilla-options\"            },            {                \"uid\": \"\",                \"descriptor_name\": \"foreign_exchange-vanilla-forwards\"            },            {                \"uid\": \"\",                \"descriptor_name\": \"foreign_exchange-exotics-tarfs\"            }        ]    } }  Example of Request with pagination: {  \"scope\": \"global\",  \"filter\": \".*exchange.*\",  \"orderBy\": {   \"order\": \"DESC\"  },  \"limit\": {   \"value\": 2  },  \"offset\": 1 }  Example of Response: {    \"data\": {        \"results\": [            {                \"uid\": \"\",                \"descriptor_name\": \"foreign_exchange-vanilla-forwards\"            },            {                \"uid\": \"\",                \"descriptor_name\": \"foreign_exchange-exotics-tarfs\"            }        ]    } }  Example of Error response: not ‘global’ scope: {    \"error\": {        \"code\": 70,        \"message\": \"Invalid argument: only support 'global' scope\"    } }  Invalid filter/regex: {    \"error\": {        \"code\": 70,        \"message\": \"Failed to list rules: Dangling meta character '*' near index 0\\n*May*\\n^\"    } }
     * @param {module:model/TitaniumListRequest} body 
     * @param {module:api/ValidatorServiceApi~validatorServiceListValidationRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumListRuleResponse}
     */
    validatorServiceListValidationRules(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling validatorServiceListValidationRules");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumListRuleResponse;
      return this.apiClient.callApi(
        '/api/v1/validation/rule/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validatorServiceRdlCheck operation.
     * @callback module:api/ValidatorServiceApi~validatorServiceRdlCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RdlCheck method checks the syntax of a given RDL (Rule Description Language) expression. It takes a RdlCheckRequest message as input and returns a MessageResponse message.
     * Example of Request: {  \"rdl\": \"[\\\"a\\\", \\\"$eq\\\", \\\"b\\\"\" }  Example of Response: {    \"data\": {        \"message\": \"success\"    } }  Example of Error response: Resource not found: {    \"error\": {        \"code\": 69,        \"message\": \"rdl [[\\\"a\\\", \\\"$eq\\\", \\\"b\\\"] cannot be parsed. Error: line 1:16 missing ']' at '<EOF>'\"    } }
     * @param {module:model/TitaniumRdlCheckRequest} body 
     * @param {module:api/ValidatorServiceApi~validatorServiceRdlCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumMessageResponse}
     */
    validatorServiceRdlCheck(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling validatorServiceRdlCheck");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumMessageResponse;
      return this.apiClient.callApi(
        '/api/v1/validation/rule/check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
