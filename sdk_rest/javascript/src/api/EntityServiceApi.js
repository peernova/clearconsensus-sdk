/**
 * clearconsensus-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntityServiceUpdateRequest from '../model/EntityServiceUpdateRequest';
import ProtoEntitiesResponse from '../model/ProtoEntitiesResponse';
import ProtoEntityDto from '../model/ProtoEntityDto';
import ProtoEntityResponse from '../model/ProtoEntityResponse';
import ProtoSearchCriteria from '../model/ProtoSearchCriteria';
import ProtoTableResponse from '../model/ProtoTableResponse';
import RpcStatus from '../model/RpcStatus';

/**
* EntityService service.
* @module api/EntityServiceApi
* @version 1.0.0
*/
export default class EntityServiceApi {

    /**
    * Constructs a new EntityServiceApi. 
    * @alias module:api/EntityServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the entityServiceCreate operation.
     * @callback module:api/EntityServiceApi~entityServiceCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtoEntityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProtoEntityDto} body 
     * @param {module:api/EntityServiceApi~entityServiceCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtoEntityResponse}
     */
    entityServiceCreate(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling entityServiceCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProtoEntityResponse;
      return this.apiClient.callApi(
        '/api/v1/user-management/entities/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the entityServiceFind operation.
     * @callback module:api/EntityServiceApi~entityServiceFindCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtoTableResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProtoSearchCriteria} body 
     * @param {module:api/EntityServiceApi~entityServiceFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtoTableResponse}
     */
    entityServiceFind(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling entityServiceFind");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProtoTableResponse;
      return this.apiClient.callApi(
        '/api/v1/user-management/entities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the entityServiceGetAllEnabledOnly operation.
     * @callback module:api/EntityServiceApi~entityServiceGetAllEnabledOnlyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtoEntitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/EntityServiceApi~entityServiceGetAllEnabledOnlyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtoEntitiesResponse}
     */
    entityServiceGetAllEnabledOnly(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProtoEntitiesResponse;
      return this.apiClient.callApi(
        '/api/v1/user-management/entities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the entityServiceGetById operation.
     * @callback module:api/EntityServiceApi~entityServiceGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtoEntityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/EntityServiceApi~entityServiceGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtoEntityResponse}
     */
    entityServiceGetById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling entityServiceGetById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProtoEntityResponse;
      return this.apiClient.callApi(
        '/api/v1/user-management/entities/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the entityServiceUpdate operation.
     * @callback module:api/EntityServiceApi~entityServiceUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProtoEntityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/EntityServiceUpdateRequest} body 
     * @param {module:api/EntityServiceApi~entityServiceUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProtoEntityResponse}
     */
    entityServiceUpdate(id, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling entityServiceUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling entityServiceUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProtoEntityResponse;
      return this.apiClient.callApi(
        '/api/v1/user-management/entities/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
