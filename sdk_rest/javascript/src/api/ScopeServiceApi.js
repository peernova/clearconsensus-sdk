/**
 * clearconsensus-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RpcStatus from '../model/RpcStatus';
import TitaniumAcknowledgeResponse from '../model/TitaniumAcknowledgeResponse';
import TitaniumScopeExistResponse from '../model/TitaniumScopeExistResponse';
import TitaniumScopeIdentifier from '../model/TitaniumScopeIdentifier';
import TitaniumScopeListResponse from '../model/TitaniumScopeListResponse';

/**
* ScopeService service.
* @module api/ScopeServiceApi
* @version 1.0.0
*/
export default class ScopeServiceApi {

    /**
    * Constructs a new ScopeServiceApi. 
    * @alias module:api/ScopeServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the scopeServiceAddScope operation.
     * @callback module:api/ScopeServiceApi~scopeServiceAddScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumAcknowledgeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AddScope creates scope in the system.
     * @param {module:model/TitaniumScopeIdentifier} body 
     * @param {module:api/ScopeServiceApi~scopeServiceAddScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumAcknowledgeResponse}
     */
    scopeServiceAddScope(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling scopeServiceAddScope");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumAcknowledgeResponse;
      return this.apiClient.callApi(
        '/api/v1/scope/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scopeServiceExistScope operation.
     * @callback module:api/ScopeServiceApi~scopeServiceExistScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumScopeExistResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ExistScope return boolean value about existence of scope according to request.
     * @param {module:model/TitaniumScopeIdentifier} body 
     * @param {module:api/ScopeServiceApi~scopeServiceExistScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumScopeExistResponse}
     */
    scopeServiceExistScope(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling scopeServiceExistScope");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumScopeExistResponse;
      return this.apiClient.callApi(
        '/api/v1/scope/exist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scopeServiceListScope operation.
     * @callback module:api/ScopeServiceApi~scopeServiceListScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumScopeListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListScope returns list of all existing scopes.
     * @param {Object.<String, Object>} body 
     * @param {module:api/ScopeServiceApi~scopeServiceListScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumScopeListResponse}
     */
    scopeServiceListScope(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling scopeServiceListScope");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumScopeListResponse;
      return this.apiClient.callApi(
        '/api/v1/scope/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
