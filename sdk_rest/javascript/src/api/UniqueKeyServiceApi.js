/**
 * clearconsensus-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RpcStatus from '../model/RpcStatus';
import TitaniumAcknowledgeResponse from '../model/TitaniumAcknowledgeResponse';
import TitaniumGetDefinition from '../model/TitaniumGetDefinition';
import TitaniumListRequest from '../model/TitaniumListRequest';
import TitaniumListUniqueKeysResponse from '../model/TitaniumListUniqueKeysResponse';
import TitaniumListVersionResponse from '../model/TitaniumListVersionResponse';
import TitaniumUniqueKeyDefinition from '../model/TitaniumUniqueKeyDefinition';
import TitaniumUniqueKeyDefinitionResponse from '../model/TitaniumUniqueKeyDefinitionResponse';

/**
* UniqueKeyService service.
* @module api/UniqueKeyServiceApi
* @version 1.0.0
*/
export default class UniqueKeyServiceApi {

    /**
    * Constructs a new UniqueKeyServiceApi. 
    * @alias module:api/UniqueKeyServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the uniqueKeyServiceAddUniqueKey operation.
     * @callback module:api/UniqueKeyServiceApi~uniqueKeyServiceAddUniqueKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumAcknowledgeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AddUniqueKey is used to add a new unique key definition to the system.
     * Example of request : {   \"name\":\"foreign_exchange-vanilla-forwards\",   \"scope\":\"global\",   \"uniqueKey\":[      \"snap_date\",      \"asset\",      \"service\",      \"client\",      \"service\",      \"tenor\",      \"snap_time\",      \"instrument_type\",      \"spot_reference_price\",      \"mid_fwrd_outright\",      \"mid_fwrd_points\",      \"onshore_offshore_curr_1\",      \"onshore_offshore_curr_2\"   ] }
     * @param {module:model/TitaniumUniqueKeyDefinition} body 
     * @param {module:api/UniqueKeyServiceApi~uniqueKeyServiceAddUniqueKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumAcknowledgeResponse}
     */
    uniqueKeyServiceAddUniqueKey(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uniqueKeyServiceAddUniqueKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumAcknowledgeResponse;
      return this.apiClient.callApi(
        '/api/v1/uniquekey/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniqueKeyServiceGetUniqueKey operation.
     * @callback module:api/UniqueKeyServiceApi~uniqueKeyServiceGetUniqueKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumUniqueKeyDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetUniqueKey is used to retrieve a unique key definition by its scope and name. Request: {   \"identifier\":{      \"name\":\"foreign_exchange-vanilla-forwards\"   },   \"scope\":\"global\" }
     * Response: {    \"data\": {        \"name\": \"foreign_exchange-vanilla-forwards\",        \"scope\": \"global\",        \"uniqueKey\": [            \"snap_date\",            \"asset\",            \"service\",            \"client\",            \"service\",            \"tenor\",            \"snap_time\",            \"instrument_type\",            \"spot_reference_price\",            \"mid_fwrd_outright\",            \"mid_fwrd_points\",            \"onshore_offshore_curr_1\",            \"onshore_offshore_curr_2\"        ],        \"orderBy\": [            \"__input_row_num\"        ],        \"order\": \"ASC\"    } }
     * @param {module:model/TitaniumGetDefinition} body 
     * @param {module:api/UniqueKeyServiceApi~uniqueKeyServiceGetUniqueKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumUniqueKeyDefinitionResponse}
     */
    uniqueKeyServiceGetUniqueKey(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uniqueKeyServiceGetUniqueKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumUniqueKeyDefinitionResponse;
      return this.apiClient.callApi(
        '/api/v1/uniquekey/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniqueKeyServiceGetUniqueKeyVersion operation.
     * @callback module:api/UniqueKeyServiceApi~uniqueKeyServiceGetUniqueKeyVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumUniqueKeyDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetUniqueKeyVersion is used to retrieve a specific version of a unique key definition by its scope, name, and version ID. Response: {    \"data\": {        \"name\": \"foreign_exchange-vanilla-forwards\",        \"scope\": \"global\",        \"uniqueKey\": [            \"asset\",            \"service\",            \"sub-asset\",            \"instrument_type\",            \"tenor\",            \"snap_date\",            \"snap_time\",            \"curr_1\",            \"curr_2\",            \"onshore_offshore_curr_1\",            \"onshore_offshore_curr_2\"        ],        \"orderBy\": [            \"__input_row_num\"        ],        \"order\": \"ASC\"    } }
     * @param {String} scope 
     * @param {String} name 
     * @param {String} versionId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.descriptorName 
     * @param {module:api/UniqueKeyServiceApi~uniqueKeyServiceGetUniqueKeyVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumUniqueKeyDefinitionResponse}
     */
    uniqueKeyServiceGetUniqueKeyVersion(scope, name, versionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling uniqueKeyServiceGetUniqueKeyVersion");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling uniqueKeyServiceGetUniqueKeyVersion");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling uniqueKeyServiceGetUniqueKeyVersion");
      }

      let pathParams = {
        'scope': scope,
        'name': name,
        'versionId': versionId
      };
      let queryParams = {
        'descriptorName': opts['descriptorName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumUniqueKeyDefinitionResponse;
      return this.apiClient.callApi(
        '/api/v1/uniquekey/version/{scope}/{name}/{versionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniqueKeyServiceListUniqueKeyVersions operation.
     * @callback module:api/UniqueKeyServiceApi~uniqueKeyServiceListUniqueKeyVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumListVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListUniqueKeyVersions is used to retrieve a list of all versions of a specific unique key definition by its scope and name. Request: {   \"scope\":\"global\",   \"identifier\": {        \"name\": \"foreign_exchange-vanilla-forwards\"    } }
     * Response: {    \"data\": {        \"versions\": [            {                \"versionId\":\"0bmhRR-7hISwkb_H2MvIqafpJCAoy3YgEySZjntZF9o=\",                \"createdAt\": \"2022-08-22 15:23:44.0\"            }        ]    } }
     * @param {module:model/TitaniumGetDefinition} body 
     * @param {module:api/UniqueKeyServiceApi~uniqueKeyServiceListUniqueKeyVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumListVersionResponse}
     */
    uniqueKeyServiceListUniqueKeyVersions(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uniqueKeyServiceListUniqueKeyVersions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumListVersionResponse;
      return this.apiClient.callApi(
        '/api/v1/uniquekey/versions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniqueKeyServiceListUniqueKeys operation.
     * @callback module:api/UniqueKeyServiceApi~uniqueKeyServiceListUniqueKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumListUniqueKeysResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ListUniqueKeys is used to retrieve a list of all unique key definitions in the system. Request: {   \"scope\":\"global\" }
     * Response: {    \"data\": {        \"results\": [            {                \"name\": \"foreign_exchange-vanilla-forwards\",                \"scope\": \"global\",                \"uniqueKey\": [                    \"asset\",                    \"service\",                    \"sub-asset\",                    \"instrument_type\",                    \"tenor\",                    \"snap_date\",                    \"snap_time\",                    \"curr_1\",                    \"curr_2\",                    \"onshore_offshore_curr_1\",                    \"onshore_offshore_curr_2\"                ],                \"orderBy\": [                    \"__input_row_num\"                ],                \"order\": \"ASC\"            },            {                \"name\": \"foreign_exchange-vanilla-options\",                \"scope\": \"global\",                \"uniqueKey\": [                    \"snap_date\",                    \"asset\",                    \"service\",                    \"snap_time\",                    \"instrument_type\",                    \"option_instrument_parameter\",                    \"exercise_style\",                    \"option_execution_cut_time\",                    \"curr_1\",                    \"curr_2\",                    \"tenor\",                    \"delta\",                    \"vol_format\",                    \"instrument_convention\",                    \"delta_convention\",                    \"premium_currency\",                    \"settlement_convention\"                ],                \"orderBy\": [                    \"__input_row_num\"                ],                \"order\": \"ASC\"            }        ]    } }
     * @param {module:model/TitaniumListRequest} body 
     * @param {module:api/UniqueKeyServiceApi~uniqueKeyServiceListUniqueKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumListUniqueKeysResponse}
     */
    uniqueKeyServiceListUniqueKeys(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uniqueKeyServiceListUniqueKeys");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumListUniqueKeysResponse;
      return this.apiClient.callApi(
        '/api/v1/uniquekey/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
