/**
 * clearconsensus-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RpcStatus from '../model/RpcStatus';
import TitaniumAcknowledgeResponse from '../model/TitaniumAcknowledgeResponse';
import TitaniumAddWorkflowDefinitionRequest from '../model/TitaniumAddWorkflowDefinitionRequest';
import TitaniumEnableDisableRequest from '../model/TitaniumEnableDisableRequest';
import TitaniumGetDefinition from '../model/TitaniumGetDefinition';
import TitaniumGetWorkflowActionResponse from '../model/TitaniumGetWorkflowActionResponse';
import TitaniumListRequest from '../model/TitaniumListRequest';
import TitaniumReprocessWorkflowRequest from '../model/TitaniumReprocessWorkflowRequest';
import TitaniumRunWorkflowRequest from '../model/TitaniumRunWorkflowRequest';
import TitaniumRunWorkflowResponse from '../model/TitaniumRunWorkflowResponse';
import TitaniumWorkflowDefinitionResponse from '../model/TitaniumWorkflowDefinitionResponse';
import TitaniumWorkflowList from '../model/TitaniumWorkflowList';

/**
* WorkflowService service.
* @module api/WorkflowServiceApi
* @version 1.0.0
*/
export default class WorkflowServiceApi {

    /**
    * Constructs a new WorkflowServiceApi. 
    * @alias module:api/WorkflowServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the workflowServiceAddWorkflow operation.
     * @callback module:api/WorkflowServiceApi~workflowServiceAddWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumAcknowledgeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/TitaniumAddWorkflowDefinitionRequest} body 
     * @param {module:api/WorkflowServiceApi~workflowServiceAddWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumAcknowledgeResponse}
     */
    workflowServiceAddWorkflow(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowServiceAddWorkflow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumAcknowledgeResponse;
      return this.apiClient.callApi(
        '/api/v1/workflow/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowServiceDisableWorkflow operation.
     * @callback module:api/WorkflowServiceApi~workflowServiceDisableWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumAcknowledgeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/TitaniumEnableDisableRequest} body 
     * @param {module:api/WorkflowServiceApi~workflowServiceDisableWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumAcknowledgeResponse}
     */
    workflowServiceDisableWorkflow(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowServiceDisableWorkflow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumAcknowledgeResponse;
      return this.apiClient.callApi(
        '/api/v1/workflow/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowServiceEnableWorkflow operation.
     * @callback module:api/WorkflowServiceApi~workflowServiceEnableWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumAcknowledgeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/TitaniumEnableDisableRequest} body 
     * @param {module:api/WorkflowServiceApi~workflowServiceEnableWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumAcknowledgeResponse}
     */
    workflowServiceEnableWorkflow(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowServiceEnableWorkflow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumAcknowledgeResponse;
      return this.apiClient.callApi(
        '/api/v1/workflow/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowServiceGetWorkflow operation.
     * @callback module:api/WorkflowServiceApi~workflowServiceGetWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumWorkflowDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/TitaniumGetDefinition} body 
     * @param {module:api/WorkflowServiceApi~workflowServiceGetWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumWorkflowDefinitionResponse}
     */
    workflowServiceGetWorkflow(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowServiceGetWorkflow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumWorkflowDefinitionResponse;
      return this.apiClient.callApi(
        '/api/v1/workflow/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowServiceGetWorkflowAction operation.
     * @callback module:api/WorkflowServiceApi~workflowServiceGetWorkflowActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumGetWorkflowActionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} name 
     * @param {module:api/WorkflowServiceApi~workflowServiceGetWorkflowActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumGetWorkflowActionResponse}
     */
    workflowServiceGetWorkflowAction(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling workflowServiceGetWorkflowAction");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumGetWorkflowActionResponse;
      return this.apiClient.callApi(
        '/api/v1/workflow/action/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowServiceListWorkflowActions operation.
     * @callback module:api/WorkflowServiceApi~workflowServiceListWorkflowActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumWorkflowList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/TitaniumListRequest} body 
     * @param {module:api/WorkflowServiceApi~workflowServiceListWorkflowActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumWorkflowList}
     */
    workflowServiceListWorkflowActions(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowServiceListWorkflowActions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumWorkflowList;
      return this.apiClient.callApi(
        '/api/v1/workflow/action/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowServiceListWorkflows operation.
     * @callback module:api/WorkflowServiceApi~workflowServiceListWorkflowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumWorkflowList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/TitaniumListRequest} body 
     * @param {module:api/WorkflowServiceApi~workflowServiceListWorkflowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumWorkflowList}
     */
    workflowServiceListWorkflows(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowServiceListWorkflows");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumWorkflowList;
      return this.apiClient.callApi(
        '/api/v1/workflow/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowServiceReprocessWorkflow operation.
     * @callback module:api/WorkflowServiceApi~workflowServiceReprocessWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumRunWorkflowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/TitaniumReprocessWorkflowRequest} body 
     * @param {module:api/WorkflowServiceApi~workflowServiceReprocessWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumRunWorkflowResponse}
     */
    workflowServiceReprocessWorkflow(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowServiceReprocessWorkflow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumRunWorkflowResponse;
      return this.apiClient.callApi(
        '/api/v1/workflow/reprocess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowServiceRunWorkflow operation.
     * @callback module:api/WorkflowServiceApi~workflowServiceRunWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TitaniumRunWorkflowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/TitaniumRunWorkflowRequest} body 
     * @param {module:api/WorkflowServiceApi~workflowServiceRunWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TitaniumRunWorkflowResponse}
     */
    workflowServiceRunWorkflow(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowServiceRunWorkflow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TitaniumRunWorkflowResponse;
      return this.apiClient.callApi(
        '/api/v1/workflow/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
