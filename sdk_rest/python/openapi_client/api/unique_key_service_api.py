"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.rpc_status import RpcStatus
from openapi_client.model.titanium_acknowledge_response import TitaniumAcknowledgeResponse
from openapi_client.model.titanium_get_definition import TitaniumGetDefinition
from openapi_client.model.titanium_list_request import TitaniumListRequest
from openapi_client.model.titanium_list_unique_keys_response import TitaniumListUniqueKeysResponse
from openapi_client.model.titanium_list_version_response import TitaniumListVersionResponse
from openapi_client.model.titanium_unique_key_definition import TitaniumUniqueKeyDefinition
from openapi_client.model.titanium_unique_key_definition_response import TitaniumUniqueKeyDefinitionResponse


class UniqueKeyServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.unique_key_service_add_unique_key_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumAcknowledgeResponse,),
                'auth': [],
                'endpoint_path': '/api/v1/uniquekey/add',
                'operation_id': 'unique_key_service_add_unique_key',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (TitaniumUniqueKeyDefinition,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.unique_key_service_get_unique_key_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumUniqueKeyDefinitionResponse,),
                'auth': [],
                'endpoint_path': '/api/v1/uniquekey/get',
                'operation_id': 'unique_key_service_get_unique_key',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (TitaniumGetDefinition,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.unique_key_service_get_unique_key_version_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumUniqueKeyDefinitionResponse,),
                'auth': [],
                'endpoint_path': '/api/v1/uniquekey/version/{scope}/{name}/{versionId}',
                'operation_id': 'unique_key_service_get_unique_key_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'scope',
                    'name',
                    'version_id',
                    'descriptor_name',
                ],
                'required': [
                    'scope',
                    'name',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'scope':
                        (str,),
                    'name':
                        (str,),
                    'version_id':
                        (str,),
                    'descriptor_name':
                        (str,),
                },
                'attribute_map': {
                    'scope': 'scope',
                    'name': 'name',
                    'version_id': 'versionId',
                    'descriptor_name': 'descriptorName',
                },
                'location_map': {
                    'scope': 'path',
                    'name': 'path',
                    'version_id': 'path',
                    'descriptor_name': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.unique_key_service_list_unique_key_versions_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumListVersionResponse,),
                'auth': [],
                'endpoint_path': '/api/v1/uniquekey/versions',
                'operation_id': 'unique_key_service_list_unique_key_versions',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (TitaniumGetDefinition,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.unique_key_service_list_unique_keys_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumListUniqueKeysResponse,),
                'auth': [],
                'endpoint_path': '/api/v1/uniquekey/list',
                'operation_id': 'unique_key_service_list_unique_keys',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (TitaniumListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def unique_key_service_add_unique_key(
        self,
        body,
        **kwargs
    ):
        """AddUniqueKey is used to add a new unique key definition to the system.  # noqa: E501

        Example of request : {   \"name\":\"foreign_exchange-vanilla-forwards\",   \"scope\":\"global\",   \"uniqueKey\":[      \"snap_date\",      \"asset\",      \"service\",      \"client\",      \"service\",      \"tenor\",      \"snap_time\",      \"instrument_type\",      \"spot_reference_price\",      \"mid_fwrd_outright\",      \"mid_fwrd_points\",      \"onshore_offshore_curr_1\",      \"onshore_offshore_curr_2\"   ] }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unique_key_service_add_unique_key(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (TitaniumUniqueKeyDefinition):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumAcknowledgeResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.unique_key_service_add_unique_key_endpoint.call_with_http_info(**kwargs)

    def unique_key_service_get_unique_key(
        self,
        body,
        **kwargs
    ):
        """GetUniqueKey is used to retrieve a unique key definition by its scope and name. Request: {   \"identifier\":{      \"name\":\"foreign_exchange-vanilla-forwards\"   },   \"scope\":\"global\" }  # noqa: E501

        Response: {    \"data\": {        \"name\": \"foreign_exchange-vanilla-forwards\",        \"scope\": \"global\",        \"uniqueKey\": [            \"snap_date\",            \"asset\",            \"service\",            \"client\",            \"service\",            \"tenor\",            \"snap_time\",            \"instrument_type\",            \"spot_reference_price\",            \"mid_fwrd_outright\",            \"mid_fwrd_points\",            \"onshore_offshore_curr_1\",            \"onshore_offshore_curr_2\"        ],        \"orderBy\": [            \"__input_row_num\"        ],        \"order\": \"ASC\"    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unique_key_service_get_unique_key(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (TitaniumGetDefinition):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumUniqueKeyDefinitionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.unique_key_service_get_unique_key_endpoint.call_with_http_info(**kwargs)

    def unique_key_service_get_unique_key_version(
        self,
        scope,
        name,
        version_id,
        **kwargs
    ):
        """GetUniqueKeyVersion is used to retrieve a specific version of a unique key definition by its scope, name, and version ID. Response: {    \"data\": {        \"name\": \"foreign_exchange-vanilla-forwards\",        \"scope\": \"global\",        \"uniqueKey\": [            \"asset\",            \"service\",            \"sub-asset\",            \"instrument_type\",            \"tenor\",            \"snap_date\",            \"snap_time\",            \"curr_1\",            \"curr_2\",            \"onshore_offshore_curr_1\",            \"onshore_offshore_curr_2\"        ],        \"orderBy\": [            \"__input_row_num\"        ],        \"order\": \"ASC\"    } }  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unique_key_service_get_unique_key_version(scope, name, version_id, async_req=True)
        >>> result = thread.get()

        Args:
            scope (str):
            name (str):
            version_id (str):

        Keyword Args:
            descriptor_name (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumUniqueKeyDefinitionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['scope'] = \
            scope
        kwargs['name'] = \
            name
        kwargs['version_id'] = \
            version_id
        return self.unique_key_service_get_unique_key_version_endpoint.call_with_http_info(**kwargs)

    def unique_key_service_list_unique_key_versions(
        self,
        body,
        **kwargs
    ):
        """ListUniqueKeyVersions is used to retrieve a list of all versions of a specific unique key definition by its scope and name. Request: {   \"scope\":\"global\",   \"identifier\": {        \"name\": \"foreign_exchange-vanilla-forwards\"    } }  # noqa: E501

        Response: {    \"data\": {        \"versions\": [            {                \"versionId\":\"0bmhRR-7hISwkb_H2MvIqafpJCAoy3YgEySZjntZF9o=\",                \"createdAt\": \"2022-08-22 15:23:44.0\"            }        ]    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unique_key_service_list_unique_key_versions(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (TitaniumGetDefinition):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumListVersionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.unique_key_service_list_unique_key_versions_endpoint.call_with_http_info(**kwargs)

    def unique_key_service_list_unique_keys(
        self,
        body,
        **kwargs
    ):
        """ListUniqueKeys is used to retrieve a list of all unique key definitions in the system. Request: {   \"scope\":\"global\" }  # noqa: E501

        Response: {    \"data\": {        \"results\": [            {                \"name\": \"foreign_exchange-vanilla-forwards\",                \"scope\": \"global\",                \"uniqueKey\": [                    \"asset\",                    \"service\",                    \"sub-asset\",                    \"instrument_type\",                    \"tenor\",                    \"snap_date\",                    \"snap_time\",                    \"curr_1\",                    \"curr_2\",                    \"onshore_offshore_curr_1\",                    \"onshore_offshore_curr_2\"                ],                \"orderBy\": [                    \"__input_row_num\"                ],                \"order\": \"ASC\"            },            {                \"name\": \"foreign_exchange-vanilla-options\",                \"scope\": \"global\",                \"uniqueKey\": [                    \"snap_date\",                    \"asset\",                    \"service\",                    \"snap_time\",                    \"instrument_type\",                    \"option_instrument_parameter\",                    \"exercise_style\",                    \"option_execution_cut_time\",                    \"curr_1\",                    \"curr_2\",                    \"tenor\",                    \"delta\",                    \"vol_format\",                    \"instrument_convention\",                    \"delta_convention\",                    \"premium_currency\",                    \"settlement_convention\"                ],                \"orderBy\": [                    \"__input_row_num\"                ],                \"order\": \"ASC\"            }        ]    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unique_key_service_list_unique_keys(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (TitaniumListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumListUniqueKeysResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.unique_key_service_list_unique_keys_endpoint.call_with_http_info(**kwargs)

