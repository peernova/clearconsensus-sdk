"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.rpc_status import RpcStatus
from openapi_client.model.titanium_acknowledge_response import TitaniumAcknowledgeResponse
from openapi_client.model.titanium_descriptor_definition import TitaniumDescriptorDefinition
from openapi_client.model.titanium_descriptor_definition_response import TitaniumDescriptorDefinitionResponse
from openapi_client.model.titanium_descriptor_list import TitaniumDescriptorList
from openapi_client.model.titanium_enable_disable_request import TitaniumEnableDisableRequest
from openapi_client.model.titanium_get_definition import TitaniumGetDefinition
from openapi_client.model.titanium_list_request import TitaniumListRequest
from openapi_client.model.titanium_list_version_response import TitaniumListVersionResponse


class DescriptorServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.descriptor_service_add_descriptor_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumAcknowledgeResponse,),
                'auth': [],
                'endpoint_path': '/api/v1/descriptor/add',
                'operation_id': 'descriptor_service_add_descriptor',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (TitaniumDescriptorDefinition,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.descriptor_service_disable_descriptor_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumAcknowledgeResponse,),
                'auth': [],
                'endpoint_path': '/api/v1/descriptor/disable',
                'operation_id': 'descriptor_service_disable_descriptor',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (TitaniumEnableDisableRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.descriptor_service_enable_descriptor_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumAcknowledgeResponse,),
                'auth': [],
                'endpoint_path': '/api/v1/descriptor/enable',
                'operation_id': 'descriptor_service_enable_descriptor',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (TitaniumEnableDisableRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.descriptor_service_get_descriptor_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumDescriptorDefinitionResponse,),
                'auth': [],
                'endpoint_path': '/api/v1/descriptor/get',
                'operation_id': 'descriptor_service_get_descriptor',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (TitaniumGetDefinition,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.descriptor_service_get_descriptor_version_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumDescriptorDefinitionResponse,),
                'auth': [],
                'endpoint_path': '/api/v1/descriptor/version/{scope}/{name}/{versionId}',
                'operation_id': 'descriptor_service_get_descriptor_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'scope',
                    'name',
                    'version_id',
                    'descriptor_name',
                ],
                'required': [
                    'scope',
                    'name',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'scope':
                        (str,),
                    'name':
                        (str,),
                    'version_id':
                        (str,),
                    'descriptor_name':
                        (str,),
                },
                'attribute_map': {
                    'scope': 'scope',
                    'name': 'name',
                    'version_id': 'versionId',
                    'descriptor_name': 'descriptorName',
                },
                'location_map': {
                    'scope': 'path',
                    'name': 'path',
                    'version_id': 'path',
                    'descriptor_name': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.descriptor_service_list_descriptor_versions_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumListVersionResponse,),
                'auth': [],
                'endpoint_path': '/api/v1/descriptor/versions',
                'operation_id': 'descriptor_service_list_descriptor_versions',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (TitaniumGetDefinition,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.descriptor_service_list_descriptors_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumDescriptorList,),
                'auth': [],
                'endpoint_path': '/api/v1/descriptor/list',
                'operation_id': 'descriptor_service_list_descriptors',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (TitaniumListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def descriptor_service_add_descriptor(
        self,
        body,
        **kwargs
    ):
        """AddDescriptor is used to add specific descriptor with specific definition to the system. Regular users can store a descriptor within their own scope, and any attempts to push it to a different scope will be declined. Back office users can store descriptors in any scope, provided that a scope key is provided. The name of the descriptor must match the name of the asset class to be mapped correctly. If a descriptor with the same name already exists, it will be updated.  # noqa: E501

        Example of request for regular user : {   \"name\":\"foreign_exchange-vanilla-forwards\",   \"fields\":[      { [data]=\"typeEnumToDisplayName[cellData]\"v        \"name\":\"submission_date\",         \"nullable\":true,         \"type\":\"string\"      },      {         \"name\":\"submission_asset\",         \"nullable\":true,         \"type\":\"string\"      }   ] }  Example of request for Back Office : {   \"name\":\"foreign_exchange-vanilla-forwards\",   \"scope\": \"global\",   \"fields\":[      {         \"name\":\"snap_date\",         \"alias\":\"snap_date\",         \"type\":\"date\",         \"options\":{            \"format\":\"MM/dd/yy\"         }      },      {         \"name\":\"asset\",         \"alias\":\"asset\",         \"type\":\"string\"      },      {        \"name\": \"sub-asset\",        \"alias\": \"sub-asset\",        \"type\": \"string\"      }   ] }  Example of response : {   \"data\":{      \"uid\":\"98fd0526-cc88-11ec-b784-0fe7a41b45e0\",      \"name\":\"foreign_exchange-vanilla-forwards\"   } }  Example of error response : {   \"error\":{      \"code\":70,      \"message\":\"Can't add descriptor: [com.peernova.api.searchmetadata.metadata.exceptions.MetaDataServiceException: Namespace [bank11] is not valid].\"   } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_add_descriptor(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (TitaniumDescriptorDefinition):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumAcknowledgeResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.descriptor_service_add_descriptor_endpoint.call_with_http_info(**kwargs)

    def descriptor_service_disable_descriptor(
        self,
        body,
        **kwargs
    ):
        """DisableDescriptor is used to disable specific descriptor. Example of response : {    \"data\": {        \"uid\": \"\",        \"name\": \"foreign_exchange-vanilla-forwards\"    } }  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_disable_descriptor(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (TitaniumEnableDisableRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumAcknowledgeResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.descriptor_service_disable_descriptor_endpoint.call_with_http_info(**kwargs)

    def descriptor_service_enable_descriptor(
        self,
        body,
        **kwargs
    ):
        """EnableDescriptor is used to enable specific descriptor.  # noqa: E501

        Example of request : {  \"name\" : \"foreign_exchange-vanilla-forwards\",  \"scope\": \"global\" }  Example of response : {    \"data\": {        \"uid\": \"\",        \"name\": \"foreign_exchange-vanilla-forwards\"    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_enable_descriptor(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (TitaniumEnableDisableRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumAcknowledgeResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.descriptor_service_enable_descriptor_endpoint.call_with_http_info(**kwargs)

    def descriptor_service_get_descriptor(
        self,
        body,
        **kwargs
    ):
        """GetDescriptor is used to get specific descriptor definition based on get definition. Regular users can retrieve only their own descriptors and descriptors associated with asset classes. Back office users can retrieve any of the existing descriptors.  # noqa: E501

        Example of request : {   \"identifier\":{      \"name\":\"foreign_exchange-vanilla-forwards\"   },   \"scope\":\"global\" }  Example of response : {    \"data\": \"{\\\"name\\\":\\\"foreign_exchange-vanilla-forwards\\\",\\\"fields\\\":[{\\\"name\\\":\\\"snap_date\\\",\\\"type\\\":\\\"date\\\",\\\"options\\\":{\\\"format\\\":\\\"MM/dd/yy\\\"},\\\"alias\\\":\\\"snap_date\\\"},{\\\"name\\\":\\\"asset\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"asset\\\"},{\\\"name\\\":\\\"sub-asset\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"sub-asset\\\"},{\\\"name\\\":\\\"service\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"service\\\"},{\\\"name\\\":\\\"snap_time\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"snap_time\\\"},{\\\"name\\\":\\\"curr_1\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"curr_1\\\"},{\\\"name\\\":\\\"curr_2\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"curr_2\\\"},{\\\"name\\\":\\\"onshore_offshore_curr_1\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"onshore_offshore_curr_1\\\"},{\\\"name\\\":\\\"onshore_offshore_curr_2\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"onshore_offshore_curr_2\\\"},{\\\"name\\\":\\\"instrument_type\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"instrument_type\\\"},{\\\"name\\\":\\\"tenor\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"tenor\\\"},{\\\"name\\\":\\\"value_source\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"value_source\\\"},{\\\"name\\\":\\\"fwrd_conversion_factor\\\",\\\"type\\\":\\\"double\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"fwrd_conversion_factor\\\"},{\\\"name\\\":\\\"mid_fwrd_outright\\\",\\\"type\\\":\\\"double\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"mid_fwrd_outright\\\"},{\\\"name\\\":\\\"value_source_ref_id\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"value_source_ref_id\\\"},{\\\"name\\\":\\\"client\\\",\\\"type\\\":\\\"string\\\",\\\"alias\\\":\\\"client\\\"},{\\\"name\\\":\\\"spot_reference_price\\\",\\\"type\\\":\\\"double\\\",\\\"nullable\\\":true,\\\"alias\\\":\\\"spot_reference_price\\\"},{\\\"name\\\":\\\"mid_fwrd_points\\\",\\\"type\\\":\\\"double\\\",\\\"alias\\\":\\\"mid_fwrd_points\\\"}]}\" }  Example of error response : {    \"error\": {        \"code\": 70,        \"message\": \"Can't get descriptor: [[foreign_exchange-vanilla-forwards1] of service [DESCRIPTOR] does not exist in namespace [global]].\"    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_get_descriptor(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (TitaniumGetDefinition):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumDescriptorDefinitionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.descriptor_service_get_descriptor_endpoint.call_with_http_info(**kwargs)

    def descriptor_service_get_descriptor_version(
        self,
        scope,
        name,
        version_id,
        **kwargs
    ):
        """GetDescriptorVersion returns current version of the specific descriptor.  # noqa: E501

        Example of response : { \"data\":\"{\\\"name\\\":\\\"fx_test_for_bank1\\\",\\\"fields\\\":[{\\\"name\\\":\\\"submission_date\\\",\\\"type\\\":\\\"date\\\",\\\"options\\\":{\\\"format\\\":\\\"MM/dd/yyyy\\\"},\\\"alias\\\":\\\"date12\\\"},{\\\"name\\\":\\\"submission_asset\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":true}],\\\"options\\\":{\\\"DEDUPLICATION\\\":{\\\"GROUP_BY\\\":[\\\"submission_date\\\",\\\"submission_asset\\\"]}}}\" }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_get_descriptor_version(scope, name, version_id, async_req=True)
        >>> result = thread.get()

        Args:
            scope (str):
            name (str):
            version_id (str):

        Keyword Args:
            descriptor_name (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumDescriptorDefinitionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['scope'] = \
            scope
        kwargs['name'] = \
            name
        kwargs['version_id'] = \
            version_id
        return self.descriptor_service_get_descriptor_version_endpoint.call_with_http_info(**kwargs)

    def descriptor_service_list_descriptor_versions(
        self,
        body,
        **kwargs
    ):
        """ListDescriptorVersions returns list of version of the specific descriptor versions.  # noqa: E501

        Example of request : {   \"scope\":\"global\",   \"identifier\":{      \"name\":\"foreign_exchange-vanilla-forwards\"   } }  Example of response : {    \"data\": {        \"versions\": [            {                \"versionId\": \"fM9AukEqTJXKOcbW_tQ7Sfr4Clp5qinKq_liXZYzyiI=\",                \"createdAt\": \"2022-06-14 10:57:42.0\"            },            {                \"versionId\": \"LmVlkPbnsUKFBw8qIbUHEzBsRrcnG_BSMnopA5Ptd7I=\",                \"createdAt\": \"2022-06-14 10:20:48.0\"            }        ]    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_list_descriptor_versions(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (TitaniumGetDefinition):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumListVersionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.descriptor_service_list_descriptor_versions_endpoint.call_with_http_info(**kwargs)

    def descriptor_service_list_descriptors(
        self,
        body,
        **kwargs
    ):
        """ListDescriptors returns list of specific descriptors according to request.  # noqa: E501

        Example of request : {   \"scope\":\"global\" }  Example of response : {    \"data\": {        \"results\": [            {                \"uid\": \"\",                \"name\": \"foreign_exchange-vanilla-options\"            },            {                \"uid\": \"\",                \"name\": \"foreign_exchange-exotics-barriers_and_digitals\"            },            {                \"uid\": \"\",                \"name\": \"foreign_exchange-exotics-tarfs\"            }        ]    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descriptor_service_list_descriptors(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (TitaniumListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumDescriptorList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.descriptor_service_list_descriptors_endpoint.call_with_http_info(**kwargs)

