"""
    clearconsensus-sdk

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.rpc_status import RpcStatus
from openapi_client.model.titanium_acknowledge_response import TitaniumAcknowledgeResponse
from openapi_client.model.titanium_get_definition import TitaniumGetDefinition
from openapi_client.model.titanium_get_generated_validation_rule_response import TitaniumGetGeneratedValidationRuleResponse
from openapi_client.model.titanium_get_validation_rule_response import TitaniumGetValidationRuleResponse
from openapi_client.model.titanium_list_request import TitaniumListRequest
from openapi_client.model.titanium_list_rule_response import TitaniumListRuleResponse
from openapi_client.model.titanium_list_version_response import TitaniumListVersionResponse
from openapi_client.model.titanium_message_response import TitaniumMessageResponse
from openapi_client.model.titanium_rdl_check_request import TitaniumRdlCheckRequest
from openapi_client.model.titanium_validation_rule_definition import TitaniumValidationRuleDefinition


class ValidatorServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.validator_service_add_validation_rule_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumAcknowledgeResponse,),
                'auth': [],
                'endpoint_path': '/api/v1/validation/rule/add',
                'operation_id': 'validator_service_add_validation_rule',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (TitaniumValidationRuleDefinition,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.validator_service_disable_validation_rule_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumAcknowledgeResponse,),
                'auth': [],
                'endpoint_path': '/api/v1/validation/rule/disable',
                'operation_id': 'validator_service_disable_validation_rule',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (TitaniumGetDefinition,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.validator_service_enable_validation_rule_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumAcknowledgeResponse,),
                'auth': [],
                'endpoint_path': '/api/v1/validation/rule/enable',
                'operation_id': 'validator_service_enable_validation_rule',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (TitaniumGetDefinition,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.validator_service_get_generated_validation_rule_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumGetGeneratedValidationRuleResponse,),
                'auth': [],
                'endpoint_path': '/api/v1/validation/rule/generated',
                'operation_id': 'validator_service_get_generated_validation_rule',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (TitaniumGetDefinition,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.validator_service_get_generated_validation_rule_version_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumGetGeneratedValidationRuleResponse,),
                'auth': [],
                'endpoint_path': '/api/v1/validation/rule/generated/version/{descriptorName}/{versionId}',
                'operation_id': 'validator_service_get_generated_validation_rule_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'descriptor_name',
                    'version_id',
                    'name',
                    'scope',
                ],
                'required': [
                    'descriptor_name',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'descriptor_name':
                        (str,),
                    'version_id':
                        (str,),
                    'name':
                        (str,),
                    'scope':
                        (str,),
                },
                'attribute_map': {
                    'descriptor_name': 'descriptorName',
                    'version_id': 'versionId',
                    'name': 'name',
                    'scope': 'scope',
                },
                'location_map': {
                    'descriptor_name': 'path',
                    'version_id': 'path',
                    'name': 'query',
                    'scope': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.validator_service_get_validation_rule_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumGetValidationRuleResponse,),
                'auth': [],
                'endpoint_path': '/api/v1/validation/rule/get',
                'operation_id': 'validator_service_get_validation_rule',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (TitaniumGetDefinition,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.validator_service_get_validation_rule_version_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumGetValidationRuleResponse,),
                'auth': [],
                'endpoint_path': '/api/v1/validation/rule/version/{descriptorName}/{versionId}',
                'operation_id': 'validator_service_get_validation_rule_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'descriptor_name',
                    'version_id',
                    'name',
                    'scope',
                ],
                'required': [
                    'descriptor_name',
                    'version_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'descriptor_name':
                        (str,),
                    'version_id':
                        (str,),
                    'name':
                        (str,),
                    'scope':
                        (str,),
                },
                'attribute_map': {
                    'descriptor_name': 'descriptorName',
                    'version_id': 'versionId',
                    'name': 'name',
                    'scope': 'scope',
                },
                'location_map': {
                    'descriptor_name': 'path',
                    'version_id': 'path',
                    'name': 'query',
                    'scope': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.validator_service_list_generated_validation_rule_versions_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumListVersionResponse,),
                'auth': [],
                'endpoint_path': '/api/v1/validation/rule/generated/versions',
                'operation_id': 'validator_service_list_generated_validation_rule_versions',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (TitaniumGetDefinition,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.validator_service_list_validation_rule_versions_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumListVersionResponse,),
                'auth': [],
                'endpoint_path': '/api/v1/validation/rule/versions',
                'operation_id': 'validator_service_list_validation_rule_versions',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (TitaniumGetDefinition,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.validator_service_list_validation_rules_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumListRuleResponse,),
                'auth': [],
                'endpoint_path': '/api/v1/validation/rule/list',
                'operation_id': 'validator_service_list_validation_rules',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (TitaniumListRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.validator_service_rdl_check_endpoint = _Endpoint(
            settings={
                'response_type': (TitaniumMessageResponse,),
                'auth': [],
                'endpoint_path': '/api/v1/validation/rule/check',
                'operation_id': 'validator_service_rdl_check',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (TitaniumRdlCheckRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def validator_service_add_validation_rule(
        self,
        body,
        **kwargs
    ):
        """AddValidationRule is a method used to add a validation rule to the system. Backoffice users can create a new validation ruleset in the 'global' scope, for each asset class. Participant users can create a new validation ruleset in its own scope, for each asset class. Backoffice users can represent any participant and create a new validation ruleset in that participant's scope. The default scope is used if no scope is given in the request ('global' for the operator, participant scope for that participant user). The authorization will be fetched from the user's token. It will do an update if a validation rule with the same name already exists.  # noqa: E501

        Request for backoffice user: { \"definition\": {   \"descriptor_name\":\"foreign_exchange-vanilla-options\",   \"criteria\":[     {       \"name\":\"FX-V-FXO: Option Instrument Parameter: Forward Points\",       \"description\":\"This criteria element contains validation rules that will be applied to all fx-vanilla-options data submission rows where option_instrument_parameter equals \\\"Forward Points\\\".\",       \"tags\":[         \"forward points\"       ],       \"metadata\":[        ],       \"rule\":\"[\\\"foreign_exchange-vanilla-options.option_instrument_parameter\\\",\\\"$eq_case_insensitive\\\",\\\"Forward Points\\\"]\",       \"validations\":[         {           \"name\":\"FX-V-FXO: Forward Points: Forward Conversion Factor: Exiting Value Check\",           \"severity\":1,           \"rule_type\":\"input_data\",           \"tags\":[            ],           \"description\":\"Compare the fwrd_conversion_factor for a given underlying against the expected values.\",           \"rule\":\"[ { \\\"$lut_name\\\": \\\"conversion_factor\\\", \\\"$get\\\": [ \\\"foreign_exchange-vanilla-options.underlying\\\" ] }, \\\"$eq\\\", \\\"foreign_exchange-vanilla-options.fwrd_conversion_factor\\\" ]\",           \"error\":{             \"message\":\"[%s] is not a conversion factor used in consensus. Please update the conversion factor for this underlying -- [%s].\",             \"message_args\":[               \"foreign_exchange-vanilla-options.fwrd_conversion_factor\",               \"foreign_exchange-vanilla-options.underlying\"             ]           }         }       ]     }   ] }, \"scope\": \"global\", \"descriptor_name\": \"foreign_exchange-vanilla-options\" }  Response: {    \"data\": {        \"uid\": \"ac49453d-cc9c-11ec-8bac-5314d58ea570\",        \"descriptor_name\": \"fx_forward\"    } }  Error response:  Push to non ‘global’ scope : {    \"error\": {        \"code\": 70,        \"message\": \"Invalid argument: only support 'global' scope\"    } }  Unauthorized user : {    \"error\": {        \"code\": 70,        \"message\": \"Invalid auth token - only operator is allowed to add validation rules\"    } }  Missing argument : {    \"error\": {        \"code\": 70,        \"message\": \"Missing argument: descriptor_name\"    } }  Invalid rule definition - rule col mismatch with descriptor : {    \"error\": {        \"code\": 70,        \"message\": \"Rule [fx_fwd] compile failed, details: Column [submission_clienttt] not found in schema [fx_forward]\"    } }  Invalid rule definition - RDL syntax error : {    \"error\": {        \"code\": 70,        \"message\": \"Rule [fx_fwd] compile failed, details: line 1:14 no viable alternative at input '[{\\\"$lower\\\":\\\"fx_forward.submission_service\\\"'\"    } }  Dependencies not found - dependencies could be: descriptor, named lut, custom function : {    \"error\": {        \"code\": 70,        \"message\": \"Rule [fx_fwd] compile failed, details: Invalid rule expression [ { \\\"$lut_name\\\" : \\\"tenor\\\", \\\"$exist\\\" : [\\\"fx_forward.submission_tenor\\\"] } ]\\n\\terr: com.peernova.api.searchmetadata.metadata.exceptions.MetadataNotFoundException: No Look Up Table by name [tenor] found in scope [global]\"    } }  Ruleset with same name already exist : {    \"error\": {        \"code\": 70,        \"message\": \"Validation rule for descriptor [fx_fwd] already exist\"    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validator_service_add_validation_rule(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (TitaniumValidationRuleDefinition):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumAcknowledgeResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.validator_service_add_validation_rule_endpoint.call_with_http_info(**kwargs)

    def validator_service_disable_validation_rule(
        self,
        body,
        **kwargs
    ):
        """DisableValidationRule method disables a validation rule in the system. The request includes the descriptor name and scope of the rule. Example of Request: { \"descriptor_name\" : \"foreign_exchange-vanilla-forwards\", \"scope\": \"global\" }  # noqa: E501

        Example of Response: {    \"data\": {        \"uid\": \"\",        \"descriptor_name\": \"foreign_exchange-vanilla-forwards\"    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validator_service_disable_validation_rule(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (TitaniumGetDefinition):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumAcknowledgeResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.validator_service_disable_validation_rule_endpoint.call_with_http_info(**kwargs)

    def validator_service_enable_validation_rule(
        self,
        body,
        **kwargs
    ):
        """EnableValidationRule method enables a validation rule that has been previously disabled. The request includes the descriptor name and scope of the rule. Example of Request: { \"descriptor_name\" : \"foreign_exchange-vanilla-forwards\", \"scope\": \"global\" }  # noqa: E501

        Example of Response: {    \"data\": {        \"uid\": \"\",        \"descriptor_name\": \"foreign_exchange-vanilla-forwards\"    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validator_service_enable_validation_rule(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (TitaniumGetDefinition):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumAcknowledgeResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.validator_service_enable_validation_rule_endpoint.call_with_http_info(**kwargs)

    def validator_service_get_generated_validation_rule(
        self,
        body,
        **kwargs
    ):
        """GetGeneratedValidationRule method allows back office users to view all generated validation rulesets, including Java rulesets. Participant users can only view global generated validation rulesets and rulesets within their own scope. If no scope is given in the request, the default scope is used (\"global\" for operators and participant scope for the participant user). Authorization is fetched from the user's token. This method returns the latest version of the generated ruleset if multiple versions exist.  # noqa: E501

        Example of Request: {  \"descriptor_name\": \"foreign_exchange-vanilla-forwards\" }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validator_service_get_generated_validation_rule(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (TitaniumGetDefinition):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumGetGeneratedValidationRuleResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.validator_service_get_generated_validation_rule_endpoint.call_with_http_info(**kwargs)

    def validator_service_get_generated_validation_rule_version(
        self,
        descriptor_name,
        version_id,
        **kwargs
    ):
        """GetGeneratedValidationRuleVersion method allows the user to view a particular version of a generated ruleset. The request requires a descriptor name and a version ID. If the requested ruleset version is not found, an error response is returned.  # noqa: E501

        Example of Request: GET /api/v1/validation/rule/generated/version/foreign_exchange-vanilla-forwards /QHF5uuOTjGprb3FRsI7ybBnU6-Ub32Xq8Q399PtQWeQ= {  \"scope\": \"global\" }  Example of Response: {     \"data\": {          \"versions\": [              {                 \"versionId\": \"teTYb9Fs_lIOoPQJukM6dY3aJdiMqT-SdBPdvYfJAjk=\",                 \"createdAt\": \"2022-05-04 16:20:58.0\"              },              {                  \"versionId\": \"mwpGZcWNc2zFgweB5rcNmAbcxqekM_zUCdpVrl_V6BM=\",                  \"createdAt\": \"2022-05-04 16:17:19.0\"              },              {                  \"versionId\": \"6pfCXN2rFnIAMoDHy7VIFh6HmoyDu3njXkpwzeTp2nc=\",                  \"createdAt\": \"2022-05-04 15:02:00.0\"              }          ]      }  }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validator_service_get_generated_validation_rule_version(descriptor_name, version_id, async_req=True)
        >>> result = thread.get()

        Args:
            descriptor_name (str):
            version_id (str):

        Keyword Args:
            name (str): [optional]
            scope (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumGetGeneratedValidationRuleResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['descriptor_name'] = \
            descriptor_name
        kwargs['version_id'] = \
            version_id
        return self.validator_service_get_generated_validation_rule_version_endpoint.call_with_http_info(**kwargs)

    def validator_service_get_validation_rule(
        self,
        body,
        **kwargs
    ):
        """GetValidationRule method retrieves information about a validation rule. Both back office users and participant users can view validation rulesets. The default scope is used if no scope is given in the request. Authorization is fetched from the user's token. The rule can be retrieved by either descriptor name or UID. If multiple versions of the rule exist, this method returns the latest version.  # noqa: E501

        Example of Request: {  \"descriptor_name\": \"fx_fwd\" }   Or: {  \"uid\": \"ac49453d-cc9c-11ec-8bac-5314d58ea570\" }    Example of Response: {    \"data\": {        \"uid\": \"\",        \"definition\": {            \"descriptorName\": \"foreign_exchange-vanilla-options\",            \"criteria\": [                {                    \"name\": \"FX-V-FXO: Option Instrument Parameter: Forward Points\",                    \"description\": \"This criteria element contains validation rules that will be applied to all fx-vanilla-options data submission rows where option_instrument_parameter equals \\\"Forward Points\\\".\",                    \"rule\": \"[\\\"foreign_exchange-vanilla-options.option_instrument_parameter\\\",\\\"$eq_case_insensitive\\\",\\\"Forward Points\\\"]\",                    \"tags\": [                        \"forward points\"                    ],                    \"metadata\": [],                    \"validations\": [                        {                            \"name\": \"FX-V-FXO: Forward Points: Forward Conversion Factor: Exiting Value Check\",                            \"description\": \"Compare the fwrd_conversion_factor for a given underlying against the expected values.\",                            \"rule\": \"[ { \\\"$lut_name\\\": \\\"conversion_factor\\\", \\\"$get\\\": [ \\\"foreign_exchange-vanilla-options.underlying\\\" ] }, \\\"$eq\\\", \\\"foreign_exchange-vanilla-options.fwrd_conversion_factor\\\" ]\",                            \"ruleType\": \"INPUT_DATA\",                            \"severity\": 1,                            \"tags\": [],                            \"error\": {                                \"message\": \"[%s] is not a conversion factor used in consensus. Please update the conversion factor for this underlying -- [%s].\",                                \"messageArgs\": [                                    \"foreign_exchange-vanilla-options.fwrd_conversion_factor\",                                    \"foreign_exchange-vanilla-options.underlying\"                                ]                            },                            \"filter\": \"\"                        }                    ]                }            ]        },        \"scope\": \"global\",        \"descriptorName\": \"foreign_exchange-vanilla-options\"    } }  Example of Error response:  Missing argument: {    \"error\": {        \"code\": 70,        \"message\": \"Missing argument: need either descriptor name or uid to get validation rule\"    } }  Resource not found : {    \"error\": {        \"code\": 70,        \"message\": \"Rule [fx_fwd] not found, details: [fx_fwd] of service [VALIDATIONRULESET] does not exist in namespace [global]\"    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validator_service_get_validation_rule(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (TitaniumGetDefinition):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumGetValidationRuleResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.validator_service_get_validation_rule_endpoint.call_with_http_info(**kwargs)

    def validator_service_get_validation_rule_version(
        self,
        descriptor_name,
        version_id,
        **kwargs
    ):
        """This is a method that allows both back office users and regular users to retrieve a specific version of a ruleset given the descriptor name and version ID. The ruleset is used for validation purposes and contains criteria and rules for validating data submissions. Back office users can retrieve a particular version of a ruleset from any scope, while participant users can only retrieve a version of a ruleset from either the global scope or their own scope.  # noqa: E501

        Example of Request: GET /api/v1/validation/rule/version/fx_fwd_May04/teTYb9Fs_lIOoPQJukM6dY3aJdiMqT-SdBPdvYfJAjk=  Example of Response: {    \"data\": {        \"uid\": \"\",        \"definition\": {            \"descriptorName\": \"foreign_exchange-vanilla-options\",            \"criteria\": [                {                    \"name\": \"FX-V-FXO: Option Instrument Parameter: Forward Points\",                    \"description\": \"This criteria element contains validation rules that will be applied to all fx-vanilla-options data submission rows where option_instrument_parameter equals \\\"Forward Points\\\".\",                    \"rule\": \"[\\\"foreign_exchange-vanilla-options.option_instrument_parameter\\\",\\\"$eq_case_insensitive\\\",\\\"Forward Points\\\"]\",                    \"tags\": [                        \"forward points\"                    ],                    \"metadata\": [],                    \"validations\": [                        {                            \"name\": \"FX-V-FXO: Forward Points: Forward Conversion Factor: Exiting Value Check\",                            \"description\": \"Compare the fwrd_conversion_factor for a given underlying against the expected values.\",                            \"rule\": \"[ { \\\"$lut_name\\\": \\\"conversion_factor\\\", \\\"$get\\\": [ \\\"foreign_exchange-vanilla-options.underlying\\\" ] }, \\\"$eq\\\", \\\"foreign_exchange-vanilla-options.fwrd_conversion_factor\\\" ]\",                            \"ruleType\": \"INPUT_DATA\",                            \"severity\": 1,                            \"tags\": [],                            \"error\": {                                \"message\": \"[%s] is not a conversion factor used in consensus. Please update the conversion factor for this underlying -- [%s].\",                                \"messageArgs\": [                                    \"foreign_exchange-vanilla-options.fwrd_conversion_factor\",                                    \"foreign_exchange-vanilla-options.underlying\"                                ]                            },                            \"filter\": \"\"                        }                    ]                }            ]        },        \"scope\": \"global\",        \"descriptorName\": \"foreign_exchange-vanilla-options\"    } }  Example of Error response: Resource not found: {    \"error\": {        \"code\": 70,        \"message\": \"Failed to get rule [fx_fwd_May04], details: MetaData entity not found: name [fx_fwd_May04] version: [teTYb9Fs_lIOoPQJukM6dY3aJdiMqT-SdBPdvYfJAjk] in namespace: [global]\"    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validator_service_get_validation_rule_version(descriptor_name, version_id, async_req=True)
        >>> result = thread.get()

        Args:
            descriptor_name (str):
            version_id (str):

        Keyword Args:
            name (str): [optional]
            scope (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumGetValidationRuleResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['descriptor_name'] = \
            descriptor_name
        kwargs['version_id'] = \
            version_id
        return self.validator_service_get_validation_rule_version_endpoint.call_with_http_info(**kwargs)

    def validator_service_list_generated_validation_rule_versions(
        self,
        body,
        **kwargs
    ):
        """ListGeneratedValidationRuleVersions method returns a list of generated ruleset version IDs along with their creation timestamps. The request requires a descriptor name. If the requested ruleset is not found, an error response is returned.  # noqa: E501

        Example of Request: {  \"descriptor_name\": \"fx_fwd\" }   Example of Response: {    \"data\": {        \"versions\": [            {                \"versionId\": \"teTYb9Fs_lIOoPQJukM6dY3aJdiMqT-SdBPdvYfJAjk=\",                \"createdAt\": \"2022-05-04 16:20:58.0\"            },            {                \"versionId\": \"mwpGZcWNc2zFgweB5rcNmAbcxqekM_zUCdpVrl_V6BM=\",                \"createdAt\": \"2022-05-04 16:17:19.0\"            },            {                \"versionId\": \"6pfCXN2rFnIAMoDHy7VIFh6HmoyDu3njXkpwzeTp2nc=\",                \"createdAt\": \"2022-05-04 15:02:00.0\"            }        ]    } }  Example of Error response: Resource not found: {    \"error\": {        \"code\": 70,        \"message\": \"Failed to get rule [fx_fwd] versions, details: Rule [fx_fwd] not found\"    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validator_service_list_generated_validation_rule_versions(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (TitaniumGetDefinition):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumListVersionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.validator_service_list_generated_validation_rule_versions_endpoint.call_with_http_info(**kwargs)

    def validator_service_list_validation_rule_versions(
        self,
        body,
        **kwargs
    ):
        """ListValidationRuleVersions method is used to retrieve a list of versions for a given validation rule. Both back office users and participant users can retrieve versions of validation rulesets, but the scope will depend on the user. The request must specify the descriptor name for the validation rule. The response will include a list of versions and their created timestamp. If the requested rule is not found, an error response will be returned.  # noqa: E501

        Example of Request: {  \"descriptor_name\": \"fx_fwd\" }  Example of Response: {    \"data\": {        \"versions\": [            {                \"versionId\": \"teTYb9Fs_lIOoPQJukM6dY3aJdiMqT-SdBPdvYfJAjk=\",                \"createdAt\": \"2022-05-04 16:20:58.0\"            },            {                \"versionId\": \"mwpGZcWNc2zFgweB5rcNmAbcxqekM_zUCdpVrl_V6BM=\",                \"createdAt\": \"2022-05-04 16:17:19.0\"            },            {                \"versionId\": \"6pfCXN2rFnIAMoDHy7VIFh6HmoyDu3njXkpwzeTp2nc=\",                \"createdAt\": \"2022-05-04 15:02:00.0\"            }        ]    } }  Example of Error response: Resource not found: {    \"error\": {        \"code\": 70,        \"message\": \"Failed to get rule [fx_fwd] versions, details: Rule [fx_fwd_validation] not found\"    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validator_service_list_validation_rule_versions(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (TitaniumGetDefinition):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumListVersionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.validator_service_list_validation_rule_versions_endpoint.call_with_http_info(**kwargs)

    def validator_service_list_validation_rules(
        self,
        body,
        **kwargs
    ):
        """ListValidationRules method is used to retrieve a list of validation rule names. Both back office users and participant users can retrieve validation rulesets, but the scope and authorization will depend on the user. The default scope is used if no scope is specified in the request. The request may include an optional filter and orderBy parameter to refine the search results. Pagination is also supported. The response will include a list of rule names matching the filter criteria.  # noqa: E501

        Example of Request: {  \"scope\": \"global\",  \"filter\": \".*exchange.*\",  \"orderBy\": {   \"order\": \"DESC\"  } }  Example of Response: {    \"data\": {        \"results\": [            {                \"uid\": \"\",                \"descriptor_name\": \"foreign_exchange-vanilla-options\"            },            {                \"uid\": \"\",                \"descriptor_name\": \"foreign_exchange-vanilla-forwards\"            },            {                \"uid\": \"\",                \"descriptor_name\": \"foreign_exchange-exotics-tarfs\"            }        ]    } }  Example of Request with pagination: {  \"scope\": \"global\",  \"filter\": \".*exchange.*\",  \"orderBy\": {   \"order\": \"DESC\"  },  \"limit\": {   \"value\": 2  },  \"offset\": 1 }  Example of Response: {    \"data\": {        \"results\": [            {                \"uid\": \"\",                \"descriptor_name\": \"foreign_exchange-vanilla-forwards\"            },            {                \"uid\": \"\",                \"descriptor_name\": \"foreign_exchange-exotics-tarfs\"            }        ]    } }  Example of Error response: not ‘global’ scope: {    \"error\": {        \"code\": 70,        \"message\": \"Invalid argument: only support 'global' scope\"    } }  Invalid filter/regex: {    \"error\": {        \"code\": 70,        \"message\": \"Failed to list rules: Dangling meta character '*' near index 0\\n*May*\\n^\"    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validator_service_list_validation_rules(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (TitaniumListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumListRuleResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.validator_service_list_validation_rules_endpoint.call_with_http_info(**kwargs)

    def validator_service_rdl_check(
        self,
        body,
        **kwargs
    ):
        """RdlCheck method checks the syntax of a given RDL (Rule Description Language) expression. It takes a RdlCheckRequest message as input and returns a MessageResponse message.  # noqa: E501

        Example of Request: {  \"rdl\": \"[\\\"a\\\", \\\"$eq\\\", \\\"b\\\"\" }  Example of Response: {    \"data\": {        \"message\": \"success\"    } }  Example of Error response: Resource not found: {    \"error\": {        \"code\": 69,        \"message\": \"rdl [[\\\"a\\\", \\\"$eq\\\", \\\"b\\\"] cannot be parsed. Error: line 1:16 missing ']' at '<EOF>'\"    } }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validator_service_rdl_check(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (TitaniumRdlCheckRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TitaniumMessageResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.validator_service_rdl_check_endpoint.call_with_http_info(**kwargs)

